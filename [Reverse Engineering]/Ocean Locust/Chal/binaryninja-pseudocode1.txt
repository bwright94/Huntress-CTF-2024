## BinaryNinja 
## 4.1.5747 (7558ffe9)

# https://dogbolt.org/?id=d24c794c-d862-47b0-94c1-9fe5f59f202c#BinaryNinja=10



int64_t* sub_140001000(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_8 = arg2;
    sub_140001120(arg1, arg2);
    return arg1;
}

int64_t* sub_140001020(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t* arg4)
{
    int64_t var_18 = -2;
    int64_t var_58 = arg2;
    int64_t rax = sub_140003950(&var_58);
    int64_t var_30 = rax;
    int64_t rax_2 = sub_140004fb0(arg4);
    int64_t var_28 = rax_2;
    int64_t rax_3 = sub_140037250(rax, rax_2);
    int64_t var_20 = rax_3;
    int64_t rsi = *arg4;
    int64_t rsi_1 = arg4[1];
    int64_t r11_1 = arg4[2];
    arg1[3] = var_58;
    arg1[4] = arg3;
    *arg1 = rsi;
    arg1[1] = rsi_1;
    arg1[2] = r11_1;
    arg1[5] = 0;
    arg1[6] = rax_3;
    arg1[7] = rax;
    return arg1;
}

int64_t sub_140001100() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t* sub_140001120(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_20 = arg2;
    
    if (arg2[5] < arg2[6])
    {
        int64_t rdx = arg2[5];
        int64_t var_18_1 = rdx;
        arg2[5] += 1;
        int64_t rax_4 = sub_140003540(&arg2[3], rdx);
        int64_t rax_5;
        int64_t rdx_2;
        rax_5 = sub_140005040(arg2, rdx);
        *arg1 = rax_4;
        arg1[1] = rax_5;
        arg1[2] = rdx_2;
    }
    else
        arg1[1] = 0;
    
    return arg1;
}

int64_t sub_1400011f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140001210(int64_t arg1, int64_t arg2)
{
    memcpy(arg1, arg2, 0x40);
    return arg1;
}

int64_t sub_140001240(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_38 = arg1;
    int64_t rax = sub_140005290(arg1);
    int64_t rax_1;
    rax_1 = rax == 0;
    int64_t result;
    
    if ((rax_1 & 1) != 0)
        int64_t var_50 = 0;
    else
    {
        int64_t var_30_1 = rax;
        int64_t var_28_1 = rax;
        int64_t var_20_1 = rax;
        int64_t result_1 = arg1[2];
        int64_t result_2 = result_1;
        int64_t rax_3 = arg1[2];
        bool c_1 = rax_3 >= -1;
        int64_t rax_4;
        rax_4 = c_1;
        
        if (c_1)
        {
            sub_14005cd40();
            /* no return */
        }
        
        arg1[2] = (rax_3 + 1);
        result = result_1;
        var_50 = rax;
    }
    
    return result;
}

int64_t sub_140001310() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t* sub_140001330(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    return arg1;
}

int64_t sub_140001350(int64_t* arg1)
{
    int64_t* var_30 = arg1;
    int64_t rax = *arg1;
    int64_t var_20 = (rax + 0x20);
    int64_t var_18 = (rax + 0x20);
    int64_t rax_3 = **arg1;
    int64_t var_10 = rax_3;
    int64_t rax_5 = *(*arg1 + 0x10);
    int64_t var_8 = rax_5;
    int64_t var_40 = rax_3;
    int64_t var_48 = rax_5;
    return sub_1400016e0(&var_48);
}

uint64_t sub_1400013c0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_1400013e0(*arg1);
}

uint64_t sub_1400013e0(int64_t arg1)
{
    int64_t var_10 = -2;
    int64_t var_18 = arg1;
    return sub_140002f10(&var_18);
}

int64_t sub_140001410() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140001430(int64_t arg1)
{
    int64_t var_8 = arg1;
    return arg1();
}

int64_t* sub_140001450(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140039b40(arg1);
}

int64_t sub_140001470(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140001350(arg1);
}

int64_t* sub_140001490(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140001450(arg1);
}

int64_t sub_1400014b0(void* arg1)
{
    void* var_8 = arg1;
    return sub_1400014f0(arg1);
}

int64_t* sub_1400014d0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140001490(arg1);
}

int64_t sub_1400014f0(void* arg1)
{
    void* var_8 = arg1;
    return sub_140001610(arg1);
}

int64_t sub_140001510(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140001590(arg1);
}

int64_t sub_140001530(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    sub_140001720(arg1);
    return sub_1400015f0(arg1);
}

int64_t sub_140001570(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400015f0(*(arg2 + 0x28));
}

int64_t sub_140001590(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_1400015d0(arg1);
}

int64_t* sub_1400015b0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140009290(arg1);
}

int64_t sub_1400015d0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140041070(arg1);
}

int64_t sub_1400015f0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140001750(arg1);
}

int64_t sub_140001610(void* arg1)
{
    void* var_8 = arg1;
    return sub_140001700(arg1);
}

int64_t sub_140001630(void* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    void* var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_28 = 0;
    
    while (var_28 != arg2)
    {
        int64_t* rcx_1 = (arg1 + (var_28 << 5));
        var_28 += 1;
        sub_140001510(rcx_1);
    }
    
    return arg2;
}

int64_t sub_1400016a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t result;
    
    while (true)
    {
        result = *(arg2 + 0x20);
        
        if (*(arg2 + 0x30) == result)
            break;
        
        int64_t* rcx_1 = (*(arg2 + 0x28) + (*(arg2 + 0x30) << 5));
        *(arg2 + 0x30) += 1;
        sub_140001510(rcx_1);
    }
    
    return result;
}

int64_t sub_1400016e0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_1400017c0(arg1);
}

int64_t sub_140001700(void* arg1)
{
    void* var_8 = arg1;
    return sub_140001830(arg1);
}

int64_t sub_140001720(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t rax = *(arg1 + 8);
    int64_t var_18 = rax;
    int64_t var_10 = rax;
    int64_t result = *(arg1 + 0x10);
    int64_t result_1 = result;
    return result;
}

int64_t sub_140001750(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    void* var_38;
    sub_140004630(&var_38, arg1);
    int64_t result = 1;
    int64_t var_30;
    
    if (var_30 == 0)
        result = 0;
    
    if (result != 1)
        return result;
    
    void* rdx_1 = var_38;
    void* var_18_1 = rdx_1;
    int64_t var_10_1 = var_30;
    int64_t var_28;
    int64_t var_8_1 = var_28;
    return sub_140008210(&arg1[2], rdx_1, var_30, var_28);
}

int64_t sub_1400017c0(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    void* var_38;
    sub_140004540(&var_38, arg1);
    int64_t result = 1;
    int64_t var_30;
    
    if (var_30 == 0)
        result = 0;
    
    if (result != 1)
        return result;
    
    void* rdx_1 = var_38;
    void* var_18_1 = rdx_1;
    int64_t var_10_1 = var_30;
    int64_t var_28;
    int64_t var_8_1 = var_28;
    return sub_140008210(&arg1[2], rdx_1, var_30, var_28);
}

int64_t sub_140001830(void* arg1)
{
    int64_t var_10 = -2;
    void* var_38 = arg1;
    void* var_48 = arg1;
    void* rcx = var_48;
    void* var_40 = rcx;
    void* rax = *(rcx + 8);
    void* var_30 = rax;
    void* var_28 = rax;
    void** var_20 = &var_40;
    int64_t rax_1 = sub_140006ac0(rcx);
    int64_t var_18 = rax_1;
    sub_140001630(rax, rax_1);
    return sub_140001470(&var_48);
}

int64_t sub_1400018a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140001470((arg2 + 0x30));
}

int64_t sub_1400018c0(int32_t arg1, int32_t arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    int32_t var_4c = arg1;
    int32_t var_48 = arg2;
    int64_t* var_38 = arg3;
    int32_t* var_18 = &var_4c;
    int32_t rax = var_4c;
    int32_t var_30 = rax;
    int32_t* var_20 = &var_48;
    int32_t rcx = var_48;
    int32_t var_2c = rcx;
    char var_44;
    
    if (rax < rcx)
    {
        if (rcx < 1)
        {
            sub_14005cd80();
            /* no return */
        }
        
        var_44 = sub_1400019c0(rax, (rcx - 1), arg3);
    }
    else
    {
        char var_43_1 = 0;
        var_44 = 1;
    }
    
    return var_44;
}

int64_t sub_140001980() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400019a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400019c0(int32_t arg1, int32_t arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    int32_t var_a0 = arg1;
    int32_t var_9c = arg2;
    int64_t* var_80 = arg3;
    int32_t* var_18 = &var_a0;
    int32_t rax = var_a0;
    int32_t var_78 = rax;
    int32_t* var_20 = &var_9c;
    int32_t rcx = var_9c;
    int32_t var_74 = rcx;
    char var_98;
    
    if (rax <= rcx)
    {
        int32_t var_48_1 = rcx;
        int32_t var_44_1 = rax;
        int32_t rax_2 = (rcx - rax);
        int32_t var_58_1 = rax_2;
        int32_t var_54_1 = 1;
        int32_t var_70_1 = (rax_2 + 1);
        
        if (rax_2 == 0xffffffff)
        {
            int32_t var_94_1 = sub_140004360(arg3);
            var_98 = 0;
        }
        else
        {
            int32_t rax_5 = sub_140004360(arg3);
            int32_t var_30_1 = rax_5;
            int32_t var_2c_1 = (rax_2 + 1);
            uint64_t rax_9 = rax_5;
            uint64_t rcx_5 = (rax_2 + 1);
            int64_t rax_10;
            int64_t rdx;
            rdx = HIGHQ((rax_9 * rcx_5));
            rax_10 = LOWQ((rax_9 * rcx_5));
            bool o_1 = ((rax_9 * rcx_5) >> 0x40) != {0};
            int64_t var_c8_1 = rax_10;
            rax_10 = o_1;
            
            if (o_1)
            {
                sub_14005cdc0();
                /* no return */
            }
            
            int64_t var_28_1 = var_c8_1;
            uint32_t var_8c_1 = (var_c8_1 >> 0x20);
            int32_t var_6c_1 = var_c8_1;
            int32_t var_50_1 = 0;
            int32_t var_4c_1 = (rax_2 + 1);
            
            if (var_c8_1 > (0 - (rax_2 + 1)))
            {
                int32_t rax_14 = sub_140004360(arg3);
                int32_t var_40_1 = rax_14;
                int32_t var_3c_1 = (rax_2 + 1);
                uint64_t rax_16 = rax_14;
                uint64_t rcx_13 = (rax_2 + 1);
                int64_t rax_17;
                int64_t rdx_2;
                rdx_2 = HIGHQ((rax_16 * rcx_13));
                rax_17 = LOWQ((rax_16 * rcx_13));
                bool o_2 = ((rax_16 * rcx_13) >> 0x40) != {0};
                int64_t var_d8_1 = rax_17;
                rax_17 = o_2;
                
                if (o_2)
                {
                    sub_14005cdc0();
                    /* no return */
                }
                
                int64_t var_38_1 = var_d8_1;
                uint32_t rax_19 = (var_d8_1 >> 0x20);
                uint32_t var_68_1 = rax_19;
                int32_t rax_20;
                int32_t rdx_4;
                rax_20 = sub_140008670(var_c8_1, rax_19);
                int32_t var_88 = rax_20;
                int32_t var_84_1 = rdx_4;
                char rax_22 = sub_1400085c0(&var_88);
                int32_t* rcx_17;
                rcx_17 = rax_22;
                rcx_17 &= 1;
                char var_61_1 = rcx_17;
                uint32_t rax_23 = (rax_22 & 1);
                bool c_1 = (rax_23 + var_8c_1) < rax_23;
                uint32_t rax_24;
                rax_24 = c_1;
                
                if (c_1)
                {
                    sub_14005cd40();
                    /* no return */
                }
                
                var_8c_1 += rax_23;
            }
            
            int32_t var_60_1 = rax;
            uint32_t var_5c_1 = var_8c_1;
            int32_t var_94_2 = (rax + var_8c_1);
            var_98 = 0;
        }
    }
    else
    {
        char var_97_1 = 0;
        var_98 = 1;
    }
    
    return var_98;
}

int64_t sub_140001ba0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140001bc0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140001be0(int32_t arg1, int32_t arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    int32_t var_a0 = arg1;
    int32_t var_9c = arg2;
    int64_t* var_80 = arg3;
    int32_t* var_18 = &var_a0;
    int32_t rax = var_a0;
    int32_t var_78 = rax;
    int32_t* var_20 = &var_9c;
    int32_t rcx = var_9c;
    int32_t var_74 = rcx;
    char var_98;
    
    if (rax <= rcx)
    {
        int32_t var_48_1 = rcx;
        int32_t var_44_1 = rax;
        int32_t rax_2 = (rcx - rax);
        int32_t var_58_1 = rax_2;
        int32_t var_54_1 = 1;
        int32_t var_70_1 = (rax_2 + 1);
        
        if (rax_2 == 0xffffffff)
        {
            int32_t var_94_1 = sub_1400043a0(arg3);
            var_98 = 0;
        }
        else
        {
            int32_t rax_5 = sub_1400043a0(arg3);
            int32_t var_30_1 = rax_5;
            int32_t var_2c_1 = (rax_2 + 1);
            uint64_t rax_9 = rax_5;
            uint64_t rcx_5 = (rax_2 + 1);
            int64_t rax_10;
            int64_t rdx;
            rdx = HIGHQ((rax_9 * rcx_5));
            rax_10 = LOWQ((rax_9 * rcx_5));
            bool o_1 = ((rax_9 * rcx_5) >> 0x40) != {0};
            int64_t var_c8_1 = rax_10;
            rax_10 = o_1;
            
            if (o_1)
            {
                sub_14005cdc0();
                /* no return */
            }
            
            int64_t var_28_1 = var_c8_1;
            uint32_t var_8c_1 = (var_c8_1 >> 0x20);
            int32_t var_6c_1 = var_c8_1;
            int32_t var_50_1 = 0;
            int32_t var_4c_1 = (rax_2 + 1);
            
            if (var_c8_1 > (0 - (rax_2 + 1)))
            {
                int32_t rax_14 = sub_1400043a0(arg3);
                int32_t var_40_1 = rax_14;
                int32_t var_3c_1 = (rax_2 + 1);
                uint64_t rax_16 = rax_14;
                uint64_t rcx_13 = (rax_2 + 1);
                int64_t rax_17;
                int64_t rdx_2;
                rdx_2 = HIGHQ((rax_16 * rcx_13));
                rax_17 = LOWQ((rax_16 * rcx_13));
                bool o_2 = ((rax_16 * rcx_13) >> 0x40) != {0};
                int64_t var_d8_1 = rax_17;
                rax_17 = o_2;
                
                if (o_2)
                {
                    sub_14005cdc0();
                    /* no return */
                }
                
                int64_t var_38_1 = var_d8_1;
                uint32_t rax_19 = (var_d8_1 >> 0x20);
                uint32_t var_68_1 = rax_19;
                int32_t rax_20;
                int32_t rdx_4;
                rax_20 = sub_140008670(var_c8_1, rax_19);
                int32_t var_88 = rax_20;
                int32_t var_84_1 = rdx_4;
                char rax_22 = sub_1400085c0(&var_88);
                int32_t* rcx_17;
                rcx_17 = rax_22;
                rcx_17 &= 1;
                char var_61_1 = rcx_17;
                uint32_t rax_23 = (rax_22 & 1);
                bool c_1 = (rax_23 + var_8c_1) < rax_23;
                uint32_t rax_24;
                rax_24 = c_1;
                
                if (c_1)
                {
                    sub_14005cd40();
                    /* no return */
                }
                
                var_8c_1 += rax_23;
            }
            
            int32_t var_60_1 = rax;
            uint32_t var_5c_1 = var_8c_1;
            int32_t var_94_2 = (rax + var_8c_1);
            var_98 = 0;
        }
    }
    else
    {
        char var_97_1 = 0;
        var_98 = 1;
    }
    
    return var_98;
}

int64_t sub_140001dc0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140001de0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

char* sub_140001e00(char* arg1, int64_t arg2, int64_t arg3, int64_t* arg4)
{
    int64_t var_10 = -2;
    int64_t var_110 = arg2;
    int64_t var_108 = arg3;
    int64_t* var_e0 = arg4;
    int64_t* var_18 = &var_110;
    int64_t rax = var_110;
    int64_t var_d8 = rax;
    int64_t* var_20 = &var_108;
    int64_t rcx = var_108;
    int64_t var_d0 = rcx;
    
    if (rax <= rcx)
    {
        int64_t var_78_1 = rcx;
        int64_t var_70_1 = rax;
        int64_t rax_3 = (rcx - rax);
        int64_t var_98_1 = rax_3;
        int64_t var_90_1 = 1;
        int64_t var_c8_1 = (rax_3 + 1);
        
        if (rax_3 == -1)
        {
            *(arg1 + 8) = sub_140004380(arg4);
            *arg1 = 0;
        }
        else
        {
            uint64_t rax_6 = sub_140004380(arg4);
            uint64_t var_48_1 = rax_6;
            int64_t var_40_1 = (rax_3 + 1);
            int64_t rax_10;
            int64_t rdx;
            rdx = HIGHQ((rax_6 * (rax_3 + 1)));
            rax_10 = LOWQ((rax_6 * (rax_3 + 1)));
            int64_t var_38_1 = rax_10;
            int64_t var_30_1 = rdx;
            int64_t var_f8_1 = rdx;
            int64_t var_c0_1 = rax_10;
            int64_t var_88_1 = 0;
            int64_t var_80_1 = (rax_3 + 1);
            
            if (rax_10 > (0 - (rax_3 + 1)))
            {
                uint64_t rax_13 = sub_140004380(arg4);
                uint64_t var_68_1 = rax_13;
                int64_t var_60_1 = (rax_3 + 1);
                int64_t rax_15;
                int64_t rdx_3;
                rdx_3 = HIGHQ((rax_13 * (rax_3 + 1)));
                rax_15 = LOWQ((rax_13 * (rax_3 + 1)));
                int64_t var_58_1 = rax_15;
                int64_t var_50_1 = rdx_3;
                int64_t var_b8_1 = rdx_3;
                int64_t rax_17;
                int64_t rdx_5;
                rax_17 = sub_140008780(rax_10, rdx_3);
                int64_t var_f0 = rax_17;
                int64_t var_e8_1 = rdx_5;
                char rax_19 = sub_1400085f0(&var_f0);
                int64_t* rcx_18;
                rcx_18 = rax_19;
                rcx_18 &= 1;
                char var_a9_1 = rcx_18;
                uint64_t rax_20 = (rax_19 & 1);
                bool c_1 = (rax_20 + var_f8_1) < rax_20;
                int64_t rax_21;
                rax_21 = c_1;
                
                if (c_1)
                {
                    sub_14005cd40();
                    /* no return */
                }
                
                var_f8_1 += rax_20;
            }
            
            int64_t var_a8_1 = rax;
            int64_t var_a0_1 = var_f8_1;
            *(arg1 + 8) = (rax + var_f8_1);
            *arg1 = 0;
        }
    }
    else
    {
        arg1[1] = 0;
        *arg1 = 1;
    }
    
    return arg1;
}

int64_t sub_140002080() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400020a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400020c0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_10 = -2;
    char const (** const var_c8)[0x2b] = &data_14005d5a8;
    char const (** const var_c0)[0x2b] = &data_14005d5a8;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_b8)[0x2b] = &data_14005d5a8;
            int64_t var_b0 = 1;
            int64_t var_98 = 0;
            int64_t var_a8 = 8;
            int64_t var_a0 = 0;
            sub_14005c700(&var_b8);
            /* no return */
        }
        
        if ((arg1 & (arg4 - 1)) == 0)
        {
            int64_t var_28_1 = arg2;
            int64_t var_20_1 = arg2;
            
            if (arg2 != 0)
            {
                int64_t rcx_10 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
                int64_t rax_19 = ((rcx_10 & 0x3333333333333333) + ((rcx_10 >> 2) & 0x3333333333333333));
                
                if (((((rax_19 + (rax_19 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
                {
                    char const (** const var_88)[0x2b] = &data_14005d5a8;
                    int64_t var_80 = 1;
                    int64_t var_68 = 0;
                    int64_t var_78 = 8;
                    int64_t var_70 = 0;
                    sub_14005c700(&var_88);
                    /* no return */
                }
                
                if ((arg2 & (arg4 - 1)) == 0)
                {
                    char result = sub_1400068e0(arg1, arg2, arg3, arg5);
                    
                    if ((result & 1) != 0)
                        return result;
                }
            }
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140002310(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140002330(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = -2;
    char const (** const var_c0)[0x2b] = &data_14005d5a8;
    char const (** const var_b8)[0x2b] = &data_14005d5a8;
    int64_t var_50 = arg1;
    int64_t var_48 = arg2;
    int64_t var_40 = arg3;
    int64_t var_38 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg3 - ((arg3 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_b0)[0x2b] = &data_14005d5a8;
            int64_t var_a8 = 1;
            int64_t var_90 = 0;
            int64_t var_a0 = 8;
            int64_t var_98 = 0;
            sub_14005c700(&var_b0);
            /* no return */
        }
        
        if ((arg1 & (arg3 - 1)) == 0)
        {
            int64_t var_28_1 = arg2;
            int64_t var_20_1 = arg2;
            
            if (arg2 != 0)
            {
                int64_t rcx_10 = (arg3 - ((arg3 >> 1) & 0x5555555555555555));
                int64_t rax_19 = ((rcx_10 & 0x3333333333333333) + ((rcx_10 >> 2) & 0x3333333333333333));
                
                if (((((rax_19 + (rax_19 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
                {
                    char const (** const var_80)[0x2b] = &data_14005d5a8;
                    int64_t var_78 = 1;
                    int64_t var_60 = 0;
                    int64_t var_70 = 8;
                    int64_t var_68 = 0;
                    sub_14005c700(&var_80);
                    /* no return */
                }
                
                int64_t result = (arg2 & (arg3 - 1));
                
                if (result == 0)
                    return result;
            }
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140002540(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140002560(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t result;
    int64_t var_40;
    
    if (arg1 != 0)
    {
        if (arg1 == 0)
        {
            sub_14005ce00();
            /* no return */
        }
        
        if (arg3 <= (COMBINE(0, (0x7fffffffffffffff - (arg2 - 1))) / arg1))
            goto label_14000260d;
        
        result = 0;
        var_40 = 0;
    }
    else
    {
    label_14000260d:
        sub_140008830(arg1, arg3);
        int64_t rax_6 = (arg1 * arg3);
        int64_t var_10_1 = rax_6;
        int64_t var_8_1 = arg2;
        result = arg2;
        var_40 = rax_6;
    }
    return result;
}

int64_t sub_140002660(void* arg1)
{
    void* var_70 = arg1;
    void* var_68 = arg1;
    void* var_60 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_48 = rax;
    sub_140005720(result, 1, 1, rax);
    int64_t result_3 = result;
    int64_t var_38 = rax;
    int64_t result_4 = result;
    int64_t var_28 = rax;
    int64_t result_5 = result;
    int64_t var_18 = rax;
    int64_t result_6 = result;
    int64_t var_8 = rax;
    return result;
}

int64_t sub_140002700(void* arg1)
{
    void* var_8 = arg1;
    return sub_140002660(arg1);
}

int64_t sub_140002720(void* arg1)
{
    void* var_10 = arg1;
    void* var_8 = arg1;
    return *(arg1 + 0x10);
}

int64_t sub_140002740(void* arg1)
{
    void* var_8 = arg1;
    return sub_140005f90(arg1);
}

uint64_t sub_140002760(void* arg1, int64_t* arg2)
{
    void* var_48 = arg1;
    int64_t* var_40 = arg2;
    void* var_38 = arg1;
    void* var_30 = arg1;
    void* rax = *(arg1 + 8);
    void* var_28 = rax;
    void* var_20 = rax;
    int64_t rax_1 = *(arg1 + 0x10);
    int64_t var_18 = rax_1;
    sub_140005720(rax, 1, 1, rax_1);
    void* var_10 = rax;
    int64_t var_8 = rax_1;
    return (sub_140057ed0(rax, rax_1, arg2) & 1);
}

int64_t sub_1400027f0(void* arg1)
{
    void* var_40 = arg1;
    void* var_38 = arg1;
    void* var_30 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_18 = rax;
    sub_140005720(result, 1, 1, rax);
    int64_t result_3 = result;
    int64_t var_8 = rax;
    return result;
}

uint64_t sub_140002860(int32_t* arg1, int32_t* arg2)
{
    int32_t* var_10 = arg1;
    int32_t* var_8 = arg2;
    int32_t rax;
    rax = *arg1 == *arg2;
    rax &= 1;
    return rax;
}

int64_t* sub_140002880(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_18 = arg2;
    int64_t rax;
    int64_t rdx;
    rax = sub_1400069e0(&var_18);
    uint64_t rdi;
    sub_140045370(arg1, rax, rdx, rdi);
    return arg1;
}

int64_t sub_1400028d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

HANDLE sub_1400028f0(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t rax;
    int64_t rdx;
    rax = sub_140002700(arg1);
    int64_t rax_2;
    int64_t rdx_2;
    rax_2 = sub_140006140(arg2);
    HANDLE result = sub_140045590(rax, rdx, rax_2, rdx_2);
    sub_140041070(arg2);
    sub_140041050(arg1);
    return result;
}

int64_t sub_140002980(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041070(*(arg2 + 0x48));
}

int64_t sub_1400029a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050(*(arg2 + 0x50));
}

uint64_t sub_1400029c0(void* arg1)
{
    void* var_10 = arg1;
    
    if (*(arg1 + 0x100) >= 0x40)
        sub_140002e50(arg1, 0);
    
    int64_t rax_2 = sub_14000f030(arg1);
    int64_t rax_4 = *(arg1 + 0x100);
    
    if (rax_4 >= 0x40)
    {
        sub_14005c830(rax_4, 0x40);
        /* no return */
    }
    
    int32_t rcx_4 = *(rax_2 + (rax_4 << 2));
    int32_t var_4 = rcx_4;
    int64_t rax_6 = *(arg1 + 0x100);
    bool c = rax_6 >= -1;
    int64_t rax_7;
    rax_7 = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    *(arg1 + 0x100) = (rax_6 + 1);
    return rcx_4;
}

uint64_t sub_140002aa0(void* arg1)
{
    void* var_30 = arg1;
    int64_t var_28 = 0x40;
    int64_t rax = *(arg1 + 0x100);
    int64_t var_20 = rax;
    void var_61;
    
    if (rax < 0x3f)
    {
        int64_t rax_4 = *(arg1 + 0x100);
        bool c_1 = rax_4 >= -2;
        int64_t rax_5;
        rax_5 = c_1;
        
        if (!(c_1))
        {
            *(arg1 + 0x100) = (rax_4 + 2);
            return sub_140002d20(&var_61, sub_14000f030(arg1), 0x40, rax);
        }
        
        sub_14005cd40();
        /* no return */
    }
    
    if (rax >= 0x40)
    {
        sub_140002e50(arg1, 2);
        return sub_140002d20(&var_61, sub_14000f030(arg1), 0x40, 0);
    }
    
    int32_t rax_10 = *(sub_14000f030(arg1) + 0xfc);
    int32_t var_4_1 = rax_10;
    uint64_t rax_11 = rax_10;
    uint64_t var_18_1 = rax_11;
    sub_140002e50(arg1, 1);
    int32_t rax_14 = *sub_14000f030(arg1);
    int32_t var_8_1 = rax_14;
    uint64_t rax_15 = rax_14;
    uint64_t var_10_1 = rax_15;
    return ((rax_15 << 0x20) | rax_11);
}

uint64_t sub_140002d20(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_48 = arg1;
    int64_t var_40 = arg2;
    int64_t var_38 = arg3;
    int64_t var_30 = arg4;
    bool c = arg4 >= -1;
    int64_t rax;
    rax = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    void var_60;
    sub_140003520(&var_60, arg4, (arg4 + 1));
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int32_t* rax_1;
    int64_t rdx_2;
    rax_1 = sub_140003360(&var_60, arg2, arg3);
    int32_t* var_28 = rax_1;
    int64_t var_20 = rdx_2;
    
    if (1 >= rdx_2)
    {
        sub_14005c830(1, rdx_2);
        /* no return */
    }
    
    int32_t rax_3 = rax_1[1];
    int32_t var_4 = rax_3;
    
    if (0 >= rdx_2)
    {
        sub_14005c830(0, rdx_2);
        /* no return */
    }
    
    int32_t rcx_5 = *rax_1;
    int32_t var_8 = rcx_5;
    return ((rax_3 << 0x20) | rcx_5);
}

void* sub_140002e50(void* arg1, int64_t arg2)
{
    void* var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg2 >= 0x40)
    {
        sub_14005c7a0("assertion failed: index < self.r…");
        /* no return */
    }
    
    sub_140008310((arg1 + 0x110), arg1);
    *(arg1 + 0x100) = arg2;
    return arg1;
}

int64_t sub_140002ec0(int64_t arg1)
{
    int64_t var_28 = arg1;
    int64_t rdx;
    int64_t var_20 = rdx;
    int64_t r8;
    int64_t var_18 = r8;
    char r9;
    char var_9 = r9;
    int64_t var_30 = arg1;
    char var_48 = r9;
    int64_t result = sub_140043c90(&var_30, &data_14005d970);
    int64_t result_1 = result;
    return result;
}

uint64_t sub_140002f10(int64_t* arg1)
{
    int64_t* var_10 = arg1;
    sub_1400067a0(*arg1);
    int32_t var_14 = 0;
    int32_t* var_8 = &var_14;
    return var_14;
}

int64_t sub_140002f40(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg1 >= arg2)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140002f70(int64_t arg1) __pure
{
    int64_t var_10 = arg1;
    int64_t rdx;
    int64_t var_8 = rdx;
    return arg1;
}

int64_t* sub_140002f90(int64_t* arg1, int64_t* arg2)
{
    int64_t var_88;
    __builtin_memcpy(&var_88, "\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x18);
    int64_t* var_28 = arg1;
    int64_t* var_20 = arg2;
    int64_t* var_18 = arg1;
    int64_t var_70;
    int64_t* var_10 = &var_70;
    int64_t* var_8 = &var_70;
    sub_1400020c0(arg1, &var_70, 0x18, 8, 1);
    var_70 = *arg1;
    int64_t var_68 = arg1[1];
    int64_t var_60 = arg1[2];
    int128_t* var_58 = arg2;
    int64_t* var_50 = arg1;
    sub_140002330(arg2, arg1, 8);
    int128_t zmm0 = *var_58;
    arg1[2] = var_58[1];
    *arg1 = zmm0;
    int64_t* var_40 = &var_70;
    int64_t* var_30 = &var_70;
    int64_t* var_38 = arg2;
    sub_1400020c0(var_30, arg2, 0x18, 8, 1);
    *arg2 = *var_30;
    arg2[1] = var_30[1];
    arg2[2] = var_30[2];
    return arg2;
}

uint64_t sub_140003100(char* arg1, void* arg2)
{
    char* var_10 = arg1;
    void* var_8 = arg2;
    char const* const var_20;
    int64_t var_18;
    
    if ((*arg1 & 1) != 0)
    {
        var_20 = "NonFinite";
        var_18 = 9;
    }
    else
    {
        var_20 = "EmptyRangeNonFinite";
        var_18 = 0xa;
    }
    
    return (sub_1400577c0(arg2, var_20, var_18) & 1);
}

int64_t sub_140003170(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14000f030(*arg1);
}

int64_t* sub_140003190(int32_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int32_t* var_50 = arg1;
    char var_51 = 1;
    
    if ((arg1[2] & 1) == 0)
    {
        int32_t* var_30_1 = arg1;
        void* var_28_1 = &arg1[1];
        int32_t rax_3;
        rax_3 = *arg1 <= arg1[1];
        rax_3 ^= 0xff;
        
        if ((rax_3 & 1) == 0)
        {
            char var_51_1 = 0;
            char var_52_1 = 1;
            
            while (true)
            {
                int32_t* var_20_1 = arg1;
                void* var_18_1 = &arg1[1];
                
                if (*arg1 >= arg1[1])
                    break;
                
                int32_t rax_9 = sub_140007d30(*arg1, 1);
                int32_t var_44_1 = rax_9;
                int32_t* var_40_1 = arg1;
                int32_t rdx_3 = *arg1;
                int32_t var_34_1 = rdx_3;
                *arg1 = rax_9;
                char var_52_4 = 0;
                sub_140005b80(arg2, rdx_3);
                char var_52_5 = 1;
            }
            
            arg1[2] = 1;
            
            if ((sub_140002860(arg1, &arg1[1]) & 1) != 0)
            {
                char var_52_2 = 0;
                sub_140005b80(arg2, *arg1);
            }
            
            char var_52_3 = 0;
            return sub_1400014d0(arg2);
        }
    }
    
    char var_51_2 = 0;
    return sub_1400014d0(arg2);
}

int64_t* sub_1400032d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400014d0(*(arg2 + 0x30));
}

int64_t sub_140003300(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x46);
}

int64_t sub_140003330(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x47);
}

int64_t sub_140003360(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t r9;
    int64_t var_c0 = r9;
    int64_t var_90 = arg2;
    int64_t var_88 = arg3;
    int64_t* var_80 = arg1;
    int64_t rax = arg1[1];
    int64_t var_78 = rax;
    
    if (rax == -1)
    {
        sub_14005cc30();
        /* no return */
    }
    
    int64_t rdx = *arg1;
    int64_t var_d0 = rdx;
    int64_t var_70 = rdx;
    int64_t* rax_1;
    rax_1 = arg1[2];
    rdx = rax_1;
    rdx &= 1;
    char var_61 = rdx;
    int64_t var_60 = (rax + 1);
    int64_t var_98;
    
    if ((rax_1 & 1) != 0)
        var_98 = (rax + 1);
    else
        var_98 = var_d0;
    
    int64_t var_48 = var_98;
    int64_t var_40 = (rax + 1);
    int64_t var_38 = arg2;
    int64_t var_30 = arg3;
    int64_t var_28 = (rax + 1);
    int64_t var_20 = var_98;
    
    if ((rax + 1) < var_98)
    {
        sub_14005cbc0(var_98, (rax + 1));
        /* no return */
    }
    
    int64_t rdx_3 = ((rax + 1) - var_98);
    int64_t var_58 = 1;
    int64_t var_e0 = rdx_3;
    int64_t var_18 = rdx_3;
    
    if ((rax + 1) > arg3)
    {
        sub_14005cb50((rax + 1), arg3);
        /* no return */
    }
    
    int64_t var_10 = arg2;
    int64_t result = (arg2 + (var_98 << 2));
    int64_t result_1 = result;
    return result;
}

int64_t sub_1400034f0(int64_t* arg1)
{
    arg1[1];
    return *arg1;
}

int32_t* sub_140003500(int32_t* arg1, int32_t arg2, int32_t arg3)
{
    int64_t rax;
    int64_t var_8 = rax;
    var_8 = arg2;
    *var_8[4] = arg3;
    *arg1 = arg2;
    arg1[1] = arg3;
    arg1[2] = 0;
    return arg1;
}

int64_t* sub_140003520(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = arg3;
    arg1[2] = 0;
    return arg1;
}

int64_t sub_140003540(int64_t* arg1, int64_t arg2)
{
    int64_t* var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t* var_8 = arg1;
    return sub_140007e90(*arg1, arg2);
}

int64_t sub_140003570(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140003a60(arg1);
}

int64_t* sub_140003590(int64_t* arg1, int64_t* arg2)
{
    int64_t var_40 = -1;
    int64_t* var_20 = arg2;
    int64_t* var_10 = arg2;
    void* var_8 = &arg2[1];
    
    if (*arg2 < arg2[1])
    {
        int64_t rax_4;
        int64_t rdx_2;
        rax_4 = sub_140007e20(arg2, &arg2[1]);
        int64_t var_28_1;
        
        if (rax_4 == 0)
            var_28_1 = -1;
        else
        {
            int64_t var_18_1 = rdx_2;
            var_28_1 = rdx_2;
        }
        
        *arg1 = var_28_1;
        arg1[1] = rax_4;
        arg1[2] = rdx_2;
    }
    else
    {
        *arg1 = 0;
        arg1[1] = 1;
        arg1[2] = 0;
    }
    
    return arg1;
}

int64_t* sub_140003660(int32_t* arg1, int128_t* arg2)
{
    int64_t var_10 = -2;
    int32_t* var_18 = arg1;
    int64_t var_28 = arg2[1];
    int128_t var_38 = *arg2;
    return sub_140003190(arg1, &var_38);
}

int64_t sub_1400036a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t* sub_1400036c0(int64_t* arg1, int32_t* arg2)
{
    int64_t var_60 = 1;
    int64_t var_58 = 1;
    int32_t* var_30 = arg2;
    int32_t rax_3;
    
    if ((arg2[2] & 1) == 0)
    {
        int32_t* var_10_1 = arg2;
        void* var_8_1 = &arg2[1];
        rax_3 = *arg2 <= arg2[1];
        rax_3 ^= 0xff;
    }
    
    if (((arg2[2] & 1) != 0 || (rax_3 & 1) != 0))
    {
        *arg1 = 0;
        arg1[1] = 1;
        arg1[2] = 0;
    }
    else
    {
        int64_t rax_4;
        int64_t rdx_2;
        rax_4 = sub_140007c50(arg2, &arg2[1]);
        
        if (rax_4 == 0)
        {
            *arg1 = -1;
            arg1[1] = 0;
            arg1[2] = 0;
        }
        else
        {
            int64_t var_28_1 = rdx_2;
            int64_t rcx_3 = (rdx_2 + 1);
            
            if (rdx_2 == -1)
                rcx_3 = -1;
            
            int64_t var_40_1;
            int64_t var_38_1;
            
            if (((rdx_2 >= -1 & 1) & 1) != 0)
            {
                var_40_1 = 0;
                var_38_1 = 0;
            }
            else
            {
                var_38_1 = (rdx_2 + 1);
                var_40_1 = 1;
            }
            
            *arg1 = rcx_3;
            arg1[1] = var_40_1;
            arg1[2] = var_38_1;
        }
    }
    
    return arg1;
}

int64_t* sub_140003850(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t* arg4)
{
    int64_t var_10 = -2;
    int64_t var_30 = arg2;
    int64_t var_28 = arg3;
    char var_31 = 1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    void var_50;
    sub_140005020(&var_50, arg4);
    char var_31_1 = 0;
    sub_140001020(arg1, arg2, arg3, &var_50);
    return arg1;
}

int64_t sub_1400038d0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x67);
}

int64_t* sub_140003900(int64_t* arg1, int64_t* arg2)
{
    sub_1400061a0(arg1, arg2);
    return arg1;
}

int64_t* sub_140003920(int32_t* arg1, int64_t* arg2)
{
    int64_t var_18 = *arg2;
    int64_t var_10 = arg2[1];
    int64_t var_8 = arg2[2];
    return sub_140003660(arg1, &var_18);
}

int64_t sub_140003950(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t result;
    sub_140003590(&result, arg1);
    return result;
}

int64_t* sub_140003970(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    return arg1;
}

int64_t sub_140003980(int64_t arg1) __pure
{
    int64_t var_10 = arg1;
    int64_t rdx;
    int64_t var_8 = rdx;
    return arg1;
}

uint64_t sub_1400039a0(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t* var_18 = arg3;
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg2 == 0)
    {
        void var_70;
        sub_140037ef0(&var_70, &data_14005da88);
        sub_14005c700(&var_70);
        /* no return */
    }
    
    if (arg2 < 1)
    {
        sub_14005cd80();
        /* no return */
    }
    
    void var_40;
    sub_140003520(&var_40, arg1, (arg2 - 1));
    return sub_140003b70(&var_40, arg3);
}

int64_t sub_140003a60(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    int64_t* var_10 = arg1;
    void* var_8 = &arg1[1];
    
    if (*arg1 >= arg1[1])
        return 0;
    
    int64_t rcx = *arg1;
    int64_t var_18_1 = rcx;
    *arg1 = sub_140007e90(rcx, 1);
    int64_t var_28 = rcx;
    return 1;
}

uint64_t sub_140003ae0(int64_t arg1, int64_t* arg2)
{
    int64_t var_18 = arg1;
    int64_t* var_10 = arg2;
    int64_t var_8 = arg1;
    return sub_1400039a0(0, arg1, arg2);
}

int64_t sub_140003b10(int32_t arg1, int32_t arg2, int64_t* arg3)
{
    int32_t var_18 = arg1;
    int32_t var_14 = arg2;
    int64_t* var_10 = arg3;
    return sub_1400018c0(arg1, arg2, arg3);
}

uint64_t sub_140003b40(int32_t* arg1)
{
    int32_t* var_18 = arg1;
    int32_t* var_10 = arg1;
    void* var_8 = &arg1[1];
    int32_t rax_2;
    rax_2 = *arg1 < arg1[1];
    rax_2 ^= 0xff;
    rax_2 &= 1;
    return rax_2;
}

uint64_t sub_140003b70(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_60 = arg2;
    int64_t rax;
    int64_t rdx;
    rax = sub_1400034f0(arg1);
    int64_t var_58 = rax;
    int64_t var_50 = rdx;
    
    if (rax > rdx)
    {
        sub_14005c7a0("assertion failed: start <= end");
        /* no return */
    }
    
    if (rdx > 0xffffffff)
    {
        char var_70;
        sub_140001e00(&var_70, rax, rdx, arg2);
        
        if ((var_70 & 1) == 0)
        {
            uint64_t result;
            uint64_t result_1 = result;
            return result;
        }
        
        char var_6f;
        uint64_t rax_3;
        rax_3 = var_6f;
        rax_3 &= 1;
        char var_19 = rax_3;
        char const (** const var_a8)[0x63] = &data_14005db68;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_19, &data_14005da20);
        /* no return */
    }
    
    int64_t rax_6 = sub_140001be0(rax, rdx, arg2);
    int64_t rax_10;
    rax_10 = rax_6;
    rax_10 &= 1;
    
    if (rax_10 == 0)
    {
        int32_t rax_12 = *rax_6[4];
        int32_t var_20_1 = rax_12;
        return rax_12;
    }
    
    uint64_t rax_11;
    rax_11 = *rax_6[1];
    rax_11 &= 1;
    char var_21 = rax_11;
    char const (** const var_a8_1)[0x63] = &data_14005db80;
    sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_21, &data_14005da20);
    /* no return */
}

int64_t sub_140003cd0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140003cf0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140003d10(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg1 <= arg2)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t* sub_140003d40(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_98 = arg5;
    void** const var_90 = &data_14005dc10;
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int64_t var_8 = arg4;
    
    if (arg4 > arg3)
    {
        void** const var_68 = &data_14005dc10;
        int64_t var_60 = 1;
        int64_t var_58 = 8;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        sub_14005c700(&var_68);
        /* no return */
    }
    
    int64_t var_38;
    sub_140003e80(&var_38, arg2, arg3, arg4);
    *arg1 = var_38;
    int64_t var_30;
    arg1[1] = var_30;
    int64_t var_28;
    arg1[2] = var_28;
    int64_t var_20;
    arg1[3] = var_20;
    return arg1;
}

int64_t* sub_140003e80(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_10 = arg3;
    int64_t var_8 = arg2;
    sub_140003d10(arg4, arg3);
    int64_t var_68 = arg2;
    int64_t var_60 = arg4;
    sub_1400058d0(arg2, 0x18, 8, arg4);
    int64_t var_50 = arg2;
    int64_t var_48 = arg4;
    int64_t rdx_2 = (arg2 + (arg4 * 0x18));
    int64_t rax_2 = (arg3 - arg4);
    sub_1400058d0(rdx_2, 0x18, 8, rax_2);
    *arg1 = arg2;
    arg1[1] = arg4;
    arg1[2] = rdx_2;
    arg1[3] = rax_2;
    return arg1;
}

int64_t* sub_140003fc0(void* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_38 = arg5;
    void* var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    
    if (arg3 >= arg2)
    {
        sub_14005c830(arg3, arg2);
        /* no return */
    }
    
    void* rdx_1 = (arg1 + (arg3 * 0x18));
    void* var_10 = rdx_1;
    
    if (arg4 >= arg2)
    {
        sub_14005c830(arg4, arg2);
        /* no return */
    }
    
    int64_t* rdx_4 = (arg1 + (arg4 * 0x18));
    int64_t* var_8 = rdx_4;
    return sub_140002f90(rdx_1, rdx_4);
}

int64_t* sub_140004090(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    return arg1;
}

int64_t* sub_1400040b0(int64_t* arg1, void* arg2, int64_t arg3, int64_t* arg4, int64_t arg5)
{
    void* var_58 = arg2;
    int64_t var_50 = arg3;
    int64_t* var_48 = arg4;
    int64_t var_18 = arg3;
    int64_t var_10 = arg5;
    int64_t rax_2 = (arg3 - arg5);
    
    if (arg3 < arg5)
        rax_2 = 0;
    
    int64_t var_40 = rax_2;
    
    if (arg3 < 0xffffffff)
    {
        void var_d0;
        sub_1400055b0(&var_d0, arg4, rax_2);
        int64_t var_b8 = sub_140003980(rax_2);
        int64_t var_b0_1 = arg3;
        
        while (true)
        {
            int64_t rax_12;
            int64_t rdx_9;
            rax_12 = sub_140003570(&var_b8);
            
            if (rax_12 == 0)
                break;
            
            int64_t var_28_1 = rdx_9;
            uint64_t rax_14 = sub_140005410(&var_d0);
            uint64_t var_20_1 = rax_14;
            sub_140003fc0(arg2, arg3, rdx_9, rax_14, &data_14005dce0);
        }
    }
    else
    {
        int64_t var_98 = sub_140003980(rax_2);
        int64_t var_90_1 = arg3;
        
        while (true)
        {
            int64_t rax_7;
            int64_t rdx_4;
            rax_7 = sub_140003570(&var_98);
            
            if (rax_7 == 0)
                break;
            
            int64_t var_38_1 = rdx_4;
            bool c_1 = rdx_4 >= -1;
            int64_t rax_10;
            rax_10 = c_1;
            
            if (c_1)
            {
                sub_14005cd40();
                /* no return */
            }
            
            uint64_t rax_11 = sub_1400043c0(arg4, (rdx_4 + 1));
            uint64_t var_30_1 = rax_11;
            sub_140003fc0(arg2, arg3, rdx_4, rax_11, &data_14005dcb0);
        }
    }
    
    int64_t var_78;
    sub_140003d40(&var_78, arg2, arg3, rax_2, &data_14005dcc8);
    int64_t r8_2 = var_78;
    int64_t var_68;
    *arg1 = var_68;
    int64_t var_60;
    arg1[1] = var_60;
    arg1[2] = r8_2;
    int64_t var_70;
    arg1[3] = var_70;
    return arg1;
}

void sub_140004310(void* arg1, int64_t arg2, int64_t* arg3)
{
    void* var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t* var_8 = arg3;
    void var_38;
    
    if (arg2 > 1)
        sub_1400040b0(&var_38, arg1, arg2, arg3, arg2);
}

uint64_t sub_140004360(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140005a90(1, arg1);
}

uint64_t sub_140004380(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140005b30(1, arg1);
}

uint64_t sub_1400043a0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140005ae0(1, arg1);
}

uint64_t sub_1400043c0(int64_t* arg1, int64_t arg2)
{
    int64_t* var_10 = arg1;
    int64_t var_8 = arg2;
    return sub_140003ae0(arg2, arg1);
}

int64_t sub_1400043f0(int64_t* arg1, int32_t arg2, int32_t arg3)
{
    int64_t var_10 = -2;
    int32_t var_88 = arg2;
    int64_t* var_40 = arg1;
    char var_41 = 0;
    char var_41_1 = 1;
    
    if ((sub_140003b40(&var_88) & 1) != 0)
    {
        void var_80;
        sub_140037ef0(&var_80, &data_14005dd60);
        sub_14005c700(&var_80);
        /* no return */
    }
    
    char var_41_2 = 0;
    int64_t rax_1 = sub_140003b10(var_88, arg3, arg1);
    int64_t rax_6;
    rax_6 = rax_1;
    rax_6 &= 1;
    
    if (rax_6 == 0)
    {
        int32_t result = *rax_1[4];
        int32_t result_1 = result;
        return result;
    }
    
    uint64_t rax_7;
    rax_7 = *rax_1[1];
    rax_7 &= 1;
    char var_15 = rax_7;
    int64_t r9;
    int64_t var_b8 = r9;
    sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_15, &data_14005dcf8);
    /* no return */
}

int64_t sub_1400044f0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x97);
}

int64_t sub_140004520() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t* sub_140004540(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_48 = arg2;
    
    if (*arg2 != 0)
    {
        int64_t var_40_1 = 8;
        int64_t var_38_1 = 0x20;
        int64_t rax_2 = *arg2;
        int64_t var_30_1 = rax_2;
        sub_140008830(0x20, rax_2);
        int64_t rcx_1 = (rax_2 << 5);
        int64_t var_28_1 = rcx_1;
        int64_t var_20_1 = 8;
        int64_t var_18_1 = rcx_1;
        int64_t rdx_2 = arg2[1];
        int64_t var_10_1 = rdx_2;
        int64_t var_8_1 = rdx_2;
        *arg1 = rdx_2;
        arg1[1] = 8;
        arg1[2] = rcx_1;
    }
    else
        arg1[1] = 0;
    
    return arg1;
}

int64_t* sub_140004630(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_48 = arg2;
    
    if (*arg2 != 0)
    {
        int64_t var_40_1 = 4;
        int64_t var_38_1 = 4;
        int64_t rax_2 = *arg2;
        int64_t var_30_1 = rax_2;
        sub_140008830(4, rax_2);
        int64_t rcx_1 = (rax_2 << 2);
        int64_t var_28_1 = rcx_1;
        int64_t var_20_1 = 4;
        int64_t var_18_1 = rcx_1;
        int64_t rdx_2 = arg2[1];
        int64_t var_10_1 = rdx_2;
        int64_t var_8_1 = rdx_2;
        *arg1 = rdx_2;
        arg1[1] = 4;
        arg1[2] = rcx_1;
    }
    else
        arg1[1] = 0;
    
    return arg1;
}

int64_t sub_140004720(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x30);
    int64_t var_1a8 = 4;
    int64_t var_1a0 = 4;
    int64_t* var_d0 = arg1;
    int64_t var_c8 = arg2;
    int64_t var_c0 = arg3;
    int64_t result;
    int64_t var_190;
    
    if ((((arg2 + arg3) < arg2 & 1) & 1) != 0)
    {
        int64_t var_168_1 = 0;
        int64_t var_160_1 = 0;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x20);
        result = 0;
        var_190 = 0;
    }
    else
    {
        int64_t rcx_2 = (arg2 + arg3);
        int64_t var_168 = 1;
        int64_t var_b0_1 = rcx_2;
        int64_t var_178_1 = -0x7fffffffffffffff;
        int64_t var_a8_1 = rcx_2;
        int64_t var_188_1 = -0x7fffffffffffffff;
        int64_t var_a0_1 = rcx_2;
        int64_t rcx_6 = (*arg1 << 1);
        int64_t var_98_1 = rcx_6;
        int64_t rax_3 = sub_140039520(rcx_6, rcx_2);
        int64_t var_90_1 = rax_3;
        int64_t rax_4 = sub_140039520(4, rax_3);
        int64_t var_88_1 = rax_4;
        int64_t var_80_1 = 4;
        int64_t rax_5;
        uint64_t rdx_3;
        rax_5 = sub_140002560(4, 4, rax_4);
        int64_t var_78_1 = rax_5;
        uint64_t var_70_1 = rdx_3;
        void var_118;
        sub_140004630(&var_118, arg1);
        int64_t var_130;
        sub_14003cb30(&var_130, rax_5, rdx_3, &var_118, &arg1[2]);
        int64_t result_1;
        int64_t var_120;
        
        if (var_130 == 0)
        {
            int64_t result_2 = result_1;
            int64_t var_60_1 = var_120;
            int64_t var_148_1 = 0;
            int64_t result_3 = result_1;
            int64_t var_50_1 = var_120;
            int64_t result_4 = result_1;
            arg1[1] = result_1;
            *arg1 = rax_4;
            result = -0x7fffffffffffffff;
            var_190 = 0;
        }
        else
        {
            int64_t result_5 = result_1;
            int64_t var_38_1 = var_120;
            int64_t var_148_2 = 1;
            int64_t result_6 = result_1;
            int64_t var_28_1 = var_120;
            result = result_1;
            var_190 = var_120;
        }
    }
    return result;
}

int64_t* sub_140004b70(int64_t* arg1, int64_t arg2, char arg3)
{
    int64_t var_10 = -2;
    int64_t var_100 = -0x7fffffffffffffff;
    int64_t var_f8 = -0x7fffffffffffffff;
    int64_t var_f0 = 0;
    int64_t var_e8 = -0x7fffffffffffffff;
    int64_t var_e0 = 0;
    int64_t var_d8 = -0x7fffffffffffffff;
    int64_t var_d0 = 0;
    int64_t var_c8 = -0x7fffffffffffffff;
    int64_t var_c0 = 0;
    int64_t var_b8 = -0x7fffffffffffffff;
    int64_t var_68 = arg2;
    
    if (arg2 != 0)
    {
        int64_t var_60_1 = 4;
        int64_t rax_1;
        uint64_t rdx;
        rax_1 = sub_140002560(4, 4, arg2);
        int64_t rax_3 = 0;
        
        if (rax_1 == 0)
            rax_3 = 1;
        
        if (rax_3 != 0)
        {
            arg1[1] = 0;
            arg1[2] = 1;
            *arg1 = 1;
        }
        else
        {
            int64_t var_58_1 = rax_1;
            uint64_t var_50_1 = rdx;
            int64_t var_a8 = rax_1;
            uint64_t var_a0_1 = rdx;
            int64_t* var_48_1 = &var_a8;
            uint64_t var_40_1 = rdx;
            uint64_t rax_4;
            rax_4 = (arg3 & 1);
            rax_4 &= 1;
            int64_t var_88_1;
            int64_t var_80_1;
            void var_a9;
            
            if (rax_4 == 0)
            {
                int64_t rax_7;
                int64_t rdx_2;
                rax_7 = sub_1400082e0(&var_a9, rax_1, rdx);
                var_88_1 = rax_7;
                var_80_1 = rdx_2;
            }
            else
            {
                int64_t rax_8;
                int64_t rdx_4;
                rax_8 = sub_1400082b0(&var_a9, rax_1, rdx);
                var_88_1 = rax_8;
                var_80_1 = rdx_4;
            }
            int64_t rax_10 = 0;
            
            if (var_88_1 == 0)
                rax_10 = 1;
            
            if (rax_10 == 0)
            {
                int64_t var_38_1 = var_88_1;
                int64_t var_30_1 = var_80_1;
                int64_t var_28_1 = var_88_1;
                arg1[1] = arg2;
                arg1[2] = var_88_1;
                *arg1 = 0;
            }
            else
            {
                arg1[1] = rax_1;
                arg1[2] = rdx;
                *arg1 = 1;
            }
        }
    }
    else
    {
        int64_t var_20_1 = 4;
        int64_t var_18_1 = 4;
        sub_1400053e0(4);
        arg1[1] = 0;
        arg1[2] = 4;
        *arg1 = 0;
    }
    
    return arg1;
}

int64_t sub_140004de0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140004e00(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t rax;
    int64_t rdx;
    rax = sub_140004720(arg1, arg2, arg3);
    int64_t result = 1;
    
    if (rax == -0x7fffffffffffffff)
        result = 0;
    
    if (result != 1)
        return result;
    
    int64_t var_10 = rax;
    int64_t var_8 = rdx;
    sub_14005c5d0(rax);
    /* no return */
}

int64_t sub_140004e70(int64_t* arg1)
{
    char var_a9 = 0;
    int64_t* var_40 = arg1;
    int64_t result_1;
    sub_140005150(&result_1, arg1);
    int64_t result = result_1;
    int64_t result_3 = result;
    int64_t var_90;
    int64_t var_a8 = var_90;
    int64_t var_88;
    int64_t var_a0 = var_88;
    int64_t* var_30 = &var_a8;
    int64_t result_2 = result;
    int64_t var_80 = 1;
    int64_t* var_28 = &var_80;
    
    if (var_a8 != 0)
    {
        int64_t* var_20_1 = &var_a0;
        int64_t* var_18_1 = &result_2;
        int64_t* var_10_1 = &var_a0;
        int64_t* var_8_1 = &result_2;
        
        if (var_a0 == result)
            return result;
    }
    
    int64_t var_70 = 0;
    sub_14003a870(nullptr, &var_a8, &var_80, &var_70, &data_14005ddf0);
    /* no return */
}

int64_t* sub_140004f80(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = arg3;
    arg1[2] = 0;
    return arg1;
}

int64_t sub_140004fb0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t result;
    sub_140005150(&result, arg1);
    return result;
}

int64_t sub_140004fd0(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    int64_t var_40 = (arg1 + arg2);
    return arg1;
}

int64_t* sub_140005020(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    return arg1;
}

int64_t sub_140005040(int64_t* arg1, int64_t arg2)
{
    int64_t* var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t rdx = (arg2 * arg1[2]);
    int64_t var_10 = rdx;
    int64_t rax = arg1[1];
    int64_t var_8 = rax;
    sub_140008880(rax, rdx);
    int64_t rax_3 = sub_140037250((rax - rdx), arg1[2]);
    int64_t var_28 = arg1[1];
    int64_t var_50 = rdx;
    int64_t result = (rdx + *arg1);
    int64_t var_48 = rax_3;
    sub_140005720(result, 1, 1, rax_3);
    return result;
}

int64_t* sub_140005150(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_28 = arg2;
    int64_t rax = arg2[1];
    int64_t var_20 = *arg2;
    int64_t var_18 = rax;
    
    if (rax != 0)
    {
        int64_t rax_3 = arg2[2];
        int64_t var_70_1 = rax_3;
        rax_3 = rax_3 == 0;
        
        if ((rax_3 & 1) != 0)
        {
            sub_14005ce00();
            /* no return */
        }
        
        uint64_t temp0_1 = (COMBINE(0, rax) / var_70_1);
        uint64_t rax_6;
        rax_6 = rax_3;
        uint64_t var_10_1 = temp0_1;
        
        if ((rax_6 & 1) != 0)
        {
            sub_14005ce40();
            /* no return */
        }
        
        uint64_t temp1_2 = (COMBINE(0, rax) % var_70_1);
        uint64_t var_8_1 = temp1_2;
        uint64_t var_40_1;
        
        if (temp1_2 > 0)
            var_40_1 = (temp0_1 + 1);
        else
            var_40_1 = temp0_1;
        
        *arg1 = var_40_1;
        arg1[1] = 1;
        arg1[2] = var_40_1;
    }
    else
    {
        *arg1 = 0;
        arg1[1] = 1;
        arg1[2] = 0;
    }
    
    return arg1;
}

int64_t sub_140005290(int64_t* arg1)
{
    int64_t var_80 = 1;
    int64_t var_78 = 1;
    int64_t* var_50 = arg1;
    void* var_48 = &arg1[1];
    int64_t var_60 = arg1[1];
    int64_t* var_40 = arg1;
    int64_t* var_38 = &var_60;
    int64_t rax_1 = *arg1;
    int64_t var_30 = rax_1;
    rax_1 = rax_1 == var_60;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
        return 0;
    
    int64_t result_1 = *arg1;
    void* var_28_1 = &arg1[1];
    void* var_20_1 = &arg1[1];
    int64_t rcx_5 = *arg1;
    int64_t var_18_1 = rcx_5;
    *arg1 = (rcx_5 + 1);
    int64_t* var_10_1 = &result_1;
    int64_t result = result_1;
    int64_t result_2 = result;
    return result;
}

int64_t sub_140005360(int32_t arg1)
{
    int32_t var_18 = 0x800;
    int32_t var_10 = arg1;
    int32_t rax_1 = (arg1 ^ 0xd800);
    int32_t var_c = rax_1;
    int32_t var_14;
    
    if ((rax_1 - 0x800) >= 0x10f800)
        var_14 = 0x110000;
    else
        var_14 = arg1;
    
    int32_t* var_8 = &var_14;
    int64_t result = 0;
    
    if (var_14 == 0x110000)
        result = 1;
    
    if (result == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_1400053e0(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    
    if (arg1 != 0)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

uint64_t sub_140005410(void* arg1)
{
    void* var_10 = arg1;
    int32_t rax = *(arg1 + 8);
    bool c = rax >= 0xffffffff;
    int32_t rax_1;
    rax_1 = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    int32_t var_34 = (rax + 1);
    int32_t rcx;
    rcx = *(arg1 + 0x10);
    char rax_3;
    char rdx;
    rax_3 = sub_140008620(rcx, 1);
    int32_t* var_30 = &var_34;
    void* var_28 = arg1;
    void* var_20 = (arg1 + 0xc);
    char rax_6;
    void* rcx_2;
    rax_6 = sub_1400084c0((rax_3 & 1), rdx, &var_30);
    char var_5 = rax_6;
    uint64_t result;
    
    if (rax_6 == 0)
        result = *(arg1 + 0xc);
    else
    {
        if (var_34 == 0)
        {
            sub_14005ce40();
            /* no return */
        }
        
        uint32_t result_1 = (COMBINE(0, *(arg1 + 0xc)) % var_34);
        uint32_t result_2 = result_1;
        
        if (var_34 == 0)
        {
            sub_14005ce00();
            /* no return */
        }
        
        *(arg1 + 0xc) = (COMBINE(0, *(arg1 + 0xc)) / var_34);
        result = result_1;
    }
    
    rcx_2 = rax_6;
    *(arg1 + 0x10) = rcx_2;
    *(arg1 + 8) = var_34;
    return result;
}

int32_t* sub_140005530(int64_t* arg1)
{
    int64_t var_18 = arg1[1];
    int64_t var_10 = arg1[2];
    int32_t rax_3;
    char rdx;
    rax_3 = sub_1400067c0(**arg1);
    int32_t var_8 = rax_3;
    char var_1 = rdx;
    *arg1[2] = sub_1400043f0(arg1[1], 0, rax_3);
    int32_t* result;
    result = rdx;
    result -= 1;
    
    if (rdx >= 1)
    {
        result = result;
        return result;
    }
    
    sub_14005cd80();
    /* no return */
}

int64_t* sub_1400055b0(int64_t* arg1, int64_t arg2, int32_t arg3)
{
    int64_t var_10 = arg2;
    int32_t var_4 = arg3;
    char var_11;
    
    if (arg3 != 0)
        var_11 = 0;
    else
        var_11 = 1;
    
    int64_t r9 = arg2;
    arg2 = var_11;
    *arg1 = r9;
    arg1[1] = arg3;
    *(arg1 + 0xc) = 0;
    arg1[2] = arg2;
    return arg1;
}

int64_t* sub_140005620(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_58 = arg5;
    char const (** const var_50)[0x1c] = &data_14005e058;
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int64_t var_8 = arg4;
    
    if (arg4 != 0)
    {
        *arg1 = arg2;
        arg1[1] = arg3;
        arg1[2] = arg4;
        return arg1;
    }
    
    char const (** const var_48)[0x1c] = &data_14005e058;
    int64_t var_40 = 1;
    int64_t var_38 = 8;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    sub_14005c700(&var_48);
    /* no return */
}

int64_t sub_140005700(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    return sub_140004fd0(arg1, arg2);
}

int64_t sub_140005720(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_10 = -2;
    char const (** const var_88)[0x2b] = &data_14005e0a8;
    int64_t var_48 = arg1;
    int64_t var_40 = arg2;
    int64_t var_38 = arg3;
    int64_t var_30 = arg4;
    int64_t var_28 = arg1;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg3 - ((arg3 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_80)[0x2b] = &data_14005e0a8;
            int64_t var_78 = 1;
            int64_t var_60 = 0;
            int64_t var_70 = 8;
            int64_t var_68 = 0;
            sub_14005c700(&var_80);
            /* no return */
        }
        
        if ((arg1 & (arg3 - 1)) == 0)
        {
            int64_t rcx_7;
            rcx_7 = arg2 == 0;
            uint64_t var_50_1;
            
            if (arg2 == 0)
                var_50_1 = -1;
            else
            {
                int64_t rax_13;
                rax_13 = rcx_7;
                
                if ((rax_13 & 1) != 0)
                {
                    sub_14005ce00();
                    /* no return */
                }
                
                var_50_1 = (COMBINE(0, 0x7fffffffffffffff) / arg2);
            }
            
            if (arg4 <= var_50_1)
                return arg4;
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_1400058b0(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_1400058d0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_10 = -2;
    char const (** const var_88)[0x2b] = &data_14005e0a8;
    int64_t var_48 = arg1;
    int64_t var_40 = arg2;
    int64_t var_38 = arg3;
    int64_t var_30 = arg4;
    int64_t var_28 = arg1;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg3 - ((arg3 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_80)[0x2b] = &data_14005e0a8;
            int64_t var_78 = 1;
            int64_t var_60 = 0;
            int64_t var_70 = 8;
            int64_t var_68 = 0;
            sub_14005c700(&var_80);
            /* no return */
        }
        
        if ((arg1 & (arg3 - 1)) == 0)
        {
            int64_t rcx_7;
            rcx_7 = arg2 == 0;
            uint64_t var_50_1;
            
            if (arg2 == 0)
                var_50_1 = -1;
            else
            {
                int64_t rax_13;
                rax_13 = rcx_7;
                
                if ((rax_13 & 1) != 0)
                {
                    sub_14005ce00();
                    /* no return */
                }
                
                var_50_1 = (COMBINE(0, 0x7fffffffffffffff) / arg2);
            }
            
            if (arg4 <= var_50_1)
                return arg4;
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140005a60(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140005a80() __pure
{
    int64_t rax;
    int64_t var_8 = rax;
    return 0;
}

uint64_t sub_140005a90(int64_t arg1, int64_t* arg2)
{
    int64_t var_58 = arg1;
    int64_t* var_50 = arg2;
    int64_t* var_48 = arg2;
    int64_t* rax = *arg2;
    int64_t* var_40 = rax;
    int64_t* var_28 = rax;
    int64_t* var_20 = rax;
    void* rcx = *rax;
    void* var_18 = rcx;
    void* var_10 = rcx;
    void* var_30 = (rcx + 0x10);
    void* var_38 = (rcx + 0x10);
    void* var_8 = (rcx + 0x10);
    return sub_1400029c0((rcx + 0x10));
}

uint64_t sub_140005ae0(int64_t arg1, int64_t* arg2)
{
    int64_t var_50 = arg1;
    int64_t* var_48 = arg2;
    int64_t* var_40 = arg2;
    int64_t* var_28 = arg2;
    int64_t* var_20 = arg2;
    void* rcx = *arg2;
    void* var_18 = rcx;
    void* var_10 = rcx;
    void* var_30 = (rcx + 0x10);
    void* var_38 = (rcx + 0x10);
    void* var_8 = (rcx + 0x10);
    return sub_1400029c0((rcx + 0x10));
}

uint64_t sub_140005b30(int64_t arg1, int64_t* arg2)
{
    int64_t var_50 = arg1;
    int64_t* var_48 = arg2;
    int64_t* var_40 = arg2;
    int64_t* var_28 = arg2;
    int64_t* var_20 = arg2;
    void* rcx = *arg2;
    void* var_18 = rcx;
    void* var_10 = rcx;
    void* var_30 = (rcx + 0x10);
    void* var_38 = (rcx + 0x10);
    void* var_8 = (rcx + 0x10);
    return sub_140002aa0((rcx + 0x10));
}

int64_t sub_140005b80(void* arg1, int32_t arg2)
{
    void* var_10 = arg1;
    int32_t var_4 = arg2;
    return sub_140006bd0(arg1, arg2);
}

void sub_140005ba0() __pure
{
    return;
}

void sub_140005bb0() __pure
{
    return;
}

int64_t* sub_140005bc0(int64_t* arg1, int32_t* arg2)
{
    int64_t var_10 = -2;
    char const (** const var_c8)[0x12] = &data_14005e2e8;
    char var_51 = 1;
    void var_a8;
    sub_1400036c0(&var_a8, arg2);
    int64_t var_a0;
    
    if (var_a0 != 1)
    {
        char const (** const var_90)[0x12] = &data_14005e2e8;
        int64_t var_88 = 1;
        int64_t var_70 = 0;
        int64_t var_80 = 8;
        int64_t var_78 = 0;
        sub_14005c700(&var_90);
        /* no return */
    }
    
    int64_t var_98;
    int64_t var_38 = var_98;
    int64_t var_50;
    sub_140004b70(&var_50, var_98, 0);
    int64_t var_48;
    int64_t var_40;
    
    if (var_50 != 0)
    {
        int64_t var_20 = var_48;
        int64_t var_18 = var_40;
        sub_14005c5d0(var_48);
        /* no return */
    }
    
    int64_t var_30 = var_48;
    int64_t var_28 = var_40;
    int64_t var_c0 = var_48;
    int64_t var_b0 = 0;
    char var_51_1 = 0;
    int32_t var_58 = arg2[2];
    int64_t var_60 = *arg2;
    sub_1400061e0(&var_c0, &var_60);
    *arg1 = var_c0;
    arg1[1] = var_40;
    arg1[2] = var_b0;
    return arg1;
}

int64_t sub_140005cf0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xb7);
}

int64_t sub_140005d20(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140001530((arg2 + 0x48));
}

int64_t* sub_140005d50(int64_t* arg1, int32_t* arg2)
{
    int64_t var_10 = -2;
    char var_109 = 0;
    char const (** const var_108)[0x2f] = &data_14005e3a0;
    char const (** const var_100)[0x12] = &data_14005e2e8;
    int64_t* var_68 = arg1;
    char var_71 = 1;
    int64_t var_e8;
    sub_1400036c0(&var_e8, arg2);
    int64_t var_60 = var_e8;
    int64_t var_e0;
    
    if (var_e0 != 1)
    {
        char const (** const var_a8)[0x12] = &data_14005e2e8;
        int64_t var_a0 = 1;
        int64_t var_88 = 0;
        int64_t var_98 = 8;
        int64_t var_90 = 0;
        sub_14005c700(&var_a8);
        /* no return */
    }
    
    int64_t var_d8;
    int64_t var_58 = var_d8;
    int64_t* var_50 = arg1;
    int64_t rdx = arg1[2];
    int64_t var_48 = rdx;
    
    if (var_d8 > (*arg1 - rdx))
        sub_140004e00(arg1, rdx, var_d8);
    
    int64_t* var_40 = arg1;
    int64_t rdx_2 = arg1[1];
    int64_t var_38 = rdx_2;
    int64_t var_30 = rdx_2;
    void* var_28 = &arg1[2];
    int64_t rax_4 = arg1[2];
    void* var_20 = &arg1[2];
    int64_t var_18 = rax_4;
    char var_71_1 = 0;
    int32_t var_c8 = arg2[2];
    int64_t var_d0 = *arg2;
    int64_t var_b0 = rdx_2;
    void* var_c0 = &arg1[2];
    int64_t var_b8 = rax_4;
    return sub_140003920(&var_d0, &var_c0);
}

int64_t sub_140005ee0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xe7);
}

int64_t sub_140005f10(void* arg1, int32_t arg2)
{
    int64_t var_48 = 1;
    void* var_38 = (arg1 + 0x10);
    int32_t var_2c = arg2;
    int64_t rax_2 = *(arg1 + 0x10);
    int64_t var_28 = rax_2;
    void* var_20 = arg1;
    int64_t rdx = *(arg1 + 8);
    int64_t var_18 = rdx;
    int64_t var_10 = (rax_2 + (rdx << 2));
    *(rax_2 + (rdx << 2)) = arg2;
    void* var_8 = arg1;
    int64_t result = (*(arg1 + 8) + 1);
    *(arg1 + 8) = result;
    return result;
}

int64_t sub_140005f80(void* arg1)
{
    int64_t rax;
    int64_t var_8_1 = rax;
    void* var_8 = arg1;
    return *(arg1 + 0x10);
}

int64_t sub_140005f90(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_8 = rax;
    sub_140005720(result, 1, 1, rax);
    return result;
}

int64_t sub_140005ff0(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_8 = rax;
    sub_1400058d0(result, 1, 1, rax);
    return result;
}

int64_t sub_140006050(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_8 = rax;
    sub_1400058d0(result, 0x18, 8, rax);
    return result;
}

int64_t sub_1400060b0(void* arg1, int64_t arg2)
{
    int64_t r8;
    int64_t var_60 = r8;
    void* var_40 = arg1;
    int64_t var_38 = arg2;
    void* var_30 = arg1;
    int64_t rax = *(arg1 + 8);
    int64_t var_28 = rax;
    int64_t var_20 = rax;
    int64_t rax_1 = *(arg1 + 0x10);
    int64_t var_18 = rax_1;
    sub_140005720(rax, 4, 4, rax_1);
    int64_t var_10 = rax;
    int64_t var_8 = rax_1;
    return sub_140006740(arg2, rax, rax_1);
}

int64_t sub_140006140(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_8 = rax;
    sub_140005720(result, 1, 1, rax);
    return result;
}

int64_t* sub_1400061a0(int64_t* arg1, int64_t* arg2)
{
    void var_c;
    sub_140003970(&var_c, arg2);
    sub_140006200(arg1, &var_c);
    return arg1;
}

int64_t* sub_1400061e0(int64_t* arg1, int32_t* arg2)
{
    int64_t* var_8 = arg1;
    return sub_140005d50(arg1, arg2);
}

int64_t* sub_140006200(int64_t* arg1, int32_t* arg2)
{
    sub_140005bc0(arg1, arg2);
    return arg1;
}

int64_t* sub_140006220(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    char var_31 = 0;
    char var_32 = 0;
    char var_31_1 = 1;
    int128_t var_80;
    sub_140004090(&var_80, arg3);
    char var_32_1 = 1;
    int128_t* var_30 = &var_80;
    int128_t* var_18 = &var_80;
    int64_t rax_1 = sub_14003eb70(&var_80);
    int64_t var_28 = rax_1;
    int64_t var_20 = (rax_1 + 4);
    int64_t var_68 = sub_140002f70((rax_1 + 4));
    int64_t var_60 = 4;
    
    if ((sub_14003ddf0(&var_68, &data_14005e490) & 1) != 0)
    {
        var_32_1 = 0;
        int64_t var_70;
        int64_t var_48_1 = var_70;
        int128_t var_58 = var_80;
        sub_14003e9c0(arg2, &var_58);
    }
    
    char var_31_2 = 0;
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    
    if ((var_32_1 & 1) != 0)
        sub_140039a30(&var_80);
    
    char var_32_2 = 0;
    return arg1;
}

void sub_140006350(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xb7) & 1) != 0)
        sub_140039a50(*(arg2 + 0x50));
}

void sub_140006380(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xb6) & 1) == 0)
        return;
    
    sub_140039a30((arg2 + 0x68));
}

int64_t* sub_1400063b0(int64_t* arg1, int128_t* arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    char var_11 = 0;
    char var_11_1 = 1;
    int64_t var_c0;
    sub_14003f450(&var_c0, arg3);
    int64_t var_a0 = var_c0;
    int64_t var_b8;
    int64_t var_98 = var_b8;
    int64_t var_b0;
    int64_t var_90 = var_b0;
    int64_t var_a8;
    int64_t var_88 = var_a8;
    
    while (true)
    {
        int64_t var_80;
        sub_140037f30(&var_80, &var_a0);
        
        if ((var_80 == -0x8000000000000000 & 1) != 0)
            break;
        
        int64_t var_70;
        int64_t var_58_1 = var_70;
        int128_t var_68 = var_80;
        char var_11_2 = 0;
        int64_t var_28_1 = arg2[1];
        int128_t var_38 = *arg2;
        int64_t var_50;
        sub_140006220(&var_50, &var_38, &var_68);
        char var_11_4 = 1;
        *arg2 = var_50;
        int64_t var_48;
        *(arg2 + 8) = var_48;
        int64_t var_40;
        arg2[1] = var_40;
    }
    
    sub_140039c80(&var_a0);
    char var_11_3 = 0;
    *arg1 = *arg2;
    arg1[1] = *(arg2 + 8);
    arg1[2] = arg2[1];
    return arg1;
}

void sub_1400064d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xf7) & 1) != 0)
        sub_140039a50(*(arg2 + 0x30));
}

int64_t sub_140006500(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039c80((arg2 + 0x68));
}

int64_t sub_140006530(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_14005e4d0;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_14005e4d0;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140006650(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t* sub_140006670(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg2;
    int64_t* rax = *arg2;
    int64_t rax_1 = arg2[1];
    int64_t rcx = arg2[3];
    int64_t var_20;
    int64_t var_18;
    
    if (rax_1 != 0)
    {
        if ((rax_1 == 1 && rcx == 0))
        {
            int64_t* var_8_1 = rax;
            var_20 = *rax;
            var_18 = rax[1];
        }
        else
        {
            var_20 = 0;
            var_18 = 0;
        }
    }
    else if (rcx == 0)
    {
        var_20 = 1;
        var_18 = 0;
    }
    else
    {
        var_20 = 0;
        var_18 = 0;
    }
    
    sub_14003a5f0(arg1, var_20, var_18, arg2);
    return arg1;
}

int64_t sub_140006740(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t r9;
    int64_t var_38 = r9;
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    
    if (arg1 < arg3)
        return (arg2 + (arg1 << 2));
    
    sub_14005c830(arg1, arg3);
    /* no return */
}

int64_t sub_1400067a0(int64_t arg1)
{
    int64_t var_8 = arg1;
    return sub_140001430(arg1);
}

uint64_t sub_1400067c0(int32_t arg1)
{
    int32_t var_4 = arg1;
    
    if (arg1 <= 0)
    {
        sub_14005c7a0("assertion failed: m > 0C:\Users\…");
        /* no return */
    }
    
    int32_t var_c;
    char var_8;
    
    if (arg1 != 2)
    {
        int32_t rax_1;
        char rdx;
        rax_1 = sub_140006820(arg1);
        var_c = rax_1;
        var_8 = rdx;
    }
    else
    {
        var_c = 0x1c8cfc00;
        var_8 = 0xb;
    }
    return var_c;
}

uint64_t sub_140006820(int32_t arg1)
{
    int32_t var_c = arg1;
    int32_t var_1c = arg1;
    bool c = arg1 >= 0xffffffff;
    int64_t rax;
    rax = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    int32_t var_18 = (arg1 + 1);
    
    while (true)
    {
        int32_t rax_2;
        int32_t rdx_2;
        rax_2 = sub_1400086d0(var_1c, var_18);
        
        if (rax_2 != 1)
            break;
        
        int32_t var_8_1 = rdx_2;
        var_1c = rdx_2;
        bool c_1 = var_18 >= 0xffffffff;
        int32_t rax_6;
        rax_6 = c_1;
        
        if (c_1)
        {
            sub_14005cd40();
            /* no return */
        }
        
        var_18 += 1;
    }
    
    if (var_18 >= arg1)
    {
        char var_1 = (var_18 - arg1);
        return var_1c;
    }
    
    sub_14005cd80();
    /* no return */
}

uint64_t sub_1400068e0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t rax_1;
    char rdx;
    rdx = HIGHQ((arg3 * arg4));
    rax_1 = LOWQ((arg3 * arg4));
    int64_t rcx = rax_1;
    rax_1 = ((arg3 * arg4) >> 0x40) != {0};
    int64_t var_28 = rcx;
    char var_19 = (rax_1 & 1);
    int64_t var_18 = rcx;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
    {
        sub_14005c7e0("is_nonoverlapping: `size_of::<T>…");
        /* no return */
    }
    
    int64_t var_70 = 1;
    int64_t var_8 = rcx;
    int64_t var_60;
    
    if (arg1 < arg2)
        var_60 = (arg2 - arg1);
    else
        var_60 = (arg1 - arg2);
    
    int64_t rax_7;
    rax_7 = var_60 >= rcx;
    rax_7 &= 1;
    return rax_7;
}

int64_t sub_1400069e0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140002700(*arg1);
}

uint64_t* sub_140006a00(uint64_t* arg1, void* arg2)
{
    void* var_30 = arg2;
    int64_t rcx = *(arg2 + 0x18);
    int64_t var_28 = rcx;
    int64_t rax_1 = *(arg2 + 8);
    int64_t var_20 = rax_1;
    int64_t var_18 = rcx;
    int64_t var_10 = rax_1;
    sub_140002f40(rcx, rax_1);
    int64_t var_8 = 0x20;
    uint64_t rax_4 = ((rcx - rax_1) >> 5);
    *arg1 = rax_4;
    arg1[1] = 1;
    arg1[2] = rax_4;
    return arg1;
}

int64_t sub_140006ac0(void* arg1)
{
    char var_a9 = 0;
    void* var_40 = arg1;
    int64_t result_1;
    sub_140006a00(&result_1, arg1);
    int64_t result = result_1;
    int64_t result_3 = result;
    int64_t var_90;
    int64_t var_a8 = var_90;
    int64_t var_88;
    int64_t var_a0 = var_88;
    int64_t* var_30 = &var_a8;
    int64_t result_2 = result;
    int64_t var_80 = 1;
    int64_t* var_28 = &var_80;
    
    if (var_a8 != 0)
    {
        int64_t* var_20_1 = &var_a0;
        int64_t* var_18_1 = &result_2;
        int64_t* var_10_1 = &var_a0;
        int64_t* var_8_1 = &result_2;
        
        if (var_a0 == result)
            return result;
    }
    
    int64_t var_70 = 0;
    sub_14003a870(nullptr, &var_a8, &var_80, &var_70, &data_14005e750);
    /* no return */
}

int64_t sub_140006bd0(void* arg1, int32_t arg2)
{
    void* var_10 = arg1;
    int32_t var_4 = arg2;
    return sub_140005f10(arg1, arg2);
}

int64_t sub_140006bf0()
{
    int64_t var_10 = -2;
    char var_161 = 0;
    char var_162 = 0;
    void var_728;
    sub_1400449a0(&var_728);
    int64_t var_6e8;
    sub_1400451e0(&var_6e8, &var_728);
    
    if (var_6e8 == -0x8000000000000000)
    {
        sub_14005c680();
        /* no return */
    }
    
    int64_t var_6d8;
    int64_t var_6f8 = var_6d8;
    int128_t var_708 = var_6e8;
    sub_140041050(&var_708);
    void var_6b8;
    sub_1400451e0(&var_6b8, &var_728);
    char const (** const var_888)[0x1a] = &data_14005e820;
    void var_6d0;
    sub_140008530(&var_6d0, &var_6b8, "PNG path is missing. User must s…", 0x35);
    void var_688;
    sub_1400451e0(&var_688, &var_728);
    char const (** const var_888_1)[0x1a] = &data_14005e850;
    void var_6a0;
    sub_140008530(&var_6a0, &var_688, "Flag is required.", 0x11);
    void var_654;
    sub_140003500(&var_654, 0x61, 0x7a);
    void var_670;
    sub_140003900(&var_670, &var_654);
    
    if (7 >= sub_140005f80(&var_670))
    {
        void var_648;
        sub_140037ef0(&var_648, &data_14005ea20);
        sub_14005c700(&var_648);
        /* no return */
    }
    
    uint64_t rax_9 = (sub_140002720(&var_6a0) / 7);
    uint64_t var_160 = rax_9;
    int128_t var_618;
    sub_14003e630(&var_618);
    char var_161_1 = 1;
    int64_t rax_10;
    int64_t rdx_7;
    rax_10 = sub_140002740(&var_6a0);
    void var_600;
    sub_140005620(&var_600, rax_10, rdx_7, rax_9, &data_14005e868);
    void var_5a8;
    sub_140003850(&var_5a8, 0, sub_140004e70(&var_600), &var_600);
    void var_5e8;
    sub_140001210(&var_5e8, &var_5a8);
    void var_568;
    memcpy(&var_568, &var_5e8, 0x40);
    
    while (true)
    {
        int64_t var_528;
        sub_140001000(&var_528, &var_568);
        int64_t var_520;
        int64_t rax_12;
        rax_12 = var_520 == 0;
        
        if ((rax_12 & 1) != 0)
            break;
        
        int64_t rdx_13 = var_528;
        int64_t var_110_1 = rdx_13;
        int64_t var_108_1 = var_520;
        int64_t var_518;
        int64_t var_100_1 = var_518;
        int32_t var_50c = *sub_1400060b0(&var_670, rdx_13);
        int32_t* var_98_1 = &var_50c;
        int64_t (* var_90_1)(int32_t* arg1, int64_t* arg2) = sub_140057f80;
        int32_t* var_88_1 = &var_50c;
        int64_t (* var_a0_1)(int32_t* arg1, int64_t* arg2) = sub_140057f80;
        int128_t var_4a8 = &var_50c;
        void var_4d8;
        sub_140042170(&var_4d8, &data_14005e978, &var_4a8);
        int128_t var_4f0;
        sub_140006670(&var_4f0, &var_4d8);
        int64_t var_4e0;
        int64_t var_4f8_1 = var_4e0;
        int128_t var_508 = var_4f0;
        int64_t rax_49;
        int64_t rdx_31;
        rax_49 = sub_140002740(&var_508);
        int64_t var_f8_1 = rax_49;
        int64_t var_f0_1 = rdx_31;
        void var_488;
        sub_14003ecd0(&var_488, var_520, var_518);
        
        if (sub_14003e9b0(&var_488) < rax_9)
            sub_14003eb90(&var_488, rax_9, 0xaa);
        
        int64_t rax_53;
        int64_t rdx_33;
        rax_53 = sub_140005ff0(&var_488);
        int64_t rax_54;
        int64_t rdx_36;
        rax_54 = sub_140005700(rax_53, rdx_33);
        void var_458;
        sub_140004f80(&var_458, rax_54, rdx_36);
        int64_t var_470;
        sub_140001330(&var_470, &var_458);
        int64_t var_440 = var_470;
        int64_t var_468;
        int64_t var_438_1 = var_468;
        int64_t var_460;
        int64_t var_430_1 = var_460;
        int64_t var_400;
        
        while (true)
        {
            int64_t rax_58;
            char* rdx_39;
            rax_58 = sub_140001240(&var_440);
            char* rax_60;
            rax_60 = rdx_39 == 0;
            
            if ((rax_60 & 1) != 0)
            {
                int64_t rax_61;
                int64_t rdx_40;
                rax_61 = sub_1400027f0(&var_508);
                int64_t rax_64;
                int64_t rdx_42;
                rax_64 = sub_14003f350(&var_488);
                sub_14003f5d0(&var_400, rax_61, rdx_40, rax_64, rdx_42);
                break;
            }
            
            int64_t var_e8_1 = rax_58;
            char* var_e0_1 = rdx_39;
            
            if (rdx_31 == 0)
            {
                sub_14005ce40();
                /* no return */
            }
            
            uint64_t temp1_1 = (COMBINE(0, rax_58) % rdx_31);
            uint64_t var_d8_1 = temp1_1;
            int64_t rcx_82;
            rcx_82 = *(rax_49 + temp1_1);
            rcx_82 ^= *rdx_39;
            *rdx_39 = rcx_82;
        }
        
        int64_t rax_65 = 0;
        
        if (var_400 == -0x8000000000000000)
            rax_65 = 1;
        
        if (rax_65 != 0)
        {
            int64_t var_3f8;
            int64_t var_60 = var_3f8;
            char const (** const var_888_7)[0x1a] = &data_14005e9a0;
            sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_60, &data_14005e768);
            /* no return */
        }
        
        int64_t var_3f0;
        int64_t var_408_1 = var_3f0;
        int128_t var_418 = var_400;
        sub_14003e9c0(&var_618, &var_418);
        sub_140041070(&var_488);
        sub_140041050(&var_508);
    }
    
    int64_t var_3d0;
    sub_140002880(&var_3d0, &var_6d0);
    int64_t rax_15 = 0;
    
    if (var_3d0 == -0x8000000000000000)
        rax_15 = 1;
    
    if (rax_15 != 0)
    {
        int64_t var_3c8;
        int64_t var_78 = var_3c8;
        char const (** const var_888_2)[0x1a] = &data_14005e880;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_78, &data_14005e768);
        /* no return */
    }
    
    int64_t var_3c0;
    int64_t var_3d8 = var_3c0;
    int128_t var_3e8 = var_3d0;
    int64_t rax_18;
    int64_t rdx_15;
    rax_18 = sub_14003f350(&var_3e8);
    int64_t var_3a8;
    sub_14003fea0(&var_3a8, rax_18, rdx_15);
    int64_t rax_19 = 0;
    
    if (var_3a8 == 0)
        rax_19 = 1;
    
    int64_t var_3a0;
    
    if (rax_19 != 0)
    {
        int64_t var_58 = var_3a0;
        char const (** const var_888_3)[0x1a] = &data_14005e8b0;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_58, &data_14005e768);
        /* no return */
    }
    
    int64_t rcx_27 = var_3a8;
    int64_t var_50 = rcx_27;
    int64_t var_48 = var_3a0;
    int64_t var_3b8 = rcx_27;
    int64_t var_3b0 = var_3a0;
    int64_t var_398;
    sub_14003fe10(&var_398, &var_3b8);
    int64_t var_380 = var_398;
    int64_t var_390;
    int64_t var_378 = var_390;
    int64_t var_388;
    int64_t var_370 = var_388;
    
    while (true)
    {
        int64_t var_368;
        sub_14003bd50(&var_368, &var_380);
        int64_t rax_25;
        rax_25 = var_368 == 0;
        
        if ((rax_25 & 1) != 0)
            break;
        
        int128_t var_348 = var_368;
        int128_t* var_38_1 = &var_348;
        int64_t rcx_31 = var_348;
        int64_t var_30_1 = rcx_31;
        int64_t var_28_1 = (rcx_31 + 4);
        int64_t var_328 = sub_140002f70((rcx_31 + 4));
        int64_t var_320_1 = 4;
        
        if ((sub_14003dd80(&var_328, &data_14005e930) & 1) == 0)
        {
            int128_t* var_40_1 = &var_348;
            int64_t rcx_52 = var_348;
            int64_t var_20_1 = rcx_52;
            int64_t var_18_1 = (rcx_52 + 4);
            int64_t var_318 = sub_140002f70((rcx_52 + 4));
            int64_t var_310_1 = 4;
            
            if ((sub_14003dd80(&var_318, &data_14005e948) & 1) == 0)
            {
                int128_t var_358;
                int128_t var_128_1 = var_358;
                int128_t var_138 = var_348;
                void var_308;
                sub_14003fcf0(&var_308, &var_138);
                sub_14003e9c0(&var_618, &var_308);
            }
        }
    }
    
    void* rax_26;
    int64_t rdx_20;
    rax_26 = sub_140006050(&var_618);
    int64_t var_2f0 = sub_14000a450();
    sub_140004310(rax_26, rdx_20, &var_2f0);
    sub_1400015b0(&var_2f0);
    int64_t var_2c8;
    sub_14003ff80(&var_2c8, &var_3b8, "IHDR");
    
    if (var_2c8 == 0)
    {
        sub_14005c680();
        /* no return */
    }
    
    int128_t zmm0_4 = var_2c8;
    void var_240;
    sub_14003b1e0(&var_240);
    int128_t var_2b8;
    int128_t var_148 = var_2b8;
    int128_t var_158 = zmm0_4;
    void var_258;
    sub_14003b230(&var_258, &var_240, &var_158);
    char var_161_2 = 0;
    int64_t var_608;
    int64_t var_218 = var_608;
    int128_t var_228 = var_618;
    void var_270;
    sub_1400063b0(&var_270, &var_258, &var_228);
    int64_t var_288;
    sub_14003b3c0(&var_288, &var_270);
    int64_t rax_34 = 0;
    
    if (var_288 == -0x8000000000000000)
        rax_34 = 1;
    
    if (rax_34 != 0)
    {
        int64_t var_280;
        int64_t var_80 = var_280;
        char const (** const var_888_4)[0x1a] = &data_14005e8e8;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_80, &data_14005e768);
        /* no return */
    }
    
    int128_t var_2a8 = var_288;
    char var_162_1 = 1;
    void* var_c0 = &var_6d0;
    uint64_t (* var_b8)(void* arg1, int64_t* arg2) = sub_140002760;
    void* var_b0 = &var_6d0;
    uint64_t (* var_c8)(void* arg1, int64_t* arg2) = sub_140002760;
    int128_t var_1a8 = &var_6d0;
    void var_1d8;
    sub_140042170(&var_1d8, &data_14005e908, &var_1a8);
    int128_t var_1f0;
    sub_140006670(&var_1f0, &var_1d8);
    int64_t var_1e0;
    int64_t var_1f8 = var_1e0;
    int128_t var_208 = var_1f0;
    char var_162_2 = 0;
    int64_t var_278;
    int64_t var_178 = var_278;
    int128_t var_188 = var_2a8;
    HANDLE rax_39 = sub_1400028f0(&var_208, &var_188);
    
    if (rax_39 != 0)
    {
        HANDLE var_68 = rax_39;
        char const (** const var_888_5)[0x1a] = &data_14005e918;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_68, &data_14005e768);
        /* no return */
    }
    
    char var_162_3 = 0;
    sub_140041070(&var_3e8);
    char var_161_3 = 0;
    sub_140001530(&var_670);
    sub_140041050(&var_6a0);
    sub_140041050(&var_6d0);
    return sub_1400014b0(&var_728);
}

int64_t sub_140007940(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400014b0((arg2 + 0x180));
}

int64_t sub_140007970(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050((arg2 + 0x1d8));
}

int64_t sub_1400079a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050((arg2 + 0x208));
}

int64_t sub_1400079d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140001530((arg2 + 0x238));
}

void sub_140007a00(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0x747) & 1) == 0)
        return;
    
    sub_140039bc0((arg2 + 0x290));
}

int64_t sub_140007a40(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400092f0((arg2 + 0x830));
}

int64_t sub_140007a70(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041070((arg2 + 0x4c0));
}

int64_t sub_140007aa0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400092f0((arg2 + 0x850));
}

int64_t* sub_140007ad0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400015b0((arg2 + 0x5b8));
}

int64_t sub_140007b00(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400092f0((arg2 + 0x828));
}

void sub_140007b30(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0x746) & 1) == 0)
        return;
    
    sub_140041070((arg2 + 0x600));
}

int64_t sub_140007b70(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400092f0((arg2 + 0x840));
}

int64_t sub_140007ba0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050((arg2 + 0x3a0));
}

int64_t sub_140007bd0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041070((arg2 + 0x420));
}

int64_t sub_140007c00(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400092f0((arg2 + 0x848));
}

int64_t main(int32_t arg1)
{
    return sub_140002ec0(sub_140006bf0);
}

int64_t sub_140007c50(int32_t* arg1, int32_t* arg2)
{
    int32_t* var_40 = arg1;
    int32_t* var_38 = arg2;
    int32_t rax = *arg1;
    int32_t var_2c = rax;
    int32_t rcx = *arg2;
    int32_t var_28 = rcx;
    int32_t var_24 = rax;
    int32_t var_20 = rcx;
    uint64_t var_68;
    
    if (rax > rcx)
    {
        var_68 = 0;
        return 0;
    }
    
    int32_t rcx_2 = (rcx - rax);
    int32_t var_1c_1 = rcx_2;
    
    if ((rax >= 0xd800 || 0xe000 > rcx))
    {
        uint64_t rax_4 = rcx_2;
        uint64_t var_18_1 = rax_4;
        uint64_t var_48_1 = rax_4;
        int64_t var_50_1 = 0;
        var_68 = rax_4;
        return 1;
    }
    
    int32_t var_c_1 = (rcx_2 - 0x800);
    uint64_t rax_7 = (rcx_2 - 0x800);
    uint64_t var_8_1 = rax_7;
    uint64_t var_58_1 = rax_7;
    int64_t var_60_1 = 0;
    var_68 = rax_7;
    return 1;
}

uint64_t sub_140007d30(int32_t arg1, int64_t arg2)
{
    int64_t var_38 = 0x800;
    int32_t var_30 = 0x800;
    int32_t var_14 = arg1;
    int64_t var_10 = arg2;
    int32_t var_8 = arg1;
    int32_t rax = arg2;
    int32_t var_4 = rax;
    sub_140008740(arg1, rax);
    int32_t rcx_2 = (arg1 + rax);
    int32_t rax_1;
    rax_1 = arg1 < 0xd800;
    rax_1 &= 1;
    int32_t var_18;
    
    if ((rax_1 & 1) == 0)
        var_18 = rcx_2;
    else if (((0xd800 <= rcx_2 & 1) & 1) != 0)
    {
        sub_140008740(rcx_2, 0x800);
        var_18 = (rcx_2 + 0x800);
    }
    else
        var_18 = rcx_2;
    
    sub_140005360(var_18);
    return var_18;
}

int64_t sub_140007e20(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    int64_t rax = *arg1;
    int64_t rcx = *arg2;
    int64_t var_18;
    
    if (rax <= rcx)
    {
        var_18 = (rcx - rax);
        return 1;
    }
    
    var_18 = 0;
    return 0;
}

int64_t sub_140007e90(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    sub_1400087f0(arg1, arg2);
    return (arg1 + arg2);
}

int64_t sub_140007ed0(int64_t arg1, uint64_t arg2)
{
    char* var_40 = &data_140071141;
    int64_t var_38 = arg1;
    sub_140006530(&data_140071141, 1);
    char var_19 = data_140071141;
    int64_t* var_18 = &var_38;
    int64_t* var_10 = &var_38;
    int64_t rax_1 = var_38;
    int64_t var_8 = rax_1;
    return j_sub_140049a90(arg2, rax_1);
}

int64_t sub_140007f40(int64_t arg1, int64_t arg2, uint64_t arg3, char arg4)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t result_3 = arg2;
    int64_t var_90 = arg1;
    char var_81 = (arg4 & 1);
    int64_t* var_80 = &result_3;
    uint64_t var_78 = arg3;
    int64_t result;
    uint64_t var_100;
    
    if (arg3 != 0)
    {
        uint64_t rax;
        rax = arg4;
        int64_t result_1;
        
        if ((rax & 1) != 0)
        {
            int64_t result_15 = result_3;
            uint64_t var_e0_1 = arg3;
            int64_t* var_50_1 = &result_15;
            int64_t* var_48_1 = &result_15;
            int64_t result_16 = result_3;
            int64_t result_17 = result_16;
            result_1 = j_sub_140049bc0(arg3, result_16);
        }
        else
            result_1 = sub_140007ed0(result_3, arg3);
        
        int64_t result_9 = result_1;
        
        if (result_1 != 0)
        {
            sub_1400053e0(result_1);
            int64_t result_10 = result_1;
            int64_t result_11 = result_1;
            int64_t result_12 = result_1;
            int64_t result_13 = result_1;
            int64_t result_14 = result_1;
            uint64_t var_8_1 = arg3;
            sub_1400053e0(result_1);
            result = result_1;
            var_100 = arg3;
        }
        else
        {
            int64_t var_c8_1 = 0;
            int64_t var_d0_1 = 0;
            result = 0;
            var_100 = 0;
        }
    }
    else
    {
        int64_t* var_70_1 = &result_3;
        int64_t result_2 = result_3;
        int64_t result_6 = result_2;
        int64_t result_7 = result_2;
        int64_t result_8 = result_2;
        sub_1400053e0(result_2);
        int64_t result_4 = result_2;
        int64_t result_5 = result_2;
        uint64_t var_a8_1 = 0;
        sub_1400053e0(result_2);
        result = result_2;
        var_100 = var_a8_1;
    }
    return result;
}

int64_t sub_140008210(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_60 = arg3;
    int64_t var_38 = arg1;
    void* var_30 = arg2;
    int64_t* var_28 = &var_60;
    
    if (arg4 == 0)
        return arg4;
    
    void* var_20_1 = arg2;
    int64_t var_50 = var_60;
    int64_t var_48_1 = arg4;
    int64_t* var_18_1 = &var_50;
    int64_t* var_10_1 = &var_50;
    int64_t rax_2 = var_60;
    int64_t var_8_1 = rax_2;
    return j_sub_140049af0(arg2, arg4, rax_2);
}

int64_t sub_1400082b0(int64_t arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    uint64_t var_8 = arg3;
    return sub_140007f40(arg1, arg2, arg3, 1);
}

int64_t sub_1400082e0(int64_t arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    uint64_t var_8 = arg3;
    return sub_140007f40(arg1, arg2, arg3, 0);
}

int128_t* sub_140008310(int128_t* arg1, int64_t arg2)
{
    int64_t var_18 = arg2;
    int128_t* var_10 = arg1;
    
    if (*(arg1 + 0x38) <= 0)
        return sub_1400083a0(arg1, var_18);
    
    int64_t rax_1 = sub_140037200(sub_140003170(&var_18), 0x40);
    int64_t var_8_1 = rax_1;
    int64_t rax_3 = *(arg1 + 0x38);
    bool o_1 = (rax_3 + -(rax_1));
    int64_t rax_4;
    rax_4 = o_1;
    
    if (!(o_1))
    {
        *(arg1 + 0x38) = (rax_3 - rax_1);
        return sub_140008480(arg1, var_18);
    }
    
    sub_14005cd80();
    /* no return */
}

int128_t* sub_1400083a0(int128_t* arg1, int64_t arg2)
{
    int64_t var_28 = arg2;
    int128_t* var_18 = arg1;
    char var_19 = 0;
    int64_t rax_1 = sub_140037200(sub_140003170(&var_28), 0x40);
    int64_t var_10 = rax_1;
    char var_19_1 = 1;
    int32_t rax_2 = sub_14000a3a0(arg1);
    int64_t rax_3 = 1;
    
    if (rax_2 == 0)
        rax_3 = 0;
    
    if (rax_3 == 1)
    {
        var_19_1 = 0;
        int32_t var_4_1 = rax_2;
    }
    
    char var_19_2 = 0;
    int64_t rax_7 = arg1[3];
    bool o = (rax_7 + -(rax_1));
    int64_t rax_8;
    rax_8 = o;
    
    if (!(o))
    {
        *(arg1 + 0x38) = (rax_7 - rax_1);
        return sub_140008480(arg1, var_28);
    }
    
    sub_14005cd80();
    /* no return */
}

int128_t* sub_140008480(int128_t* arg1, int64_t arg2)
{
    int128_t* var_28 = arg1;
    int64_t var_20 = arg2;
    int128_t* var_18 = arg1;
    int32_t var_c = 6;
    int64_t var_8 = arg2;
    return sub_14000f490(arg1, 6, arg2);
}

uint64_t sub_1400084c0(char arg1, char arg2, int64_t* arg3)
{
    char var_21;
    uint64_t result;
    
    if (((arg1 & 1) & 1) != 0)
    {
        result = arg2;
        char var_1_1 = result;
        var_21 = result;
    }
    else
    {
        int64_t var_20 = *arg3;
        int64_t var_18_1 = arg3[1];
        int64_t var_10_1 = arg3[2];
        var_21 = sub_140005530(&var_20);
    }
    
    result = var_21;
    return result;
}

int64_t* sub_140008530(int64_t* arg1, int64_t* arg2, int64_t arg3, int64_t arg4)
{
    int64_t r9;
    int64_t var_40 = r9;
    int64_t var_18 = arg4;
    int64_t var_10 = arg3;
    int64_t var_8 = r9;
    int64_t rax_1 = 1;
    
    if (*arg2 == -0x8000000000000000)
        rax_1 = 0;
    
    if (rax_1 == 0)
    {
        sub_14005c6a0(arg3);
        /* no return */
    }
    
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    return arg1;
}

uint64_t sub_1400085c0(int32_t* arg1)
{
    int32_t* var_8 = arg1;
    char var_9;
    
    if (*arg1 != 1)
        var_9 = 0;
    else
        var_9 = 1;
    
    uint64_t rax;
    rax = var_9;
    rax ^= 0xff;
    rax &= 1;
    return rax;
}

uint64_t sub_1400085f0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    char var_9;
    
    if (*arg1 != 1)
        var_9 = 0;
    else
        var_9 = 1;
    
    return ((var_9 ^ 0xff) & 1);
}

int64_t sub_140008620(char arg1, char arg2) __pure
{
    int64_t result;
    int64_t result_1 = result;
    *result_1[2] = arg2;
    *result_1[3] = arg1;
    *result_1[6] = arg1;
    *result_1[7] = arg2;
    
    if (arg1 < arg2)
    {
        result = 0;
        *result_1[4] = 0;
        *result_1[5] = 0;
    }
    else
    {
        result = *result_1[3];
        result -= *result_1[2];
        *result_1[5] = result;
        *result_1[4] = 1;
    }
    
    result = *result_1[4];
    return result;
}

uint64_t sub_140008670(int32_t arg1, int32_t arg2) __pure
{
    int32_t var_c = arg1;
    int32_t var_8 = arg2;
    int32_t var_14;
    int32_t var_10;
    
    if ((((arg1 + arg2) < arg1 & 1) & 1) != 0)
    {
        var_14 = 0;
        var_10 = 0;
    }
    else
    {
        var_10 = (arg1 + arg2);
        var_14 = 1;
    }
    return var_14;
}

uint64_t sub_1400086d0(int32_t arg1, int32_t arg2) __pure
{
    int32_t var_10 = arg1;
    int32_t var_c = arg2;
    int32_t temp0;
    int32_t temp1;
    temp0 = HIGHD((arg1 * arg2));
    temp1 = LOWD((arg1 * arg2));
    int32_t rax_1;
    rax_1 = ((arg1 * arg2) >> 0x20) != 0;
    int32_t var_8 = temp1;
    int32_t rcx;
    rcx = rax_1;
    rcx &= 1;
    char var_2 = rcx;
    rax_1 &= 1;
    int32_t var_18;
    int32_t var_14;
    
    if ((rax_1 & 1) != 0)
    {
        var_18 = 0;
        var_14 = 0;
    }
    else
    {
        var_14 = temp1;
        var_18 = 1;
    }
    return var_18;
}

bool sub_140008740(int32_t arg1, int32_t arg2)
{
    int32_t var_10 = arg1;
    int32_t var_c = arg2;
    bool result = (arg1 + arg2) < arg1;
    int32_t var_8 = (arg1 + arg2);
    int32_t rcx;
    rcx = result;
    rcx &= 1;
    char var_1 = rcx;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140008780(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_20;
    
    if ((((arg1 + arg2) < arg1 & 1) & 1) == 0)
    {
        var_20 = (arg1 + arg2);
        return 1;
    }
    
    var_20 = 0;
    return 0;
}

bool sub_1400087f0(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    bool result = (arg1 + arg2) < arg1;
    int64_t var_10 = (arg1 + arg2);
    int64_t rcx;
    rcx = result;
    rcx &= 1;
    char var_1 = rcx;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140008830(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t result;
    int64_t rdx;
    rdx = HIGHQ((arg1 * arg2));
    result = LOWQ((arg1 * arg2));
    int64_t result_1 = result;
    result = ((arg1 * arg2) >> 0x40) != {0};
    int64_t result_2 = result_1;
    result_1 = result;
    result_1 &= 1;
    char var_1 = result_1;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140008880(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t result;
    result = arg1 < arg2;
    int64_t var_10 = (arg1 - arg2);
    int64_t rcx_1;
    rcx_1 = result;
    rcx_1 &= 1;
    char var_1 = rcx_1;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t j_sub_140049a90(uint64_t arg1, int64_t arg2)
{
    /* tailcall */
    return sub_140049a90(arg1, arg2);
}

int64_t j_sub_140049af0(void* arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return sub_140049af0(arg1, arg2, arg3);
}

int64_t j_sub_140049b20(void* arg1, int64_t arg2, int64_t arg3, uint64_t arg4)
{
    /* tailcall */
    return sub_140049b20(arg1, arg2, arg3, arg4);
}

int64_t j_sub_140049bc0(uint64_t arg1, int64_t arg2)
{
    /* tailcall */
    return sub_140049bc0(arg1, arg2);
}

void j_sub_14004e530() __noreturn
{
    /* tailcall */
    return sub_14004e530();
}

void sub_140008920() __noreturn
{
    void** const var_78 = &data_14005ec70;
    int64_t rcx;
    int64_t var_10 = rcx;
    int32_t var_14 = 0;
    int32_t var_1c = 0;
    int32_t var_24 = 0;
    int32_t var_2c = 0;
    char var_6c = 0;
    int32_t var_70 = 0;
    void var_30;
    void* var_8 = &var_30;
    void** const var_60 = &data_14005ec70;
    int64_t var_58 = 1;
    void* var_50 = &var_30;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t var_68 = sub_140008ce0(&var_70, &var_60);
    sub_1400094f0(&var_68);
    trap(0xd);
}

uint64_t sub_140008a00(int32_t arg1) __pure
{
    int32_t var_8 = arg1;
    int32_t var_4 = arg1;
    return arg1;
}

int32_t* sub_140008a20(int32_t* arg1, int32_t arg2)
{
    int32_t var_8 = arg2;
    int32_t var_4 = arg2;
    arg1[1] = arg2;
    *arg1 = 1;
    return arg1;
}

int64_t* sub_140008a50(int64_t* arg1, int32_t arg2)
{
    int32_t var_8 = arg2;
    int32_t var_4 = arg2;
    arg1[1] = arg2;
    *arg1 = 0;
    return arg1;
}

char const (** const )[0x1d] sub_140008a80(char* arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_10 = -2;
    char const* const var_128 = "#failed to write whole buffer";
    int64_t var_120 = 0x23;
    char const* const var_118 = "#failed to write whole buffer";
    int64_t var_110 = 0x23;
    char const* const var_108 = "#failed to write whole buffer";
    int64_t var_100 = 0x23;
    int64_t var_f8 = arg2;
    uint64_t var_f0 = arg3;
    char* var_a8 = arg1;
    
    while (true)
    {
        int64_t var_a0_1 = var_f8;
        uint64_t var_98_1 = var_f0;
        
        if (var_f0 == 0)
            break;
        
        int64_t rax_2;
        char const (** result_4)[0x1d];
        rax_2 = sub_14004cf00(arg1, var_f8, var_f0);
        char const (** result_1)[0x1d] = result_4;
        
        if (rax_2 == 0)
        {
            if (result_1 == 0)
                return &data_14005ecb0;
            
            char const (** result_3)[0x1d] = result_1;
            char const (** result_5)[0x1d] = result_3;
            int64_t var_88_1 = var_f8;
            uint64_t var_80_1 = var_f0;
            char const (** result_6)[0x1d] = result_3;
            int64_t rax_4;
            uint64_t rdx_3;
            rax_4 = sub_14000c2f0(result_3, var_f8, var_f0);
            var_f8 = rax_4;
            var_f0 = rdx_3;
        }
        else
        {
            int64_t* var_d0 = &result_1;
            int64_t** var_70_1 = &var_d0;
            int64_t* var_68_1 = &result_1;
            char var_c0;
            sub_14000a5d0(&var_c0, result_1);
            char var_c1_1;
            void* var_b8;
            
            switch (var_c0)
            {
                case 0:
                {
                    int32_t var_bc;
                    int32_t var_5c_1 = var_bc;
                label_140008c7d:
                    char const (** result)[0x1d] = result_1;
                    char const (** result_2)[0x1d] = result;
                    return result;
                    break;
                }
                case 1:
                {
                    char var_bf;
                    void* rax_9;
                    rax_9 = var_bf;
                    char var_a9 = rax_9;
                    char* var_58_1 = &var_a9;
                    uint64_t rax_11 = var_a9;
                    uint64_t var_50_1 = rax_11;
                    rax_11 = rax_11 == 0x23;
                    rax_11 &= 1;
                    var_c1_1 = rax_11;
                    break;
                }
                case 2:
                {
                    void* var_48_1 = var_b8;
                    void* var_40_1 = (var_b8 + 0x10);
                    uint64_t rax_13 = *(var_b8 + 0x10);
                    uint64_t var_38_1 = rax_13;
                    rax_13 = rax_13 == 0x23;
                    rax_13 &= 1;
                    var_c1_1 = rax_13;
                    break;
                }
                case 3:
                {
                    void* var_30_1 = var_b8;
                    void* var_28_1 = (var_b8 + 0x10);
                    uint64_t rax_15 = *(var_b8 + 0x10);
                    uint64_t var_20_1 = rax_15;
                    rax_15 = rax_15 == 0x23;
                    rax_15 &= 1;
                    var_c1_1 = rax_15;
                    break;
                }
            }
            
            if ((var_c1_1 & 1) == 0)
                goto label_140008c7d;
        }
        
        if (rax_2 == 1)
            sub_1400092f0(&result_1);
    }
    
    return nullptr;
}

void sub_140008cb0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x88) == 1)
        sub_1400092f0((arg2 + 0x90));
}

int64_t sub_140008ce0(int64_t arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    char const (** const var_78)[0x57] = &data_14005ed88;
    int64_t var_20 = arg1;
    int64_t var_68 = arg1;
    int64_t result = 0;
    
    if (((sub_140056fc0(&var_68, &data_14005ed98, arg2) & 1) & 1) == 0)
    {
        sub_1400094f0(&result);
        return 0;
    }
    
    int64_t* var_18_1 = &result;
    int64_t rax_2;
    rax_2 = result == 0;
    
    if ((rax_2 & 1) == 0)
        return result;
    
    char const (** const var_50)[0x57] = &data_14005ed88;
    int64_t var_48 = 1;
    int64_t var_30 = 0;
    int64_t var_40 = 8;
    int64_t var_38 = 0;
    sub_14005c700(&var_50);
    /* no return */
}

int64_t sub_140008dd0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140009090((arg2 + 0x40));
}

int64_t* sub_140008e00(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    return sub_14000b150(arg1);
}

void sub_140008e30(int64_t arg1, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_140009530();
    /* no return */
}

int64_t sub_140008e48(int64_t arg1) __pure
{
    return;
}

int64_t sub_140008e50(int64_t* arg1)
{
    int64_t* var_10 = arg1;
    return sub_140009790(sub_140008e80(arg1), "cannot access a Thread Local Sto…", 0x46);
}

int64_t sub_140008e80(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_40 = arg1;
    char var_41 = 1;
    int64_t* rax_1 = *arg1(0);
    int64_t* var_38 = rax_1;
    int64_t* var_30 = rax_1;
    
    if (rax_1 == 0)
    {
        int64_t var_50 = 0;
        int64_t var_58 = 0;
        return 0;
    }
    
    int64_t* var_28_1 = rax_1;
    int64_t* var_20_1 = rax_1;
    int64_t* var_18_1 = rax_1;
    char var_41_1 = 0;
    return sub_14000a470(rax_1);
}

int64_t sub_140008f30(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x57);
}

uint64_t sub_140008f60(int64_t* arg1, int32_t arg2)
{
    int64_t* var_30 = arg1;
    int32_t var_24 = arg2;
    void var_34;
    memset(&var_34, 0, 4);
    void* var_20 = &var_34;
    int64_t var_18 = 4;
    int64_t rax;
    uint64_t rdx_1;
    rax = sub_14000b1d0(arg2, &var_34, 4);
    int64_t var_10 = rax;
    uint64_t var_8 = rdx_1;
    return (sub_140009cd0(arg1, rax, rdx_1) & 1);
}

uint64_t sub_140008fe0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_8 = arg1;
    return (sub_140009a00(arg1, arg2) & 1);
}

int64_t sub_140009000(int64_t* arg1)
{
    return sub_140009640(arg1);
}

int64_t x7b7936fb::_Delete_this::operator[]::_ExceptionPtr_normal::_Delete_this()
{
    return sub_14000a490();
}

void* sub_140009030(int64_t* arg1)
{
    int64_t var_10 = -2;
    void var_19;
    return sub_14000a590(&var_19, arg1);
}

int64_t sub_140009070() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140009090(void* arg1)
{
    void* var_8 = arg1;
    return sub_1400094f0((arg1 + 8));
}

int64_t sub_1400090b0(char* arg1)
{
    char* var_8 = arg1;
    char rax = *arg1;
    
    if (rax < 3)
        return (rax - 3);
    
    return sub_140009350(&arg1[8]);
}

int64_t sub_1400090e0(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    int64_t rax_2 = *arg1[1];
    
    if (rax_2 != 0)
        rax_2(*arg1);
    
    return sub_140009950(arg1);
}

int64_t sub_140009130(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140009950(*(arg2 + 0x28));
}

int64_t sub_140009150(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_14005eec0;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_14005eec0;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140009270(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t* sub_140009290(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14000bd00(arg1);
}

int64_t* sub_1400092b0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t* result = *arg1;
    
    if (result != 0)
    {
        int64_t* result_1 = result;
        result -= 1;
        
        if (result_1 == 1)
            return sub_140009290(&arg1[1]);
    }
    
    return result;
}

int64_t sub_1400092f0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140009330(arg1);
}

int64_t sub_140009310(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_1400090e0(arg1);
}

int64_t sub_140009330(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14000bf00(arg1);
}

int64_t sub_140009350(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    sub_140009310(*arg1);
    return sub_1400098b0(arg1);
}

int64_t sub_140009390(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400098b0(*(arg2 + 0x28));
}

int64_t sub_1400093b0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_14005eec0;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_14005eec0;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_1400094d0(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_1400094f0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t result = 1;
    
    if (*arg1 == 0)
        result = 0;
    
    if (result != 0)
        return sub_1400092f0(arg1);
    
    return result;
}

void sub_140009530() __noreturn
{
    int64_t rcx;
    int64_t var_8 = rcx;
    sub_140008920();
    /* no return */
}

int64_t sub_14000953f() __pure
{
    return;
}

int64_t sub_140009550(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    
    if (arg1 != 0)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140009580(int64_t arg1)
{
    __builtin_memset(arg1, 0, 0x20);
    return arg1;
}

int64_t sub_140009610(int64_t arg1) __pure
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg1;
    int64_t var_8 = 0x20;
    return arg1;
}

int64_t sub_140009640(int64_t* arg1)
{
    int64_t* var_10 = arg1;
    int64_t result = *arg1;
    int64_t result_1 = result;
    *arg1 = 0;
    return result;
}

int64_t sub_140009670(int64_t arg1, int32_t* arg2)
{
    if (*arg2 == 0)
    {
        void var_38;
        memcpy(&var_38, &arg2[4], 0x30);
        memcpy(arg1, &var_38, 0x30);
        return arg1;
    }
    
    int32_t rdx_3 = arg2[1];
    int32_t var_4 = rdx_3;
    sub_14000a500(arg1, rdx_3);
    /* no return */
}

uint64_t sub_1400096e0(int32_t* arg1, int64_t* arg2)
{
    int32_t var_8c;
    
    if (*arg1 != 0)
    {
        int32_t rax_4 = arg1[1];
        int32_t var_4_1 = rax_4;
        var_8c = rax_4;
    }
    else
    {
        void var_88;
        memcpy(&var_88, &arg1[4], 0x30);
        int64_t var_50 = *arg2;
        int64_t var_48_1 = arg2[1];
        int64_t var_40_1 = arg2[2];
        void var_38;
        memcpy(&var_38, &var_88, 0x30);
        sub_14000a410(&var_50, &var_38);
        var_8c = 0;
    }
    
    return var_8c;
}

int64_t sub_140009790(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = -2;
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t rax = 0;
    
    if (arg1 == 0)
        rax = 1;
    
    if (rax == 0)
    {
        int64_t var_18 = arg1;
        return arg1;
    }
    
    int64_t r9;
    int64_t var_58 = r9;
    void var_29;
    sub_14005ca50(arg2, arg3, &var_29, &data_14005f070);
    /* no return */
}

int64_t sub_140009810() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

uint64_t sub_140009830(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int32_t rax_3 = sub_140009c80(sub_140009e20(arg2, arg3));
    int64_t rax_4 = 1;
    
    if (rax_3 == 0)
        rax_4 = 0;
    
    int32_t var_28;
    
    if (rax_4 != 0)
    {
        int32_t var_4_1 = rax_3;
        var_28 = sub_140008a00(rax_3);
    }
    else
        var_28 = 0;
    
    return var_28;
}

int64_t sub_1400098b0(int64_t* arg1)
{
    int64_t* var_48 = arg1;
    void* rax = *arg1;
    void* var_40 = rax;
    void* var_38 = rax;
    int64_t var_28 = 0x18;
    int64_t var_18 = 8;
    int64_t var_50 = 0x18;
    int64_t var_58 = 8;
    int64_t* var_10 = &var_58;
    void* var_8_1 = rax;
    return sub_14000bc10(&arg1[1], rax, var_58, var_50);
}

int64_t sub_140009950(int64_t* arg1)
{
    int64_t* var_58 = arg1;
    void* rax = *arg1;
    void* rcx = arg1[1];
    void* var_50 = rax;
    void* var_48 = rcx;
    void* var_40 = rax;
    void* var_38 = rcx;
    int64_t result = *(rcx + 8);
    int64_t result_1 = result;
    int64_t rcx_1 = *(rcx + 0x10);
    int64_t var_18 = rcx_1;
    int64_t var_68 = rcx_1;
    int64_t* var_10 = &var_68;
    
    if (result == 0)
        return result;
    
    void* var_8_1 = rax;
    return sub_14000bc10(&arg1[2], rax, var_68, result);
}

uint64_t sub_140009a00(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_68 = arg1;
    int64_t* var_60 = arg2;
    int64_t* rax = *arg2;
    int64_t rax_1 = arg2[1];
    int64_t rcx = arg2[3];
    int64_t var_80;
    uint64_t var_78;
    
    if (rax_1 != 0)
    {
        if ((rax_1 == 1 && rcx == 0))
        {
            int64_t* var_58_1 = rax;
            uint64_t rax_7 = rax[1];
            var_80 = *rax;
            var_78 = rax_7;
        }
        else
        {
            var_80 = 0;
            var_78 = 0;
        }
    }
    else if (rcx == 0)
    {
        var_80 = 1;
        var_78 = 0;
    }
    else
    {
        var_80 = 0;
        var_78 = 0;
    }
    int64_t* var_50 = &var_80;
    int64_t rax_4 = 1;
    
    if (var_80 == 0)
        rax_4 = 0;
    
    if (rax_4 == 1)
        char var_69 = 1;
    else
        char var_69_1 = 0;
    
    char var_41 = 0;
    void var_30;
    memcpy(&var_30, arg2, 0x30);
    return ((sub_140056fc0(arg1, &data_14005ed98, &var_30) & 1) & 1);
}

int64_t sub_140009ba0(int64_t arg1, int64_t arg2)
{
    int64_t var_18 = arg2;
    void* const var_10 = &data_14005f110;
    int64_t var_8 = 8;
    void var_48;
    sub_1400362f0(&var_48, arg2, &data_14005f110, 8);
    memcpy(arg1, &var_48, 0x30);
    return arg1;
}

int64_t* sub_140009c00(int64_t* arg1, int64_t* arg2)
{
    int64_t rax = 0;
    
    if (*arg2 == 0)
        rax = 1;
    
    if (rax != 0)
    {
        int32_t rcx_3 = arg2[1];
        int32_t var_4_1 = rcx_3;
        arg1[1] = rcx_3;
        *arg1 = 0;
    }
    else
    {
        int64_t rdx_1 = *arg2;
        int64_t rcx_1 = arg2[1];
        int64_t var_18_1 = rdx_1;
        int64_t var_10_1 = rcx_1;
        *arg1 = rdx_1;
        arg1[1] = rcx_1;
    }
    
    return arg1;
}

uint64_t sub_140009c80(int32_t arg1) __pure
{
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    int32_t var_10;
    
    if (rax != 0)
    {
        int32_t var_4_1 = arg1;
        var_10 = arg1;
    }
    else
        var_10 = 0;
    
    return var_10;
}

uint64_t sub_140009cd0(int64_t* arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_10 = -2;
    char const (** var_50)[0x1d] = arg1;
    int64_t* var_30 = arg1;
    int64_t var_28 = arg2;
    uint64_t var_20 = arg3;
    char const (** rax)[0x1d] = sub_140008a80(*arg1, arg2, arg3);
    char const (** rax_1)[0x1d];
    rax_1 = rax == 0;
    char var_41;
    
    if ((rax_1 & 1) != 0)
        var_41 = 0;
    else
    {
        char const (** var_18_1)[0x1d] = rax;
        sub_1400094f0(&var_50[1]);
        var_50[1] = rax;
        var_41 = 1;
    }
    
    rax_1 = var_41;
    rax_1 &= 1;
    return rax_1;
}

void* sub_140009d50(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0x28);
    *(result + 8) = *(arg2 + 0x40);
    return result;
}

int64_t* sub_140009d70(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    char rax_2 = sub_14000b5f0(arg2, arg3);
    int32_t rax_4;
    int64_t rax_5;
    
    if ((rax_2 & 1) == 0)
    {
        rax_4 = sub_140009c80(sub_140037d50(arg2, arg3));
        rax_5 = 1;
        
        if (rax_4 == 0)
            rax_5 = 0;
    }
    
    if (((rax_2 & 1) == 0 && rax_5 != 0))
    {
        int32_t var_14_1 = rax_4;
        sub_140008a50(arg1, rax_4);
    }
    else
    {
        int64_t var_10_1 = arg2;
        int64_t var_8_1 = arg3;
        *arg1 = arg2;
        arg1[1] = arg3;
    }
    
    return arg1;
}

uint64_t sub_140009e20(int64_t arg1, int64_t arg2)
{
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    void var_48;
    sub_140009d70(&var_48, arg1, arg2);
    int64_t var_58;
    sub_140009c00(&var_58, &var_48);
    int64_t rax = 0;
    
    if (var_58 == 0)
        rax = 1;
    
    int32_t var_5c;
    int32_t var_50;
    
    if (rax != 0)
    {
        int32_t var_14_1 = var_50;
        var_5c = sub_140008a00(var_50);
    }
    else
    {
        int64_t var_28_1 = var_58;
        int64_t var_20_1 = var_50;
        var_5c = 0;
    }
    return var_5c;
}

int32_t* sub_140009ec0(int32_t* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_b8 = arg2;
    char var_2d = 0;
    int128_t var_ac;
    sub_140009580(&var_ac);
    char var_2d_1 = 1;
    int64_t rax = sub_140009610(&var_ac);
    int64_t* var_28 = &var_b8;
    int64_t var_20 = rax;
    int64_t var_18 = 0x20;
    int32_t rax_2 = sub_140009c80(sub_140009830(var_b8, rax, 0x20));
    int32_t rax_3;
    rax_3 = rax_2 == 0;
    
    if ((rax_3 & 1) != 0)
    {
        char var_2d_2 = 0;
        int128_t var_9c;
        int128_t var_48_1 = var_9c;
        int128_t var_58 = var_ac;
        void var_88;
        sub_140009ba0(&var_88, &var_58);
        memcpy(&arg1[4], &var_88, 0x30);
        *arg1 = 0;
        char var_2d_3 = 0;
    }
    else
    {
        int32_t var_2c_1 = rax_2;
        sub_140008a20(arg1, rax_2);
        char var_2d_4 = 0;
    }
    
    return arg1;
}

int64_t sub_140009fd0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140009ff0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xdb);
}

int32_t* sub_14000a020(int32_t* arg1)
{
    int64_t var_10 = -2;
    char var_15 = 0;
    char var_15_1 = 1;
    int128_t var_8c;
    sub_140009580(&var_8c);
    int32_t rax_2 = sub_140009c80(sub_140009e20(sub_140009610(&var_8c), 0x20));
    int32_t rax_3;
    rax_3 = rax_2 == 0;
    
    if ((rax_3 & 1) != 0)
    {
        char var_15_2 = 0;
        int128_t var_7c;
        int128_t var_28_1 = var_7c;
        int128_t var_38 = var_8c;
        void var_68;
        sub_140009ba0(&var_68, &var_38);
        memcpy(&arg1[4], &var_68, 0x30);
        *arg1 = 0;
        char var_15_3 = 0;
    }
    else
    {
        int32_t var_14_1 = rax_2;
        sub_140008a20(arg1, rax_2);
        char var_15_4 = 0;
    }
    
    return arg1;
}

int64_t sub_14000a110(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xd3);
}

void* sub_14000a140(void* arg1, int128_t* arg2)
{
    int64_t var_10 = -2;
    char var_11 = 0;
    char var_11_1 = 1;
    void var_258;
    sub_14000f040(&var_258);
    char var_11_2 = 0;
    int128_t var_128 = arg2[3];
    int128_t var_138 = arg2[2];
    int128_t var_148 = arg2[1];
    int128_t var_158 = *arg2;
    void var_114;
    memcpy(&var_114, &var_258, 0x100);
    memcpy(arg1, &var_114, 0x100);
    *(arg1 + 0x100) = 0x40;
    memcpy((arg1 + 0x110), &var_158, 0x40);
    return arg1;
}

int64_t sub_14000a230(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x287);
}

int64_t sub_14000a260() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14000a280(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg3;
    void var_58;
    sub_14000a2e0(&var_58, arg2, arg3);
    void var_1a8;
    sub_14000a140(&var_1a8, &var_58);
    memcpy(arg1, &var_1a8, 0x150);
    return arg1;
}

void* sub_14000a2e0(void* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg3;
    int64_t var_18;
    
    if (arg3 == 0)
        var_18 = 0x7fffffffffffffff;
    else if (arg3 <= 0x7fffffffffffffff)
        var_18 = arg3;
    else
        var_18 = 0x7fffffffffffffff;
    
    memcpy(arg1, arg2, 0x30);
    *(arg1 + 0x30) = var_18;
    *(arg1 + 0x38) = var_18;
    return arg1;
}

uint64_t sub_14000a3a0(int64_t arg1)
{
    int64_t var_8 = arg1;
    void var_68;
    sub_140009ec0(&var_68, (arg1 + 0x40));
    int64_t var_20 = arg1;
    int64_t var_18 = (arg1 + 0x30);
    int64_t var_10 = (arg1 + 0x38);
    return sub_1400096e0(&var_68, &var_20);
}

int64_t sub_14000a410(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = arg1[1];
    int64_t var_8 = arg1[2];
    *arg1[2] = *arg1[1];
    return memcpy(*arg1, arg2, 0x30);
}

int64_t sub_14000a450()
{
    int64_t result = sub_140008e50(&data_14005f240);
    int64_t result_1 = result;
    return result;
}

int64_t sub_14000a470(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14000bcb0(arg1);
}

int64_t sub_14000a490()
{
    void var_2e8;
    sub_14000a020(&var_2e8);
    void var_318;
    sub_140009670(&var_318, &var_2e8);
    void var_2a8;
    sub_14000a280(&var_2a8, &var_318, 0x10000);
    void var_158;
    memcpy(&var_158, &var_2a8, 0x150);
    return sub_14000b720(&var_158);
}

void sub_14000a500(int64_t arg1, int32_t arg2) __noreturn
{
    int32_t var_8c = arg2;
    int32_t* var_18 = &var_8c;
    uint64_t (* var_10)(int32_t* arg1, int64_t* arg2) = sub_140037890;
    int32_t* var_8 = &var_8c;
    uint64_t (* var_20)(int32_t* arg1, int64_t* arg2) = sub_140037890;
    int128_t var_58 = &var_8c;
    void var_88;
    sub_140037300(&var_88, &data_14005f2f8, &var_58);
    sub_14005c700(&var_88);
    /* no return */
}

void* sub_14000a590(int64_t arg1, int64_t* arg2)
{
    int64_t var_10 = arg1;
    int64_t* var_8 = arg2;
    TEB* gsbase;
    return sub_14000b030((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 8), arg2);
}

char* sub_14000a5d0(char* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_e8 = 0;
    int32_t var_dc = 0x20;
    char var_d5 = 3;
    int32_t var_d4 = 0xc;
    int64_t var_d0 = 2;
    int64_t var_c0 = 0;
    int64_t var_b8;
    __builtin_memcpy(&var_b8, "\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x20);
    int64_t var_98 = 0;
    int64_t var_90 = 1;
    int64_t var_88 = -1;
    int64_t var_70 = arg2;
    char var_71 = 1;
    int64_t var_68 = arg2;
    int64_t var_60 = arg2;
    int64_t var_80 = arg2;
    uint64_t rax_1 = (var_80 & 3);
    
    if (rax_1 > 3)
    {
        sub_14005c7a0("internal error: entered unreacha…");
        /* no return */
    }
    
    switch (rax_1)
    {
        case 0:
        {
            int64_t var_40_1 = arg2;
            *(arg1 + 8) = arg2;
            *arg1 = 2;
            break;
        }
        case 1:
        {
            int64_t var_38_1 = arg2;
            int64_t var_28_1 = (arg2 - 1);
            int64_t var_20_1 = (arg2 - 1);
            int64_t var_18_1 = (arg2 - 1);
            char var_71_1 = 0;
            *(arg1 + 8) = sub_14000adf0((arg2 - 1));
            *arg1 = 3;
            break;
        }
        case 2:
        {
            int32_t rcx_1 = (var_80 >> 0x20);
            int32_t var_58_1 = rcx_1;
            *(arg1 + 4) = rcx_1;
            *arg1 = 0;
            break;
        }
        case 3:
        {
            int32_t rcx_2 = *var_80[4];
            int32_t var_54_1 = rcx_2;
            char rax_7 = sub_14000a9b0(rcx_2);
            int64_t* var_50_1 = &var_80;
            
            if ((rax_7 == 0x29 & 1) != 0)
            {
                sub_14000b5d0();
                /* no return */
            }
            
            rcx_2 = rax_7;
            char var_41_1 = rcx_2;
            arg1[1] = rcx_2;
            *arg1 = 1;
            break;
        }
    }
    
    return arg1;
}

int64_t sub_14000a790(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xc7);
}

char* sub_14000a7c0(char* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_e8 = 0;
    int32_t var_dc = 0x20;
    char var_d5 = 3;
    int32_t var_d4 = 0xc;
    int64_t var_d0 = 2;
    int64_t var_c0 = 0;
    int64_t var_b8;
    __builtin_memcpy(&var_b8, "\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x20);
    int64_t var_98 = 0;
    int64_t var_90 = 1;
    int64_t var_88 = -1;
    int64_t var_70 = arg2;
    char var_71 = 1;
    int64_t var_68 = arg2;
    int64_t var_60 = arg2;
    int64_t var_80 = arg2;
    uint64_t rax_1 = (var_80 & 3);
    
    if (rax_1 > 3)
    {
        sub_14005c7a0("internal error: entered unreacha…");
        /* no return */
    }
    
    switch (rax_1)
    {
        case 0:
        {
            int64_t var_40_1 = arg2;
            *(arg1 + 8) = arg2;
            *arg1 = 2;
            break;
        }
        case 1:
        {
            int64_t var_38_1 = arg2;
            int64_t var_28_1 = (arg2 - 1);
            int64_t var_20_1 = (arg2 - 1);
            int64_t var_18_1 = (arg2 - 1);
            char var_71_1 = 0;
            *(arg1 + 8) = sub_14000bf30((arg2 - 1));
            *arg1 = 3;
            break;
        }
        case 2:
        {
            int32_t rcx_1 = (var_80 >> 0x20);
            int32_t var_58_1 = rcx_1;
            *(arg1 + 4) = rcx_1;
            *arg1 = 0;
            break;
        }
        case 3:
        {
            int32_t rcx_2 = *var_80[4];
            int32_t var_54_1 = rcx_2;
            char rax_7 = sub_14000a9b0(rcx_2);
            int64_t* var_50_1 = &var_80;
            
            if ((rax_7 == 0x29 & 1) != 0)
            {
                sub_14000b5d0();
                /* no return */
            }
            
            rcx_2 = rax_7;
            char var_41_1 = rcx_2;
            arg1[1] = rcx_2;
            *arg1 = 1;
            break;
        }
    }
    
    return arg1;
}

int64_t sub_14000a980(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xc7);
}

int32_t* sub_14000a9b0(int32_t arg1) __pure
{
    int32_t var_150 = arg1;
    int32_t* var_148 = &var_150;
    char var_149;
    
    if (var_150 != 0)
    {
        int32_t* var_140_1 = &var_150;
        
        if (var_150 == 1)
            var_149 = 1;
        else
        {
            int32_t* var_138_1 = &var_150;
            
            if (var_150 != 2)
            {
                int32_t* var_130_1 = &var_150;
                
                if (var_150 != 3)
                {
                    int32_t* var_128_1 = &var_150;
                    
                    if (var_150 != 4)
                    {
                        int32_t* var_120_1 = &var_150;
                        
                        if (var_150 != 5)
                        {
                            int32_t* var_118_1 = &var_150;
                            
                            if (var_150 != 6)
                            {
                                int32_t* var_110_1 = &var_150;
                                
                                if (var_150 != 7)
                                {
                                    int32_t* var_108_1 = &var_150;
                                    
                                    if (var_150 != 8)
                                    {
                                        int32_t* var_100_1 = &var_150;
                                        
                                        if (var_150 != 9)
                                        {
                                            int32_t* var_f8_1 = &var_150;
                                            
                                            if (var_150 != 0xa)
                                            {
                                                int32_t* var_f0_1 = &var_150;
                                                
                                                if (var_150 != 0xb)
                                                {
                                                    int32_t* var_e8_1 = &var_150;
                                                    
                                                    if (var_150 != 0xc)
                                                    {
                                                        int32_t* var_e0_1 = &var_150;
                                                        
                                                        if (var_150 != 0xd)
                                                        {
                                                            int32_t* var_d8_1 = &var_150;
                                                            
                                                            if (var_150 != 0xe)
                                                            {
                                                                int32_t* var_d0_1 = &var_150;
                                                                
                                                                if (var_150 != 0xf)
                                                                {
                                                                    int32_t* var_c8_1 = &var_150;
                                                                    
                                                                    if (var_150 != 0x10)
                                                                    {
                                                                        int32_t* var_c0_1 = &var_150;
                                                                        
                                                                        if (var_150 != 0x11)
                                                                        {
                                                                            int32_t* var_b8_1 = &var_150;
                                                                            
                                                                            if (var_150 != 0x12)
                                                                            {
                                                                                int32_t* var_b0_1 = &var_150;
                                                                                
                                                                                if (var_150 != 0x13)
                                                                                {
                                                                                    int32_t* var_a8_1 = &var_150;
                                                                                    
                                                                                    if (var_150 != 0x14)
                                                                                    {
                                                                                        int32_t* var_a0_1 = &var_150;
                                                                                        
                                                                                        if (var_150 != 0x15)
                                                                                        {
                                                                                            int32_t* var_98_1 = &var_150;
                                                                                            
                                                                                            if (var_150 != 0x16)
                                                                                            {
                                                                                                int32_t* var_90_1 = &var_150;
                                                                                                
                                                                                                if (var_150 != 0x17)
                                                                                                {
                                                                                                    int32_t* var_88_1 = &var_150;
                                                                                                    
                                                                                                    if (var_150 != 0x18)
                                                                                                    {
                                                                                                        int32_t* var_80_1 = &var_150;
                                                                                                        
                                                                                                        if (var_150 != 0x19)
                                                                                                        {
                                                                                                            int32_t* var_78_1 = &var_150;
                                                                                                            
                                                                                                            if (var_150 != 0x1a)
                                                                                                            {
                                                                                                                int32_t* var_70_1 = &var_150;
                                                                                                                
                                                                                                                if (var_150 != 0x1b)
                                                                                                                {
                                                                                                                    int32_t* var_68_1 = &var_150;
                                                                                                                    
                                                                                                                    if (var_150 != 0x1c)
                                                                                                                    {
                                                                                                                        int32_t* var_60_1 = &var_150;
                                                                                                                        
                                                                                                                        if (var_150 != 0x1d)
                                                                                                                        {
                                                                                                                            int32_t* var_58_1 = &var_150;
                                                                                                                            
                                                                                                                            if (var_150 != 0x1e)
                                                                                                                            {
                                                                                                                                int32_t* var_50_1 = &var_150;
                                                                                                                                
                                                                                                                                if (var_150 != 0x1f)
                                                                                                                                {
                                                                                                                                    int32_t* var_48_1 = &var_150;
                                                                                                                                    
                                                                                                                                    if (var_150 != 0x20)
                                                                                                                                    {
                                                                                                                                        int32_t* var_40_1 = &var_150;
                                                                                                                                        
                                                                                                                                        if (var_150 != 0x21)
                                                                                                                                        {
                                                                                                                                            int32_t* var_38_1 = &var_150;
                                                                                                                                            
                                                                                                                                            if (var_150 != 0x22)
                                                                                                                                            {
                                                                                                                                                int32_t* var_30_1 = &var_150;
                                                                                                                                                
                                                                                                                                                if (var_150 != 0x23)
                                                                                                                                                {
                                                                                                                                                    int32_t* var_28_1 = &var_150;
                                                                                                                                                    
                                                                                                                                                    if (var_150 != 0x27)
                                                                                                                                                    {
                                                                                                                                                        int32_t* var_20_1 = &var_150;
                                                                                                                                                        
                                                                                                                                                        if (var_150 != 0x25)
                                                                                                                                                        {
                                                                                                                                                            int32_t* var_18_1 = &var_150;
                                                                                                                                                            
                                                                                                                                                            if (var_150 != 0x24)
                                                                                                                                                            {
                                                                                                                                                                int32_t* var_10_1 = &var_150;
                                                                                                                                                                
                                                                                                                                                                if (var_150 != 0x26)
                                                                                                                                                                {
                                                                                                                                                                    int32_t* var_8_1 = &var_150;
                                                                                                                                                                    
                                                                                                                                                                    if (var_150 != 0x28)
                                                                                                                                                                        var_149 = 0x29;
                                                                                                                                                                    else
                                                                                                                                                                        var_149 = 0x28;
                                                                                                                                                                }
                                                                                                                                                                else
                                                                                                                                                                    var_149 = 0x26;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                                var_149 = 0x24;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                            var_149 = 0x25;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                        var_149 = 0x27;
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                    var_149 = 0x23;
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                                var_149 = 0x22;
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                            var_149 = 0x21;
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                        var_149 = 0x20;
                                                                                                                                }
                                                                                                                                else
                                                                                                                                    var_149 = 0x1f;
                                                                                                                            }
                                                                                                                            else
                                                                                                                                var_149 = 0x1e;
                                                                                                                        }
                                                                                                                        else
                                                                                                                            var_149 = 0x1d;
                                                                                                                    }
                                                                                                                    else
                                                                                                                        var_149 = 0x1c;
                                                                                                                }
                                                                                                                else
                                                                                                                    var_149 = 0x1b;
                                                                                                            }
                                                                                                            else
                                                                                                                var_149 = 0x1a;
                                                                                                        }
                                                                                                        else
                                                                                                            var_149 = 0x19;
                                                                                                    }
                                                                                                    else
                                                                                                        var_149 = 0x18;
                                                                                                }
                                                                                                else
                                                                                                    var_149 = 0x17;
                                                                                            }
                                                                                            else
                                                                                                var_149 = 0x16;
                                                                                        }
                                                                                        else
                                                                                            var_149 = 0x15;
                                                                                    }
                                                                                    else
                                                                                        var_149 = 0x14;
                                                                                }
                                                                                else
                                                                                    var_149 = 0x13;
                                                                            }
                                                                            else
                                                                                var_149 = 0x12;
                                                                        }
                                                                        else
                                                                            var_149 = 0x11;
                                                                    }
                                                                    else
                                                                        var_149 = 0x10;
                                                                }
                                                                else
                                                                    var_149 = 0xf;
                                                            }
                                                            else
                                                                var_149 = 0xe;
                                                        }
                                                        else
                                                            var_149 = 0xd;
                                                    }
                                                    else
                                                        var_149 = 0xc;
                                                }
                                                else
                                                    var_149 = 0xb;
                                            }
                                            else
                                                var_149 = 0xa;
                                        }
                                        else
                                            var_149 = 9;
                                    }
                                    else
                                        var_149 = 8;
                                }
                                else
                                    var_149 = 7;
                            }
                            else
                                var_149 = 6;
                        }
                        else
                            var_149 = 5;
                    }
                    else
                        var_149 = 4;
                }
                else
                    var_149 = 3;
            }
            else
                var_149 = 2;
        }
    }
    else
        var_149 = 0;
    
    int32_t* result;
    result = var_149;
    return result;
}

int64_t sub_14000adf0(int64_t arg1) __pure
{
    int64_t var_8 = arg1;
    return arg1;
}

void* sub_14000ae10(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_48 = arg1;
    char var_51 = 1;
    int64_t* rax;
    rax = arg2 == 0;
    int64_t var_b8;
    
    if ((rax & 1) != 0)
    {
        int64_t var_b0 = 0;
        char var_51_1 = 0;
        var_b8 = x7b7936fb::_Delete_this::operator[]::_ExceptionPtr_normal::_Delete_this();
    }
    else
    {
        int64_t* var_40_1 = arg2;
        int64_t rax_1 = sub_140009000(arg2);
        char var_51_2 = 0;
        int64_t rax_4;
        rax_4 = rax_1 == 0;
        
        if ((rax_4 & 1) != 0)
            var_b8 = x7b7936fb::_Delete_this::operator[]::_ExceptionPtr_normal::_Delete_this();
        else
        {
            int64_t var_38_1 = rax_1;
            var_b8 = rax_1;
        }
    }
    
    int64_t* var_30 = arg1;
    int64_t* var_28 = arg1;
    int64_t var_98 = 1;
    sub_1400093b0(arg1, 8);
    int64_t rcx_2 = arg1[1];
    int64_t var_a8 = *arg1;
    *arg1 = var_98;
    arg1[1] = var_b8;
    char var_52 = 1;
    
    if (var_a8 != 0)
    {
        char var_52_1 = 0;
        int64_t rcx_5 = var_a8;
        int64_t var_20_1 = rcx_5;
        int64_t var_18_1 = rcx_2;
        int64_t var_88 = rcx_5;
        int64_t var_80_1 = rcx_2;
        sub_1400092b0(&var_88);
        int64_t* var_68_1 = arg1;
        
        if (*arg1 == 1)
        {
            void* var_78_1 = &arg1[1];
            return &arg1[1];
        }
    }
    else
    {
        sub_14000bf60(arg1);
        int64_t* var_68 = arg1;
        
        if (*arg1 == 1)
        {
            void* var_78 = &arg1[1];
            sub_1400092b0(&var_a8);
            return &arg1[1];
        }
    }
    
    sub_14000b5d0();
    /* no return */
}

int64_t sub_14000afd0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xb7);
}

void sub_14000b000(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xb6) & 1) == 0)
        return;
    
    sub_1400092b0((arg2 + 0x60));
}

void* sub_14000b030(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t var_50 = 0;
    int64_t var_48 = 0;
    int64_t* var_38 = arg1;
    int64_t* var_30 = arg2;
    int64_t* var_28 = arg1;
    int64_t* var_20 = arg1;
    int64_t rax = *arg1;
    
    if (rax == 0)
        return sub_14000ae10(arg1, arg2);
    
    if (rax != 1)
        return nullptr;
    
    void* var_18_1 = &arg1[1];
    return &arg1[1];
}

int64_t sub_14000b0e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t* sub_14000b100(int64_t arg1)
{
    int64_t var_10 = -2;
    int64_t var_18 = arg1;
    return sub_140008e00(&var_18);
}

void sub_14000b130(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t* sub_14000b150(int64_t* arg1)
{
    int64_t* var_30 = arg1;
    int64_t* rax = *arg1;
    int64_t* var_28 = rax;
    int64_t* var_20 = rax;
    int64_t* var_18 = rax;
    sub_1400093b0(rax, 8);
    int64_t rcx_1 = *rax;
    int64_t rax_1 = rax[1];
    int64_t var_10 = rcx_1;
    int64_t var_8 = rax_1;
    *rax = 2;
    int64_t var_48;
    rax[1] = var_48;
    int64_t var_40 = rcx_1;
    int64_t var_38 = rax_1;
    return sub_1400092b0(&var_40);
}

int64_t sub_14000b1d0(int32_t arg1, char* arg2, int64_t arg3)
{
    char const (** const var_1a0)[0x3b] = &data_14005f420;
    int32_t var_194 = arg1;
    char* var_c0 = arg2;
    int64_t var_b8 = arg3;
    int32_t rax = var_194;
    int32_t var_ac = rax;
    int64_t var_190;
    
    if (rax < 0x80)
        var_190 = 1;
    else if (rax < 0x800)
        var_190 = 2;
    else if (rax < 0x10000)
        var_190 = 3;
    else
        var_190 = 4;
    
    if ((var_190 - 1) <= 3)
        switch (var_190)
        {
            case 1:
            {
                if (arg3 >= 1)
                {
                    char* var_a8_1 = arg2;
                    *arg2 = var_194;
                label_14000b453:
                    int64_t rdx_1 = var_190;
                    int64_t var_58 = rdx_1;
                    return sub_140037100(0, rdx_1, arg2, arg3, &data_14005f450[0x50]);
                }
                break;
            }
            case 2:
            {
                if (arg3 >= 2)
                {
                    char* var_a0_1 = arg2;
                    void* var_98_1 = &arg2[1];
                    *arg2 = (((var_194 >> 6) & 0x1f) | 0xc0);
                    arg2[1] = ((var_194 & 0x3f) | 0x80);
                    goto label_14000b453;
                }
                break;
            }
            case 3:
            {
                if (arg3 >= 3)
                {
                    char* var_90_1 = arg2;
                    void* var_88_1 = &arg2[1];
                    void* var_80_1 = &arg2[2];
                    *arg2 = (((var_194 >> 0xc) & 0xf) | 0xe0);
                    arg2[1] = (((var_194 >> 6) & 0x3f) | 0x80);
                    arg2[2] = ((var_194 & 0x3f) | 0x80);
                    goto label_14000b453;
                }
                break;
            }
            case 4:
            {
                if (arg3 >= 4)
                {
                    char* var_78_1 = arg2;
                    void* var_70_1 = &arg2[1];
                    void* var_68_1 = &arg2[2];
                    void* var_60_1 = &arg2[3];
                    *arg2 = (((var_194 >> 0x12) & 7) | 0xf0);
                    arg2[1] = (((var_194 >> 0xc) & 0x3f) | 0x80);
                    arg2[2] = (((var_194 >> 6) & 0x3f) | 0x80);
                    arg2[3] = ((var_194 & 0x3f) | 0x80);
                    goto label_14000b453;
                }
                break;
            }
        }
    
    int64_t* var_50 = &var_190;
    uint64_t (* var_48)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_40 = &var_190;
    uint64_t (* var_e8)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int128_t var_128 = &var_190;
    int32_t* var_38 = &var_194;
    uint64_t (* var_30)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
    int32_t* var_28 = &var_194;
    uint64_t (* var_d8)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
    int128_t var_118 = &var_194;
    int64_t var_f8 = arg3;
    int64_t* var_20 = &var_f8;
    uint64_t (* var_18)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_10 = &var_f8;
    uint64_t (* var_c8)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int128_t var_108 = &var_f8;
    int128_t var_158 = var_128;
    int128_t var_148 = var_118;
    int128_t var_138 = var_108;
    int128_t* var_8 = &var_158;
    char const (** const var_188)[0x3b] = &data_14005f420;
    int64_t var_180 = 3;
    int64_t var_168 = 0;
    int64_t var_160 = 0;
    int128_t* var_178 = &var_158;
    int64_t var_170 = 3;
    sub_14005c700(&var_188);
    /* no return */
}

int64_t sub_14000b5a0(char arg1)
{
    char result = (arg1 & 1);
    char result_1 = result;
    
    if ((arg1 & 1) != 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_14000b5d0() __noreturn
{
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

uint64_t sub_14000b5f0(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    return (arg2 == 0 & 1);
}

int64_t sub_14000b610(int64_t arg1) __pure
{
    int64_t rax;
    int64_t var_8_1 = rax;
    return arg1;
}

int64_t sub_14000b620(int64_t* arg1)
{
    int64_t* var_70 = arg1;
    int64_t var_58 = 1;
    int64_t* var_50 = arg1;
    int64_t rax = sub_14000b700(arg1);
    int64_t var_68 = rax;
    int64_t var_48 = rax;
    rax = rax != 0;
    char var_59 = rax;
    rax &= 1;
    char var_39 = rax;
    arg1 = var_59;
    arg1 &= 1;
    sub_14000b5a0(arg1);
    int64_t var_38 = (var_68 + 1);
    int64_t* var_8 = var_70;
    int64_t* var_30 = var_70;
    int64_t* var_28 = var_70;
    int64_t* var_20 = var_70;
    int64_t var_18 = *var_70;
    *var_70 = (var_68 + 1);
    int64_t result;
    result = var_68 == -1;
    result &= 1;
    
    if ((result & 1) != 0)
        trap(6);
    
    return result;
}

int64_t sub_14000b6d0(void* arg1)
{
    void* var_20 = arg1;
    void* var_8 = arg1;
    void* var_18 = (arg1 + 8);
    void* var_10 = (arg1 + 8);
    return *(arg1 + 8);
}

int64_t sub_14000b700(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    int64_t* var_8 = arg1;
    int64_t* var_18 = arg1;
    int64_t* var_10 = arg1;
    return *arg1;
}

int64_t sub_14000b720(int64_t arg1)
{
    int64_t var_10 = -2;
    int64_t var_1c8;
    __builtin_memcpy(&var_1c8, "\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x30);
    void var_198;
    memcpy(&var_198, arg1, 0x150);
    int64_t result_4 = sub_14000b830(0x160, 0x10);
    int64_t var_1a8;
    memcpy(result_4, &var_1a8, 0x160);
    int64_t result_5 = result_4;
    int64_t result_1 = result_4;
    int64_t* var_38 = &result_1;
    int64_t result = result_1;
    int64_t result_2 = result;
    int64_t* var_28 = &result_1;
    int64_t* var_20 = &result_5;
    int64_t result_3 = result;
    return result;
}

int64_t sub_14000b810() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14000b830(uint64_t arg1, int64_t arg2)
{
    int64_t var_60 = arg2;
    uint64_t var_58 = arg1;
    int64_t var_50 = 1;
    uint64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg2;
    uint64_t var_20 = arg1;
    int64_t result;
    int64_t rdx;
    result = sub_14000b940(1, arg2, arg1, 0);
    int64_t rax = 0;
    
    if (result == 0)
        rax = 1;
    
    if (rax != 0)
    {
        sub_14005c5f0();
        /* no return */
    }
    
    int64_t result_1 = result;
    int64_t var_10 = rdx;
    int64_t result_2 = result;
    return result;
}

int64_t sub_14000b8d0(int64_t arg1, uint64_t arg2)
{
    char* var_40 = &data_140071141;
    int64_t var_38 = arg1;
    sub_140009150(&data_140071141, 1);
    char var_19 = data_140071141;
    int64_t* var_18 = &var_38;
    int64_t* var_10 = &var_38;
    int64_t rax_1 = var_38;
    int64_t var_8 = rax_1;
    return j_sub_140049a90(arg2, rax_1);
}

int64_t sub_14000b940(int64_t arg1, int64_t arg2, uint64_t arg3, char arg4)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t result_3 = arg2;
    int64_t var_90 = arg1;
    char var_81 = (arg4 & 1);
    int64_t* var_80 = &result_3;
    uint64_t var_78 = arg3;
    int64_t result;
    uint64_t var_100;
    
    if (arg3 != 0)
    {
        uint64_t rax;
        rax = arg4;
        int64_t result_1;
        
        if ((rax & 1) != 0)
        {
            int64_t result_15 = result_3;
            uint64_t var_e0_1 = arg3;
            int64_t* var_50_1 = &result_15;
            int64_t* var_48_1 = &result_15;
            int64_t result_16 = result_3;
            int64_t result_17 = result_16;
            result_1 = j_sub_140049bc0(arg3, result_16);
        }
        else
            result_1 = sub_14000b8d0(result_3, arg3);
        
        int64_t result_9 = result_1;
        
        if (result_1 != 0)
        {
            sub_140009550(result_1);
            int64_t result_10 = result_1;
            int64_t result_11 = result_1;
            int64_t result_12 = result_1;
            int64_t result_13 = result_1;
            int64_t result_14 = result_1;
            uint64_t var_8_1 = arg3;
            sub_140009550(result_1);
            result = result_1;
            var_100 = arg3;
        }
        else
        {
            int64_t var_c8_1 = 0;
            int64_t var_d0_1 = 0;
            result = 0;
            var_100 = 0;
        }
    }
    else
    {
        int64_t* var_70_1 = &result_3;
        int64_t result_2 = result_3;
        int64_t result_6 = result_2;
        int64_t result_7 = result_2;
        int64_t result_8 = result_2;
        sub_140009550(result_2);
        int64_t result_4 = result_2;
        int64_t result_5 = result_2;
        uint64_t var_a8_1 = 0;
        sub_140009550(result_2);
        result = result_2;
        var_100 = var_a8_1;
    }
    return result;
}

int64_t sub_14000bc10(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_60 = arg3;
    int64_t var_38 = arg1;
    void* var_30 = arg2;
    int64_t* var_28 = &var_60;
    
    if (arg4 == 0)
        return arg4;
    
    void* var_20_1 = arg2;
    int64_t var_50 = var_60;
    int64_t var_48_1 = arg4;
    int64_t* var_18_1 = &var_50;
    int64_t* var_10_1 = &var_50;
    int64_t rax_2 = var_60;
    int64_t var_8_1 = rax_2;
    return j_sub_140049af0(arg2, arg4, rax_2);
}

int64_t sub_14000bcb0(int64_t* arg1)
{
    int64_t* var_30 = arg1;
    int64_t* var_20 = arg1;
    int64_t* rcx = *arg1;
    int64_t* var_18 = rcx;
    int64_t* var_10 = rcx;
    sub_14000b620(rcx);
    int64_t result = *arg1;
    int64_t result_1 = result;
    return result;
}

int64_t* sub_14000bd00(int64_t* arg1)
{
    int64_t* var_138 = arg1;
    int64_t* var_130 = arg1;
    int64_t* rcx = *arg1;
    int64_t* var_128 = rcx;
    int64_t* var_120 = rcx;
    int64_t* var_118 = rcx;
    int64_t* var_110 = rcx;
    int64_t rdx_1 = (sub_14000b700(rcx) - 1);
    int64_t var_108 = rdx_1;
    int64_t* var_100 = rcx;
    int64_t* var_f8 = rcx;
    int64_t var_f0 = *rcx;
    *rcx = rdx_1;
    int64_t* var_e8 = arg1;
    int64_t* result = *arg1;
    int64_t* result_1 = result;
    int64_t* result_2 = result;
    int64_t* result_3 = result;
    int64_t* result_4 = result;
    int64_t* result_5 = result;
    
    if (*result == 0)
    {
        int64_t var_b8_1 = *arg1;
        int64_t* var_b0_1 = arg1;
        void* rcx_3 = *arg1;
        void* var_a8_1 = rcx_3;
        void* var_a0_1 = rcx_3;
        void* var_98_1 = rcx_3;
        void* var_90_1 = (rcx_3 + 8);
        int64_t rdx_3 = (sub_14000b6d0(rcx_3) - 1);
        int64_t var_88_1 = rdx_3;
        void* var_80_1 = (rcx_3 + 8);
        void* var_78_1 = (rcx_3 + 8);
        int64_t var_70_1 = *(rcx_3 + 8);
        *(rcx_3 + 8) = rdx_3;
        int64_t* var_68_1 = arg1;
        result = *arg1;
        int64_t* result_6 = result;
        int64_t* result_7 = result;
        int64_t* result_8 = result;
        void* var_48_1 = &result[1];
        void* var_40_1 = &result[1];
        
        if (result[1] == 0)
        {
            void* rdx_4 = *arg1;
            void* var_38_1 = rdx_4;
            int64_t rax_8 = *arg1;
            int64_t var_30_1 = rax_8;
            int64_t var_28_1 = rax_8;
            int64_t var_18_1 = 0x160;
            int64_t var_8_1 = 0x10;
            return sub_14000bc10(&arg1[1], rdx_4, 0x10, 0x160);
        }
    }
    
    return result;
}

int64_t sub_14000bf00(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    void var_18;
    sub_14000a7c0(&var_18, *arg1);
    return sub_1400090b0(&var_18);
}

int64_t sub_14000bf30(int64_t arg1)
{
    int64_t var_8 = arg1;
    sub_140009550(arg1);
    return arg1;
}

void* sub_14000bf60(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    return sub_14004e210(arg1, sub_14000b100);
}

int64_t sub_14000bf80(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    
    if ((arg2 >= arg1 && arg2 <= arg3))
        return arg2;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_14000bfd0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_70 = arg5;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg2;
    int64_t var_30 = arg1;
    
    if (arg2 < arg1)
    {
        sub_14005cbc0(arg1, arg2);
        /* no return */
    }
    
    int64_t rdx_1 = (arg2 - arg1);
    int64_t var_68 = 1;
    int64_t var_98 = rdx_1;
    int64_t var_28 = rdx_1;
    
    if (arg2 > arg4)
    {
        sub_14005cb50(arg2, arg4);
        /* no return */
    }
    
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_10 = arg3;
    int64_t result = (arg3 + (arg1 << 2));
    int64_t result_1 = result;
    return result;
}

uint64_t sub_14000c0d0()
{
    char var_1 = 0xe;
    return (sub_14000c150(0xe) & 1);
}

uint64_t sub_14000c0f0()
{
    char var_1 = 0xf;
    return (sub_14000c150(0xf) & 1);
}

uint64_t sub_14000c110()
{
    char var_1 = 9;
    return (sub_14000c150(9) & 1);
}

uint64_t sub_14000c130()
{
    char var_1 = 0xa;
    return (sub_14000c150(0xa) & 1);
}

uint64_t sub_14000c150(int32_t arg1)
{
    char var_89 = 0;
    char const (** const var_88)[0x34] = &data_14005f730;
    int32_t var_80 = arg1;
    int32_t var_6c;
    int64_t var_68;
    
    if (var_80 < 0x3f)
    {
        var_6c = var_80;
        var_68 = 0;
    }
    else
    {
        var_6c = (var_80 - 0x3f);
        var_68 = 1;
    }
    
    int32_t var_54 = var_6c;
    int64_t var_50 = var_68;
    
    if (var_68 >= 2)
    {
        sub_14005c830(var_68, 2);
        /* no return */
    }
    
    void* rcx_1 = (data_140071078 + (var_68 << 3));
    void* var_48 = rcx_1;
    void* var_40 = rcx_1;
    void* var_38 = rcx_1;
    int64_t rax_7 = sub_14000c740(rcx_1, 0);
    int64_t var_30 = rax_7;
    char var_7a;
    int32_t* rax_11;
    
    if (rax_7 == 0)
    {
        char var_79 = 2;
        int32_t* var_78 = &var_80;
        int32_t* var_60 = var_78;
        int32_t* var_28_1 = var_78;
        uint64_t rax_10 = sub_14005c0e0();
        uint64_t var_20_1 = rax_10;
        uint64_t var_18_1 = rax_10;
        rax_11 = (rax_10 & (1 << (var_80 & 0x3f))) != 0;
        rax_11 &= 1;
        var_7a = rax_11;
    }
    else
    {
        int64_t var_10_1 = rax_7;
        int64_t rax_13;
        rax_13 = (rax_7 & (1 << (var_6c & 0x3f))) != 0;
        rax_13 &= 1;
        int32_t* var_60_1 = &var_80;
        rax_11 = rax_13;
        int64_t rcx_10;
        rcx_10 = rax_11;
        rcx_10 &= 1;
        char var_1_1 = rcx_10;
        rax_11 &= 1;
        var_7a = rax_11;
    }
    
    rax_11 = var_7a;
    rax_11 &= 1;
    return rax_11;
}

int64_t sub_14000c2f0(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t r9;
    int64_t var_60 = r9;
    int64_t var_40 = arg1;
    int64_t var_38 = arg2;
    int64_t var_30 = arg3;
    int64_t var_28 = arg1;
    int64_t var_20 = arg3;
    
    if (arg1 > arg3)
    {
        sub_14005cae0(arg1, arg3);
        /* no return */
    }
    
    sub_14000bf80(arg1, arg3, arg3);
    int64_t var_18 = (arg3 - arg1);
    int64_t var_10 = arg2;
    int64_t result = (arg2 + arg1);
    int64_t result_1 = result;
    return result;
}

uint64_t sub_14000c380(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_14000c650(*arg1, arg2) & 1);
}

uint64_t sub_14000c3a0(int32_t arg1, int64_t arg2)
{
    int32_t var_14 = arg1;
    int64_t var_10 = arg2;
    int32_t rax = arg2;
    int32_t var_4 = rax;
    sub_14000c6e0(arg1, rax);
    return (arg1 + rax);
}

int64_t sub_14000c3e0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_10 = -2;
    char const (** const var_c8)[0x2b] = &data_14005f7f0;
    char const (** const var_c0)[0x2b] = &data_14005f7f0;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_b8)[0x2b] = &data_14005f7f0;
            int64_t var_b0 = 1;
            int64_t var_98 = 0;
            int64_t var_a8 = 8;
            int64_t var_a0 = 0;
            sub_14005c700(&var_b8);
            /* no return */
        }
        
        if ((arg1 & (arg4 - 1)) == 0)
        {
            int64_t var_28_1 = arg2;
            int64_t var_20_1 = arg2;
            
            if (arg2 != 0)
            {
                int64_t rcx_10 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
                int64_t rax_19 = ((rcx_10 & 0x3333333333333333) + ((rcx_10 >> 2) & 0x3333333333333333));
                
                if (((((rax_19 + (rax_19 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
                {
                    char const (** const var_88)[0x2b] = &data_14005f7f0;
                    int64_t var_80 = 1;
                    int64_t var_68 = 0;
                    int64_t var_78 = 8;
                    int64_t var_70 = 0;
                    sub_14005c700(&var_88);
                    /* no return */
                }
                
                if ((arg2 & (arg4 - 1)) == 0)
                {
                    char result = sub_14000e980(arg1, arg2, arg3, arg5);
                    
                    if ((result & 1) != 0)
                        return result;
                }
            }
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_14000c630(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

uint64_t sub_14000c650(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    char var_11;
    
    if ((*(arg2 + 0x34) & 0x10) != 0)
        var_11 = (sub_140059c10(arg1, arg2) & 1);
    else if ((*(arg2 + 0x34) & 0x20) == 0)
        var_11 = (sub_14005a2a0(arg1, arg2) & 1);
    else
        var_11 = (sub_140059cc0(arg1, arg2) & 1);
    
    return (var_11 & 1);
}

bool sub_14000c6e0(int32_t arg1, int32_t arg2)
{
    int32_t var_10 = arg1;
    int32_t var_c = arg2;
    bool result = (arg1 + arg2) < arg1;
    int32_t var_8 = (arg1 + arg2);
    int32_t rcx;
    rcx = result;
    rcx &= 1;
    char var_1 = rcx;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

uint64_t sub_14000c720(int32_t* arg1)
{
    int32_t* var_8 = arg1;
    return sub_14000efc0(arg1);
}

int64_t sub_14000c740(int64_t* arg1, char arg2)
{
    char const (** const var_88)[0x32] = &data_14005f9a0;
    char const (** const var_80)[0x28] = &data_14005f9d8;
    int64_t* var_8 = arg1;
    
    switch (jump_table_14005fac8[arg2])
    {
        case 0xfffaccc9:
        {
            return *arg1;
            break;
        }
        case 0xfffaccdb:
        {
            char const (** const var_68)[0x28] = &data_14005f9d8;
            int64_t var_60 = 1;
            int64_t var_58 = 8;
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            sub_14005c700(&var_68);
            /* no return */
        }
        case 0xfffacd2b:
        {
            return *arg1;
            break;
        }
        case 0xfffacd3a:
        {
            char const (** const var_38)[0x32] = &data_14005f9a0;
            int64_t var_30 = 1;
            int64_t var_28 = 8;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            sub_14005c700(&var_38);
            /* no return */
        }
        case 0xfffacd9f:
        {
            return *arg1;
            break;
        }
    }
}

int64_t sub_14000c890(int64_t arg1, int64_t arg2)
{
    int64_t var_98 = arg1;
    int64_t var_90 = arg2;
    int64_t var_88 = arg1;
    int64_t var_80 = 0x20;
    int64_t var_78 = arg2;
    int64_t var_70 = arg2;
    int64_t var_68 = arg1;
    int64_t var_60 = 0x20;
    int64_t var_48 = 0;
    int64_t var_40 = arg2;
    int64_t var_38 = arg1;
    int64_t var_30 = 0x20;
    int64_t var_28 = arg2;
    int64_t var_20 = 0;
    int64_t var_58 = 1;
    int64_t var_a0 = arg2;
    int64_t var_18 = arg2;
    
    if (arg2 > 0x20)
    {
        sub_14005cb50(arg2, 0x20);
        /* no return */
    }
    
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    return arg1;
}

int64_t sub_14000c980(int64_t arg1, int64_t arg2)
{
    int64_t var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg1;
    int64_t var_10 = 0x20;
    int64_t var_8 = arg2;
    return sub_14000c2f0(arg2, arg1, 0x20);
}

int64_t sub_14000c9d0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg3;
    int64_t var_20 = arg1;
    int64_t var_18 = 0x40;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    return sub_14000bfd0(arg2, arg3, arg1, 0x40, arg4);
}

int64_t sub_14000ca30(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_40 = arg5;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg3;
    int64_t var_20 = arg4;
    int64_t var_18 = arg2;
    
    if (arg2 != arg4)
    {
        sub_14005cc70(arg2, arg4);
        /* no return */
    }
    
    int64_t var_10 = arg3;
    int64_t var_8 = arg1;
    sub_14000c3e0(arg3, arg1, 4, 4, arg2);
    return memcpy(arg1, arg3, (arg2 << 2));
}

int64_t sub_14000caf0()
{
    _mm256_zeroupper();
}

int256_t* sub_14000cb90(int256_t* arg1, int64_t arg2)
{
    int64_t rdx;
    int64_t var_78 = rdx;
    int64_t r8;
    int64_t var_70 = r8;
    int64_t r9;
    int64_t var_68 = r9;
    int64_t var_30 = arg2;
    int64_t var_28 = r9;
    int64_t var_20 = r8;
    int64_t var_18 = rdx;
    int64_t var_58 = r9;
    int64_t var_50 = r8;
    int64_t var_48 = rdx;
    *arg1 = arg2;
    _mm256_zeroupper();
    return arg1;
}

double (*)[0x4] sub_14000cbf0(double (* arg1)[0x4], int128_t* arg2, int128_t* arg3)
{
    double zmm0[0x4];
    zmm0[0] = *arg3;
    zmm0[0] = *arg2;
    zmm0[0] = zmm0[0];
    *arg1 = _mm256_insertf128_ps(zmm0, zmm0[0], 1);
    _mm256_zeroupper();
    return arg1;
}

int64_t sub_14000cc50(int64_t arg1)
{
    __builtin_memset(arg1, 0, 0x20);
    return arg1;
}

int256_t* sub_14000cc80(int256_t* arg1, int256_t* arg2, int256_t* arg3)
{
    int256_t var_a0 = *arg2;
    _mm256_zeroupper();
    int256_t var_c0;
    sub_14000e710(&var_c0, &var_a0);
    int256_t var_100 = var_c0;
    int256_t var_60 = *arg3;
    _mm256_zeroupper();
    int256_t var_80;
    sub_14000e710(&var_80, &var_60);
    *arg1 = (var_100 | var_80);
    _mm256_zeroupper();
    return arg1;
}

int32_t (*)[0x8] sub_14000cd40(int32_t (* arg1)[0x8], int256_t* arg2, int256_t* arg3)
{
    int256_t var_a0 = *arg2;
    _mm256_zeroupper();
    int32_t var_c0[0x8];
    sub_14000e710(&var_c0, &var_a0);
    int32_t var_100[0x8] = var_c0;
    int32_t var_60[0x8] = *arg3;
    _mm256_zeroupper();
    int32_t var_80[0x8];
    sub_14000e710(&var_80, &var_60);
    *arg1 = __vpaddd_ymmqq_ymmqq_memqq(var_100, var_80);
    _mm256_zeroupper();
    return arg1;
}

int256_t* sub_14000ce00(int256_t* arg1, int256_t* arg2, int256_t* arg3)
{
    int256_t var_a0 = *arg2;
    _mm256_zeroupper();
    int256_t var_c0;
    sub_14000e770(&var_c0, &var_a0);
    int256_t var_100 = var_c0;
    int256_t var_60 = *arg3;
    _mm256_zeroupper();
    int256_t var_80;
    sub_14000e770(&var_80, &var_60);
    *arg1 = (var_100 ^ var_80);
    _mm256_zeroupper();
    return arg1;
}

int32_t (*)[0x8] sub_14000cec0(int32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    int32_t var_a0[0x8];
    sub_14000e7d0(&var_a0, &var_80);
    int32_t zmm0_1[0x8] = var_a0;
    int32_t var_14 = 0xc;
    int32_t var_60;
    __builtin_memcpy(&var_60, "\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00\x0c\x00\x00\x00", 0x20);
    *arg1 = _mm256_sllv_epi32(zmm0_1, var_60);
    _mm256_zeroupper();
    return arg1;
}

int32_t (*)[0x8] sub_14000cfb0(int32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    int32_t var_a0[0x8];
    sub_14000e7d0(&var_a0, &var_80);
    int32_t zmm0_1[0x8] = var_a0;
    int32_t var_14 = 7;
    int32_t var_60;
    __builtin_memcpy(&var_60, "\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00", 0x20);
    *arg1 = _mm256_sllv_epi32(zmm0_1, var_60);
    _mm256_zeroupper();
    return arg1;
}

int32_t (*)[0x8] sub_14000d0a0(int32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    int32_t var_a0[0x8];
    sub_14000e7d0(&var_a0, &var_80);
    int32_t zmm0_1[0x8] = var_a0;
    int32_t var_14 = 0x19;
    int32_t var_60;
    __builtin_memcpy(&var_60, "\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00", 0x20);
    *arg1 = _mm256_srlv_epi32(zmm0_1, var_60);
    _mm256_zeroupper();
    return arg1;
}

int32_t (*)[0x8] sub_14000d190(int32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    int32_t var_a0[0x8];
    sub_14000e7d0(&var_a0, &var_80);
    int32_t zmm0_1[0x8] = var_a0;
    int32_t var_14 = 0x14;
    int32_t var_60;
    __builtin_memcpy(&var_60, "\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00\x14\x00\x00\x00", 0x20);
    *arg1 = _mm256_srlv_epi32(zmm0_1, var_60);
    _mm256_zeroupper();
    return arg1;
}

uint8_t (*)[0x20] sub_14000d280(uint8_t (* arg1)[0x20], int256_t* arg2, int256_t* arg3)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    uint8_t var_a0[0x20];
    sub_14000e830(&var_a0, &var_80);
    uint8_t var_e0[0x20] = var_a0;
    uint8_t var_40[0x20] = *arg3;
    _mm256_zeroupper();
    uint8_t var_60[0x20];
    sub_14000e830(&var_60, &var_40);
    *arg1 = _mm256_shuffle_epi8(var_e0, var_60);
    _mm256_zeroupper();
    return arg1;
}

uint32_t (*)[0x8] sub_14000d330(uint32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_c0 = *arg2;
    _mm256_zeroupper();
    uint32_t var_e0[0x8];
    sub_14000e710(&var_e0, &var_c0);
    uint32_t var_120[0x8] = var_e0;
    uint32_t var_80[0x8] = *arg2;
    _mm256_zeroupper();
    void var_a0;
    sub_14000e710(&var_a0, &var_80);
    uint32_t temp0[0x8] = _mm256_shuffle_epi32(var_120, 0x93);
    uint32_t var_40[0x8] = temp0;
    *arg1 = temp0;
    _mm256_zeroupper();
    return arg1;
}

uint32_t (*)[0x8] sub_14000d400(uint32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_c0 = *arg2;
    _mm256_zeroupper();
    uint32_t var_e0[0x8];
    sub_14000e710(&var_e0, &var_c0);
    uint32_t var_120[0x8] = var_e0;
    uint32_t var_80[0x8] = *arg2;
    _mm256_zeroupper();
    void var_a0;
    sub_14000e710(&var_a0, &var_80);
    uint32_t temp0[0x8] = _mm256_shuffle_epi32(var_120, 0x39);
    uint32_t var_40[0x8] = temp0;
    *arg1 = temp0;
    _mm256_zeroupper();
    return arg1;
}

uint32_t (*)[0x8] sub_14000d4d0(uint32_t (* arg1)[0x8], int256_t* arg2)
{
    int256_t var_c0 = *arg2;
    _mm256_zeroupper();
    uint32_t var_e0[0x8];
    sub_14000e710(&var_e0, &var_c0);
    uint32_t var_120[0x8] = var_e0;
    uint32_t var_80[0x8] = *arg2;
    _mm256_zeroupper();
    void var_a0;
    sub_14000e710(&var_a0, &var_80);
    uint32_t temp0[0x8] = _mm256_shuffle_epi32(var_120, 0x4e);
    uint32_t var_40[0x8] = temp0;
    *arg1 = temp0;
    _mm256_zeroupper();
    return arg1;
}

int128_t* sub_14000d5a0(int128_t* arg1, int256_t* arg2)
{
    int256_t var_100 = *arg2;
    _mm256_zeroupper();
    int256_t var_120;
    sub_14000e770(&var_120, &var_100);
    int128_t zmm1 = *var_120[0x10];
    int256_t var_e0 = var_120;
    _mm256_zeroupper();
    int256_t var_c0;
    sub_14000cc50(&var_c0);
    int256_t var_80 = var_c0;
    _mm256_zeroupper();
    int256_t var_a0;
    sub_14000e770(&var_a0, &var_80);
    int256_t var_60 = var_a0;
    int128_t var_20 = zmm1;
    *arg1 = zmm1;
    _mm256_zeroupper();
    return arg1;
}

int128_t* sub_14000d680(int128_t* arg1, int256_t* arg2)
{
    int256_t var_100 = *arg2;
    _mm256_zeroupper();
    int256_t var_120;
    sub_14000e770(&var_120, &var_100);
    int128_t zmm1 = var_120;
    int256_t var_e0 = var_120;
    _mm256_zeroupper();
    int256_t var_c0;
    sub_14000cc50(&var_c0);
    int256_t var_80 = var_c0;
    _mm256_zeroupper();
    int256_t var_a0;
    sub_14000e770(&var_a0, &var_80);
    int256_t var_60 = var_a0;
    int128_t var_20 = zmm1;
    *arg1 = zmm1;
    _mm256_zeroupper();
    return arg1;
}

uint128_t (*)[0x2] sub_14000d760(uint128_t (* arg1)[0x2], int256_t* arg2, int256_t* arg3)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    uint128_t var_a0[0x2];
    sub_14000e770(&var_a0, &var_80);
    uint128_t var_e0[0x2] = var_a0;
    uint128_t var_40[0x2] = *arg3;
    _mm256_zeroupper();
    uint128_t var_60[0x2];
    sub_14000e770(&var_60, &var_40);
    *arg1 = _mm256_permute2x128_si256(var_e0, var_60, 0x20);
    _mm256_zeroupper();
    return arg1;
}

uint128_t (*)[0x2] sub_14000d820(uint128_t (* arg1)[0x2], int256_t* arg2, int256_t* arg3)
{
    int256_t var_80 = *arg2;
    _mm256_zeroupper();
    uint128_t var_a0[0x2];
    sub_14000e770(&var_a0, &var_80);
    uint128_t var_e0[0x2] = var_a0;
    uint128_t var_40[0x2] = *arg3;
    _mm256_zeroupper();
    uint128_t var_60[0x2];
    sub_14000e770(&var_60, &var_40);
    *arg1 = _mm256_permute2x128_si256(var_e0, var_60, 0x31);
    _mm256_zeroupper();
    return arg1;
}

int128_t* sub_14000d8e0(int128_t* arg1, int128_t* arg2, int64_t arg3)
{
    *arg1 = (*arg2 | *arg3);
    return arg1;
}

int32_t (*)[0x4] sub_14000d900(int32_t (* arg1)[0x4], int128_t* arg2, int128_t* arg3)
{
    int128_t var_48 = *arg2;
    int32_t var_58[0x4];
    sub_14000e5d0(&var_58, &var_48);
    int32_t var_78[0x4] = var_58;
    int32_t var_28[0x4] = *arg3;
    int32_t var_38[0x4];
    sub_14000e5d0(&var_38, &var_28);
    *arg1 = __paddd_xmmdq_memdq(var_78, var_38);
    return arg1;
}

int32_t (*)[0x4] sub_14000d9a0(int32_t (* arg1)[0x4], int128_t* arg2, int128_t* arg3)
{
    int128_t var_48 = *arg2;
    int32_t var_58[0x4];
    sub_14000e610(&var_58, &var_48);
    int32_t var_78[0x4] = var_58;
    int32_t var_28[0x4] = *arg3;
    int32_t var_38[0x4];
    sub_14000e610(&var_38, &var_28);
    *arg1 = __paddq_xmmdq_memdq(var_78, var_38);
    return arg1;
}

int128_t* sub_14000da40(int128_t* arg1, int128_t* arg2, int64_t arg3)
{
    *arg1 = (*arg2 ^ *arg3);
    return arg1;
}

int128_t* sub_14000da60(int128_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_38 = arg2;
    int64_t var_30 = arg3;
    int64_t var_10 = arg3;
    int64_t var_8 = arg2;
    int64_t var_20 = arg2;
    *arg1 = arg3;
    return arg1;
}

uint32_t (*)[0x4] sub_14000daa0(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 0xc;
    int32_t var_44 = 0xc;
    int32_t var_40 = 0xc;
    int32_t var_3c = 0xc;
    int32_t temp0_2[0x4] = _mm_cvttps_epi32(_mm_add_epi32(_mm_slli_epi32(0xc, 0x17), data_14005f5c0));
    uint32_t temp0_4[0x4] = _mm_shuffle_epi32(_mm_mul_epu32(zmm1, temp0_2), 0xe8);
    int32_t zmm2[0x4] = _mm_shuffle_epi32(temp0_2, 0xf5);
    *arg1 = _mm_unpacklo_epi32(temp0_4, _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(zmm1, 0xf5), zmm2), 0xe8)[0]);
    return arg1;
}

uint32_t (*)[0x4] sub_14000db90(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 7;
    int32_t var_44 = 7;
    int32_t var_40 = 7;
    int32_t var_3c = 7;
    int32_t temp0_2[0x4] = _mm_cvttps_epi32(_mm_add_epi32(_mm_slli_epi32(7, 0x17), data_14005f5c0));
    uint32_t temp0_4[0x4] = _mm_shuffle_epi32(_mm_mul_epu32(zmm1, temp0_2), 0xe8);
    int32_t zmm2[0x4] = _mm_shuffle_epi32(temp0_2, 0xf5);
    *arg1 = _mm_unpacklo_epi32(temp0_4, _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(zmm1, 0xf5), zmm2), 0xe8)[0]);
    return arg1;
}

uint32_t (*)[0x4] sub_14000dc80(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 8;
    int32_t var_44 = 8;
    int32_t var_40 = 8;
    int32_t var_3c = 8;
    int32_t temp0_2[0x4] = _mm_cvttps_epi32(_mm_add_epi32(_mm_slli_epi32(8, 0x17), data_14005f5c0));
    uint32_t temp0_4[0x4] = _mm_shuffle_epi32(_mm_mul_epu32(zmm1, temp0_2), 0xe8);
    int32_t zmm2[0x4] = _mm_shuffle_epi32(temp0_2, 0xf5);
    *arg1 = _mm_unpacklo_epi32(temp0_4, _mm_shuffle_epi32(_mm_mul_epu32(_mm_shuffle_epi32(zmm1, 0xf5), zmm2), 0xe8)[0]);
    return arg1;
}

double (*)[0x2] sub_14000dd70(double (* arg1)[0x2], int128_t* arg2)
{
    int128_t var_18 = *arg2;
    sub_14000e2f0(arg1, &var_18);
    return arg1;
}

uint16_t (*)[0x8] sub_14000dda0(uint16_t (* arg1)[0x8], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 0x14;
    int32_t var_44 = 0x14;
    int32_t var_40 = 0x14;
    int32_t var_3c = 0x14;
    uint16_t zmm2[0x8] = 0x14;
    int32_t temp0_1[0x4] = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0xfe));
    uint16_t zmm0_1[0x8] = _mm_unpacklo_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0x54)), temp0_1[0]);
    int32_t zmm3[0x4] = _mm_shuffle_epi32(zmm2, 0xee);
    zmm2 = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0xfe));
    *arg1 = _mm_shuffle_ps(zmm0_1, _mm_unpackhi_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0x54)), zmm2[0]), 0xcc);
    return arg1;
}

uint16_t (*)[0x8] sub_14000de90(uint16_t (* arg1)[0x8], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 0x18;
    int32_t var_44 = 0x18;
    int32_t var_40 = 0x18;
    int32_t var_3c = 0x18;
    uint16_t zmm2[0x8] = 0x18;
    int32_t temp0_1[0x4] = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0xfe));
    uint16_t zmm0_1[0x8] = _mm_unpacklo_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0x54)), temp0_1[0]);
    int32_t zmm3[0x4] = _mm_shuffle_epi32(zmm2, 0xee);
    zmm2 = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0xfe));
    *arg1 = _mm_shuffle_ps(zmm0_1, _mm_unpackhi_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0x54)), zmm2[0]), 0xcc);
    return arg1;
}

uint16_t (*)[0x8] sub_14000df80(uint16_t (* arg1)[0x8], int128_t* arg2)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int128_t var_58 = *arg2;
    int32_t var_68[0x4];
    sub_14000e690(&var_68, &var_58);
    int32_t zmm1[0x4] = var_68;
    int32_t var_4 = 0x19;
    int32_t var_44 = 0x19;
    int32_t var_40 = 0x19;
    int32_t var_3c = 0x19;
    uint16_t zmm2[0x8] = 0x19;
    int32_t temp0_1[0x4] = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0xfe));
    uint16_t zmm0_1[0x8] = _mm_unpacklo_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm2, 0x54)), temp0_1[0]);
    int32_t zmm3[0x4] = _mm_shuffle_epi32(zmm2, 0xee);
    zmm2 = _mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0xfe));
    *arg1 = _mm_shuffle_ps(zmm0_1, _mm_unpackhi_epi64(_mm_srl_epi32(zmm1, _mm_shufflelo_epi16(zmm3, 0x54)), zmm2[0]), 0xcc);
    return arg1;
}

int128_t* sub_14000e070(int128_t* arg1, int64_t* arg2)
{
    int64_t* var_20 = arg2;
    int64_t var_38 = 0;
    int64_t var_30 = 0;
    int64_t* var_18 = arg2;
    int64_t* var_10 = &var_38;
    int64_t var_8 = 0x10;
    sub_14000c3e0(arg2, &var_38, 1, 1, 0x10);
    var_38 = *arg2;
    int64_t var_30_1 = arg2[1];
    *arg1 = var_38;
    return arg1;
}

uint32_t (*)[0x4] sub_14000e110(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int128_t var_48 = *arg2;
    uint32_t var_58[0x4];
    sub_14000e5d0(&var_58, &var_48);
    uint32_t zmm0_1[0x4] = var_58;
    uint32_t var_38[0x4] = zmm0_1;
    uint32_t temp0[0x4] = _mm_shuffle_epi32(zmm0_1, 0x39);
    uint32_t var_18[0x4] = temp0;
    *arg1 = temp0;
    return arg1;
}

uint32_t (*)[0x4] sub_14000e170(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int128_t var_48 = *arg2;
    uint32_t var_58[0x4];
    sub_14000e5d0(&var_58, &var_48);
    uint32_t zmm0_1[0x4] = var_58;
    uint32_t var_38[0x4] = zmm0_1;
    uint32_t temp0[0x4] = _mm_shuffle_epi32(zmm0_1, 0x93);
    uint32_t var_18[0x4] = temp0;
    *arg1 = temp0;
    return arg1;
}

uint32_t (*)[0x4] sub_14000e1d0(uint32_t (* arg1)[0x4], int128_t* arg2)
{
    int128_t var_48 = *arg2;
    uint32_t var_58[0x4];
    sub_14000e5d0(&var_58, &var_48);
    uint32_t zmm0_1[0x4] = var_58;
    uint32_t var_38[0x4] = zmm0_1;
    uint32_t temp0[0x4] = _mm_shuffle_epi32(zmm0_1, 0x4e);
    uint32_t var_18[0x4] = temp0;
    *arg1 = temp0;
    return arg1;
}

uint16_t (*)[0x8] sub_14000e230(uint16_t (* arg1)[0x8], int128_t* arg2)
{
    int128_t var_48 = *arg2;
    uint16_t var_58[0x8];
    sub_14000e590(&var_58, &var_48);
    uint16_t zmm0_1[0x8] = var_58;
    uint16_t var_38[0x8] = zmm0_1;
    uint16_t temp0[0x8] = _mm_shufflehi_epi16(zmm0_1, 0xb1);
    uint16_t var_18[0x8] = temp0;
    *arg1 = temp0;
    return arg1;
}

uint16_t (*)[0x8] sub_14000e290(uint16_t (* arg1)[0x8], int128_t* arg2)
{
    int128_t var_48 = *arg2;
    uint16_t var_58[0x8];
    sub_14000e590(&var_58, &var_48);
    uint16_t zmm0_1[0x8] = var_58;
    uint16_t var_38[0x8] = zmm0_1;
    uint16_t temp0[0x8] = _mm_shufflelo_epi16(zmm0_1, 0xb1);
    uint16_t var_18[0x8] = temp0;
    *arg1 = temp0;
    return arg1;
}

double (*)[0x2] sub_14000e2f0(double (* arg1)[0x2], int128_t* arg2)
{
    char s;
    __builtin_memset(&s, 0, 0x11);
    char var_10 = 0;
    char var_f = 0;
    char var_e = 0;
    char var_d = 0;
    char var_c = 0;
    char var_b = 0;
    char var_a = 0;
    char var_9 = 0;
    char var_8 = 0;
    char var_7 = 0;
    char var_6 = 0;
    char var_5 = 0;
    char var_4 = 0;
    char var_3 = 0;
    char var_2 = 0;
    char var_1 = 0;
    char var_87 = 0;
    char var_86 = 0;
    char var_85 = 0;
    char var_84 = 0;
    char var_83 = 0;
    char var_82 = 0;
    char var_81 = 0;
    char var_80 = 0;
    char var_7f = 0;
    char var_7e = 0;
    char var_7d = 0;
    char var_7c = 0;
    char var_7b = 0;
    char var_7a = 0;
    char var_79 = 0;
    int128_t var_68 = 0;
    double var_78[0x2];
    sub_14000e650(&var_78, &var_68);
    double zmm0_1[0x2] = var_78;
    double var_58[0x2] = zmm0_1;
    double var_38[0x2] = *arg2;
    double var_48[0x2];
    sub_14000e650(&var_48, &var_38);
    *arg1 = _mm_shuffle_pd(zmm0_1, var_48, 1);
    return arg1;
}

int32_t (*)[0x4] sub_14000e500(int32_t (* arg1)[0x4], int128_t* arg2, int128_t* arg3)
{
    int128_t var_38 = *arg2;
    int32_t var_48[0x4];
    sub_14000e6d0(&var_48, &var_38);
    int32_t var_68[0x4] = var_48;
    int32_t var_18[0x4] = *arg3;
    int32_t var_28[0x4];
    sub_14000e6d0(&var_28, &var_18);
    *arg1 = _mm_shuffle_epi8(var_68, var_28);
    return arg1;
}

int128_t* sub_14000e590(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e5d0(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e610(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e650(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e690(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e6d0(int128_t* arg1, int128_t* arg2)
{
    int128_t var_18 = *arg2;
    int128_t var_28;
    sub_14000ef90(&var_28, &var_18);
    *arg1 = var_28;
    return arg1;
}

int128_t* sub_14000e710(int128_t* arg1, int128_t* arg2)
{
    int128_t var_30 = arg2[1];
    int128_t var_40 = *arg2;
    int128_t var_60;
    sub_14000efa0(&var_60, &var_40);
    int128_t zmm0_1 = var_60;
    int128_t var_50;
    arg1[1] = var_50;
    *arg1 = zmm0_1;
    return arg1;
}

int128_t* sub_14000e770(int128_t* arg1, int128_t* arg2)
{
    int128_t var_30 = arg2[1];
    int128_t var_40 = *arg2;
    int128_t var_60;
    sub_14000efa0(&var_60, &var_40);
    int128_t zmm0_1 = var_60;
    int128_t var_50;
    arg1[1] = var_50;
    *arg1 = zmm0_1;
    return arg1;
}

int128_t* sub_14000e7d0(int128_t* arg1, int128_t* arg2)
{
    int128_t var_30 = arg2[1];
    int128_t var_40 = *arg2;
    int128_t var_60;
    sub_14000efa0(&var_60, &var_40);
    int128_t zmm0_1 = var_60;
    int128_t var_50;
    arg1[1] = var_50;
    *arg1 = zmm0_1;
    return arg1;
}

int128_t* sub_14000e830(int128_t* arg1, int128_t* arg2)
{
    int128_t var_30 = arg2[1];
    int128_t var_40 = *arg2;
    int128_t var_60;
    sub_14000efa0(&var_60, &var_40);
    int128_t zmm0_1 = var_60;
    int128_t var_50;
    arg1[1] = var_50;
    *arg1 = zmm0_1;
    return arg1;
}

int128_t* sub_14000e890(int128_t* arg1, int64_t arg2)
{
    int64_t var_38 = 0;
    int64_t var_30 = arg2;
    int64_t var_10 = arg2;
    int64_t var_8 = 0;
    int64_t var_20 = 0;
    *arg1 = arg2;
    return arg1;
}

int32_t (*)[0x4] sub_14000e8d0(int32_t (* arg1)[0x4], int128_t* arg2, int64_t arg3)
{
    int64_t var_40 = arg3;
    int128_t var_28 = *arg2;
    int32_t var_38[0x4];
    sub_14000e610(&var_38, &var_28);
    *arg1 = _mm_insert_epi64(var_38, arg3, 1);
    return arg1;
}

void sub_14000e930(char arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t arg5) __noreturn
{
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    char var_1 = arg1;
    sub_14005c8c0(arg1, &var_18, &data_14005fa68, &var_10, &data_14005fa68, arg4, arg5);
    /* no return */
}

uint64_t sub_14000e980(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t rax_1;
    char rdx;
    rdx = HIGHQ((arg3 * arg4));
    rax_1 = LOWQ((arg3 * arg4));
    int64_t rcx = rax_1;
    rax_1 = ((arg3 * arg4) >> 0x40) != {0};
    int64_t var_28 = rcx;
    char var_19 = (rax_1 & 1);
    int64_t var_18 = rcx;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
    {
        sub_14005c7e0("is_nonoverlapping: `size_of::<T>…");
        /* no return */
    }
    
    int64_t var_70 = 1;
    int64_t var_8 = rcx;
    int64_t var_60;
    
    if (arg1 < arg2)
        var_60 = (arg2 - arg1);
    else
        var_60 = (arg1 - arg2);
    
    int64_t rax_7;
    rax_7 = var_60 >= rcx;
    rax_7 &= 1;
    return rax_7;
}

int128_t* sub_14000ea80(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int128_t* sub_14000eaa0(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int128_t* sub_14000eac0(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int128_t* sub_14000eae0(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int64_t* sub_14000eb00(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    return arg1;
}

int128_t* sub_14000eb20(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int64_t sub_14000eb40(int64_t arg1, int128_t* arg2)
{
    int128_t var_48 = *arg2;
    int64_t var_88;
    sub_14000eac0(&var_88, &var_48);
    int128_t var_38 = arg2[1];
    int64_t var_78;
    sub_14000eac0(&var_78, &var_38);
    int128_t var_28 = arg2[2];
    int64_t var_68;
    sub_14000eac0(&var_68, &var_28);
    int128_t var_18 = arg2[3];
    int64_t var_58;
    sub_14000eac0(&var_58, &var_18);
    int64_t var_c8 = var_88;
    int64_t var_80;
    int64_t var_c0 = var_80;
    int64_t var_b8 = var_78;
    int64_t var_70;
    int64_t var_b0 = var_70;
    int64_t var_a8 = var_68;
    int64_t var_60;
    int64_t var_a0 = var_60;
    int64_t var_98 = var_58;
    int64_t var_50;
    int64_t var_90 = var_50;
    memcpy(arg1, &var_c8, 0x40);
    return arg1;
}

int64_t sub_14000eca0(int64_t arg1, int128_t* arg2)
{
    int128_t var_48 = *arg2;
    int64_t var_88;
    sub_14000ea80(&var_88, &var_48);
    int128_t var_38 = arg2[1];
    int64_t var_78;
    sub_14000ea80(&var_78, &var_38);
    int128_t var_28 = arg2[2];
    int64_t var_68;
    sub_14000ea80(&var_68, &var_28);
    int128_t var_18 = arg2[3];
    int64_t var_58;
    sub_14000ea80(&var_58, &var_18);
    int64_t var_c8 = var_88;
    int64_t var_80;
    int64_t var_c0 = var_80;
    int64_t var_b8 = var_78;
    int64_t var_70;
    int64_t var_b0 = var_70;
    int64_t var_a8 = var_68;
    int64_t var_60;
    int64_t var_a0 = var_60;
    int64_t var_98 = var_58;
    int64_t var_50;
    int64_t var_90 = var_50;
    memcpy(arg1, &var_c8, 0x40);
    return arg1;
}

int64_t sub_14000ee00(int64_t arg1, int128_t* arg2)
{
    int128_t var_48 = *arg2;
    int64_t var_88;
    sub_14000eaa0(&var_88, &var_48);
    int128_t var_38 = arg2[1];
    int64_t var_78;
    sub_14000eaa0(&var_78, &var_38);
    int128_t var_28 = arg2[2];
    int64_t var_68;
    sub_14000eaa0(&var_68, &var_28);
    int128_t var_18 = arg2[3];
    int64_t var_58;
    sub_14000eaa0(&var_58, &var_18);
    int64_t var_c8 = var_88;
    int64_t var_80;
    int64_t var_c0 = var_80;
    int64_t var_b8 = var_78;
    int64_t var_70;
    int64_t var_b0 = var_70;
    int64_t var_a8 = var_68;
    int64_t var_60;
    int64_t var_a0 = var_60;
    int64_t var_98 = var_58;
    int64_t var_50;
    int64_t var_90 = var_50;
    memcpy(arg1, &var_c8, 0x40);
    return arg1;
}

int128_t* sub_14000ef60(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int64_t sub_14000ef80(int32_t arg1, int32_t arg2) __pure
{
    int64_t rax;
    int64_t var_8 = rax;
    var_8 = arg1;
    *var_8[4] = arg2;
    return arg1;
}

int128_t* sub_14000ef90(int128_t* arg1, int128_t* arg2)
{
    *arg1 = *arg2;
    return arg1;
}

int128_t* sub_14000efa0(int128_t* arg1, int128_t* arg2)
{
    int128_t zmm0 = *arg2;
    arg1[1] = arg2[1];
    *arg1 = zmm0;
    return arg1;
}

uint64_t sub_14000efc0(int32_t* arg1)
{
    int32_t* var_20 = arg1;
    int32_t* var_10 = arg1;
    void* var_8 = &arg1[1];
    int32_t var_28;
    
    if (*arg1 < arg1[1])
    {
        int32_t rcx = *arg1;
        int32_t var_14_1 = rcx;
        *arg1 = sub_14000c3a0(rcx, 1);
        int32_t var_24 = rcx;
        var_28 = 1;
    }
    else
        var_28 = 0;
    
    return var_28;
}

int64_t sub_14000f030(int64_t arg1) __pure
{
    int64_t rax;
    int64_t var_8_1 = rax;
    int64_t var_8 = arg1;
    return arg1;
}

int64_t sub_14000f040(int64_t arg1)
{
    int32_t s;
    __builtin_memset(&s, 0, 0x100);
    memcpy(arg1, &s, 0x100);
    return arg1;
}

uint64_t sub_14000f2f0(char* arg1, int64_t arg2)
{
    char* var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_68 = arg2;
    int64_t* var_18 = &var_68;
    int64_t* const var_10 = &data_14005fd00;
    
    if (var_68 != 4)
    {
        char var_59 = 0;
        int64_t var_58 = 0;
        arg1 = var_59;
        sub_14000e930(arg1, &var_68, &data_14005fd00, &var_58, &data_14005fd08);
        /* no return */
    }
    
    if (0 >= arg2)
    {
        sub_14005c830(0, arg2);
        /* no return */
    }
    
    char* rax_1;
    rax_1 = *arg1;
    char var_1 = rax_1;
    
    if (1 >= arg2)
    {
        sub_14005c830(1, arg2);
        /* no return */
    }
    
    char* rdx_2;
    rdx_2 = arg1[1];
    char var_2 = rdx_2;
    
    if (2 >= arg2)
    {
        sub_14005c830(2, arg2);
        /* no return */
    }
    
    char* rdx_6;
    rdx_6 = arg1[2];
    char var_3 = rdx_6;
    
    if (3 >= arg2)
    {
        sub_14005c830(3, arg2);
        /* no return */
    }
    
    char* rcx_4;
    rcx_4 = arg1[3];
    char var_4 = rcx_4;
    return (((rax_1 | (rdx_2 << 8)) | (rdx_6 << 0x10)) | (rcx_4 << 0x18));
}

int128_t* sub_14000f490(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    int128_t* var_18 = arg1;
    int32_t var_c = arg2;
    int64_t var_8 = arg3;
    
    if ((sub_14000c0f0() & 1) != 0)
        return sub_14000f550(arg1, arg2, arg3);
    
    if ((sub_14000c0d0() & 1) != 0)
        return sub_140015680(arg1, arg2, arg3);
    
    if ((sub_14000c130() & 1) != 0)
        return sub_14001dad0(arg1, arg2, arg3);
    
    if ((sub_14000c110() & 1) != 0)
        return sub_140025b30(arg1, arg2, arg3);
    
    return sub_14002ded0(arg1, arg2, arg3);
}

int128_t* sub_14000f550(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    __chkstk(0x9548);
    double var_94e0[0x4];
    void* var_9528 = &var_94e0[1];
    int64_t var_18 = -2;
    int128_t* var_8b60 = arg1;
    int32_t var_8b54 = arg2;
    int64_t var_8b50 = arg3;
    int128_t* var_8b48 = arg1;
    int32_t var_8b3c = arg2;
    int64_t var_8b38 = arg3;
    int128_t* var_7a98 = arg1;
    int32_t var_7a8c = arg2;
    int64_t var_7a88 = arg3;
    int32_t var_8b30;
    __builtin_strncpy(&var_8b30, "expand 32-byte k", 0x10);
    int128_t var_6960;
    sub_14000e890(&var_6960, var_8b30);
    int128_t var_6940 = var_6960;
    int32_t var_8b28;
    int128_t var_6950;
    sub_14000e8d0(&var_6950, &var_6940, var_8b28);
    var_6960 = var_6950;
    int128_t zmm0_1 = var_6960;
    int128_t var_7a70 = zmm0_1;
    int128_t zmm1 = *arg1;
    int128_t var_8c30 = zmm1;
    int128_t var_7a50 = zmm1;
    zmm1 = arg1[1];
    int128_t var_7a30 = zmm1;
    int128_t var_68a0 = zmm0_1;
    int128_t var_6890 = zmm0_1;
    double var_68c0[0x4];
    sub_14000cbf0(&var_68c0, &var_68a0, &var_6890);
    double zmm0_2[0x4] = var_68c0;
    double var_6ac0[0x4] = zmm0_2;
    zmm0_2[0] = zmm0_1;
    zmm0_2[0] = zmm0_2[0];
    int128_t var_6900 = zmm0_1;
    int128_t var_68f0 = zmm0_2[0];
    _mm256_zeroupper();
    double var_6920[0x4];
    sub_14000cbf0(&var_6920, &var_6900, &var_68f0);
    double zmm1_2[0x4] = var_6920;
    double var_6a80[0x4] = zmm1_2;
    double var_89e0[0x4] = zmm1_2;
    double var_8a00[0x4] = zmm0_2;
    zmm0_2[0] = var_8c30;
    zmm0_2[0] = zmm0_2[0];
    int128_t var_67e0 = zmm0_2[0];
    int128_t var_67d0 = var_8c30;
    _mm256_zeroupper();
    double var_6800[0x4];
    sub_14000cbf0(&var_6800, &var_67e0, &var_67d0);
    double zmm0_4[0x4] = var_6800;
    double var_6bc0[0x4] = zmm0_4;
    zmm0_4[0] = var_8c30;
    zmm0_4[0] = zmm0_4[0];
    int128_t var_6840 = var_8c30;
    int128_t var_6830 = zmm0_4[0];
    _mm256_zeroupper();
    double var_6860[0x4];
    sub_14000cbf0(&var_6860, &var_6840, &var_6830);
    double zmm1_4[0x4] = var_6860;
    double var_6b80[0x4] = zmm1_4;
    double var_8960[0x4] = zmm1_4;
    double var_8980[0x4] = zmm0_4;
    zmm0_4[0] = zmm1;
    zmm0_4[0] = zmm0_4[0];
    int128_t var_6720 = zmm0_4[0];
    int128_t var_6710 = zmm1;
    _mm256_zeroupper();
    double var_6740[0x4];
    sub_14000cbf0(&var_6740, &var_6720, &var_6710);
    double zmm0_6[0x4] = var_6740;
    double var_6cc0[0x4] = zmm0_6;
    zmm0_6[0] = zmm1;
    zmm0_6[0] = zmm0_6[0];
    int128_t var_6780 = zmm1;
    int128_t var_6770 = zmm0_6[0];
    _mm256_zeroupper();
    double var_67a0[0x4];
    double zmm2_2[0x4] = sub_14000cbf0(&var_67a0, &var_6780, &var_6770);
    double zmm0_7[0x4] = var_67a0;
    double var_6c80[0x4] = zmm0_7;
    double var_88e0[0x4] = zmm0_7;
    double var_8900[0x4] = zmm0_6;
    zmm0_6[0] = arg1[2];
    zmm0_6[0] = zmm0_6[0];
    zmm0_6[0] = zmm0_6[0];
    zmm0_6[0] = zmm0_6[0];
    zmm0_6[0] = zmm0_6[0];
    int128_t var_8b80 = zmm0_6[0];
    int128_t var_4d0 = zmm0_6[0];
    int64_t var_638 = 0;
    _mm256_zeroupper();
    int128_t var_320;
    sub_14000e890(&var_320, 0);
    int128_t var_300 = var_320;
    int128_t var_310;
    sub_14000e8d0(&var_310, &var_300, var_638);
    var_320 = var_310;
    int128_t zmm0_9 = var_320;
    int64_t var_628 = 0;
    int128_t var_2e0;
    sub_14000e890(&var_2e0, 1);
    int128_t var_2c0 = var_2e0;
    int128_t var_2d0;
    sub_14000e8d0(&var_2d0, &var_2c0, var_628);
    var_2e0 = var_2d0;
    int128_t zmm0_11 = var_2e0;
    int64_t var_618 = 0;
    int128_t var_2a0;
    sub_14000e890(&var_2a0, 2);
    int128_t var_280 = var_2a0;
    int128_t var_290;
    sub_14000e8d0(&var_290, &var_280, var_618);
    var_2a0 = var_290;
    int128_t zmm0_13 = var_2a0;
    int64_t var_608 = 0;
    int128_t var_260;
    sub_14000e890(&var_260, 3);
    int128_t var_240 = var_260;
    int128_t var_250;
    double zmm0_15[0x4] = sub_14000e8d0(&var_250, &var_240, var_608);
    uint32_t zmm3[0x8];
    zmm3[0] = zmm0_11;
    zmm2_2[0] = zmm0_13;
    zmm0_15[0] = var_8b80;
    zmm0_7[0] = var_250;
    var_260 = zmm0_7[0];
    zmm0_7[0] = var_260;
    zmm0_7[0] = zmm0_7[0];
    zmm0_7[0] = zmm0_7[0];
    int128_t var_670 = zmm3[0];
    int128_t var_650 = zmm0_7[0];
    zmm2_2 = zmm2_2[0];
    double var_6c0[0x4] = zmm0_9;
    int128_t var_520 = zmm0_15[0];
    int128_t var_500 = zmm0_15[0];
    double var_560[0x4] = zmm0_15[0];
    double var_580[0x4] = zmm0_15[0];
    zmm2_2[0] = var_580[0];
    var_6c0[0] = var_6c0[0];
    zmm2_2[0] = zmm2_2[0];
    var_6c0[0] = var_6c0[0];
    int128_t var_50 = zmm2_2[0];
    int128_t var_40 = var_6c0[0];
    _mm256_zeroupper();
    int128_t var_60;
    sub_14000d9a0(&var_60, &var_50, &var_40);
    int128_t var_8b70 = var_60;
    zmm2_2[0] = var_580[2];
    zmm2_2[0] = zmm2_2[0];
    int128_t zmm0_16 = var_6c0[2];
    int128_t var_90 = zmm2_2[0];
    int128_t var_80 = zmm0_16;
    int128_t var_a0;
    sub_14000d9a0(&var_a0, &var_90, &var_80);
    int128_t var_8c90 = var_a0;
    zmm2_2[0] = var_560[0];
    zmm2_2[0] = zmm2_2[0];
    int128_t zmm0_17 = zmm2_2[0];
    int128_t var_d0 = zmm2_2[0];
    int128_t var_c0 = zmm0_17;
    int128_t var_e0;
    sub_14000d9a0(&var_e0, &var_d0, &var_c0);
    int128_t var_8ca0 = var_e0;
    zmm2_2[0] = var_560[2];
    zmm2_2[0] = zmm2_2[0];
    int128_t zmm0_18 = zmm2_2[2];
    int128_t var_110 = zmm2_2[0];
    int128_t var_100 = zmm0_18;
    int128_t var_120;
    sub_14000d9a0(&var_120, &var_110, &var_100);
    zmm2_2[0] = var_8ca0;
    zmm2_2[0] = var_8c90;
    zmm3[0] = var_8b70;
    int128_t zmm0_19 = var_120;
    int128_t var_220 = zmm3[0];
    int128_t var_210 = zmm2_2[0];
    int128_t var_200 = zmm2_2[0];
    int128_t var_1f0 = zmm0_19;
    void var_5c0;
    memcpy(&var_5c0, &var_220, 0x40);
    int64_t var_600;
    sub_14000ee00(&var_600, &var_5c0);
    int64_t var_5f8;
    int64_t var_3f8 = var_5f8;
    int64_t var_5f0;
    int64_t var_3f0 = var_5f0;
    int64_t var_5e8;
    int64_t var_3e8 = var_5e8;
    double zmm1_6[0x4] = var_600;
    int64_t var_5d8;
    int64_t var_3d8 = var_5d8;
    int64_t var_5d0;
    int64_t var_3d0 = var_5d0;
    int64_t var_5c8;
    int64_t var_3c8 = var_5c8;
    double var_440[0x4] = zmm1_6;
    int64_t var_5e0;
    double var_420[0x4] = var_5e0;
    _mm256_zeroupper();
    void var_8880;
    memcpy(&var_8880, &var_440, 0x40);
    double var_8b00[0x4];
    memcpy(&var_8b00, &var_8a00, 0x40);
    double var_8ac0[0x4];
    memcpy(&var_8ac0, &var_8980, 0x40);
    double var_8a80[0x4];
    memcpy(&var_8a80, &var_8900, 0x40);
    double var_8a40[0x4];
    double zmm0_21[0x4] = memcpy(&var_8a40, &var_8880, 0x40);
    int32_t var_8830 = sub_14000ef80(0, arg2);
    int32_t var_882c = arg2;
    double var_8ae0[0x4];
    uint32_t var_8aa0[0x8];
    double var_8a60[0x4];
    double var_8a20[0x4];
    
    while (true)
    {
        int32_t rax_9;
        int32_t rdx_24;
        rax_9 = sub_14000c720(&var_8830);
        int32_t var_8824_1 = rdx_24;
        
        if (rax_9 == 0)
            break;
        
        int32_t var_8640_1[0x8] = var_8a20;
        int32_t var_8660_1[0x8] = var_8a40;
        uint8_t var_8680[0x20] = var_8a60;
        uint8_t var_86a0[0x20] = var_8a80;
        zmm0_21 = var_8b00;
        zmm2_2 = var_8ac0;
        double var_8700[0x4] = var_8ae0;
        double var_8720[0x4] = zmm0_21;
        double (* var_8e28_1)[0x4] = &var_8700;
        double var_3b00_1[0x4] = var_8aa0;
        int256_t* var_2de8_1 = &var_8720;
        int256_t* var_2d08_1 = &var_8720;
        double var_2280[0x4] = var_8720;
        double var_2260[0x4] = zmm2_2;
        _mm256_zeroupper();
        int32_t var_22a0[0x8];
        sub_14000cd40(&var_22a0, &var_2280, &var_2260);
        var_8720 = var_22a0;
        int32_t var_2dc0_1[0x8] = var_3b00_1;
        double (* var_2d88_1)[0x4] = var_8e28_1;
        int32_t var_2300[0x8] = var_8700;
        int32_t var_22e0[0x8] = var_2dc0_1;
        _mm256_zeroupper();
        int32_t var_2320[0x8];
        sub_14000cd40(&var_2320, &var_2300, &var_22e0);
        var_8700 = var_2320;
        int32_t var_3a00_1[0x8] = var_8700;
        int32_t zmm0_50[0x8] = var_8720;
        int32_t var_1e80[0x8] = var_8660_1;
        int32_t var_1e60[0x8] = zmm0_50;
        _mm256_zeroupper();
        int32_t var_1ea0[0x8];
        sub_14000ce00(&var_1ea0, &var_1e80, &var_1e60);
        int32_t var_8e20_1[0x8] = var_1ea0;
        int32_t var_1f00[0x8] = var_8640_1;
        int32_t var_1ee0[0x8] = var_3a00_1;
        _mm256_zeroupper();
        int32_t var_1f20[0x8];
        sub_14000ce00(&var_1f20, &var_1f00, &var_1ee0);
        int32_t var_3300_1[0x8] = var_1f20;
        int64_t var_8eb0_1 = 0x504070601000302;
        int64_t var_9540_1 = 0x504070601000302;
        int64_t var_8ea8_1 = 0xd0c0f0e09080b0a;
        _mm256_zeroupper();
        int256_t var_2b40;
        sub_14000cb90(&var_2b40, 0xd0c0f0e09080b0a);
        int256_t zmm0_53 = var_2b40;
        int32_t var_2b00[0x8] = var_8e20_1;
        int256_t var_2ae0 = zmm0_53;
        _mm256_zeroupper();
        uint8_t var_2b20[0x20];
        sub_14000d280(&var_2b20, &var_2b00, &var_2ae0);
        uint8_t var_8e80_1[0x20] = var_2b20;
        int64_t var_9540_2 = var_8eb0_1;
        _mm256_zeroupper();
        int256_t var_2be0;
        sub_14000cb90(&var_2be0, var_8ea8_1);
        int256_t zmm0_55 = var_2be0;
        uint8_t var_2ba0[0x20] = var_3300_1;
        int256_t var_2b80 = zmm0_55;
        _mm256_zeroupper();
        uint8_t var_2bc0[0x20];
        sub_14000d280(&var_2bc0, &var_2ba0, &var_2b80);
        uint8_t var_2c80_1[0x20] = var_2bc0;
        int256_t* var_2f48_1 = &var_86a0;
        int256_t* var_2e68_1 = &var_86a0;
        uint8_t var_2180[0x20] = var_86a0;
        uint8_t var_2160[0x20] = var_8e80_1;
        _mm256_zeroupper();
        int32_t var_21a0[0x8];
        sub_14000cd40(&var_21a0, &var_2180, &var_2160);
        var_86a0 = var_21a0;
        int256_t* var_2ee8_1 = &var_8680;
        uint8_t var_2200[0x20] = var_8680;
        uint8_t var_21e0[0x20] = var_2c80_1;
        _mm256_zeroupper();
        double var_2220[0x4];
        sub_14000cd40(&var_2220, &var_2200, &var_21e0);
        var_8680 = var_2220;
        uint32_t var_38c0_1[0x8] = var_8680;
        double zmm0_58[0x4] = var_86a0;
        uint32_t var_1d80[0x8] = zmm2_2;
        double var_1d60[0x4] = zmm0_58;
        _mm256_zeroupper();
        uint32_t var_1da0[0x8];
        sub_14000ce00(&var_1da0, &var_1d80, &var_1d60);
        uint32_t var_8e60_1[0x8] = var_1da0;
        uint32_t var_1e00[0x8] = var_8aa0;
        uint32_t var_1de0[0x8] = var_38c0_1;
        _mm256_zeroupper();
        uint32_t var_1e20[0x8];
        sub_14000ce00(&var_1e20, &var_1e00, &var_1de0);
        uint32_t var_3400_1[0x8] = var_1e20;
        uint32_t var_28c0[0x8] = var_8e60_1;
        _mm256_zeroupper();
        uint32_t var_28e0[0x8];
        sub_14000d190(&var_28e0, &var_28c0);
        uint32_t var_8f60_1[0x8] = var_28e0;
        uint32_t var_2880[0x8] = var_8e60_1;
        _mm256_zeroupper();
        int256_t var_28a0;
        sub_14000cec0(&var_28a0, &var_2880);
        int256_t zmm0_62 = var_28a0;
        uint32_t var_2840[0x8] = var_8f60_1;
        int256_t var_2820 = zmm0_62;
        _mm256_zeroupper();
        uint32_t var_2860[0x8];
        sub_14000cc80(&var_2860, &var_2840, &var_2820);
        uint32_t var_8f20_1[0x8] = var_2860;
        uint32_t var_29c0[0x8] = var_3400_1;
        _mm256_zeroupper();
        uint32_t var_29e0[0x8];
        sub_14000d190(&var_29e0, &var_29c0);
        uint32_t var_8f40_1[0x8] = var_29e0;
        uint32_t var_2980[0x8] = var_3400_1;
        _mm256_zeroupper();
        int256_t var_29a0;
        sub_14000cec0(&var_29a0, &var_2980);
        int256_t zmm0_65 = var_29a0;
        uint32_t var_2940[0x8] = var_8f40_1;
        int256_t var_2920 = zmm0_65;
        _mm256_zeroupper();
        uint32_t var_2960[0x8];
        sub_14000cc80(&var_2960, &var_2940, &var_2920);
        uint32_t var_2a80_1[0x8] = var_2960;
        double (* var_30a8_1)[0x4] = &var_8720;
        double (* var_2fc8_1)[0x4] = &var_8720;
        uint32_t var_2080[0x8] = var_8720;
        uint32_t var_2060[0x8] = var_8f20_1;
        _mm256_zeroupper();
        uint32_t var_20a0[0x8];
        sub_14000cd40(&var_20a0, &var_2080, &var_2060);
        var_8720 = var_20a0;
        double (* var_3048_1)[0x4] = &var_8700;
        uint32_t var_2100[0x8] = var_8700;
        uint32_t var_20e0[0x8] = var_2a80_1;
        _mm256_zeroupper();
        uint8_t var_2120[0x20];
        sub_14000cd40(&var_2120, &var_2100, &var_20e0);
        var_8700 = var_2120;
        double var_37c0_1[0x4] = var_2c80_1;
        double var_3780_1[0x4] = var_8700;
        uint8_t zmm0_68[0x20] = var_8720;
        double var_1c80[0x4] = var_8e80_1;
        uint8_t var_1c60[0x20] = zmm0_68;
        _mm256_zeroupper();
        double var_1ca0[0x4];
        sub_14000ce00(&var_1ca0, &var_1c80, &var_1c60);
        double var_8f00_1[0x4] = var_1ca0;
        double var_1d00[0x4] = var_37c0_1;
        double var_1ce0[0x4] = var_3780_1;
        _mm256_zeroupper();
        double var_1d20[0x4];
        sub_14000ce00(&var_1d20, &var_1d00, &var_1ce0);
        double var_3500_1[0x4] = var_1d20;
        int64_t var_8fd0_1 = 0x605040702010003;
        int64_t var_9540_3 = 0x605040702010003;
        int64_t var_8fc8_1 = 0xe0d0c0f0a09080b;
        _mm256_zeroupper();
        int256_t var_2680;
        sub_14000cb90(&var_2680, 0xe0d0c0f0a09080b);
        int256_t zmm0_71 = var_2680;
        double var_2640[0x4] = var_8f00_1;
        int256_t var_2620 = zmm0_71;
        _mm256_zeroupper();
        double var_2660[0x4];
        sub_14000d280(&var_2660, &var_2640, &var_2620);
        double var_8fa0_1[0x4] = var_2660;
        int64_t var_9540_4 = var_8fd0_1;
        _mm256_zeroupper();
        int256_t var_2720;
        sub_14000cb90(&var_2720, var_8fc8_1);
        int256_t zmm0_73 = var_2720;
        double var_26e0[0x4] = var_3500_1;
        int256_t var_26c0 = zmm0_73;
        _mm256_zeroupper();
        double var_2700[0x4];
        sub_14000d280(&var_2700, &var_26e0, &var_26c0);
        double var_27c0_1[0x4] = var_2700;
        uint8_t (* var_3208_1)[0x20] = &var_86a0;
        uint8_t (* var_3128_1)[0x20] = &var_86a0;
        double var_1f80[0x4] = var_86a0;
        double var_1f60[0x4] = var_8fa0_1;
        _mm256_zeroupper();
        int32_t var_1fa0[0x8];
        sub_14000cd40(&var_1fa0, &var_1f80, &var_1f60);
        var_86a0 = var_1fa0;
        int32_t var_31e0_1[0x8] = var_27c0_1;
        uint8_t (* var_31a8_1)[0x20] = &var_8680;
        int32_t var_2000[0x8] = var_8680;
        int32_t var_1fe0[0x8] = var_31e0_1;
        _mm256_zeroupper();
        uint8_t var_2020[0x20];
        sub_14000cd40(&var_2020, &var_2000, &var_1fe0);
        var_8680 = var_2020;
        uint32_t var_3640_1[0x8] = var_8680;
        uint8_t zmm0_76[0x20] = var_86a0;
        uint32_t var_1b80[0x8] = var_8f20_1;
        uint8_t var_1b60[0x20] = zmm0_76;
        _mm256_zeroupper();
        uint32_t var_1ba0[0x8];
        sub_14000ce00(&var_1ba0, &var_1b80, &var_1b60);
        uint32_t var_8f80_1[0x8] = var_1ba0;
        uint32_t var_1c00[0x8] = var_2a80_1;
        uint32_t var_1be0[0x8] = var_3640_1;
        _mm256_zeroupper();
        uint32_t var_1c20[0x8];
        sub_14000ce00(&var_1c20, &var_1c00, &var_1be0);
        uint32_t var_3600_1[0x8] = var_1c20;
        uint32_t var_2400[0x8] = var_8f80_1;
        _mm256_zeroupper();
        uint32_t var_2420[0x8];
        sub_14000d0a0(&var_2420, &var_2400);
        uint32_t var_9060_1[0x8] = var_2420;
        uint32_t var_23c0[0x8] = var_8f80_1;
        _mm256_zeroupper();
        int256_t var_23e0;
        sub_14000cfb0(&var_23e0, &var_23c0);
        int256_t zmm0_80 = var_23e0;
        uint32_t var_2380[0x8] = var_9060_1;
        int256_t var_2360 = zmm0_80;
        _mm256_zeroupper();
        uint32_t var_23a0[0x8];
        sub_14000cc80(&var_23a0, &var_2380, &var_2360);
        uint32_t var_9020_1[0x8] = var_23a0;
        uint32_t var_2500[0x8] = var_3600_1;
        _mm256_zeroupper();
        uint32_t var_2520[0x8];
        sub_14000d0a0(&var_2520, &var_2500);
        uint32_t var_9040_1[0x8] = var_2520;
        uint32_t var_24c0[0x8] = var_3600_1;
        _mm256_zeroupper();
        int256_t var_24e0;
        sub_14000cfb0(&var_24e0, &var_24c0);
        int256_t zmm0_83 = var_24e0;
        uint32_t var_2480[0x8] = var_9040_1;
        int256_t var_2460 = zmm0_83;
        _mm256_zeroupper();
        double var_24a0[0x4];
        sub_14000cc80(&var_24a0, &var_2480, &var_2460);
        double var_86e0_3[0x4] = var_9020_1;
        double var_8780_1[0x4] = var_8680;
        double var_87a0_1[0x4] = var_86a0;
        double zmm1_46[0x4] = var_8700;
        zmm3 = var_24a0;
        double var_8820_1[0x4] = var_8720;
        var_8a20 = var_27c0_1;
        var_8a40 = var_8fa0_1;
        var_8a60 = var_8780_1;
        var_8a80 = var_87a0_1;
        var_8aa0 = zmm3;
        var_8ac0 = var_86e0_3;
        var_8ae0 = zmm1_46;
        var_8b00 = var_8820_1;
        double var_8260_1[0x4] = var_8a40;
        double var_82a0_1[0x4] = var_8a80;
        double var_8320_1[0x4] = var_8b00;
        char var_1981_1 = 0;
        char var_1982_1 = 0;
        char var_1983_1 = 0;
        char var_1983_2 = 1;
        char var_1982_2 = 1;
        char var_1981_2 = 1;
        char var_1981_3 = 0;
        double var_1540[0x4] = var_8ac0;
        _mm256_zeroupper();
        uint32_t var_1560[0x8];
        sub_14000d400(&var_1560, &var_1540);
        double var_9080_1[0x4] = var_1560;
        double var_15a0[0x4] = var_8aa0;
        _mm256_zeroupper();
        double var_15c0[0x4];
        sub_14000d400(&var_15c0, &var_15a0);
        double var_1660_1[0x4] = var_15c0;
        char var_1981_4 = 1;
        char var_1982_3 = 0;
        double var_16c0[0x4] = var_82a0_1;
        _mm256_zeroupper();
        uint32_t var_16e0[0x8];
        sub_14000d4d0(&var_16e0, &var_16c0);
        uint32_t var_90a0_1[0x8] = var_16e0;
        uint32_t var_1720[0x8] = var_8a60;
        _mm256_zeroupper();
        uint32_t var_1740[0x8];
        sub_14000d4d0(&var_1740, &var_1720);
        double var_17e0_1[0x4] = var_1740;
        char var_1982_4 = 1;
        double var_82a0_2[0x4] = var_90a0_1;
        char var_1983_3 = 0;
        double var_1840[0x4] = var_8260_1;
        _mm256_zeroupper();
        double var_1860[0x4];
        sub_14000d330(&var_1860, &var_1840);
        double var_90c0_1[0x4] = var_1860;
        double var_18a0[0x4] = var_8a20;
        _mm256_zeroupper();
        double var_18c0[0x4];
        sub_14000d330(&var_18c0, &var_18a0);
        double var_1960_1[0x4] = var_18c0;
        char var_1983_4 = 1;
        char var_1983_5 = 0;
        char var_1982_5 = 0;
        char var_1981_5 = 0;
        int32_t var_8380[0x8] = var_17e0_1;
        int32_t var_83a0[0x8] = var_82a0_2;
        zmm3 = var_1660_1;
        int32_t var_8400[0x8] = var_8ae0;
        int32_t var_8420[0x8] = var_8320_1;
        int32_t (* var_90e8_1)[0x8] = &var_8400;
        double var_5b00_1[0x4] = zmm3;
        int32_t (* var_4de8_1)[0x8] = &var_8420;
        int32_t (* var_4d08_1)[0x8] = &var_8420;
        double var_4280[0x4] = var_8420;
        double var_4260[0x4] = var_9080_1;
        _mm256_zeroupper();
        int32_t var_42a0[0x8];
        sub_14000cd40(&var_42a0, &var_4280, &var_4260);
        var_8420 = var_42a0;
        int32_t var_4dc0_1[0x8] = var_5b00_1;
        int32_t (* var_4d88_1)[0x8] = var_90e8_1;
        int32_t var_4300[0x8] = var_8400;
        int32_t var_42e0[0x8] = var_4dc0_1;
        _mm256_zeroupper();
        int32_t var_4320[0x8];
        sub_14000cd40(&var_4320, &var_4300, &var_42e0);
        var_8400 = var_4320;
        int32_t var_5a40_1[0x8] = var_1960_1;
        int32_t var_5a00_1[0x8] = var_8400;
        int32_t zmm0_92[0x8] = var_8420;
        int32_t var_3e80[0x8] = var_90c0_1;
        int32_t var_3e60[0x8] = zmm0_92;
        _mm256_zeroupper();
        int32_t var_3ea0[0x8];
        sub_14000ce00(&var_3ea0, &var_3e80, &var_3e60);
        int32_t var_90e0_1[0x8] = var_3ea0;
        int32_t var_3f00[0x8] = var_5a40_1;
        int32_t var_3ee0[0x8] = var_5a00_1;
        _mm256_zeroupper();
        int32_t var_3f20[0x8];
        sub_14000ce00(&var_3f20, &var_3f00, &var_3ee0);
        int32_t var_5300_1[0x8] = var_3f20;
        int64_t var_9170_1 = 0x504070601000302;
        int64_t var_9540_5 = 0x504070601000302;
        int64_t var_9168_1 = 0xd0c0f0e09080b0a;
        _mm256_zeroupper();
        int256_t var_4b40;
        sub_14000cb90(&var_4b40, 0xd0c0f0e09080b0a);
        int256_t zmm0_95 = var_4b40;
        int32_t var_4b00[0x8] = var_90e0_1;
        int256_t var_4ae0 = zmm0_95;
        _mm256_zeroupper();
        uint8_t var_4b20[0x20];
        sub_14000d280(&var_4b20, &var_4b00, &var_4ae0);
        int32_t var_9140_1[0x8] = var_4b20;
        int64_t var_9540_6 = var_9170_1;
        _mm256_zeroupper();
        int256_t var_4be0;
        sub_14000cb90(&var_4be0, var_9168_1);
        int256_t zmm0_97 = var_4be0;
        int32_t var_4ba0[0x8] = var_5300_1;
        int256_t var_4b80 = zmm0_97;
        _mm256_zeroupper();
        uint8_t var_4bc0[0x20];
        sub_14000d280(&var_4bc0, &var_4ba0, &var_4b80);
        int32_t var_4c80_1[0x8] = var_4bc0;
        int32_t (* var_4f48_1)[0x8] = &var_83a0;
        int32_t (* var_4e68_1)[0x8] = &var_83a0;
        int32_t var_4180[0x8] = var_83a0;
        int32_t var_4160[0x8] = var_9140_1;
        _mm256_zeroupper();
        int32_t var_41a0[0x8];
        sub_14000cd40(&var_41a0, &var_4180, &var_4160);
        var_83a0 = var_41a0;
        int32_t (* var_4ee8_1)[0x8] = &var_8380;
        int32_t var_4200[0x8] = var_8380;
        int32_t var_41e0[0x8] = var_4c80_1;
        _mm256_zeroupper();
        int32_t var_4220[0x8];
        sub_14000cd40(&var_4220, &var_4200, &var_41e0);
        var_8380 = var_4220;
        uint32_t var_58c0_1[0x8] = var_8380;
        int32_t zmm0_100[0x8] = var_83a0;
        uint32_t var_3d80[0x8] = var_9080_1;
        int32_t var_3d60[0x8] = zmm0_100;
        _mm256_zeroupper();
        uint32_t var_3da0[0x8];
        sub_14000ce00(&var_3da0, &var_3d80, &var_3d60);
        uint32_t var_9120_1[0x8] = var_3da0;
        uint32_t var_3e00[0x8] = zmm3;
        uint32_t var_3de0[0x8] = var_58c0_1;
        _mm256_zeroupper();
        uint32_t var_3e20[0x8];
        sub_14000ce00(&var_3e20, &var_3e00, &var_3de0);
        uint32_t var_5400_1[0x8] = var_3e20;
        uint32_t var_48c0[0x8] = var_9120_1;
        _mm256_zeroupper();
        uint32_t var_48e0[0x8];
        sub_14000d190(&var_48e0, &var_48c0);
        uint32_t var_9220_1[0x8] = var_48e0;
        uint32_t var_4880[0x8] = var_9120_1;
        _mm256_zeroupper();
        int256_t var_48a0;
        sub_14000cec0(&var_48a0, &var_4880);
        int256_t zmm0_104 = var_48a0;
        uint32_t var_4840[0x8] = var_9220_1;
        int256_t var_4820 = zmm0_104;
        _mm256_zeroupper();
        uint32_t var_4860[0x8];
        sub_14000cc80(&var_4860, &var_4840, &var_4820);
        uint32_t var_91e0_1[0x8] = var_4860;
        int32_t var_4a00_1[0x8] = var_5400_1;
        uint32_t var_49c0[0x8] = var_4a00_1;
        _mm256_zeroupper();
        int32_t var_49e0[0x8];
        sub_14000d190(&var_49e0, &var_49c0);
        int32_t var_9200_1[0x8] = var_49e0;
        int32_t var_4980[0x8] = var_4a00_1;
        _mm256_zeroupper();
        int32_t var_49a0[0x8];
        sub_14000cec0(&var_49a0, &var_4980);
        int32_t zmm0_107[0x8] = var_49a0;
        int32_t var_4940[0x8] = var_9200_1;
        int32_t var_4920[0x8] = zmm0_107;
        _mm256_zeroupper();
        int32_t var_4960[0x8];
        sub_14000cc80(&var_4960, &var_4940, &var_4920);
        uint32_t var_83c0_2[0x8] = var_4960;
        int32_t var_83e0_2[0x8] = var_91e0_1;
        int32_t (* var_50a8_1)[0x8] = &var_8420;
        int32_t (* var_4fc8_1)[0x8] = &var_8420;
        uint32_t var_4080[0x8] = var_8420;
        int32_t var_4060[0x8] = var_83e0_2;
        _mm256_zeroupper();
        int32_t var_40a0[0x8];
        sub_14000cd40(&var_40a0, &var_4080, &var_4060);
        var_8420 = var_40a0;
        int32_t var_5080_1[0x8] = var_83c0_2;
        int32_t (* var_5048_1)[0x8] = &var_8400;
        int32_t var_4100[0x8] = var_8400;
        int32_t var_40e0[0x8] = var_5080_1;
        _mm256_zeroupper();
        int32_t var_4120[0x8];
        sub_14000cd40(&var_4120, &var_4100, &var_40e0);
        var_8400 = var_4120;
        int32_t var_5780_1[0x8] = var_8400;
        int32_t zmm0_110[0x8] = var_8420;
        int32_t var_3c80[0x8] = var_9140_1;
        int32_t var_3c60[0x8] = zmm0_110;
        _mm256_zeroupper();
        int32_t var_3ca0[0x8];
        sub_14000ce00(&var_3ca0, &var_3c80, &var_3c60);
        int32_t var_91c0_1[0x8] = var_3ca0;
        int32_t var_3d00[0x8] = var_4c80_1;
        int32_t var_3ce0[0x8] = var_5780_1;
        _mm256_zeroupper();
        int32_t var_3d20[0x8];
        sub_14000ce00(&var_3d20, &var_3d00, &var_3ce0);
        int32_t var_5500_1[0x8] = var_3d20;
        int64_t var_9290_1 = 0x605040702010003;
        int64_t var_9540_7 = 0x605040702010003;
        int64_t var_9288_1 = 0xe0d0c0f0a09080b;
        _mm256_zeroupper();
        int256_t var_4680;
        sub_14000cb90(&var_4680, 0xe0d0c0f0a09080b);
        int256_t zmm0_113 = var_4680;
        int32_t var_4640[0x8] = var_91c0_1;
        int256_t var_4620 = zmm0_113;
        _mm256_zeroupper();
        uint8_t var_4660[0x20];
        sub_14000d280(&var_4660, &var_4640, &var_4620);
        uint8_t var_9260_1[0x20] = var_4660;
        int64_t var_9540_8 = var_9290_1;
        _mm256_zeroupper();
        int256_t var_4720;
        sub_14000cb90(&var_4720, var_9288_1);
        int256_t zmm0_115 = var_4720;
        uint8_t var_46e0[0x20] = var_5500_1;
        int256_t var_46c0 = zmm0_115;
        _mm256_zeroupper();
        uint8_t var_4700[0x20];
        sub_14000d280(&var_4700, &var_46e0, &var_46c0);
        uint8_t var_47c0_1[0x20] = var_4700;
        int32_t (* var_5208_1)[0x8] = &var_83a0;
        int32_t (* var_5128_1)[0x8] = &var_83a0;
        uint8_t var_3f80[0x20] = var_83a0;
        uint8_t var_3f60[0x20] = var_9260_1;
        _mm256_zeroupper();
        int32_t var_3fa0[0x8];
        sub_14000cd40(&var_3fa0, &var_3f80, &var_3f60);
        var_83a0 = var_3fa0;
        int32_t var_51e0_1[0x8] = var_47c0_1;
        int32_t (* var_51a8_1)[0x8] = &var_8380;
        int32_t var_4000[0x8] = var_8380;
        int32_t var_3fe0[0x8] = var_51e0_1;
        _mm256_zeroupper();
        int32_t var_4020[0x8];
        sub_14000cd40(&var_4020, &var_4000, &var_3fe0);
        var_8380 = var_4020;
        int32_t var_5680_1[0x8] = var_83c0_2;
        int32_t var_5640_1[0x8] = var_8380;
        int32_t zmm0_118[0x8] = var_83a0;
        int32_t var_3b80[0x8] = var_83e0_2;
        int32_t var_3b60[0x8] = zmm0_118;
        _mm256_zeroupper();
        int32_t var_3ba0[0x8];
        sub_14000ce00(&var_3ba0, &var_3b80, &var_3b60);
        int32_t var_9240_1[0x8] = var_3ba0;
        int32_t var_3c00[0x8] = var_5680_1;
        int32_t var_3be0[0x8] = var_5640_1;
        _mm256_zeroupper();
        int32_t var_3c20[0x8];
        sub_14000ce00(&var_3c20, &var_3c00, &var_3be0);
        int32_t var_5600_1[0x8] = var_3c20;
        int32_t var_4400[0x8] = var_9240_1;
        _mm256_zeroupper();
        int32_t var_4420[0x8];
        sub_14000d0a0(&var_4420, &var_4400);
        int32_t var_9320_1[0x8] = var_4420;
        int32_t var_43c0[0x8] = var_9240_1;
        _mm256_zeroupper();
        int32_t var_43e0[0x8];
        sub_14000cfb0(&var_43e0, &var_43c0);
        int32_t zmm0_122[0x8] = var_43e0;
        int32_t var_4380[0x8] = var_9320_1;
        int32_t var_4360[0x8] = zmm0_122;
        _mm256_zeroupper();
        int32_t var_43a0[0x8];
        sub_14000cc80(&var_43a0, &var_4380, &var_4360);
        int32_t var_92e0_1[0x8] = var_43a0;
        int32_t var_4500[0x8] = var_5600_1;
        _mm256_zeroupper();
        int32_t var_4520[0x8];
        sub_14000d0a0(&var_4520, &var_4500);
        int32_t var_9300_1[0x8] = var_4520;
        int32_t var_44c0[0x8] = var_5600_1;
        _mm256_zeroupper();
        int32_t var_44e0[0x8];
        sub_14000cfb0(&var_44e0, &var_44c0);
        int32_t zmm0_125[0x8] = var_44e0;
        int32_t var_4480[0x8] = var_9300_1;
        int32_t var_4460[0x8] = zmm0_125;
        _mm256_zeroupper();
        double var_44a0[0x4];
        sub_14000cc80(&var_44a0, &var_4480, &var_4460);
        uint32_t var_83c0_3[0x8] = var_44a0;
        double var_83e0_3[0x4] = var_92e0_1;
        uint32_t var_8440_1[0x8] = var_47c0_1;
        uint32_t var_8460[0x8] = var_9260_1;
        uint32_t var_8480_1[0x8] = var_8380;
        uint32_t var_84a0_1[0x8] = var_83a0;
        zmm3 = var_83c0_3;
        uint32_t var_8500_1[0x8] = var_8400;
        double var_8520[0x4] = var_8420;
        char var_1361_1 = 0;
        char var_1362_1 = 0;
        char var_1363_1 = 0;
        char var_1363_2 = 1;
        char var_1362_2 = 1;
        char var_1361_2 = 1;
        char var_1361_3 = 0;
        double var_1220[0x4] = var_83e0_3;
        _mm256_zeroupper();
        uint32_t var_1240[0x8];
        sub_14000d330(&var_1240, &var_1220);
        uint32_t var_9340_1[0x8] = var_1240;
        uint32_t var_1280[0x8] = zmm3;
        _mm256_zeroupper();
        uint32_t var_12a0[0x8];
        sub_14000d330(&var_12a0, &var_1280);
        char var_1361_4 = 1;
        uint32_t var_84c0_2[0x8] = var_12a0;
        uint32_t var_84e0_2[0x8] = var_9340_1;
        char var_1362_3 = 0;
        uint32_t var_10a0[0x8] = var_84a0_1;
        _mm256_zeroupper();
        uint32_t var_10c0[0x8];
        sub_14000d4d0(&var_10c0, &var_10a0);
        uint32_t var_9360_1[0x8] = var_10c0;
        uint32_t var_1100[0x8] = var_8480_1;
        _mm256_zeroupper();
        uint32_t var_1120[0x8];
        sub_14000d4d0(&var_1120, &var_1100);
        char var_1362_4 = 1;
        uint32_t var_8480_2[0x8] = var_1120;
        uint32_t var_84a0_2[0x8] = var_9360_1;
        char var_1363_3 = 0;
        uint32_t var_f20[0x8] = var_8460;
        _mm256_zeroupper();
        uint32_t var_f40[0x8];
        sub_14000d400(&var_f40, &var_f20);
        uint32_t var_9380_1[0x8] = var_f40;
        uint32_t var_f80[0x8] = var_8440_1;
        _mm256_zeroupper();
        uint32_t var_fa0[0x8];
        sub_14000d400(&var_fa0, &var_f80);
        zmm1_6 = var_9380_1;
        uint32_t zmm0_132[0x8] = var_fa0;
        double var_1060[0x4] = zmm1_6;
        uint32_t var_1040_1[0x8] = zmm0_132;
        _mm256_zeroupper();
        void var_1400;
        memcpy(&var_1400, &var_1060, 0x40);
        char var_1363_4 = 1;
        memcpy(&var_8460, &var_1400, 0x40);
        char var_1363_5 = 0;
        char var_1362_5 = 0;
        char var_1361_5 = 0;
        void var_8620;
        memcpy(&var_8620, &var_8520, 0x100);
        zmm0_21 = memcpy(&var_8b00, &var_8620, 0x100);
    }
    
    zmm0_21[0] = zmm0_1;
    int128_t var_81b0 = zmm0_21[0];
    int128_t var_81a0 = zmm0_21[0];
    zmm1_6[0] = zmm0_21[0];
    zmm0_21[0] = zmm0_21[0];
    zmm1_6[0] = zmm1_6[0];
    zmm0_21[0] = zmm0_21[0];
    int128_t var_6660 = zmm1_6[0];
    int128_t var_6650 = zmm0_21[0];
    double var_6680[0x4];
    sub_14000cbf0(&var_6680, &var_6660, &var_6650);
    double zmm0_22[0x4] = var_6680;
    double var_6dc0[0x4] = zmm0_22;
    zmm0_22[0] = var_81a0;
    zmm0_22[0] = zmm0_22[0];
    int128_t var_66c0 = var_81b0;
    int128_t var_66b0 = zmm0_22[0];
    _mm256_zeroupper();
    double var_66e0[0x4];
    sub_14000cbf0(&var_66e0, &var_66c0, &var_66b0);
    double zmm0_23[0x4] = var_66e0;
    double var_6d80[0x4] = zmm0_23;
    zmm0_22[0] = *arg1;
    zmm0_22[0] = zmm0_22[0];
    zmm0_22[0] = zmm0_22[0];
    zmm0_22[0] = zmm0_22[0];
    int128_t var_7a10 = zmm0_22[0];
    int128_t var_8110 = zmm0_22[0];
    int128_t var_8100 = zmm0_22[0];
    zmm0_23[0] = zmm0_22[0];
    zmm0_22[0] = zmm0_22[0];
    zmm0_23[0] = zmm0_23[0];
    zmm0_22[0] = zmm0_22[0];
    int128_t var_65a0 = zmm0_23[0];
    int128_t var_6590 = zmm0_22[0];
    _mm256_zeroupper();
    uint32_t var_65c0[0x8];
    sub_14000cbf0(&var_65c0, &var_65a0, &var_6590);
    uint32_t zmm0_24[0x8] = var_65c0;
    uint32_t var_6ec0[0x8] = zmm0_24;
    zmm0_24[0] = var_8100;
    zmm0_24[0] = zmm0_24[0];
    int128_t var_6600 = var_8110;
    int128_t var_65f0 = zmm0_24[0];
    _mm256_zeroupper();
    uint32_t var_6620[0x8];
    sub_14000cbf0(&var_6620, &var_6600, &var_65f0);
    uint32_t zmm0_25[0x8] = var_6620;
    uint32_t var_6e80[0x8] = zmm0_25;
    zmm0_24[0] = arg1[1];
    zmm0_24[0] = zmm0_24[0];
    zmm0_24[0] = zmm0_24[0];
    zmm0_24[0] = zmm0_24[0];
    int128_t var_79f0 = zmm0_24[0];
    int128_t var_8080 = zmm0_24[0];
    int128_t var_8070 = zmm0_24[0];
    zmm0_25[0] = zmm0_24[0];
    zmm0_24[0] = zmm0_24[0];
    zmm0_25[0] = zmm0_25[0];
    zmm0_24[0] = zmm0_24[0];
    int128_t var_64e0 = zmm0_25[0];
    int128_t var_64d0 = zmm0_24[0];
    _mm256_zeroupper();
    double var_6500[0x4];
    sub_14000cbf0(&var_6500, &var_64e0, &var_64d0);
    double zmm0_26[0x4] = var_6500;
    double var_6fc0[0x4] = zmm0_26;
    zmm0_26[0] = var_8070;
    zmm0_26[0] = zmm0_26[0];
    int128_t var_6540 = var_8080;
    int128_t var_6530 = zmm0_26[0];
    _mm256_zeroupper();
    double var_6560[0x4];
    double zmm2_3[0x4] = sub_14000cbf0(&var_6560, &var_6540, &var_6530);
    double zmm0_27[0x4] = var_6560;
    double var_6f80[0x4] = zmm0_27;
    zmm0_26[0] = arg1[2];
    zmm0_26[0] = zmm0_26[0];
    zmm0_26[0] = zmm0_26[0];
    zmm0_26[0] = zmm0_26[0];
    zmm0_26[0] = zmm0_26[0];
    int128_t var_8cc0 = zmm0_26[0];
    int128_t var_b70 = zmm0_26[0];
    int64_t var_cd8 = 0;
    _mm256_zeroupper();
    int128_t var_9c0;
    sub_14000e890(&var_9c0, 0);
    int128_t var_9a0 = var_9c0;
    int128_t var_9b0;
    sub_14000e8d0(&var_9b0, &var_9a0, var_cd8);
    var_9c0 = var_9b0;
    int128_t zmm0_29 = var_9c0;
    int64_t var_cc8 = 0;
    int128_t var_980;
    sub_14000e890(&var_980, 1);
    int128_t var_960 = var_980;
    int128_t var_970;
    sub_14000e8d0(&var_970, &var_960, var_cc8);
    var_980 = var_970;
    int128_t zmm0_31 = var_980;
    int64_t var_cb8 = 0;
    int128_t var_940;
    sub_14000e890(&var_940, 2);
    int128_t var_920 = var_940;
    int128_t var_930;
    sub_14000e8d0(&var_930, &var_920, var_cb8);
    var_940 = var_930;
    int128_t zmm0_33 = var_940;
    int64_t var_ca8 = 0;
    int128_t var_900;
    sub_14000e890(&var_900, 3);
    int128_t var_8e0 = var_900;
    int128_t var_8f0;
    double zmm0_35[0x4] = sub_14000e8d0(&var_8f0, &var_8e0, var_ca8);
    zmm3[0] = zmm0_31;
    zmm2_3[0] = zmm0_33;
    zmm0_35[0] = var_8cc0;
    zmm0_27[0] = var_8f0;
    var_900 = zmm0_27[0];
    zmm0_27[0] = var_900;
    zmm0_27[0] = zmm0_27[0];
    zmm0_27[0] = zmm0_27[0];
    int128_t var_d10 = zmm3[0];
    int128_t var_cf0 = zmm0_27[0];
    zmm2_3 = zmm2_3[0];
    double var_d60[0x4] = zmm0_29;
    int128_t var_bc0 = zmm0_35[0];
    int128_t var_ba0 = zmm0_35[0];
    double var_c00[0x4] = zmm0_35[0];
    double var_c20[0x4] = zmm0_35[0];
    zmm2_3[0] = var_c20[0];
    var_d60[0] = var_d60[0];
    zmm2_3[0] = zmm2_3[0];
    var_d60[0] = var_d60[0];
    int128_t var_6f0 = zmm2_3[0];
    int128_t var_6e0 = var_d60[0];
    _mm256_zeroupper();
    int128_t var_700;
    sub_14000d9a0(&var_700, &var_6f0, &var_6e0);
    int128_t var_8cb0 = var_700;
    zmm2_3[0] = var_c20[2];
    zmm2_3[0] = zmm2_3[0];
    int128_t zmm0_36 = var_d60[2];
    int128_t var_730 = zmm2_3[0];
    int128_t var_720 = zmm0_36;
    int128_t var_740;
    sub_14000d9a0(&var_740, &var_730, &var_720);
    int128_t var_8d70 = var_740;
    zmm2_3[0] = var_c00[0];
    zmm2_3[0] = zmm2_3[0];
    int128_t zmm0_37 = zmm2_3[0];
    int128_t var_770 = zmm2_3[0];
    int128_t var_760 = zmm0_37;
    int128_t var_780;
    sub_14000d9a0(&var_780, &var_770, &var_760);
    int128_t var_8d80 = var_780;
    zmm2_3[0] = var_c00[2];
    zmm2_3[0] = zmm2_3[0];
    int128_t zmm0_38 = zmm2_3[2];
    int128_t var_7b0 = zmm2_3[0];
    int128_t var_7a0 = zmm0_38;
    int128_t var_7c0;
    sub_14000d9a0(&var_7c0, &var_7b0, &var_7a0);
    zmm2_3[0] = var_8d80;
    zmm2_3[0] = var_8d70;
    zmm3[0] = var_8cb0;
    int256_t zmm0_39;
    zmm0_39 = var_7c0;
    zmm0_39 = zmm0_39;
    zmm0_39 = zmm0_39;
    int128_t var_8b0 = zmm2_3[0];
    int128_t var_890 = zmm0_39;
    double var_c40[0x4] = zmm2_3[0];
    int256_t var_c60 = zmm3[0];
    _mm256_zeroupper();
    double var_ca0[0x4];
    sub_14000ee00(&var_ca0, &var_c60);
    double var_8060[0x4] = var_ca0;
    double var_5e80[0x4] = var_8b00;
    double var_5e60[0x4] = zmm0_22;
    _mm256_zeroupper();
    double var_5ea0[0x4];
    sub_14000cd40(&var_5ea0, &var_5e80, &var_5e60);
    double var_8da0[0x4] = var_5ea0;
    double var_5f00[0x4] = var_8ae0;
    double var_5ee0[0x4] = zmm0_23;
    _mm256_zeroupper();
    double var_5f20[0x4];
    sub_14000cd40(&var_5f20, &var_5f00, &var_5ee0);
    uint32_t var_6000[0x8] = var_5f20;
    double var_7980[0x4] = zmm0_25;
    uint32_t var_5d80[0x8] = var_8ac0;
    double var_5d60[0x4] = zmm0_24;
    _mm256_zeroupper();
    double var_5da0[0x4];
    sub_14000cd40(&var_5da0, &var_5d80, &var_5d60);
    double var_8dc0[0x4] = var_5da0;
    uint32_t var_5e00[0x8] = var_8aa0;
    double var_5de0[0x4] = var_7980;
    _mm256_zeroupper();
    double var_5e20[0x4];
    sub_14000cd40(&var_5e20, &var_5e00, &var_5de0);
    double var_6100[0x4] = var_5e20;
    double var_5c80[0x4] = var_8a80;
    double var_5c60[0x4] = zmm0_26;
    _mm256_zeroupper();
    double var_5ca0[0x4];
    sub_14000cd40(&var_5ca0, &var_5c80, &var_5c60);
    double var_8de0[0x4] = var_5ca0;
    double var_5d00[0x4] = var_8a60;
    double var_5ce0[0x4] = zmm0_27;
    _mm256_zeroupper();
    double var_5d20[0x4];
    sub_14000cd40(&var_5d20, &var_5d00, &var_5ce0);
    double var_6200[0x4] = var_5d20;
    double zmm0_46[0x4] = var_8060;
    double var_5b80[0x4] = var_8a40;
    double var_5b60[0x4] = zmm0_46;
    _mm256_zeroupper();
    double var_5ba0[0x4];
    sub_14000cd40(&var_5ba0, &var_5b80, &var_5b60);
    double var_8e00[0x4] = var_5ba0;
    double var_5c00[0x4] = var_8a20;
    double var_c80[0x4];
    double var_5be0[0x4] = var_c80;
    _mm256_zeroupper();
    int256_t var_5c20;
    sub_14000cd40(&var_5c20, &var_5c00, &var_5be0);
    int256_t zmm0_48 = var_5c20;
    double var_6320[0x4] = var_8e00;
    int256_t var_6300 = zmm0_48;
    _mm256_zeroupper();
    double var_7d80[0x4];
    memcpy(&var_7d80, &var_6320, 0x40);
    double var_7640[0x4] = var_8da0;
    double var_7620[0x4] = var_8dc0;
    _mm256_zeroupper();
    double var_7660[0x4];
    sub_14000d760(&var_7660, &var_7640, &var_7620);
    double zmm0_134[0x4] = var_7660;
    double var_75c0[0x4] = zmm0_134;
    double var_7580[0x4] = var_8da0;
    double var_7560[0x4] = var_8dc0;
    _mm256_zeroupper();
    double var_75a0[0x4];
    sub_14000d820(&var_75a0, &var_7580, &var_7560);
    double zmm0_135[0x4] = var_75a0;
    var_94e0 = zmm0_135;
    double var_7500[0x4] = zmm0_135;
    uint32_t var_74c0[0x8] = var_6000;
    double var_74a0[0x4] = var_6100;
    _mm256_zeroupper();
    double var_74e0[0x4];
    sub_14000d760(&var_74e0, &var_74c0, &var_74a0);
    double zmm0_136[0x4] = var_74e0;
    double var_7440[0x4] = zmm0_136;
    uint32_t var_7400[0x8] = var_6000;
    double var_73e0[0x4] = var_6100;
    _mm256_zeroupper();
    double var_7420[0x4];
    sub_14000d820(&var_7420, &var_7400, &var_73e0);
    double zmm0_137[0x4] = var_7420;
    double var_9460[0x4] = zmm0_137;
    double var_7380[0x4] = zmm0_137;
    zmm0_137 = var_7d80;
    double var_7340[0x4] = var_8de0;
    double var_7320[0x4] = zmm0_137;
    _mm256_zeroupper();
    double var_7360[0x4];
    sub_14000d760(&var_7360, &var_7340, &var_7320);
    double zmm0_138[0x4] = var_7360;
    double var_9500[0x4] = zmm0_138;
    double var_72c0[0x4] = zmm0_138;
    zmm0_138 = var_7d80;
    double var_7280[0x4] = var_8de0;
    double var_7260[0x4] = zmm0_138;
    _mm256_zeroupper();
    int256_t var_72a0;
    sub_14000d820(&var_72a0, &var_7280, &var_7260);
    int256_t zmm0_139 = var_72a0;
    int256_t var_7200 = zmm0_139;
    double var_71c0[0x4] = var_6200;
    int256_t var_7d60;
    int256_t var_71a0 = var_7d60;
    _mm256_zeroupper();
    int256_t var_71e0;
    sub_14000d760(&var_71e0, &var_71c0, &var_71a0);
    int256_t zmm0_140 = var_71e0;
    int256_t var_7140 = zmm0_140;
    double var_7100[0x4] = var_6200;
    int256_t var_70e0 = var_7d60;
    _mm256_zeroupper();
    double var_7120[0x4];
    sub_14000d820(&var_7120, &var_7100, &var_70e0);
    zmm2_3 = var_7120;
    double var_7080[0x4] = zmm2_3;
    double var_7820[0x4] = zmm0_134;
    double var_7800[0x4] = var_9500;
    _mm256_zeroupper();
    void var_7860;
    memcpy(&var_7860, &var_7820, 0x40);
    double var_77a0[0x4] = var_94e0;
    int256_t var_7780 = zmm0_139;
    _mm256_zeroupper();
    void var_77e0;
    memcpy(&var_77e0, &var_77a0, 0x40);
    double var_7720[0x4] = zmm0_136;
    int256_t var_7700 = zmm0_140;
    _mm256_zeroupper();
    void var_7760;
    memcpy(&var_7760, &var_7720, 0x40);
    double var_76a0[0x4] = var_9460;
    double var_7680[0x4] = zmm2_3;
    _mm256_zeroupper();
    void var_76e0;
    memcpy(&var_76e0, &var_76a0, 0x40);
    void var_8000;
    memcpy(&var_8000, &var_7860, 0x40);
    void var_7fc0;
    memcpy(&var_7fc0, &var_77e0, 0x40);
    void var_7f80;
    memcpy(&var_7f80, &var_7760, 0x40);
    void var_7f40;
    memcpy(&var_7f40, &var_76e0, 0x40);
    int64_t rax_16;
    int64_t rdx_149;
    rax_16 = sub_14000c9d0(arg3, 0, 0x10, &data_14005fc28);
    void var_7cc0;
    memcpy(&var_7cc0, &var_8000, 0x40);
    void var_7d00;
    memcpy(&var_7d00, &var_7cc0, 0x40);
    sub_14000ca30(rax_16, rdx_149, &var_7d00, 0x10, &data_14005fc40);
    int64_t rax_17;
    int64_t rdx_153;
    rax_17 = sub_14000c9d0(arg3, 0x10, 0x20, &data_14005fc58);
    void var_7c40;
    memcpy(&var_7c40, &var_7fc0, 0x40);
    void var_7c80;
    memcpy(&var_7c80, &var_7c40, 0x40);
    sub_14000ca30(rax_17, rdx_153, &var_7c80, 0x10, &data_14005fc70);
    int64_t rax_18;
    int64_t rdx_157;
    rax_18 = sub_14000c9d0(arg3, 0x20, 0x30, &data_14005fc88);
    void var_7bc0;
    memcpy(&var_7bc0, &var_7f80, 0x40);
    void var_7c00;
    memcpy(&var_7c00, &var_7bc0, 0x40);
    sub_14000ca30(rax_18, rdx_157, &var_7c00, 0x10, &data_14005fca0);
    int64_t rax_19;
    int64_t rdx_161;
    rax_19 = sub_14000c9d0(arg3, 0x30, 0x40, &data_14005fcb8);
    void var_7b40;
    memcpy(&var_7b40, &var_7f40, 0x40);
    void var_7b80;
    memcpy(&var_7b80, &var_7b40, 0x40);
    sub_14000ca30(rax_19, rdx_161, &var_7b80, 0x10, &data_14005fcd0);
    int256_t var_78e0;
    memcpy(&var_78e0, &var_8060, 0x40);
    int256_t var_6a20 = var_78e0;
    int256_t var_63c0 = var_6a20;
    _mm256_zeroupper();
    int128_t var_63d0;
    sub_14000d680(&var_63d0, &var_63c0);
    int256_t zmm0_146;
    zmm0_146 = var_63d0;
    zmm0_146 = zmm0_146;
    zmm0_146 = zmm0_146;
    int128_t var_93d0 = zmm0_146;
    int256_t var_6360 = var_6a20;
    _mm256_zeroupper();
    int128_t var_6370;
    sub_14000d5a0(&var_6370, &var_6360);
    int256_t zmm0_147;
    zmm0_147 = var_6370;
    zmm0_147 = zmm0_147;
    zmm0_147 = zmm0_147;
    int128_t var_6a50 = zmm0_147;
    zmm0_147 = var_93d0;
    int128_t var_93b0 = zmm0_147;
    int128_t var_6a00 = zmm0_147;
    zmm0_147 = var_6a50;
    int128_t var_93a0 = zmm0_147;
    int128_t var_69f0 = zmm0_147;
    int256_t var_78c0;
    int256_t var_6480 = var_78c0;
    _mm256_zeroupper();
    int128_t var_6490;
    sub_14000d680(&var_6490, &var_6480);
    int256_t zmm0_148;
    zmm0_148 = var_6490;
    zmm0_148 = zmm0_148;
    zmm0_148 = zmm0_148;
    int128_t var_93c0 = zmm0_148;
    int256_t var_6420 = var_78c0;
    _mm256_zeroupper();
    int128_t var_6430;
    sub_14000d5a0(&var_6430, &var_6420);
    zmm3[0] = var_93b0;
    zmm2_3[0] = var_93a0;
    int128_t var_69c0 = var_93c0;
    int128_t zmm0_149 = var_6430;
    int128_t var_69b0 = zmm0_149;
    int128_t var_7ad0 = zmm2_3[0];
    int128_t var_7ac0 = var_93c0;
    int128_t var_7ab0 = zmm0_149;
    int64_t var_e98 = 4;
    int128_t var_e90 = zmm3[0];
    int128_t var_ed0;
    sub_14000ef60(&var_ed0, &var_e90);
    int128_t zmm0_150 = var_ed0;
    int128_t var_e70 = zmm0_150;
    int64_t var_eb8 = 0;
    int128_t var_de0;
    sub_14000e890(&var_de0, 4);
    int128_t var_dc0 = var_de0;
    int128_t var_dd0;
    sub_14000e8d0(&var_dd0, &var_dc0, var_eb8);
    var_de0 = var_dd0;
    int128_t zmm0_152 = var_de0;
    int128_t var_e50 = zmm0_152;
    int128_t var_d90 = zmm0_150;
    int128_t var_d80 = zmm0_152;
    int128_t var_da0;
    sub_14000d9a0(&var_da0, &var_d90, &var_d80);
    int128_t var_e10 = var_da0;
    int128_t var_eb0;
    sub_14000eaa0(&var_eb0, &var_e10);
    int128_t var_7870 = var_eb0;
    int64_t var_7af0;
    sub_14000ef60(&var_7af0, &var_7870);
    arg1[2] = var_7af0;
    int64_t var_7ae8;
    *(arg1 + 0x28) = var_7ae8;
    sub_14000caf0();
    return arg1;
}

int64_t sub_1400153a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400153c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400153e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015400() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015420() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015440() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015460() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015480() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400154a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400154c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400154e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015500() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015520() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015540() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015560(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x7bdf);
    *(rdx + 0x7bde);
    *(rdx + 0x7bdd);
}

int64_t sub_1400155b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400155d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400155f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015610() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140015630(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x81ff);
    *(rdx + 0x81fe);
    *(rdx + 0x81fd);
}

int128_t* sub_140015680(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    __chkstk(0x8348);
    int128_t var_82e0;
    void* var_8328 = &*var_82e0[8];
    int64_t var_18 = -2;
    int128_t* var_7a80 = arg1;
    int32_t var_7a74 = arg2;
    int64_t var_7a70 = arg3;
    int128_t* var_7a68 = arg1;
    int32_t var_7a5c = arg2;
    int64_t var_7a58 = arg3;
    int128_t* var_69b8 = arg1;
    int32_t var_69ac = arg2;
    int64_t var_69a8 = arg3;
    int32_t var_7a50;
    __builtin_strncpy(&var_7a50, "expand 32-byte k", 0x10);
    int128_t var_6740;
    sub_14000e890(&var_6740, var_7a50);
    int128_t var_6720 = var_6740;
    int32_t var_7a48;
    int128_t var_6730;
    sub_14000e8d0(&var_6730, &var_6720, var_7a48);
    int256_t zmm0_1;
    zmm0_1 = var_6730;
    var_6740 = zmm0_1;
    zmm0_1 = var_6740;
    zmm0_1 = zmm0_1;
    int256_t zmm2;
    zmm2 = zmm0_1;
    int128_t var_7ae0 = zmm2;
    int128_t var_6990 = zmm2;
    zmm0_1 = *arg1;
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    int256_t zmm1;
    zmm1 = zmm0_1;
    int128_t var_6970 = zmm1;
    zmm0_1 = arg1[1];
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    int128_t var_6950 = zmm0_1;
    int128_t var_78d0 = zmm2;
    int128_t var_78b0 = zmm2;
    int256_t var_7900 = zmm2;
    int256_t var_7920 = zmm2;
    int128_t var_7850 = zmm1;
    int128_t var_7830 = zmm1;
    int256_t var_7880 = zmm1;
    int256_t var_78a0 = zmm1;
    int128_t var_77d0 = zmm0_1;
    int128_t var_77b0 = zmm0_1;
    int256_t var_7800 = zmm0_1;
    int256_t var_7820 = zmm0_1;
    zmm0_1 = arg1[2];
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    zmm0_1 = zmm0_1;
    int128_t var_7aa0 = zmm0_1;
    int128_t var_550 = zmm0_1;
    int64_t var_6b8 = 0;
    _mm256_zeroupper();
    int128_t var_320;
    sub_14000e890(&var_320, 0);
    int128_t var_300 = var_320;
    int128_t var_310;
    sub_14000e8d0(&var_310, &var_300, var_6b8);
    var_320 = var_310;
    int128_t zmm0_3 = var_320;
    int64_t var_6a8 = 0;
    int128_t var_2e0;
    sub_14000e890(&var_2e0, 1);
    int128_t var_2c0 = var_2e0;
    int128_t var_2d0;
    sub_14000e8d0(&var_2d0, &var_2c0, var_6a8);
    var_2e0 = var_2d0;
    int128_t zmm0_5 = var_2e0;
    int64_t var_698 = 0;
    int128_t var_2a0;
    sub_14000e890(&var_2a0, 2);
    int128_t var_280 = var_2a0;
    int128_t var_290;
    sub_14000e8d0(&var_290, &var_280, var_698);
    var_2a0 = var_290;
    int128_t zmm0_7 = var_2a0;
    int64_t var_688 = 0;
    int128_t var_260;
    sub_14000e890(&var_260, 3);
    int128_t var_240 = var_260;
    int128_t var_250;
    sub_14000e8d0(&var_250, &var_240, var_688);
    int256_t zmm3;
    zmm3 = zmm0_5;
    zmm2 = zmm0_7;
    int256_t zmm0_9;
    zmm0_9 = var_7aa0;
    zmm1 = var_250;
    var_260 = zmm1;
    zmm1 = var_260;
    zmm1 = zmm1;
    zmm1 = zmm1;
    int128_t var_6f0 = zmm3;
    int128_t var_6d0 = zmm1;
    zmm2 = zmm2;
    int256_t var_740 = zmm0_3;
    int128_t var_5a0 = zmm0_9;
    int128_t var_580 = zmm0_9;
    int256_t var_5e0 = zmm0_9;
    int256_t var_600 = zmm0_9;
    zmm1 = var_600;
    zmm0_9 = var_740;
    zmm1 = zmm1;
    zmm0_9 = zmm0_9;
    int128_t var_50 = zmm1;
    int128_t var_40 = zmm0_9;
    _mm256_zeroupper();
    int128_t var_60;
    sub_14000d9a0(&var_60, &var_50, &var_40);
    int128_t var_7a90 = var_60;
    zmm1 = *var_600[0x10];
    zmm1 = zmm1;
    int128_t var_90 = zmm1;
    int128_t var_80 = *var_740[0x10];
    int128_t var_a0;
    sub_14000d9a0(&var_a0, &var_90, &var_80);
    int128_t var_7b10 = var_a0;
    zmm1 = var_5e0;
    zmm1 = zmm1;
    int128_t var_d0 = zmm1;
    int128_t var_c0 = zmm2;
    int128_t var_e0;
    sub_14000d9a0(&var_e0, &var_d0, &var_c0);
    int128_t var_7b20 = var_e0;
    zmm1 = *var_5e0[0x10];
    zmm1 = zmm1;
    int128_t var_110 = zmm1;
    int128_t var_100 = *zmm2[0x10];
    int128_t var_120;
    sub_14000d9a0(&var_120, &var_110, &var_100);
    zmm1 = var_7b20;
    zmm2 = var_7b10;
    zmm3 = var_7a90;
    int128_t zmm0_13 = var_120;
    int128_t var_220 = zmm3;
    int128_t var_210 = zmm2;
    int128_t var_200 = zmm1;
    int128_t var_1f0 = zmm0_13;
    void var_640;
    memcpy(&var_640, &var_220, 0x40);
    void var_680;
    sub_14000ee00(&var_680, &var_640);
    void var_400;
    memcpy(&var_400, &var_680, 0x40);
    int64_t var_4c0;
    memcpy(&var_4c0, &var_400, 0x40);
    int64_t var_4b8;
    int64_t var_438 = var_4b8;
    zmm3 = var_4c0;
    int64_t var_4a8;
    int64_t var_428 = var_4a8;
    int64_t var_4b0;
    zmm2 = var_4b0;
    int64_t var_498;
    int64_t var_418 = var_498;
    int64_t var_4a0;
    zmm1 = var_4a0;
    int64_t var_488;
    int64_t var_408 = var_488;
    int128_t var_480 = zmm3;
    int128_t var_470 = zmm2;
    int128_t var_460 = zmm1;
    int64_t var_490;
    int128_t var_450 = var_490;
    void var_77a0;
    memcpy(&var_77a0, &var_480, 0x40);
    int256_t var_7a20;
    memcpy(&var_7a20, &var_7920, 0x40);
    int256_t var_79e0;
    memcpy(&var_79e0, &var_78a0, 0x40);
    int256_t var_79a0;
    memcpy(&var_79a0, &var_7820, 0x40);
    int256_t var_7960;
    memcpy(&var_7960, &var_77a0, 0x40);
    int32_t var_7750 = sub_14000ef80(0, arg2);
    int32_t var_774c = arg2;
    int256_t var_7a00;
    int256_t var_79c0;
    int256_t var_7980;
    int256_t var_7940;
    int256_t zmm0_15;
    
    while (true)
    {
        int32_t rax_9;
        int32_t rdx_20;
        rax_9 = sub_14000c720(&var_7750);
        int32_t var_7744_1 = rdx_20;
        
        if (rax_9 == 0)
            break;
        
        int256_t var_7580_1 = var_7960;
        int256_t var_75a0 = var_7980;
        int256_t var_75c0 = var_79a0;
        zmm0_15 = var_7a20;
        int256_t var_7600_1 = var_79e0;
        int256_t var_7620 = var_7a00;
        int256_t var_7640 = zmm0_15;
        int256_t* var_7c68_1 = &var_7620;
        int256_t* var_3048_1 = &var_7640;
        zmm0_15 = var_7600_1;
        int128_t var_3040_1 = zmm0_15;
        int256_t* var_2f38_1 = &var_7640;
        zmm0_15 = var_7640;
        int128_t var_2f20_1 = zmm0_15;
        zmm0_15 = var_3040_1;
        zmm1 = var_2f20_1;
        zmm0_15 = zmm0_15;
        int128_t var_24b0 = zmm1;
        int128_t var_24a0 = zmm0_15;
        _mm256_zeroupper();
        int128_t var_24c0;
        sub_14000d900(&var_24c0, &var_24b0, &var_24a0);
        var_7640 = var_24c0;
        int128_t var_3030_1 = *var_7600_1[0x10];
        void* var_2f78_1 = &*var_7640[0x10];
        zmm1 = *var_7640[0x10];
        int128_t var_24f0 = zmm1;
        int128_t var_24e0 = var_3030_1;
        int128_t var_2500;
        sub_14000d900(&var_2500, &var_24f0, &var_24e0);
        *var_7640[0x10] = var_2500;
        int128_t var_3020_1 = var_79c0;
        int256_t* var_2fb8_1 = var_7c68_1;
        zmm1 = var_7620;
        int128_t var_2530 = zmm1;
        int128_t var_2520 = var_3020_1;
        int128_t var_2540;
        sub_14000d900(&var_2540, &var_2530, &var_2520);
        var_7620 = var_2540;
        int128_t var_3010_1 = *var_79c0[0x10];
        void* var_2ff8_1 = &*var_7620[0x10];
        zmm1 = *var_7620[0x10];
        int128_t var_2570 = zmm1;
        int128_t var_2560 = var_3010_1;
        int128_t var_2580;
        sub_14000d900(&var_2580, &var_2570, &var_2560);
        int256_t zmm0_48;
        zmm0_48 = var_2580;
        zmm0_48 = zmm0_48;
        zmm0_48 = zmm0_48;
        *var_7620[0x10] = zmm0_48;
        int256_t var_3c20_1 = var_7620;
        int256_t var_3c40_1 = var_7640;
        zmm1 = var_7580_1;
        zmm0_48 = var_3c40_1;
        zmm1 = zmm1;
        zmm0_48 = zmm0_48;
        int128_t var_20b0 = zmm1;
        int128_t var_20a0 = zmm0_48;
        _mm256_zeroupper();
        int128_t var_20c0;
        sub_14000da40(&var_20c0, &var_20b0, &var_20a0);
        int128_t var_7c60_1 = var_20c0;
        zmm1 = *var_7580_1[0x10];
        zmm1 = zmm1;
        int128_t var_20f0 = zmm1;
        int128_t var_20e0 = *var_3c40_1[0x10];
        int128_t var_2100;
        sub_14000da40(&var_2100, &var_20f0, &var_20e0);
        int128_t var_7c80_1 = var_2100;
        zmm1 = var_7940;
        zmm1 = zmm1;
        int128_t var_2130 = zmm1;
        int128_t var_2120 = var_3c20_1;
        int128_t var_2140;
        sub_14000da40(&var_2140, &var_2130, &var_2120);
        int128_t var_7c90_1 = var_2140;
        zmm1 = *var_7940[0x10];
        zmm1 = zmm1;
        int128_t var_2170 = zmm1;
        int128_t var_2160 = *var_3c20_1[0x10];
        int128_t var_2180;
        sub_14000da40(&var_2180, &var_2170, &var_2160);
        zmm1 = var_7c90_1;
        zmm2 = var_7c80_1;
        zmm3 = var_7c60_1;
        int256_t zmm0_52;
        zmm0_52 = var_2180;
        zmm0_52 = zmm0_52;
        zmm0_52 = zmm0_52;
        int128_t var_3530_1 = zmm2;
        int128_t var_3510_1 = zmm0_52;
        int256_t var_3ca0_1 = zmm1;
        int256_t var_3cc0_1 = zmm3;
        zmm0_52 = var_3cc0_1;
        zmm0_52 = zmm0_52;
        int128_t var_7d20_1 = zmm0_52;
        int64_t var_7cf0_1 = 0xd0c0f0e09080b0a;
        int64_t var_7ce8_1 = 0x504070601000302;
        _mm256_zeroupper();
        int128_t var_2d50;
        sub_14000da60(&var_2d50, 0xd0c0f0e09080b0a, 0x504070601000302);
        zmm1 = var_7d20_1;
        int128_t zmm0_53 = var_2d50;
        int128_t var_2d30 = zmm1;
        int128_t var_2d20 = zmm0_53;
        int128_t var_2d40;
        sub_14000e500(&var_2d40, &var_2d30, &var_2d20);
        int128_t var_7cd0_1 = var_2d40;
        int128_t var_2da0;
        sub_14000da60(&var_2da0, var_7cf0_1, var_7ce8_1);
        int128_t zmm0_55 = var_2da0;
        int128_t var_2d80 = *var_3cc0_1[0x10];
        int128_t var_2d70 = zmm0_55;
        int128_t var_2d90;
        sub_14000e500(&var_2d90, &var_2d80, &var_2d70);
        int128_t var_7cc0_1 = var_2d90;
        int128_t var_2df0;
        sub_14000da60(&var_2df0, var_7cf0_1, var_7ce8_1);
        int128_t zmm0_57 = var_2df0;
        int128_t var_2dd0 = var_3ca0_1;
        int128_t var_2dc0 = zmm0_57;
        int128_t var_2de0;
        sub_14000e500(&var_2de0, &var_2dd0, &var_2dc0);
        int128_t var_7cb0_1 = var_2de0;
        int128_t var_2e40;
        sub_14000da60(&var_2e40, var_7cf0_1, var_7ce8_1);
        int128_t zmm0_59 = var_2e40;
        int128_t var_2e20 = *var_3ca0_1[0x10];
        int128_t var_2e10 = zmm0_59;
        int128_t var_2e30;
        int256_t zmm0_60;
        int256_t zmm1_4;
        zmm0_60 = sub_14000e500(&var_2e30, &var_2e20, &var_2e10);
        zmm3 = var_7cd0_1;
        zmm2 = var_7cc0_1;
        zmm1_4 = var_7cb0_1;
        zmm0_60 = var_2e30;
        zmm0_60 = zmm0_60;
        zmm0_60 = zmm0_60;
        int128_t var_2ef0_1 = zmm2;
        int128_t var_2ed0_1 = zmm0_60;
        int256_t var_7560_2 = zmm1_4;
        int256_t var_7580_2 = zmm3;
        int256_t* var_3198_1 = &var_75c0;
        zmm0_60 = var_7580_2;
        int128_t var_3190_1 = zmm0_60;
        int256_t* var_3088_1 = &var_75c0;
        zmm0_60 = var_75c0;
        int128_t var_3070_1 = zmm0_60;
        zmm0_60 = var_3190_1;
        zmm1_4 = var_3070_1;
        zmm0_60 = zmm0_60;
        int128_t var_23b0 = zmm1_4;
        int128_t var_23a0 = zmm0_60;
        _mm256_zeroupper();
        int128_t var_23c0;
        sub_14000d900(&var_23c0, &var_23b0, &var_23a0);
        var_75c0 = var_23c0;
        int128_t var_3180_1 = *var_7580_2[0x10];
        void* var_30c8_1 = &*var_75c0[0x10];
        zmm1_4 = *var_75c0[0x10];
        int128_t var_23f0 = zmm1_4;
        int128_t var_23e0 = var_3180_1;
        int128_t var_2400;
        sub_14000d900(&var_2400, &var_23f0, &var_23e0);
        *var_75c0[0x10] = var_2400;
        int128_t var_3170_1 = var_7560_2;
        int256_t* var_3108_1 = &var_75a0;
        zmm1_4 = var_75a0;
        int128_t var_2430 = zmm1_4;
        int128_t var_2420 = var_3170_1;
        int128_t var_2440;
        sub_14000d900(&var_2440, &var_2430, &var_2420);
        var_75a0 = var_2440;
        int128_t var_3160_1 = *var_7560_2[0x10];
        void* var_3148_1 = &*var_75a0[0x10];
        zmm1_4 = *var_75a0[0x10];
        int128_t var_2470 = zmm1_4;
        int128_t var_2460 = var_3160_1;
        int128_t var_2480;
        sub_14000d900(&var_2480, &var_2470, &var_2460);
        int256_t zmm0_64;
        zmm0_64 = var_2480;
        zmm0_64 = zmm0_64;
        zmm0_64 = zmm0_64;
        *var_75a0[0x10] = zmm0_64;
        int256_t var_3ae0_1 = var_75a0;
        int256_t var_3b00_1 = var_75c0;
        zmm1_4 = var_7600_1;
        zmm0_64 = var_3b00_1;
        zmm1_4 = zmm1_4;
        zmm0_64 = zmm0_64;
        int128_t var_1fb0 = zmm1_4;
        int128_t var_1fa0 = zmm0_64;
        _mm256_zeroupper();
        int128_t var_1fc0;
        sub_14000da40(&var_1fc0, &var_1fb0, &var_1fa0);
        int128_t var_7ca0_1 = var_1fc0;
        zmm1_4 = *var_7600_1[0x10];
        zmm1_4 = zmm1_4;
        int128_t var_1ff0 = zmm1_4;
        int128_t var_1fe0 = *var_3b00_1[0x10];
        int128_t var_2000;
        sub_14000da40(&var_2000, &var_1ff0, &var_1fe0);
        int128_t var_7d30_1 = var_2000;
        zmm1_4 = var_79c0;
        zmm1_4 = zmm1_4;
        int128_t var_2030 = zmm1_4;
        int128_t var_2020 = var_3ae0_1;
        int128_t var_2040;
        sub_14000da40(&var_2040, &var_2030, &var_2020);
        int128_t var_7d40_1 = var_2040;
        zmm1_4 = *var_79c0[0x10];
        zmm1_4 = zmm1_4;
        int128_t var_2070 = zmm1_4;
        int128_t var_2060 = *var_3ae0_1[0x10];
        int128_t var_2080;
        sub_14000da40(&var_2080, &var_2070, &var_2060);
        zmm1_4 = var_7d40_1;
        zmm2 = var_7d30_1;
        zmm3 = var_7ca0_1;
        int256_t zmm0_68;
        zmm0_68 = var_2080;
        zmm0_68 = zmm0_68;
        zmm0_68 = zmm0_68;
        int128_t var_3630_1 = zmm2;
        int128_t var_3610_1 = zmm0_68;
        zmm1_4 = zmm1_4;
        int256_t var_3b80_1 = zmm3;
        zmm0_68 = var_3b80_1;
        int128_t var_2cb0_1 = zmm0_68;
        zmm0_68 = var_2cb0_1;
        int128_t var_2ab0 = zmm0_68;
        _mm256_zeroupper();
        int128_t var_2ac0;
        sub_14000dda0(&var_2ac0, &var_2ab0);
        int128_t var_7dc0_1 = var_2ac0;
        int128_t var_2a90 = var_2cb0_1;
        int128_t var_2aa0;
        sub_14000daa0(&var_2aa0, &var_2a90);
        int128_t zmm0_70 = var_2aa0;
        int128_t var_2a70 = var_7dc0_1;
        int128_t var_2a60 = zmm0_70;
        int128_t var_2a80;
        sub_14000d8e0(&var_2a80, &var_2a70, &var_2a60);
        int128_t var_7d80_1 = var_2a80;
        int128_t var_2c90_1 = *var_3b80_1[0x10];
        int128_t var_2b30 = var_2c90_1;
        int128_t var_2b40;
        sub_14000dda0(&var_2b40, &var_2b30);
        int128_t var_7db0_1 = var_2b40;
        int128_t var_2b10 = var_2c90_1;
        int128_t var_2b20;
        sub_14000daa0(&var_2b20, &var_2b10);
        int128_t zmm0_73 = var_2b20;
        int128_t var_2af0 = var_7db0_1;
        int128_t var_2ae0 = zmm0_73;
        int128_t var_2b00;
        sub_14000d8e0(&var_2b00, &var_2af0, &var_2ae0);
        int128_t var_7d70_1 = var_2b00;
        int128_t var_2c70_1 = zmm1_4;
        int128_t var_2bb0 = var_2c70_1;
        int128_t var_2bc0;
        sub_14000dda0(&var_2bc0, &var_2bb0);
        int128_t var_7da0_1 = var_2bc0;
        int128_t var_2b90 = var_2c70_1;
        int128_t var_2ba0;
        sub_14000daa0(&var_2ba0, &var_2b90);
        int128_t zmm0_76 = var_2ba0;
        int128_t var_2b70 = var_7da0_1;
        int128_t var_2b60 = zmm0_76;
        int128_t var_2b80;
        sub_14000d8e0(&var_2b80, &var_2b70, &var_2b60);
        int128_t var_7d60_1 = var_2b80;
        int128_t var_2c50_1 = *zmm1_4[0x10];
        int128_t var_2c30 = var_2c50_1;
        int128_t var_2c40;
        sub_14000dda0(&var_2c40, &var_2c30);
        int128_t var_7d90_1 = var_2c40;
        int128_t var_2c10 = var_2c50_1;
        int128_t var_2c20;
        sub_14000daa0(&var_2c20, &var_2c10);
        int256_t zmm1_8;
        zmm1_8 = var_7d90_1;
        int128_t zmm0_79 = var_2c20;
        int128_t var_2bf0 = zmm1_8;
        int128_t var_2be0 = zmm0_79;
        int128_t var_2c00;
        sub_14000d8e0(&var_2c00, &var_2bf0, &var_2be0);
        zmm1_8 = var_7d60_1;
        int256_t zmm0_80;
        zmm0_80 = var_2c00;
        zmm0_80 = zmm0_80;
        zmm0_80 = zmm0_80;
        int128_t var_2cf0_1 = var_7d70_1;
        int128_t var_2cd0_1 = zmm0_80;
        int256_t var_75e0_2 = zmm1_8;
        int256_t var_7600_2 = var_7d80_1;
        int256_t* var_32e8_1 = &var_7640;
        zmm0_80 = var_7600_2;
        int128_t var_32e0_1 = zmm0_80;
        int256_t* var_31d8_1 = &var_7640;
        zmm0_80 = var_7640;
        int128_t var_31c0_1 = zmm0_80;
        zmm0_80 = var_32e0_1;
        zmm1_8 = var_31c0_1;
        zmm0_80 = zmm0_80;
        int128_t var_22b0 = zmm1_8;
        int128_t var_22a0 = zmm0_80;
        _mm256_zeroupper();
        int128_t var_22c0;
        sub_14000d900(&var_22c0, &var_22b0, &var_22a0);
        var_7640 = var_22c0;
        int128_t var_32d0_1 = *var_7600_2[0x10];
        void* var_3218_1 = &*var_7640[0x10];
        zmm1_8 = *var_7640[0x10];
        int128_t var_22f0 = zmm1_8;
        int128_t var_22e0 = var_32d0_1;
        int128_t var_2300;
        sub_14000d900(&var_2300, &var_22f0, &var_22e0);
        *var_7640[0x10] = var_2300;
        int128_t var_32c0_1 = var_75e0_2;
        int256_t* var_3258_1 = &var_7620;
        zmm1_8 = var_7620;
        int128_t var_2330 = zmm1_8;
        int128_t var_2320 = var_32c0_1;
        int128_t var_2340;
        sub_14000d900(&var_2340, &var_2330, &var_2320);
        var_7620 = var_2340;
        int128_t var_32b0_1 = *var_75e0_2[0x10];
        void* var_3298_1 = &*var_7620[0x10];
        zmm1_8 = *var_7620[0x10];
        int128_t var_2370 = zmm1_8;
        int128_t var_2360 = var_32b0_1;
        int128_t var_2380;
        sub_14000d900(&var_2380, &var_2370, &var_2360);
        int256_t zmm0_84;
        zmm0_84 = var_2380;
        zmm0_84 = zmm0_84;
        zmm0_84 = zmm0_84;
        *var_7620[0x10] = zmm0_84;
        int256_t var_39a0_1 = var_7620;
        int256_t var_39c0_1 = var_7640;
        zmm1_8 = var_7580_2;
        zmm0_84 = var_39c0_1;
        zmm1_8 = zmm1_8;
        zmm0_84 = zmm0_84;
        int128_t var_1eb0 = zmm1_8;
        int128_t var_1ea0 = zmm0_84;
        _mm256_zeroupper();
        int128_t var_1ec0;
        sub_14000da40(&var_1ec0, &var_1eb0, &var_1ea0);
        int128_t var_7d50_1 = var_1ec0;
        zmm1_8 = *var_7580_2[0x10];
        zmm1_8 = zmm1_8;
        int128_t var_1ef0 = zmm1_8;
        int128_t var_1ee0 = *var_39c0_1[0x10];
        int128_t var_1f00;
        sub_14000da40(&var_1f00, &var_1ef0, &var_1ee0);
        int128_t var_7dd0_1 = var_1f00;
        zmm1_8 = var_7560_2;
        zmm1_8 = zmm1_8;
        int128_t var_1f30 = zmm1_8;
        int128_t var_1f20 = var_39a0_1;
        int128_t var_1f40;
        sub_14000da40(&var_1f40, &var_1f30, &var_1f20);
        int128_t var_7de0_1 = var_1f40;
        zmm1_8 = *var_7560_2[0x10];
        zmm1_8 = zmm1_8;
        int128_t var_1f70 = zmm1_8;
        int128_t var_1f60 = *var_39a0_1[0x10];
        int128_t var_1f80;
        sub_14000da40(&var_1f80, &var_1f70, &var_1f60);
        zmm1_8 = var_7de0_1;
        int256_t zmm0_88;
        zmm0_88 = var_1f80;
        zmm0_88 = zmm0_88;
        zmm0_88 = zmm0_88;
        int128_t var_3730_1 = var_7dd0_1;
        int128_t var_3710_1 = zmm0_88;
        int256_t var_3a20_1 = zmm1_8;
        int256_t var_3a40_1 = var_7d50_1;
        zmm0_88 = var_3a40_1;
        zmm0_88 = zmm0_88;
        int128_t var_7e70_1 = zmm0_88;
        int64_t var_7e40_1 = 0xe0d0c0f0a09080b;
        int64_t var_7e38_1 = 0x605040702010003;
        _mm256_zeroupper();
        int128_t var_2890;
        sub_14000da60(&var_2890, 0xe0d0c0f0a09080b, 0x605040702010003);
        zmm1_8 = var_7e70_1;
        int128_t zmm0_89 = var_2890;
        int128_t var_2870 = zmm1_8;
        int128_t var_2860 = zmm0_89;
        int128_t var_2880;
        sub_14000e500(&var_2880, &var_2870, &var_2860);
        int128_t var_7e20_1 = var_2880;
        int128_t var_28e0;
        sub_14000da60(&var_28e0, var_7e40_1, var_7e38_1);
        int128_t zmm0_91 = var_28e0;
        int128_t var_28c0 = *var_3a40_1[0x10];
        int128_t var_28b0 = zmm0_91;
        int128_t var_28d0;
        sub_14000e500(&var_28d0, &var_28c0, &var_28b0);
        int128_t var_7e10_1 = var_28d0;
        int128_t var_2930;
        sub_14000da60(&var_2930, var_7e40_1, var_7e38_1);
        int128_t zmm0_93 = var_2930;
        int128_t var_2910 = var_3a20_1;
        int128_t var_2900 = zmm0_93;
        int128_t var_2920;
        sub_14000e500(&var_2920, &var_2910, &var_2900);
        int128_t var_7e00_1 = var_2920;
        int128_t var_2980;
        sub_14000da60(&var_2980, var_7e40_1, var_7e38_1);
        int128_t zmm0_95 = var_2980;
        int128_t var_2960 = *var_3a20_1[0x10];
        int128_t var_2950 = zmm0_95;
        int128_t var_2970;
        int256_t zmm0_96;
        int256_t zmm1_12;
        zmm0_96 = sub_14000e500(&var_2970, &var_2960, &var_2950);
        zmm1_12 = var_7e00_1;
        zmm0_96 = var_2970;
        zmm0_96 = zmm0_96;
        zmm0_96 = zmm0_96;
        int128_t var_2a30_1 = var_7e10_1;
        int128_t var_2a10_1 = zmm0_96;
        int256_t var_7560_3 = zmm1_12;
        int256_t var_7580_3 = var_7e20_1;
        int256_t* var_3438_1 = &var_75c0;
        zmm0_96 = var_7580_3;
        int128_t var_3430_1 = zmm0_96;
        int256_t* var_3328_1 = &var_75c0;
        zmm0_96 = var_75c0;
        int128_t var_3310_1 = zmm0_96;
        zmm0_96 = var_3430_1;
        zmm1_12 = var_3310_1;
        zmm0_96 = zmm0_96;
        int128_t var_21b0 = zmm1_12;
        int128_t var_21a0 = zmm0_96;
        _mm256_zeroupper();
        int128_t var_21c0;
        sub_14000d900(&var_21c0, &var_21b0, &var_21a0);
        var_75c0 = var_21c0;
        int128_t var_3420_1 = *var_7580_3[0x10];
        void* var_3368_1 = &*var_75c0[0x10];
        zmm1_12 = *var_75c0[0x10];
        int128_t var_21f0 = zmm1_12;
        int128_t var_21e0 = var_3420_1;
        int128_t var_2200;
        sub_14000d900(&var_2200, &var_21f0, &var_21e0);
        *var_75c0[0x10] = var_2200;
        int128_t var_3410_1 = var_7560_3;
        int256_t* var_33a8_1 = &var_75a0;
        zmm1_12 = var_75a0;
        int128_t var_2230 = zmm1_12;
        int128_t var_2220 = var_3410_1;
        int128_t var_2240;
        sub_14000d900(&var_2240, &var_2230, &var_2220);
        var_75a0 = var_2240;
        int128_t var_3400_1 = *var_7560_3[0x10];
        void* var_33e8_1 = &*var_75a0[0x10];
        zmm1_12 = *var_75a0[0x10];
        int128_t var_2270 = zmm1_12;
        int128_t var_2260 = var_3400_1;
        int128_t var_2280;
        sub_14000d900(&var_2280, &var_2270, &var_2260);
        int256_t zmm0_100;
        zmm0_100 = var_2280;
        zmm0_100 = zmm0_100;
        zmm0_100 = zmm0_100;
        *var_75a0[0x10] = zmm0_100;
        int256_t var_3860_1 = var_75a0;
        int256_t var_3880_1 = var_75c0;
        zmm1_12 = var_7600_2;
        zmm0_100 = var_3880_1;
        zmm1_12 = zmm1_12;
        zmm0_100 = zmm0_100;
        int128_t var_1db0 = zmm1_12;
        int128_t var_1da0 = zmm0_100;
        _mm256_zeroupper();
        int128_t var_1dc0;
        sub_14000da40(&var_1dc0, &var_1db0, &var_1da0);
        int128_t var_7df0_1 = var_1dc0;
        zmm1_12 = *var_7600_2[0x10];
        zmm1_12 = zmm1_12;
        int128_t var_1df0 = zmm1_12;
        int128_t var_1de0 = *var_3880_1[0x10];
        int128_t var_1e00;
        sub_14000da40(&var_1e00, &var_1df0, &var_1de0);
        int128_t var_7e80_1 = var_1e00;
        zmm1_12 = var_75e0_2;
        zmm1_12 = zmm1_12;
        int128_t var_1e30 = zmm1_12;
        int128_t var_1e20 = var_3860_1;
        int128_t var_1e40;
        sub_14000da40(&var_1e40, &var_1e30, &var_1e20);
        int128_t var_7e90_1 = var_1e40;
        zmm1_12 = *var_75e0_2[0x10];
        zmm1_12 = zmm1_12;
        int128_t var_1e70 = zmm1_12;
        int128_t var_1e60 = *var_3860_1[0x10];
        int128_t var_1e80;
        sub_14000da40(&var_1e80, &var_1e70, &var_1e60);
        zmm1_12 = var_7e90_1;
        int256_t zmm0_104;
        zmm0_104 = var_1e80;
        zmm0_104 = zmm0_104;
        zmm0_104 = zmm0_104;
        int128_t var_3830_1 = var_7e80_1;
        int128_t var_3810_1 = zmm0_104;
        zmm1_12 = zmm1_12;
        int256_t var_3900_1 = var_7df0_1;
        zmm0_104 = var_3900_1;
        int128_t var_27f0_1 = zmm0_104;
        zmm0_104 = var_27f0_1;
        int128_t var_25f0 = zmm0_104;
        _mm256_zeroupper();
        int128_t var_2600;
        sub_14000df80(&var_2600, &var_25f0);
        int128_t var_7f00_1 = var_2600;
        int128_t var_25d0 = var_27f0_1;
        int128_t var_25e0;
        sub_14000db90(&var_25e0, &var_25d0);
        int128_t zmm0_106 = var_25e0;
        int128_t var_25b0 = var_7f00_1;
        int128_t var_25a0 = zmm0_106;
        int128_t var_25c0;
        sub_14000d8e0(&var_25c0, &var_25b0, &var_25a0);
        int128_t var_7ec0_1 = var_25c0;
        int128_t var_27d0_1 = *var_3900_1[0x10];
        int128_t var_2670 = var_27d0_1;
        int128_t var_2680;
        sub_14000df80(&var_2680, &var_2670);
        int128_t var_7ef0_1 = var_2680;
        int128_t var_2650 = var_27d0_1;
        int128_t var_2660;
        sub_14000db90(&var_2660, &var_2650);
        int128_t zmm0_109 = var_2660;
        int128_t var_2630 = var_7ef0_1;
        int128_t var_2620 = zmm0_109;
        int128_t var_2640;
        sub_14000d8e0(&var_2640, &var_2630, &var_2620);
        int128_t var_7eb0_1 = var_2640;
        int128_t var_27b0_1 = zmm1_12;
        int128_t var_26f0 = var_27b0_1;
        int128_t var_2700;
        sub_14000df80(&var_2700, &var_26f0);
        int128_t var_7ee0_1 = var_2700;
        int128_t var_26d0 = var_27b0_1;
        int128_t var_26e0;
        sub_14000db90(&var_26e0, &var_26d0);
        int128_t zmm0_112 = var_26e0;
        int128_t var_26b0 = var_7ee0_1;
        int128_t var_26a0 = zmm0_112;
        int128_t var_26c0;
        sub_14000d8e0(&var_26c0, &var_26b0, &var_26a0);
        int128_t var_7ea0_1 = var_26c0;
        int128_t var_2790_1 = *zmm1_12[0x10];
        int128_t var_2770 = var_2790_1;
        int128_t var_2780;
        sub_14000df80(&var_2780, &var_2770);
        int128_t var_7ed0_1 = var_2780;
        int128_t var_2750 = var_2790_1;
        int128_t var_2760;
        int256_t zmm1_16;
        int256_t zmm2_2;
        zmm1_16 = sub_14000db90(&var_2760, &var_2750);
        zmm1_16 = var_7ed0_1;
        int128_t zmm0_115 = var_2760;
        int128_t var_2730 = zmm1_16;
        int128_t var_2720 = zmm0_115;
        int128_t var_2740;
        sub_14000d8e0(&var_2740, &var_2730, &var_2720);
        int256_t zmm3_2;
        zmm3_2 = var_7ec0_1;
        zmm2_2 = var_7eb0_1;
        zmm1_16 = var_7ea0_1;
        int256_t zmm0_116;
        zmm0_116 = var_2740;
        zmm0_116 = zmm0_116;
        zmm0_116 = zmm0_116;
        int128_t var_2830_1 = zmm2_2;
        int128_t var_2810_1 = zmm0_116;
        int256_t var_75e0_3 = zmm1_16;
        int256_t var_7600_3 = zmm3_2;
        int256_t var_76a0_1 = var_75a0;
        int256_t var_76c0_1 = var_75c0;
        zmm1_16 = var_7620;
        int256_t var_7740_1 = var_7640;
        var_7940 = var_7560_3;
        var_7960 = var_7580_3;
        var_7980 = var_76a0_1;
        var_79a0 = var_76c0_1;
        var_79c0 = var_75e0_3;
        var_79e0 = var_7600_3;
        var_7a00 = zmm1_16;
        var_7a20 = var_7740_1;
        int256_t var_7180_1 = var_7960;
        int256_t var_71c0_1 = var_79a0;
        zmm2_2 = var_79e0;
        int256_t var_7240_1 = var_7a20;
        char var_1be1_1 = 0;
        char var_1be2_1 = 0;
        char var_1be3_1 = 0;
        char var_1be3_2 = 1;
        char var_1be2_2 = 1;
        char var_1be1_2 = 1;
        char var_1be1_3 = 0;
        zmm0_116 = zmm2_2;
        zmm0_116 = zmm0_116;
        zmm0_116 = zmm0_116;
        int128_t var_16c0 = zmm0_116;
        _mm256_zeroupper();
        int128_t var_16d0;
        sub_14000e110(&var_16d0, &var_16c0);
        int128_t var_7f10_1 = var_16d0;
        int128_t var_1700 = *zmm2_2[0x10];
        int128_t var_1710;
        sub_14000e110(&var_1710, &var_1700);
        int128_t var_7f20_1 = var_1710;
        int128_t var_1740 = var_79c0;
        int128_t var_1750;
        sub_14000e110(&var_1750, &var_1740);
        int128_t var_7f30_1 = var_1750;
        int128_t var_1780 = *var_79c0[0x10];
        int128_t var_1790;
        sub_14000e110(&var_1790, &var_1780);
        zmm1_16 = var_7f30_1;
        zmm2_2 = var_7f20_1;
        zmm3_2 = var_7f10_1;
        int256_t zmm0_120;
        zmm0_120 = var_1790;
        zmm0_120 = zmm0_120;
        zmm0_120 = zmm0_120;
        int128_t var_1850_1 = zmm2_2;
        int128_t var_1830_1 = zmm0_120;
        char var_1be1_4 = 1;
        int256_t var_71e0_2 = zmm1_16;
        int256_t var_7200_2 = zmm3_2;
        char var_1be2_3 = 0;
        zmm0_120 = var_71c0_1;
        zmm0_120 = zmm0_120;
        zmm0_120 = zmm0_120;
        int128_t var_1880 = zmm0_120;
        _mm256_zeroupper();
        int128_t var_1890;
        sub_14000e1d0(&var_1890, &var_1880);
        int128_t var_7f40_1 = var_1890;
        int128_t var_18c0 = *var_71c0_1[0x10];
        int128_t var_18d0;
        sub_14000e1d0(&var_18d0, &var_18c0);
        int128_t var_7f50_1 = var_18d0;
        int128_t var_1900 = var_7980;
        int128_t var_1910;
        sub_14000e1d0(&var_1910, &var_1900);
        int128_t var_7f60_1 = var_1910;
        int128_t var_1940 = *var_7980[0x10];
        int128_t var_1950;
        sub_14000e1d0(&var_1950, &var_1940);
        zmm1_16 = var_7f60_1;
        zmm2_2 = var_7f50_1;
        zmm3_2 = var_7f40_1;
        int256_t zmm0_124;
        zmm0_124 = var_1950;
        zmm0_124 = zmm0_124;
        zmm0_124 = zmm0_124;
        int128_t var_1a10_1 = zmm2_2;
        int128_t var_19f0_1 = zmm0_124;
        char var_1be2_4 = 1;
        int256_t var_71a0_2 = zmm1_16;
        int256_t var_71c0_2 = zmm3_2;
        char var_1be3_3 = 0;
        zmm0_124 = var_7180_1;
        zmm0_124 = zmm0_124;
        zmm0_124 = zmm0_124;
        int128_t var_1a40 = zmm0_124;
        _mm256_zeroupper();
        int128_t var_1a50;
        sub_14000e170(&var_1a50, &var_1a40);
        int128_t var_7f70_1 = var_1a50;
        int128_t var_1a80 = *var_7180_1[0x10];
        int128_t var_1a90;
        sub_14000e170(&var_1a90, &var_1a80);
        int128_t var_7f80_1 = var_1a90;
        int128_t var_1ac0 = var_7940;
        int128_t var_1ad0;
        sub_14000e170(&var_1ad0, &var_1ac0);
        int128_t var_7f90_1 = var_1ad0;
        int128_t var_1b00 = *var_7940[0x10];
        int128_t var_1b10;
        sub_14000e170(&var_1b10, &var_1b00);
        zmm1_16 = var_7f90_1;
        zmm2_2 = var_7f80_1;
        zmm3_2 = var_7f70_1;
        int256_t zmm0_128;
        zmm0_128 = var_1b10;
        zmm0_128 = zmm0_128;
        zmm0_128 = zmm0_128;
        int128_t var_1bd0_1 = zmm2_2;
        int128_t var_1bb0_1 = zmm0_128;
        char var_1be3_4 = 1;
        int256_t var_7180_2 = zmm3_2;
        char var_1be3_5 = 0;
        char var_1be2_5 = 0;
        char var_1be1_5 = 0;
        int256_t var_7260_1 = zmm1_16;
        int256_t var_72a0 = var_71a0_2;
        int256_t var_72c0 = var_71c0_2;
        int256_t var_7320 = var_7a00;
        int256_t var_7340 = var_7240_1;
        int256_t* var_7fa8_1 = &var_7320;
        int256_t* var_5008_1 = &var_7340;
        zmm0_128 = var_7200_2;
        int128_t var_5000_1 = zmm0_128;
        int256_t* var_4ef8_1 = &var_7340;
        zmm0_128 = var_7340;
        int128_t var_4ee0_1 = zmm0_128;
        zmm0_128 = var_5000_1;
        zmm1_16 = var_4ee0_1;
        zmm0_128 = zmm0_128;
        int128_t var_4470 = zmm1_16;
        int128_t var_4460 = zmm0_128;
        _mm256_zeroupper();
        int128_t var_4480;
        sub_14000d900(&var_4480, &var_4470, &var_4460);
        var_7340 = var_4480;
        int128_t var_4ff0_1 = *var_7200_2[0x10];
        void* var_4f38_1 = &*var_7340[0x10];
        zmm1_16 = *var_7340[0x10];
        int128_t var_44b0 = zmm1_16;
        int128_t var_44a0 = var_4ff0_1;
        int128_t var_44c0;
        sub_14000d900(&var_44c0, &var_44b0, &var_44a0);
        *var_7340[0x10] = var_44c0;
        int128_t var_4fe0_1 = var_71e0_2;
        int256_t* var_4f78_1 = var_7fa8_1;
        zmm1_16 = var_7320;
        int128_t var_44f0 = zmm1_16;
        int128_t var_44e0 = var_4fe0_1;
        int128_t var_4500;
        sub_14000d900(&var_4500, &var_44f0, &var_44e0);
        var_7320 = var_4500;
        int128_t var_4fd0_1 = *var_71e0_2[0x10];
        void* var_4fb8_1 = &*var_7320[0x10];
        zmm1_16 = *var_7320[0x10];
        int128_t var_4530 = zmm1_16;
        int128_t var_4520 = var_4fd0_1;
        int128_t var_4540;
        sub_14000d900(&var_4540, &var_4530, &var_4520);
        int256_t zmm0_132;
        zmm0_132 = var_4540;
        zmm0_132 = zmm0_132;
        zmm0_132 = zmm0_132;
        *var_7320[0x10] = zmm0_132;
        int256_t var_5be0_1 = var_7320;
        int256_t var_5c00_1 = var_7340;
        zmm1_16 = var_7180_2;
        zmm0_132 = var_5c00_1;
        zmm1_16 = zmm1_16;
        zmm0_132 = zmm0_132;
        int128_t var_4070 = zmm1_16;
        int128_t var_4060 = zmm0_132;
        _mm256_zeroupper();
        int128_t var_4080;
        sub_14000da40(&var_4080, &var_4070, &var_4060);
        int128_t var_7fa0_1 = var_4080;
        zmm1_16 = *var_7180_2[0x10];
        zmm1_16 = zmm1_16;
        int128_t var_40b0 = zmm1_16;
        int128_t var_40a0 = *var_5c00_1[0x10];
        int128_t var_40c0;
        sub_14000da40(&var_40c0, &var_40b0, &var_40a0);
        int128_t var_7fc0_1 = var_40c0;
        zmm1_16 = var_7260_1;
        zmm1_16 = zmm1_16;
        int128_t var_40f0 = zmm1_16;
        int128_t var_40e0 = var_5be0_1;
        int128_t var_4100;
        sub_14000da40(&var_4100, &var_40f0, &var_40e0);
        int128_t var_7fd0_1 = var_4100;
        zmm1_16 = *var_7260_1[0x10];
        zmm1_16 = zmm1_16;
        int128_t var_4130 = zmm1_16;
        int128_t var_4120 = *var_5be0_1[0x10];
        int128_t var_4140;
        sub_14000da40(&var_4140, &var_4130, &var_4120);
        zmm1_16 = var_7fd0_1;
        zmm2_2 = var_7fc0_1;
        zmm3_2 = var_7fa0_1;
        int256_t zmm0_136;
        zmm0_136 = var_4140;
        zmm0_136 = zmm0_136;
        zmm0_136 = zmm0_136;
        int128_t var_54f0_1 = zmm2_2;
        int128_t var_54d0_1 = zmm0_136;
        int256_t var_5c60_1 = zmm1_16;
        int256_t var_5c80_1 = zmm3_2;
        zmm0_136 = var_5c80_1;
        zmm0_136 = zmm0_136;
        int128_t var_8060_1 = zmm0_136;
        int64_t var_8030_1 = 0xd0c0f0e09080b0a;
        int64_t var_8028_1 = 0x504070601000302;
        _mm256_zeroupper();
        int128_t var_4d10;
        sub_14000da60(&var_4d10, 0xd0c0f0e09080b0a, 0x504070601000302);
        zmm1_16 = var_8060_1;
        int128_t zmm0_137 = var_4d10;
        int128_t var_4cf0 = zmm1_16;
        int128_t var_4ce0 = zmm0_137;
        int128_t var_4d00;
        sub_14000e500(&var_4d00, &var_4cf0, &var_4ce0);
        int128_t var_8010_1 = var_4d00;
        int128_t var_4d60;
        sub_14000da60(&var_4d60, var_8030_1, var_8028_1);
        int128_t zmm0_139 = var_4d60;
        int128_t var_4d40 = *var_5c80_1[0x10];
        int128_t var_4d30 = zmm0_139;
        int128_t var_4d50;
        sub_14000e500(&var_4d50, &var_4d40, &var_4d30);
        int128_t var_8000_1 = var_4d50;
        int128_t var_4db0;
        sub_14000da60(&var_4db0, var_8030_1, var_8028_1);
        int128_t zmm0_141 = var_4db0;
        int128_t var_4d90 = var_5c60_1;
        int128_t var_4d80 = zmm0_141;
        int128_t var_4da0;
        sub_14000e500(&var_4da0, &var_4d90, &var_4d80);
        int128_t var_7ff0_1 = var_4da0;
        int128_t var_4e00;
        sub_14000da60(&var_4e00, var_8030_1, var_8028_1);
        int128_t zmm0_143 = var_4e00;
        int128_t var_4de0 = *var_5c60_1[0x10];
        int128_t var_4dd0 = zmm0_143;
        int128_t var_4df0;
        int256_t zmm0_144;
        int256_t zmm1_20;
        zmm0_144 = sub_14000e500(&var_4df0, &var_4de0, &var_4dd0);
        zmm3_2 = var_8010_1;
        zmm2_2 = var_8000_1;
        zmm1_20 = var_7ff0_1;
        zmm0_144 = var_4df0;
        zmm0_144 = zmm0_144;
        zmm0_144 = zmm0_144;
        int128_t var_4eb0_1 = zmm2_2;
        int128_t var_4e90_1 = zmm0_144;
        int256_t var_7260_2 = zmm1_20;
        int256_t var_7280_2 = zmm3_2;
        int256_t* var_5158_1 = &var_72c0;
        zmm0_144 = var_7280_2;
        int128_t var_5150_1 = zmm0_144;
        int256_t* var_5048_1 = &var_72c0;
        zmm0_144 = var_72c0;
        int128_t var_5030_1 = zmm0_144;
        zmm0_144 = var_5150_1;
        zmm1_20 = var_5030_1;
        zmm0_144 = zmm0_144;
        int128_t var_4370 = zmm1_20;
        int128_t var_4360 = zmm0_144;
        _mm256_zeroupper();
        int128_t var_4380;
        sub_14000d900(&var_4380, &var_4370, &var_4360);
        var_72c0 = var_4380;
        int128_t var_5140_1 = *var_7280_2[0x10];
        void* var_5088_1 = &*var_72c0[0x10];
        zmm1_20 = *var_72c0[0x10];
        int128_t var_43b0 = zmm1_20;
        int128_t var_43a0 = var_5140_1;
        int128_t var_43c0;
        sub_14000d900(&var_43c0, &var_43b0, &var_43a0);
        *var_72c0[0x10] = var_43c0;
        int128_t var_5130_1 = var_7260_2;
        int256_t* var_50c8_1 = &var_72a0;
        zmm1_20 = var_72a0;
        int128_t var_43f0 = zmm1_20;
        int128_t var_43e0 = var_5130_1;
        int128_t var_4400;
        sub_14000d900(&var_4400, &var_43f0, &var_43e0);
        var_72a0 = var_4400;
        int128_t var_5120_1 = *var_7260_2[0x10];
        void* var_5108_1 = &*var_72a0[0x10];
        zmm1_20 = *var_72a0[0x10];
        int128_t var_4430 = zmm1_20;
        int128_t var_4420 = var_5120_1;
        int128_t var_4440;
        sub_14000d900(&var_4440, &var_4430, &var_4420);
        int256_t zmm0_148;
        zmm0_148 = var_4440;
        zmm0_148 = zmm0_148;
        zmm0_148 = zmm0_148;
        *var_72a0[0x10] = zmm0_148;
        int256_t var_5aa0_1 = var_72a0;
        int256_t var_5ac0_1 = var_72c0;
        zmm1_20 = var_7200_2;
        zmm0_148 = var_5ac0_1;
        zmm1_20 = zmm1_20;
        zmm0_148 = zmm0_148;
        int128_t var_3f70 = zmm1_20;
        int128_t var_3f60 = zmm0_148;
        _mm256_zeroupper();
        int128_t var_3f80;
        sub_14000da40(&var_3f80, &var_3f70, &var_3f60);
        int128_t var_7fe0_1 = var_3f80;
        zmm1_20 = *var_7200_2[0x10];
        zmm1_20 = zmm1_20;
        int128_t var_3fb0 = zmm1_20;
        int128_t var_3fa0 = *var_5ac0_1[0x10];
        int128_t var_3fc0;
        sub_14000da40(&var_3fc0, &var_3fb0, &var_3fa0);
        int128_t var_8070_1 = var_3fc0;
        zmm1_20 = var_71e0_2;
        zmm1_20 = zmm1_20;
        int128_t var_3ff0 = zmm1_20;
        int128_t var_3fe0 = var_5aa0_1;
        int128_t var_4000;
        sub_14000da40(&var_4000, &var_3ff0, &var_3fe0);
        int128_t var_8080_1 = var_4000;
        zmm1_20 = *var_71e0_2[0x10];
        zmm1_20 = zmm1_20;
        int128_t var_4030 = zmm1_20;
        int128_t var_4020 = *var_5aa0_1[0x10];
        int128_t var_4040;
        sub_14000da40(&var_4040, &var_4030, &var_4020);
        zmm1_20 = var_8080_1;
        zmm2_2 = var_8070_1;
        zmm3_2 = var_7fe0_1;
        int256_t zmm0_152;
        zmm0_152 = var_4040;
        zmm0_152 = zmm0_152;
        zmm0_152 = zmm0_152;
        int128_t var_55f0_1 = zmm2_2;
        int128_t var_55d0_1 = zmm0_152;
        zmm1_20 = zmm1_20;
        int256_t var_5b40_1 = zmm3_2;
        zmm0_152 = var_5b40_1;
        int128_t var_4c70_1 = zmm0_152;
        zmm0_152 = var_4c70_1;
        int128_t var_4a70 = zmm0_152;
        _mm256_zeroupper();
        int128_t var_4a80;
        sub_14000dda0(&var_4a80, &var_4a70);
        int128_t var_8100_1 = var_4a80;
        int128_t var_4a50 = var_4c70_1;
        int128_t var_4a60;
        sub_14000daa0(&var_4a60, &var_4a50);
        int128_t zmm0_154 = var_4a60;
        int128_t var_4a30 = var_8100_1;
        int128_t var_4a20 = zmm0_154;
        int128_t var_4a40;
        sub_14000d8e0(&var_4a40, &var_4a30, &var_4a20);
        int128_t var_80c0_1 = var_4a40;
        int128_t var_4c50_1 = *var_5b40_1[0x10];
        int128_t var_4af0 = var_4c50_1;
        int128_t var_4b00;
        sub_14000dda0(&var_4b00, &var_4af0);
        int128_t var_80f0_1 = var_4b00;
        int128_t var_4ad0 = var_4c50_1;
        int128_t var_4ae0;
        sub_14000daa0(&var_4ae0, &var_4ad0);
        int128_t zmm0_157 = var_4ae0;
        int128_t var_4ab0 = var_80f0_1;
        int128_t var_4aa0 = zmm0_157;
        int128_t var_4ac0;
        sub_14000d8e0(&var_4ac0, &var_4ab0, &var_4aa0);
        int128_t var_80b0_1 = var_4ac0;
        int128_t var_4c30_1 = zmm1_20;
        int128_t var_4b70 = var_4c30_1;
        int128_t var_4b80;
        sub_14000dda0(&var_4b80, &var_4b70);
        int128_t var_80e0_1 = var_4b80;
        int128_t var_4b50 = var_4c30_1;
        int128_t var_4b60;
        sub_14000daa0(&var_4b60, &var_4b50);
        int128_t zmm0_160 = var_4b60;
        int128_t var_4b30 = var_80e0_1;
        int128_t var_4b20 = zmm0_160;
        int128_t var_4b40;
        sub_14000d8e0(&var_4b40, &var_4b30, &var_4b20);
        int128_t var_80a0_1 = var_4b40;
        int128_t var_4c10_1 = *zmm1_20[0x10];
        int128_t var_4bf0 = var_4c10_1;
        int128_t var_4c00;
        sub_14000dda0(&var_4c00, &var_4bf0);
        int128_t var_80d0_1 = var_4c00;
        int128_t var_4bd0 = var_4c10_1;
        int128_t var_4be0;
        sub_14000daa0(&var_4be0, &var_4bd0);
        int256_t zmm1_24;
        zmm1_24 = var_80d0_1;
        int128_t zmm0_163 = var_4be0;
        int128_t var_4bb0 = zmm1_24;
        int128_t var_4ba0 = zmm0_163;
        int128_t var_4bc0;
        sub_14000d8e0(&var_4bc0, &var_4bb0, &var_4ba0);
        zmm1_24 = var_80a0_1;
        int256_t zmm0_164;
        zmm0_164 = var_4bc0;
        zmm0_164 = zmm0_164;
        zmm0_164 = zmm0_164;
        int128_t var_4cb0_1 = var_80b0_1;
        int128_t var_4c90_1 = zmm0_164;
        int256_t var_72e0_2 = zmm1_24;
        int256_t var_7300_2 = var_80c0_1;
        int256_t* var_52a8_1 = &var_7340;
        zmm0_164 = var_7300_2;
        int128_t var_52a0_1 = zmm0_164;
        int256_t* var_5198_1 = &var_7340;
        zmm0_164 = var_7340;
        int128_t var_5180_1 = zmm0_164;
        zmm0_164 = var_52a0_1;
        zmm1_24 = var_5180_1;
        zmm0_164 = zmm0_164;
        int128_t var_4270 = zmm1_24;
        int128_t var_4260 = zmm0_164;
        _mm256_zeroupper();
        int128_t var_4280;
        sub_14000d900(&var_4280, &var_4270, &var_4260);
        var_7340 = var_4280;
        int128_t var_5290_1 = *var_7300_2[0x10];
        void* var_51d8_1 = &*var_7340[0x10];
        zmm1_24 = *var_7340[0x10];
        int128_t var_42b0 = zmm1_24;
        int128_t var_42a0 = var_5290_1;
        int128_t var_42c0;
        sub_14000d900(&var_42c0, &var_42b0, &var_42a0);
        *var_7340[0x10] = var_42c0;
        int128_t var_5280_1 = var_72e0_2;
        int256_t* var_5218_1 = &var_7320;
        zmm1_24 = var_7320;
        int128_t var_42f0 = zmm1_24;
        int128_t var_42e0 = var_5280_1;
        int128_t var_4300;
        sub_14000d900(&var_4300, &var_42f0, &var_42e0);
        var_7320 = var_4300;
        int128_t var_5270_1 = *var_72e0_2[0x10];
        void* var_5258_1 = &*var_7320[0x10];
        zmm1_24 = *var_7320[0x10];
        int128_t var_4330 = zmm1_24;
        int128_t var_4320 = var_5270_1;
        int128_t var_4340;
        sub_14000d900(&var_4340, &var_4330, &var_4320);
        int256_t zmm0_168;
        zmm0_168 = var_4340;
        zmm0_168 = zmm0_168;
        zmm0_168 = zmm0_168;
        *var_7320[0x10] = zmm0_168;
        int256_t var_5960_1 = var_7320;
        int256_t var_5980_1 = var_7340;
        zmm1_24 = var_7280_2;
        zmm0_168 = var_5980_1;
        zmm1_24 = zmm1_24;
        zmm0_168 = zmm0_168;
        int128_t var_3e70 = zmm1_24;
        int128_t var_3e60 = zmm0_168;
        _mm256_zeroupper();
        int128_t var_3e80;
        sub_14000da40(&var_3e80, &var_3e70, &var_3e60);
        int128_t var_8090_1 = var_3e80;
        zmm1_24 = *var_7280_2[0x10];
        zmm1_24 = zmm1_24;
        int128_t var_3eb0 = zmm1_24;
        int128_t var_3ea0 = *var_5980_1[0x10];
        int128_t var_3ec0;
        sub_14000da40(&var_3ec0, &var_3eb0, &var_3ea0);
        int128_t var_8110_1 = var_3ec0;
        zmm1_24 = var_7260_2;
        zmm1_24 = zmm1_24;
        int128_t var_3ef0 = zmm1_24;
        int128_t var_3ee0 = var_5960_1;
        int128_t var_3f00;
        sub_14000da40(&var_3f00, &var_3ef0, &var_3ee0);
        int128_t var_8120_1 = var_3f00;
        zmm1_24 = *var_7260_2[0x10];
        zmm1_24 = zmm1_24;
        int128_t var_3f30 = zmm1_24;
        int128_t var_3f20 = *var_5960_1[0x10];
        int128_t var_3f40;
        sub_14000da40(&var_3f40, &var_3f30, &var_3f20);
        zmm1_24 = var_8120_1;
        int256_t zmm0_172;
        zmm0_172 = var_3f40;
        zmm0_172 = zmm0_172;
        zmm0_172 = zmm0_172;
        int128_t var_56f0_1 = var_8110_1;
        int128_t var_56d0_1 = zmm0_172;
        int256_t var_59e0_1 = zmm1_24;
        int256_t var_5a00_1 = var_8090_1;
        zmm0_172 = var_5a00_1;
        zmm0_172 = zmm0_172;
        int128_t var_81b0_1 = zmm0_172;
        int64_t var_8180_1 = 0xe0d0c0f0a09080b;
        int64_t var_8178_1 = 0x605040702010003;
        _mm256_zeroupper();
        int128_t var_4850;
        sub_14000da60(&var_4850, 0xe0d0c0f0a09080b, 0x605040702010003);
        zmm1_24 = var_81b0_1;
        int128_t zmm0_173 = var_4850;
        int128_t var_4830 = zmm1_24;
        int128_t var_4820 = zmm0_173;
        int128_t var_4840;
        sub_14000e500(&var_4840, &var_4830, &var_4820);
        int128_t var_8160_1 = var_4840;
        int128_t var_48a0;
        sub_14000da60(&var_48a0, var_8180_1, var_8178_1);
        int128_t zmm0_175 = var_48a0;
        int128_t var_4880 = *var_5a00_1[0x10];
        int128_t var_4870 = zmm0_175;
        int128_t var_4890;
        sub_14000e500(&var_4890, &var_4880, &var_4870);
        int128_t var_8150_1 = var_4890;
        int128_t var_48f0;
        sub_14000da60(&var_48f0, var_8180_1, var_8178_1);
        int128_t zmm0_177 = var_48f0;
        int128_t var_48d0 = var_59e0_1;
        int128_t var_48c0 = zmm0_177;
        int128_t var_48e0;
        sub_14000e500(&var_48e0, &var_48d0, &var_48c0);
        int128_t var_8140_1 = var_48e0;
        int128_t var_4940;
        sub_14000da60(&var_4940, var_8180_1, var_8178_1);
        int128_t zmm0_179 = var_4940;
        int128_t var_4920 = *var_59e0_1[0x10];
        int128_t var_4910 = zmm0_179;
        int128_t var_4930;
        int256_t zmm0_180;
        int256_t zmm1_28;
        zmm0_180 = sub_14000e500(&var_4930, &var_4920, &var_4910);
        zmm1_28 = var_8140_1;
        zmm0_180 = var_4930;
        zmm0_180 = zmm0_180;
        zmm0_180 = zmm0_180;
        int128_t var_49f0_1 = var_8150_1;
        int128_t var_49d0_1 = zmm0_180;
        int256_t var_7260_3 = zmm1_28;
        int256_t var_7280_3 = var_8160_1;
        int256_t* var_53f8_1 = &var_72c0;
        zmm0_180 = var_7280_3;
        int128_t var_53f0_1 = zmm0_180;
        int256_t* var_52e8_1 = &var_72c0;
        zmm0_180 = var_72c0;
        int128_t var_52d0_1 = zmm0_180;
        zmm0_180 = var_53f0_1;
        zmm1_28 = var_52d0_1;
        zmm0_180 = zmm0_180;
        int128_t var_4170 = zmm1_28;
        int128_t var_4160 = zmm0_180;
        _mm256_zeroupper();
        int128_t var_4180;
        sub_14000d900(&var_4180, &var_4170, &var_4160);
        var_72c0 = var_4180;
        int128_t var_53e0_1 = *var_7280_3[0x10];
        void* var_5328_1 = &*var_72c0[0x10];
        zmm1_28 = *var_72c0[0x10];
        int128_t var_41b0 = zmm1_28;
        int128_t var_41a0 = var_53e0_1;
        int128_t var_41c0;
        sub_14000d900(&var_41c0, &var_41b0, &var_41a0);
        *var_72c0[0x10] = var_41c0;
        int128_t var_53d0_1 = var_7260_3;
        int256_t* var_5368_1 = &var_72a0;
        zmm1_28 = var_72a0;
        int128_t var_41f0 = zmm1_28;
        int128_t var_41e0 = var_53d0_1;
        int128_t var_4200;
        sub_14000d900(&var_4200, &var_41f0, &var_41e0);
        var_72a0 = var_4200;
        int128_t var_53c0_1 = *var_7260_3[0x10];
        void* var_53a8_1 = &*var_72a0[0x10];
        zmm1_28 = *var_72a0[0x10];
        int128_t var_4230 = zmm1_28;
        int128_t var_4220 = var_53c0_1;
        int128_t var_4240;
        sub_14000d900(&var_4240, &var_4230, &var_4220);
        int256_t zmm0_184;
        zmm0_184 = var_4240;
        zmm0_184 = zmm0_184;
        zmm0_184 = zmm0_184;
        *var_72a0[0x10] = zmm0_184;
        int256_t var_5820_1 = var_72a0;
        int256_t var_5840_1 = var_72c0;
        zmm1_28 = var_7300_2;
        zmm0_184 = var_5840_1;
        zmm1_28 = zmm1_28;
        zmm0_184 = zmm0_184;
        int128_t var_3d70 = zmm1_28;
        int128_t var_3d60 = zmm0_184;
        _mm256_zeroupper();
        int128_t var_3d80;
        sub_14000da40(&var_3d80, &var_3d70, &var_3d60);
        int128_t var_8130_1 = var_3d80;
        zmm1_28 = *var_7300_2[0x10];
        zmm1_28 = zmm1_28;
        int128_t var_3db0 = zmm1_28;
        int128_t var_3da0 = *var_5840_1[0x10];
        int128_t var_3dc0;
        sub_14000da40(&var_3dc0, &var_3db0, &var_3da0);
        int128_t var_81c0_1 = var_3dc0;
        zmm1_28 = var_72e0_2;
        zmm1_28 = zmm1_28;
        int128_t var_3df0 = zmm1_28;
        int128_t var_3de0 = var_5820_1;
        int128_t var_3e00;
        sub_14000da40(&var_3e00, &var_3df0, &var_3de0);
        int128_t var_81d0_1 = var_3e00;
        zmm1_28 = *var_72e0_2[0x10];
        zmm1_28 = zmm1_28;
        int128_t var_3e30 = zmm1_28;
        int128_t var_3e20 = *var_5820_1[0x10];
        int128_t var_3e40;
        sub_14000da40(&var_3e40, &var_3e30, &var_3e20);
        zmm1_28 = var_81d0_1;
        int256_t zmm0_188;
        zmm0_188 = var_3e40;
        zmm0_188 = zmm0_188;
        zmm0_188 = zmm0_188;
        int128_t var_57f0_1 = var_81c0_1;
        int128_t var_57d0_1 = zmm0_188;
        zmm1_28 = zmm1_28;
        int256_t var_58c0_1 = var_8130_1;
        zmm0_188 = var_58c0_1;
        int128_t var_47b0_1 = zmm0_188;
        zmm0_188 = var_47b0_1;
        int128_t var_45b0 = zmm0_188;
        _mm256_zeroupper();
        int128_t var_45c0;
        sub_14000df80(&var_45c0, &var_45b0);
        int128_t var_8240_1 = var_45c0;
        int128_t var_4590 = var_47b0_1;
        int128_t var_45a0;
        sub_14000db90(&var_45a0, &var_4590);
        int128_t zmm0_190 = var_45a0;
        int128_t var_4570 = var_8240_1;
        int128_t var_4560 = zmm0_190;
        int128_t var_4580;
        sub_14000d8e0(&var_4580, &var_4570, &var_4560);
        int128_t var_8200_1 = var_4580;
        int128_t var_4790_1 = *var_58c0_1[0x10];
        int128_t var_4630 = var_4790_1;
        int128_t var_4640;
        sub_14000df80(&var_4640, &var_4630);
        int128_t var_8230_1 = var_4640;
        int128_t var_4610 = var_4790_1;
        int128_t var_4620;
        sub_14000db90(&var_4620, &var_4610);
        int128_t zmm0_193 = var_4620;
        int128_t var_45f0 = var_8230_1;
        int128_t var_45e0 = zmm0_193;
        int128_t var_4600;
        sub_14000d8e0(&var_4600, &var_45f0, &var_45e0);
        int128_t var_81f0_1 = var_4600;
        int128_t var_4770_1 = zmm1_28;
        int128_t var_46b0 = var_4770_1;
        int128_t var_46c0;
        sub_14000df80(&var_46c0, &var_46b0);
        int128_t var_8220_1 = var_46c0;
        int128_t var_4690 = var_4770_1;
        int128_t var_46a0;
        sub_14000db90(&var_46a0, &var_4690);
        int128_t zmm0_196 = var_46a0;
        int128_t var_4670 = var_8220_1;
        int128_t var_4660 = zmm0_196;
        int128_t var_4680;
        sub_14000d8e0(&var_4680, &var_4670, &var_4660);
        int128_t var_81e0_1 = var_4680;
        int128_t var_4750_1 = *zmm1_28[0x10];
        int128_t var_4730 = var_4750_1;
        int128_t var_4740;
        sub_14000df80(&var_4740, &var_4730);
        int128_t var_8210_1 = var_4740;
        int128_t var_4710 = var_4750_1;
        int128_t var_4720;
        zmm1 = sub_14000db90(&var_4720, &var_4710);
        zmm1 = var_8210_1;
        int128_t zmm0_199 = var_4720;
        int128_t var_46f0 = zmm1;
        int128_t var_46e0 = zmm0_199;
        int128_t var_4700;
        sub_14000d8e0(&var_4700, &var_46f0, &var_46e0);
        zmm3 = var_8200_1;
        zmm2 = var_81f0_1;
        zmm1 = var_81e0_1;
        int256_t zmm0_200;
        zmm0_200 = var_4700;
        zmm0_200 = zmm0_200;
        zmm0_200 = zmm0_200;
        int128_t var_47f0_1 = zmm2;
        int128_t var_47d0_1 = zmm0_200;
        int256_t var_72e0_3 = zmm1;
        int256_t var_7300_3 = zmm3;
        int256_t var_7380 = var_7280_3;
        int256_t var_73a0_1 = var_72a0;
        int256_t var_73c0_1 = var_72c0;
        int256_t var_7420_1 = var_7320;
        int256_t var_7440 = var_7340;
        char var_1511_1 = 0;
        char var_1512_1 = 0;
        char var_1513_1 = 0;
        char var_1513_2 = 1;
        char var_1512_2 = 1;
        char var_1511_2 = 1;
        char var_1511_3 = 0;
        zmm0_200 = var_7300_3;
        zmm0_200 = zmm0_200;
        zmm0_200 = zmm0_200;
        int128_t var_1370 = zmm0_200;
        _mm256_zeroupper();
        int128_t var_1380;
        sub_14000e170(&var_1380, &var_1370);
        int128_t var_8250_1 = var_1380;
        int128_t var_13b0 = *var_7300_3[0x10];
        int128_t var_13c0;
        sub_14000e170(&var_13c0, &var_13b0);
        int128_t var_8260_1 = var_13c0;
        int128_t var_13f0 = var_72e0_3;
        int128_t var_1400;
        sub_14000e170(&var_1400, &var_13f0);
        int128_t var_8270_1 = var_1400;
        int128_t var_1430 = *var_72e0_3[0x10];
        int128_t var_1440;
        sub_14000e170(&var_1440, &var_1430);
        zmm1 = var_8270_1;
        zmm2 = var_8260_1;
        zmm3 = var_8250_1;
        int256_t zmm0_204;
        zmm0_204 = var_1440;
        zmm0_204 = zmm0_204;
        zmm0_204 = zmm0_204;
        int128_t var_1500_1 = zmm2;
        int128_t var_14e0_1 = zmm0_204;
        char var_1511_4 = 1;
        int256_t var_73e0_2 = zmm1;
        int256_t var_7400_2 = zmm3;
        char var_1512_3 = 0;
        zmm0_204 = var_73c0_1;
        zmm0_204 = zmm0_204;
        zmm0_204 = zmm0_204;
        int128_t var_11b0 = zmm0_204;
        _mm256_zeroupper();
        int128_t var_11c0;
        sub_14000e1d0(&var_11c0, &var_11b0);
        int128_t var_8280_1 = var_11c0;
        int128_t var_11f0 = *var_73c0_1[0x10];
        int128_t var_1200;
        sub_14000e1d0(&var_1200, &var_11f0);
        int128_t var_8290_1 = var_1200;
        int128_t var_1230 = var_73a0_1;
        int128_t var_1240;
        sub_14000e1d0(&var_1240, &var_1230);
        int128_t var_82a0_1 = var_1240;
        int128_t var_1270 = *var_73a0_1[0x10];
        int128_t var_1280;
        sub_14000e1d0(&var_1280, &var_1270);
        zmm1 = var_82a0_1;
        zmm2 = var_8290_1;
        zmm3 = var_8280_1;
        int256_t zmm0_208;
        zmm0_208 = var_1280;
        zmm0_208 = zmm0_208;
        zmm0_208 = zmm0_208;
        int128_t var_1340_1 = zmm2;
        int128_t var_1320_1 = zmm0_208;
        char var_1512_4 = 1;
        int256_t var_73a0_2 = zmm1;
        int256_t var_73c0_2 = zmm3;
        char var_1513_3 = 0;
        int256_t var_1560_1 = var_7380;
        zmm0_208 = var_1560_1;
        zmm0_208 = zmm0_208;
        zmm0_208 = zmm0_208;
        int128_t var_ff0 = zmm0_208;
        _mm256_zeroupper();
        int128_t var_1000;
        sub_14000e110(&var_1000, &var_ff0);
        int128_t var_82b0_1 = var_1000;
        int128_t var_1030 = *var_1560_1[0x10];
        int128_t var_1040;
        sub_14000e110(&var_1040, &var_1030);
        int128_t var_82c0_1 = var_1040;
        int128_t var_1070 = var_7260_3;
        int128_t var_1080;
        sub_14000e110(&var_1080, &var_1070);
        int128_t var_82d0_1 = var_1080;
        int128_t var_10b0 = *var_7260_3[0x10];
        int128_t var_10c0;
        sub_14000e110(&var_10c0, &var_10b0);
        zmm1 = var_82d0_1;
        zmm2 = var_82c0_1;
        zmm3 = var_82b0_1;
        int128_t zmm0_212 = var_10c0;
        int128_t var_1190 = zmm3;
        int128_t var_1180_1 = zmm2;
        int128_t var_1170_1 = zmm1;
        int128_t var_1160_1 = zmm0_212;
        void var_15a0;
        memcpy(&var_15a0, &var_1190, 0x40);
        char var_1513_4 = 1;
        memcpy(&var_7380, &var_15a0, 0x40);
        char var_1513_5 = 0;
        char var_1512_5 = 0;
        char var_1511_5 = 0;
        void var_7540;
        memcpy(&var_7540, &var_7440, 0x100);
        memcpy(&var_7a20, &var_7540, 0x100);
    }
    
    zmm0_15 = var_7ae0;
    int128_t var_70e0 = zmm0_15;
    int128_t var_70c0 = zmm0_15;
    int256_t var_7120 = zmm0_15;
    int256_t var_7140 = zmm0_15;
    zmm0_15 = *arg1;
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    int128_t var_6930 = zmm0_15;
    int128_t var_7040 = zmm0_15;
    int128_t var_7020 = zmm0_15;
    int256_t var_7080 = zmm0_15;
    int256_t var_70a0 = zmm0_15;
    zmm0_15 = arg1[1];
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    int128_t var_6910 = zmm0_15;
    int128_t var_6fb0 = zmm0_15;
    int128_t var_6f90 = zmm0_15;
    int256_t var_6fe0 = zmm0_15;
    int256_t var_7000 = zmm0_15;
    zmm0_15 = arg1[2];
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    zmm0_15 = zmm0_15;
    int128_t var_7b40 = zmm0_15;
    int128_t var_c70 = zmm0_15;
    int64_t var_dd8 = 0;
    _mm256_zeroupper();
    int128_t var_a40;
    sub_14000e890(&var_a40, 0);
    int128_t var_a20 = var_a40;
    int128_t var_a30;
    sub_14000e8d0(&var_a30, &var_a20, var_dd8);
    var_a40 = var_a30;
    int128_t zmm0_17 = var_a40;
    int64_t var_dc8 = 0;
    int128_t var_a00;
    sub_14000e890(&var_a00, 1);
    int128_t var_9e0 = var_a00;
    int128_t var_9f0;
    sub_14000e8d0(&var_9f0, &var_9e0, var_dc8);
    var_a00 = var_9f0;
    int128_t zmm0_19 = var_a00;
    int64_t var_db8 = 0;
    int128_t var_9c0;
    sub_14000e890(&var_9c0, 2);
    int128_t var_9a0 = var_9c0;
    int128_t var_9b0;
    sub_14000e8d0(&var_9b0, &var_9a0, var_db8);
    var_9c0 = var_9b0;
    int128_t zmm0_21 = var_9c0;
    int64_t var_da8 = 0;
    int128_t var_980;
    sub_14000e890(&var_980, 3);
    int128_t var_960 = var_980;
    int128_t var_970;
    sub_14000e8d0(&var_970, &var_960, var_da8);
    zmm3 = zmm0_19;
    zmm2 = zmm0_21;
    int256_t zmm0_23;
    zmm0_23 = var_7b40;
    zmm1 = var_970;
    var_980 = zmm1;
    zmm1 = var_980;
    zmm1 = zmm1;
    zmm1 = zmm1;
    int128_t var_e10 = zmm3;
    int128_t var_df0 = zmm1;
    zmm2 = zmm2;
    int256_t var_e60 = zmm0_17;
    int128_t var_cc0 = zmm0_23;
    int128_t var_ca0 = zmm0_23;
    int256_t var_d00 = zmm0_23;
    int256_t var_d20 = zmm0_23;
    zmm1 = var_d20;
    zmm0_23 = var_e60;
    zmm1 = zmm1;
    zmm0_23 = zmm0_23;
    int128_t var_770 = zmm1;
    int128_t var_760 = zmm0_23;
    _mm256_zeroupper();
    int128_t var_780;
    sub_14000d9a0(&var_780, &var_770, &var_760);
    int128_t var_7b30 = var_780;
    zmm1 = *var_d20[0x10];
    zmm1 = zmm1;
    int128_t var_7b0 = zmm1;
    int128_t var_7a0 = *var_e60[0x10];
    int128_t var_7c0;
    sub_14000d9a0(&var_7c0, &var_7b0, &var_7a0);
    int128_t var_7b80 = var_7c0;
    zmm1 = var_d00;
    zmm1 = zmm1;
    int128_t var_7f0 = zmm1;
    int128_t var_7e0 = zmm2;
    int128_t var_800;
    sub_14000d9a0(&var_800, &var_7f0, &var_7e0);
    int128_t var_7b90 = var_800;
    zmm1 = *var_d00[0x10];
    zmm1 = zmm1;
    int128_t var_830 = zmm1;
    int128_t var_820 = *zmm2[0x10];
    int128_t var_840;
    sub_14000d9a0(&var_840, &var_830, &var_820);
    zmm1 = var_7b90;
    zmm2 = var_7b80;
    zmm3 = var_7b30;
    int256_t zmm0_27;
    zmm0_27 = var_840;
    zmm0_27 = zmm0_27;
    zmm0_27 = zmm0_27;
    int128_t var_930 = zmm2;
    int128_t var_910 = zmm0_27;
    int256_t var_d40 = zmm1;
    int256_t var_d60 = zmm3;
    _mm256_zeroupper();
    int256_t var_da0;
    sub_14000ee00(&var_da0, &var_d60);
    int256_t var_be0 = var_da0;
    int256_t zmm0_28;
    zmm0_28 = var_be0;
    zmm0_28 = zmm0_28;
    zmm0_28 = zmm0_28;
    zmm3 = zmm0_28;
    zmm0_28 = *var_be0[0x10];
    zmm0_28 = zmm0_28;
    zmm0_28 = zmm0_28;
    zmm2 = zmm0_28;
    int256_t var_d80;
    zmm0_28 = var_d80;
    zmm0_28 = zmm0_28;
    zmm0_28 = zmm0_28;
    zmm1 = zmm0_28;
    zmm0_28 = *var_d80[0x10];
    zmm0_28 = zmm0_28;
    zmm0_28 = zmm0_28;
    zmm0_28 = zmm0_28;
    int128_t var_b90 = zmm2;
    int128_t var_b70 = zmm0_28;
    int256_t var_6f60 = zmm1;
    int256_t var_6f80 = zmm3;
    int256_t var_6de0 = var_7a20;
    zmm1 = var_6de0;
    zmm0_28 = var_7140;
    zmm1 = zmm1;
    zmm0_28 = zmm0_28;
    int128_t var_6030 = zmm1;
    int128_t var_6020 = zmm0_28;
    _mm256_zeroupper();
    int128_t var_6040;
    sub_14000d900(&var_6040, &var_6030, &var_6020);
    int128_t var_7ba0 = var_6040;
    zmm1 = *var_6de0[0x10];
    zmm1 = zmm1;
    int128_t var_6070 = zmm1;
    int128_t var_6060 = *var_7140[0x10];
    int128_t var_6080;
    sub_14000d900(&var_6080, &var_6070, &var_6060);
    int128_t var_7bb0 = var_6080;
    zmm1 = var_7a00;
    zmm1 = zmm1;
    int128_t var_60b0 = zmm1;
    int128_t var_60a0 = var_7120;
    int128_t var_60c0;
    sub_14000d900(&var_60c0, &var_60b0, &var_60a0);
    int128_t var_7bc0 = var_60c0;
    zmm1 = *var_7a00[0x10];
    zmm1 = zmm1;
    int128_t var_60f0 = zmm1;
    int128_t var_60e0 = *var_7120[0x10];
    int128_t var_6100;
    sub_14000d900(&var_6100, &var_60f0, &var_60e0);
    zmm1 = var_7bc0;
    zmm2 = var_7bb0;
    zmm3 = var_7ba0;
    int256_t zmm0_32;
    zmm0_32 = var_6100;
    zmm0_32 = zmm0_32;
    zmm0_32 = zmm0_32;
    int128_t var_63f0 = zmm2;
    int128_t var_63d0 = zmm0_32;
    int256_t var_6e00 = zmm1;
    int256_t var_6e20 = zmm3;
    int256_t var_6d60 = var_79e0;
    zmm1 = var_6d60;
    zmm0_32 = var_70a0;
    zmm1 = zmm1;
    zmm0_32 = zmm0_32;
    int128_t var_5f30 = zmm1;
    int128_t var_5f20 = zmm0_32;
    _mm256_zeroupper();
    int128_t var_5f40;
    sub_14000d900(&var_5f40, &var_5f30, &var_5f20);
    int128_t var_7bd0 = var_5f40;
    zmm1 = *var_6d60[0x10];
    zmm1 = zmm1;
    int128_t var_5f70 = zmm1;
    int128_t var_5f60 = *var_70a0[0x10];
    int128_t var_5f80;
    sub_14000d900(&var_5f80, &var_5f70, &var_5f60);
    int128_t var_7be0 = var_5f80;
    zmm1 = var_79c0;
    zmm1 = zmm1;
    int128_t var_5fb0 = zmm1;
    int128_t var_5fa0 = var_7080;
    int128_t var_5fc0;
    sub_14000d900(&var_5fc0, &var_5fb0, &var_5fa0);
    int128_t var_7bf0 = var_5fc0;
    zmm1 = *var_79c0[0x10];
    zmm1 = zmm1;
    int128_t var_5ff0 = zmm1;
    int128_t var_5fe0 = *var_7080[0x10];
    int128_t var_6000;
    sub_14000d900(&var_6000, &var_5ff0, &var_5fe0);
    zmm1 = var_7bf0;
    zmm2 = var_7be0;
    zmm3 = var_7bd0;
    int256_t zmm0_36;
    zmm0_36 = var_6000;
    zmm0_36 = zmm0_36;
    zmm0_36 = zmm0_36;
    int128_t var_64f0 = zmm2;
    int128_t var_64d0 = zmm0_36;
    int256_t var_6d80 = zmm1;
    int256_t var_6da0 = zmm3;
    int256_t var_6ce0 = var_79a0;
    zmm1 = var_6ce0;
    zmm0_36 = var_7000;
    zmm1 = zmm1;
    zmm0_36 = zmm0_36;
    int128_t var_5e30 = zmm1;
    int128_t var_5e20 = zmm0_36;
    _mm256_zeroupper();
    int128_t var_5e40;
    sub_14000d900(&var_5e40, &var_5e30, &var_5e20);
    int128_t var_7c00 = var_5e40;
    zmm1 = *var_6ce0[0x10];
    zmm1 = zmm1;
    int128_t var_5e70 = zmm1;
    int128_t var_5e60 = *var_7000[0x10];
    int128_t var_5e80;
    sub_14000d900(&var_5e80, &var_5e70, &var_5e60);
    int128_t var_7c10 = var_5e80;
    zmm1 = var_7980;
    zmm1 = zmm1;
    int128_t var_5eb0 = zmm1;
    int128_t var_5ea0 = var_6fe0;
    int128_t var_5ec0;
    sub_14000d900(&var_5ec0, &var_5eb0, &var_5ea0);
    int128_t var_7c20 = var_5ec0;
    zmm1 = *var_7980[0x10];
    zmm1 = zmm1;
    int128_t var_5ef0 = zmm1;
    int128_t var_5ee0 = *var_6fe0[0x10];
    int128_t var_5f00;
    sub_14000d900(&var_5f00, &var_5ef0, &var_5ee0);
    zmm1 = var_7c20;
    zmm2 = var_7c10;
    zmm3 = var_7c00;
    int256_t zmm0_40;
    zmm0_40 = var_5f00;
    zmm0_40 = zmm0_40;
    zmm0_40 = zmm0_40;
    int128_t var_65f0 = zmm2;
    int128_t var_65d0 = zmm0_40;
    int256_t var_6d00 = zmm1;
    int256_t var_6d20 = zmm3;
    int256_t var_6c60 = var_7960;
    int256_t var_6840 = var_6f80;
    zmm1 = var_6c60;
    zmm0_40 = var_6840;
    zmm1 = zmm1;
    zmm0_40 = zmm0_40;
    int128_t var_5d30 = zmm1;
    int128_t var_5d20 = zmm0_40;
    _mm256_zeroupper();
    int128_t var_5d40;
    sub_14000d900(&var_5d40, &var_5d30, &var_5d20);
    int128_t var_7c30 = var_5d40;
    zmm1 = *var_6c60[0x10];
    zmm1 = zmm1;
    int128_t var_5d70 = zmm1;
    int128_t var_5d60 = *var_6840[0x10];
    int128_t var_5d80;
    sub_14000d900(&var_5d80, &var_5d70, &var_5d60);
    int128_t var_7c40 = var_5d80;
    zmm1 = var_7940;
    zmm1 = zmm1;
    int128_t var_5db0 = zmm1;
    int128_t var_5da0 = var_6f60;
    int128_t var_5dc0;
    sub_14000d900(&var_5dc0, &var_5db0, &var_5da0);
    int128_t var_7c50 = var_5dc0;
    zmm1 = *var_7940[0x10];
    zmm1 = zmm1;
    int128_t var_5df0 = zmm1;
    int128_t var_5de0 = *var_6f60[0x10];
    int128_t var_5e00;
    sub_14000d900(&var_5e00, &var_5df0, &var_5de0);
    zmm1 = var_7c50;
    zmm2 = var_7c40;
    zmm3 = var_7c30;
    int128_t zmm0_44 = var_5e00;
    int128_t var_6700 = zmm3;
    int128_t var_66f0 = zmm2;
    int128_t var_66e0 = zmm1;
    int128_t var_66d0 = zmm0_44;
    int128_t var_6ca0;
    memcpy(&var_6ca0, &var_6700, 0x40);
    zmm3 = var_6e20;
    zmm2 = var_6da0;
    zmm1 = var_6d20;
    int128_t zmm0_213 = var_6ca0;
    int128_t var_62c0 = zmm3;
    int128_t var_62b0 = zmm2;
    int128_t var_62a0 = zmm1;
    int128_t var_6290 = zmm0_213;
    void var_6300;
    memcpy(&var_6300, &var_62c0, 0x40);
    zmm3 = *var_6e20[0x10];
    zmm2 = *var_6da0[0x10];
    zmm1 = *var_6d20[0x10];
    int128_t var_6240 = zmm3;
    int128_t var_6230 = zmm2;
    int128_t var_6220 = zmm1;
    int128_t var_6c90;
    int128_t var_6210 = var_6c90;
    void var_6280;
    memcpy(&var_6280, &var_6240, 0x40);
    zmm3 = var_6e00;
    zmm2 = var_6d80;
    zmm1 = var_6d00;
    int128_t var_61c0 = zmm3;
    int128_t var_61b0 = zmm2;
    int128_t var_61a0 = zmm1;
    int128_t var_6c80;
    int128_t var_6190 = var_6c80;
    void var_6200;
    memcpy(&var_6200, &var_61c0, 0x40);
    zmm3 = *var_6e00[0x10];
    zmm2 = *var_6d80[0x10];
    zmm1 = *var_6d00[0x10];
    int128_t var_6140 = zmm3;
    int128_t var_6130 = zmm2;
    int128_t var_6120 = zmm1;
    int128_t var_6c70;
    int128_t var_6110 = var_6c70;
    void var_6180;
    memcpy(&var_6180, &var_6140, 0x40);
    void var_6f20;
    memcpy(&var_6f20, &var_6300, 0x40);
    void var_6ee0;
    memcpy(&var_6ee0, &var_6280, 0x40);
    void var_6ea0;
    memcpy(&var_6ea0, &var_6200, 0x40);
    void var_6e60;
    memcpy(&var_6e60, &var_6180, 0x40);
    int64_t rax_14;
    int64_t rdx_223;
    rax_14 = sub_14000c9d0(arg3, 0, 0x10, &data_14005fc28);
    void var_6bd0;
    memcpy(&var_6bd0, &var_6f20, 0x40);
    void var_6c10;
    memcpy(&var_6c10, &var_6bd0, 0x40);
    sub_14000ca30(rax_14, rdx_223, &var_6c10, 0x10, &data_14005fc40);
    int64_t rax_15;
    int64_t rdx_227;
    rax_15 = sub_14000c9d0(arg3, 0x10, 0x20, &data_14005fc58);
    void var_6b50;
    memcpy(&var_6b50, &var_6ee0, 0x40);
    void var_6b90;
    memcpy(&var_6b90, &var_6b50, 0x40);
    sub_14000ca30(rax_15, rdx_227, &var_6b90, 0x10, &data_14005fc70);
    int64_t rax_16;
    int64_t rdx_231;
    rax_16 = sub_14000c9d0(arg3, 0x20, 0x30, &data_14005fc88);
    void var_6ad0;
    memcpy(&var_6ad0, &var_6ea0, 0x40);
    void var_6b10;
    memcpy(&var_6b10, &var_6ad0, 0x40);
    sub_14000ca30(rax_16, rdx_231, &var_6b10, 0x10, &data_14005fca0);
    int64_t rax_17;
    int64_t rdx_235;
    rax_17 = sub_14000c9d0(arg3, 0x30, 0x40, &data_14005fcb8);
    void var_6a50;
    memcpy(&var_6a50, &var_6e60, 0x40);
    void var_6a90;
    memcpy(&var_6a90, &var_6a50, 0x40);
    sub_14000ca30(rax_17, rdx_235, &var_6a90, 0x10, &data_14005fcd0);
    void var_67f0;
    memcpy(&var_67f0, &var_6f80, 0x40);
    int128_t var_6a00;
    memcpy(&var_6a00, &var_67f0, 0x40);
    int64_t var_f98 = 4;
    int128_t var_f90 = var_6a00;
    int128_t var_fd0;
    sub_14000ef60(&var_fd0, &var_f90);
    int128_t zmm0_218 = var_fd0;
    var_82e0 = zmm0_218;
    int128_t var_f70 = zmm0_218;
    int64_t var_fb8 = 0;
    int128_t var_ee0;
    sub_14000e890(&var_ee0, 4);
    int128_t var_ec0 = var_ee0;
    int128_t var_ed0;
    sub_14000e8d0(&var_ed0, &var_ec0, var_fb8);
    zmm1 = var_82e0;
    var_ee0 = var_ed0;
    int128_t zmm0_220 = var_ee0;
    int128_t var_f50 = zmm0_220;
    zmm1 = zmm1;
    int128_t var_e90 = zmm1;
    int128_t var_e80 = zmm0_220;
    int128_t var_ea0;
    sub_14000d9a0(&var_ea0, &var_e90, &var_e80);
    int128_t var_f10 = var_ea0;
    int128_t var_fb0;
    sub_14000eaa0(&var_fb0, &var_f10);
    int128_t var_6790 = var_fb0;
    int64_t var_6a10;
    sub_14000ef60(&var_6a10, &var_6790);
    arg1[2] = var_6a10;
    int64_t var_6a08;
    *(arg1 + 0x28) = var_6a08;
    sub_14000caf0();
    return arg1;
}

int64_t sub_14001d4f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d510() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d530() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d550() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d570() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d590() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d5b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d5d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d5f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d610() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d630() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d650() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d670() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d690() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d6b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d6d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d6f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d710() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d730() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d750() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d770() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d790() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d7b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d7d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d7f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d810() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d830() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d850() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d870() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d890() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d8b0(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x677f);
    *(rdx + 0x677e);
    *(rdx + 0x677d);
}

int64_t sub_14001d900() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d920() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d940() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d960() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d980() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d9a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d9c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001d9e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001da00() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001da20() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001da40() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001da60() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14001da80(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x6e4f);
    *(rdx + 0x6e4e);
    *(rdx + 0x6e4d);
}

int128_t* sub_14001dad0(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    __chkstk(0x8308);
    int128_t var_82a0;
    void* var_82e8 = &*var_82a0[8];
    int64_t var_18 = -2;
    int128_t* var_7a20 = arg1;
    int32_t var_7a14 = arg2;
    int64_t var_7a10 = arg3;
    int128_t* var_7a08 = arg1;
    int32_t var_79fc = arg2;
    int64_t var_79f8 = arg3;
    int128_t* var_6998 = arg1;
    int32_t var_698c = arg2;
    int64_t var_6988 = arg3;
    int32_t var_79f0;
    __builtin_strncpy(&var_79f0, "expand 32-byte k", 0x10);
    int128_t var_6730;
    sub_14000e890(&var_6730, var_79f0);
    int128_t var_6710 = var_6730;
    int32_t var_79e8;
    int128_t var_6720;
    sub_14000e8d0(&var_6720, &var_6710, var_79e8);
    var_6730 = var_6720;
    int128_t zmm2 = var_6730;
    int128_t var_7a80 = zmm2;
    int128_t var_6970 = zmm2;
    int128_t zmm1 = *arg1;
    int128_t var_6950 = zmm1;
    int128_t zmm0_1 = arg1[1];
    int128_t var_6930 = zmm0_1;
    int128_t var_7890 = zmm2;
    int128_t var_78a0 = zmm2;
    int128_t var_78b0 = zmm2;
    int128_t var_78c0 = zmm2;
    int128_t var_7810 = zmm1;
    int128_t var_7820 = zmm1;
    int128_t var_7830 = zmm1;
    int128_t var_7840 = zmm1;
    int128_t var_7790 = zmm0_1;
    int128_t var_77a0 = zmm0_1;
    int128_t var_77b0 = zmm0_1;
    int128_t var_77c0 = zmm0_1;
    zmm0_1 = arg1[2];
    int128_t var_550 = zmm0_1;
    int64_t var_6b8 = 0;
    int128_t var_320;
    sub_14000e890(&var_320, 0);
    int128_t var_300 = var_320;
    int128_t var_310;
    sub_14000e8d0(&var_310, &var_300, var_6b8);
    var_320 = var_310;
    int128_t zmm0_3 = var_320;
    int64_t var_6a8 = 0;
    int128_t var_2e0;
    sub_14000e890(&var_2e0, 1);
    int128_t var_2c0 = var_2e0;
    int128_t var_2d0;
    sub_14000e8d0(&var_2d0, &var_2c0, var_6a8);
    var_2e0 = var_2d0;
    int128_t zmm0_5 = var_2e0;
    int64_t var_698 = 0;
    int128_t var_2a0;
    sub_14000e890(&var_2a0, 2);
    int128_t var_280 = var_2a0;
    int128_t var_290;
    sub_14000e8d0(&var_290, &var_280, var_698);
    var_2a0 = var_290;
    int128_t zmm0_7 = var_2a0;
    int64_t var_688 = 0;
    int128_t var_260;
    sub_14000e890(&var_260, 3);
    int128_t var_240 = var_260;
    int128_t var_250;
    sub_14000e8d0(&var_250, &var_240, var_688);
    var_260 = var_250;
    int128_t var_6d0 = var_260;
    int128_t var_50 = zmm0_1;
    int128_t var_40 = zmm0_3;
    int128_t var_60;
    sub_14000d9a0(&var_60, &var_50, &var_40);
    int128_t var_7a30 = var_60;
    int128_t var_90 = zmm0_1;
    int128_t var_80 = zmm0_5;
    int128_t var_a0;
    sub_14000d9a0(&var_a0, &var_90, &var_80);
    int128_t var_7ab0 = var_a0;
    int128_t var_d0 = zmm0_1;
    int128_t var_c0 = zmm0_7;
    int128_t var_e0;
    sub_14000d9a0(&var_e0, &var_d0, &var_c0);
    int128_t var_7ac0 = var_e0;
    int128_t var_110 = zmm0_1;
    int128_t var_100 = var_6d0;
    int128_t var_120;
    sub_14000d9a0(&var_120, &var_110, &var_100);
    int128_t zmm0_13 = var_120;
    int128_t var_220 = var_7a30;
    int128_t var_210 = var_7ab0;
    int128_t var_200 = var_7ac0;
    int128_t var_1f0 = zmm0_13;
    void var_630;
    memcpy(&var_630, &var_220, 0x40);
    void var_680;
    sub_14000ee00(&var_680, &var_630);
    void var_400;
    memcpy(&var_400, &var_680, 0x40);
    int64_t var_4c0;
    memcpy(&var_4c0, &var_400, 0x40);
    int64_t var_4b8;
    int64_t var_438 = var_4b8;
    int64_t var_4a8;
    int64_t var_428 = var_4a8;
    int64_t var_498;
    int64_t var_418 = var_498;
    int64_t var_488;
    int64_t var_408 = var_488;
    int128_t var_480 = var_4c0;
    int64_t var_4b0;
    int128_t var_470 = var_4b0;
    int64_t var_4a0;
    int128_t var_460 = var_4a0;
    int64_t var_490;
    int128_t var_450 = var_490;
    void var_7740;
    memcpy(&var_7740, &var_480, 0x40);
    int128_t var_79c0;
    memcpy(&var_79c0, &var_78c0, 0x40);
    int128_t var_7980;
    memcpy(&var_7980, &var_7840, 0x40);
    int128_t var_7940;
    memcpy(&var_7940, &var_77c0, 0x40);
    int128_t var_7900;
    memcpy(&var_7900, &var_7740, 0x40);
    int32_t var_76f0 = sub_14000ef80(0, arg2);
    int32_t var_76ec = arg2;
    
    while (true)
    {
        int32_t rax_9;
        int32_t rdx_20;
        rax_9 = sub_14000c720(&var_76f0);
        int32_t var_76e4_1 = rdx_20;
        
        if (rax_9 == 0)
            break;
        
        int128_t var_75e0;
        int128_t* var_7c08_1 = &var_75e0;
        memcpy(&var_75e0, &var_79c0, 0x100);
        int128_t* var_3038_1 = var_7c08_1;
        int128_t* var_2f28_1 = var_7c08_1;
        int128_t var_24a0 = var_75e0;
        int128_t var_75a0;
        int128_t var_2490 = var_75a0;
        int128_t var_24b0;
        sub_14000d900(&var_24b0, &var_24a0, &var_2490);
        var_75e0 = var_24b0;
        int128_t var_75d0;
        int128_t* var_2f68_1 = &var_75d0;
        int128_t var_24e0 = var_75d0;
        int128_t var_7590;
        int128_t var_24d0 = var_7590;
        int128_t var_24f0;
        sub_14000d900(&var_24f0, &var_24e0, &var_24d0);
        var_75d0 = var_24f0;
        int128_t var_75c0;
        int128_t* var_2fa8_1 = &var_75c0;
        int128_t var_2520 = var_75c0;
        int128_t var_7580;
        int128_t var_2510 = var_7580;
        int128_t var_2530;
        sub_14000d900(&var_2530, &var_2520, &var_2510);
        var_75c0 = var_2530;
        int128_t var_75b0;
        int128_t* var_2fe8_1 = &var_75b0;
        int128_t var_2560 = var_75b0;
        int128_t var_7570;
        int128_t var_2550 = var_7570;
        int128_t var_2570;
        sub_14000d900(&var_2570, &var_2560, &var_2550);
        var_75b0 = var_2570;
        zmm2 = var_75c0;
        int128_t zmm3 = var_75b0;
        int128_t var_3c20_1 = var_75d0;
        int128_t zmm0_49 = var_75e0;
        int128_t var_7520;
        int128_t var_20a0 = var_7520;
        int128_t var_2090 = zmm0_49;
        int128_t var_20b0;
        sub_14000da40(&var_20b0, &var_20a0, &var_2090);
        int128_t var_7c00_1 = var_20b0;
        int128_t var_7510;
        int128_t var_20e0 = var_7510;
        int128_t var_20d0 = var_3c20_1;
        int128_t var_20f0;
        sub_14000da40(&var_20f0, &var_20e0, &var_20d0);
        int128_t var_7c20_1 = var_20f0;
        int128_t var_7500;
        int128_t var_2120 = var_7500;
        int128_t var_2110 = zmm2;
        int128_t var_2130;
        sub_14000da40(&var_2130, &var_2120, &var_2110);
        int128_t var_7c30_1 = var_2130;
        int128_t var_74f0;
        int128_t var_2160 = var_74f0;
        int128_t var_2150 = zmm3;
        int128_t var_2170;
        sub_14000da40(&var_2170, &var_2160, &var_2150);
        int128_t var_3500_1 = var_2170;
        int64_t var_7c90_1 = 0xd0c0f0e09080b0a;
        int64_t var_7c88_1 = 0x504070601000302;
        int128_t var_2d40;
        sub_14000da60(&var_2d40, 0xd0c0f0e09080b0a, 0x504070601000302);
        int128_t zmm0_54 = var_2d40;
        int128_t var_2d20 = var_7c00_1;
        int128_t var_2d10 = zmm0_54;
        int128_t var_2d30;
        sub_14000e500(&var_2d30, &var_2d20, &var_2d10);
        int128_t var_7c70_1 = var_2d30;
        int128_t var_2d90;
        sub_14000da60(&var_2d90, var_7c90_1, var_7c88_1);
        int128_t zmm0_56 = var_2d90;
        int128_t var_2d70 = var_7c20_1;
        int128_t var_2d60 = zmm0_56;
        int128_t var_2d80;
        sub_14000e500(&var_2d80, &var_2d70, &var_2d60);
        int128_t var_7c60_1 = var_2d80;
        int128_t var_2de0;
        sub_14000da60(&var_2de0, var_7c90_1, var_7c88_1);
        int128_t zmm0_58 = var_2de0;
        int128_t var_2dc0 = var_7c30_1;
        int128_t var_2db0 = zmm0_58;
        int128_t var_2dd0;
        sub_14000e500(&var_2dd0, &var_2dc0, &var_2db0);
        int128_t var_7c50_1 = var_2dd0;
        int128_t var_2e30;
        sub_14000da60(&var_2e30, var_7c90_1, var_7c88_1);
        int128_t zmm0_60 = var_2e30;
        int128_t var_2e10 = var_3500_1;
        int128_t var_2e00 = zmm0_60;
        int128_t var_2e20;
        sub_14000e500(&var_2e20, &var_2e10, &var_2e00);
        int128_t var_2ec0_1 = var_2e20;
        int128_t var_7560;
        int128_t* var_3188_1 = &var_7560;
        int128_t* var_3078_1 = &var_7560;
        int128_t var_23a0 = var_7560;
        int128_t var_2390 = var_7c70_1;
        int128_t var_23b0;
        sub_14000d900(&var_23b0, &var_23a0, &var_2390);
        var_7560 = var_23b0;
        int128_t var_7550;
        int128_t* var_30b8_1 = &var_7550;
        int128_t var_23e0 = var_7550;
        int128_t var_23d0 = var_7c60_1;
        int128_t var_23f0;
        sub_14000d900(&var_23f0, &var_23e0, &var_23d0);
        var_7550 = var_23f0;
        int128_t var_7540;
        int128_t* var_30f8_1 = &var_7540;
        int128_t var_2420 = var_7540;
        int128_t var_2410 = var_7c50_1;
        int128_t var_2430;
        sub_14000d900(&var_2430, &var_2420, &var_2410);
        var_7540 = var_2430;
        int128_t var_7530;
        int128_t* var_3138_1 = &var_7530;
        int128_t var_2460 = var_7530;
        int128_t var_2450 = var_2ec0_1;
        int128_t var_2470;
        sub_14000d900(&var_2470, &var_2460, &var_2450);
        var_7530 = var_2470;
        zmm2 = var_7540;
        zmm3 = var_7530;
        int128_t var_3ae0_1 = var_7550;
        int128_t zmm0_65 = var_7560;
        int128_t var_1fa0 = var_75a0;
        int128_t var_1f90 = zmm0_65;
        int128_t var_1fb0;
        sub_14000da40(&var_1fb0, &var_1fa0, &var_1f90);
        int128_t var_7c40_1 = var_1fb0;
        int128_t var_1fe0 = var_7590;
        int128_t var_1fd0 = var_3ae0_1;
        int128_t var_1ff0;
        sub_14000da40(&var_1ff0, &var_1fe0, &var_1fd0);
        int128_t var_7cd0_1 = var_1ff0;
        int128_t var_2020 = var_7580;
        int128_t var_2010 = zmm2;
        int128_t var_2030;
        sub_14000da40(&var_2030, &var_2020, &var_2010);
        int128_t var_7ce0_1 = var_2030;
        int128_t var_2060 = var_7570;
        int128_t var_2050 = zmm3;
        int128_t var_2070;
        sub_14000da40(&var_2070, &var_2060, &var_2050);
        int128_t var_3600_1 = var_2070;
        int128_t var_2aa0 = var_7c40_1;
        int128_t var_2ab0;
        sub_14000dda0(&var_2ab0, &var_2aa0);
        int128_t var_7d60_1 = var_2ab0;
        int128_t var_2a80 = var_7c40_1;
        int128_t var_2a90;
        sub_14000daa0(&var_2a90, &var_2a80);
        int128_t zmm0_71 = var_2a90;
        int128_t var_2a60 = var_7d60_1;
        int128_t var_2a50 = zmm0_71;
        int128_t var_2a70;
        sub_14000d8e0(&var_2a70, &var_2a60, &var_2a50);
        int128_t var_7d20_1 = var_2a70;
        int128_t var_2b20 = var_7cd0_1;
        int128_t var_2b30;
        sub_14000dda0(&var_2b30, &var_2b20);
        int128_t var_7d50_1 = var_2b30;
        int128_t var_2b00 = var_7cd0_1;
        int128_t var_2b10;
        sub_14000daa0(&var_2b10, &var_2b00);
        int128_t zmm0_74 = var_2b10;
        int128_t var_2ae0 = var_7d50_1;
        int128_t var_2ad0 = zmm0_74;
        int128_t var_2af0;
        sub_14000d8e0(&var_2af0, &var_2ae0, &var_2ad0);
        int128_t var_7d10_1 = var_2af0;
        int128_t var_2ba0 = var_7ce0_1;
        int128_t var_2bb0;
        sub_14000dda0(&var_2bb0, &var_2ba0);
        int128_t var_7d40_1 = var_2bb0;
        int128_t var_2b80 = var_7ce0_1;
        int128_t var_2b90;
        sub_14000daa0(&var_2b90, &var_2b80);
        int128_t zmm0_77 = var_2b90;
        int128_t var_2b60 = var_7d40_1;
        int128_t var_2b50 = zmm0_77;
        int128_t var_2b70;
        sub_14000d8e0(&var_2b70, &var_2b60, &var_2b50);
        int128_t var_7d00_1 = var_2b70;
        int128_t var_2c20 = var_3600_1;
        int128_t var_2c30;
        sub_14000dda0(&var_2c30, &var_2c20);
        int128_t var_7d30_1 = var_2c30;
        int128_t var_2c00 = var_3600_1;
        int128_t var_2c10;
        sub_14000daa0(&var_2c10, &var_2c00);
        int128_t zmm0_80 = var_2c10;
        int128_t var_2be0 = var_7d30_1;
        int128_t var_2bd0 = zmm0_80;
        int128_t var_2bf0;
        sub_14000d8e0(&var_2bf0, &var_2be0, &var_2bd0);
        int128_t var_2cc0_1 = var_2bf0;
        int128_t* var_32d8_1 = &var_75e0;
        int128_t* var_31c8_1 = &var_75e0;
        int128_t var_22a0 = var_75e0;
        int128_t var_2290 = var_7d20_1;
        int128_t var_22b0;
        sub_14000d900(&var_22b0, &var_22a0, &var_2290);
        var_75e0 = var_22b0;
        int128_t* var_3208_1 = &var_75d0;
        int128_t var_22e0 = var_75d0;
        int128_t var_22d0 = var_7d10_1;
        int128_t var_22f0;
        sub_14000d900(&var_22f0, &var_22e0, &var_22d0);
        var_75d0 = var_22f0;
        int128_t* var_3248_1 = &var_75c0;
        int128_t var_2320 = var_75c0;
        int128_t var_2310 = var_7d00_1;
        int128_t var_2330;
        sub_14000d900(&var_2330, &var_2320, &var_2310);
        var_75c0 = var_2330;
        int128_t* var_3288_1 = &var_75b0;
        int128_t var_2360 = var_75b0;
        int128_t var_2350 = var_2cc0_1;
        int128_t var_2370;
        sub_14000d900(&var_2370, &var_2360, &var_2350);
        var_75b0 = var_2370;
        int128_t zmm2_1 = var_75c0;
        int128_t zmm3_1 = var_75b0;
        int128_t var_39a0_1 = var_75d0;
        int128_t zmm0_85 = var_75e0;
        int128_t var_1ea0 = var_7c70_1;
        int128_t var_1e90 = zmm0_85;
        int128_t var_1eb0;
        sub_14000da40(&var_1eb0, &var_1ea0, &var_1e90);
        int128_t var_7cf0_1 = var_1eb0;
        int128_t var_1ee0 = var_7c60_1;
        int128_t var_1ed0 = var_39a0_1;
        int128_t var_1ef0;
        sub_14000da40(&var_1ef0, &var_1ee0, &var_1ed0);
        int128_t var_7d70_1 = var_1ef0;
        int128_t var_1f20 = var_7c50_1;
        int128_t var_1f10 = zmm2_1;
        int128_t var_1f30;
        sub_14000da40(&var_1f30, &var_1f20, &var_1f10);
        int128_t var_7d80_1 = var_1f30;
        int128_t var_1f60 = var_2ec0_1;
        int128_t var_1f50 = zmm3_1;
        int128_t var_1f70;
        sub_14000da40(&var_1f70, &var_1f60, &var_1f50);
        int128_t var_3700_1 = var_1f70;
        int64_t var_7de0_1 = 0xe0d0c0f0a09080b;
        int64_t var_7dd8_1 = 0x605040702010003;
        int128_t var_2880;
        sub_14000da60(&var_2880, 0xe0d0c0f0a09080b, 0x605040702010003);
        int128_t zmm0_90 = var_2880;
        int128_t var_2860 = var_7cf0_1;
        int128_t var_2850 = zmm0_90;
        int128_t var_2870;
        sub_14000e500(&var_2870, &var_2860, &var_2850);
        int128_t var_7dc0_1 = var_2870;
        int128_t var_28d0;
        sub_14000da60(&var_28d0, var_7de0_1, var_7dd8_1);
        int128_t zmm0_92 = var_28d0;
        int128_t var_28b0 = var_7d70_1;
        int128_t var_28a0 = zmm0_92;
        int128_t var_28c0;
        sub_14000e500(&var_28c0, &var_28b0, &var_28a0);
        int128_t var_7db0_1 = var_28c0;
        int128_t var_2920;
        sub_14000da60(&var_2920, var_7de0_1, var_7dd8_1);
        int128_t zmm0_94 = var_2920;
        int128_t var_2900 = var_7d80_1;
        int128_t var_28f0 = zmm0_94;
        int128_t var_2910;
        sub_14000e500(&var_2910, &var_2900, &var_28f0);
        int128_t var_7da0_1 = var_2910;
        int128_t var_2970;
        sub_14000da60(&var_2970, var_7de0_1, var_7dd8_1);
        int128_t zmm0_96 = var_2970;
        int128_t var_2950 = var_3700_1;
        int128_t var_2940 = zmm0_96;
        int128_t var_2960;
        sub_14000e500(&var_2960, &var_2950, &var_2940);
        var_74f0 = var_2960;
        var_7500 = var_7da0_1;
        var_7510 = var_7db0_1;
        var_7520 = var_7dc0_1;
        int128_t* var_3428_1 = &var_7560;
        int128_t* var_3318_1 = &var_7560;
        int128_t var_21a0 = var_7560;
        int128_t var_2190 = var_7520;
        int128_t var_21b0;
        sub_14000d900(&var_21b0, &var_21a0, &var_2190);
        var_7560 = var_21b0;
        int128_t* var_3358_1 = &var_7550;
        int128_t var_21e0 = var_7550;
        int128_t var_21d0 = var_7510;
        int128_t var_21f0;
        sub_14000d900(&var_21f0, &var_21e0, &var_21d0);
        var_7550 = var_21f0;
        int128_t* var_3398_1 = &var_7540;
        int128_t var_2220 = var_7540;
        int128_t var_2210 = var_7500;
        int128_t var_2230;
        sub_14000d900(&var_2230, &var_2220, &var_2210);
        var_7540 = var_2230;
        int128_t* var_33d8_1 = &var_7530;
        int128_t var_2260 = var_7530;
        int128_t var_2250 = var_74f0;
        int128_t var_2270;
        sub_14000d900(&var_2270, &var_2260, &var_2250);
        var_7530 = var_2270;
        zmm2_1 = var_7540;
        zmm3_1 = var_7530;
        int128_t var_3860_1 = var_7550;
        int128_t zmm0_101 = var_7560;
        int128_t var_1da0 = var_7d20_1;
        int128_t var_1d90 = zmm0_101;
        int128_t var_1db0;
        sub_14000da40(&var_1db0, &var_1da0, &var_1d90);
        int128_t var_7d90_1 = var_1db0;
        int128_t var_1de0 = var_7d10_1;
        int128_t var_1dd0 = var_3860_1;
        int128_t var_1df0;
        sub_14000da40(&var_1df0, &var_1de0, &var_1dd0);
        int128_t var_7e20_1 = var_1df0;
        int128_t var_1e20 = var_7d00_1;
        int128_t var_1e10 = zmm2_1;
        int128_t var_1e30;
        sub_14000da40(&var_1e30, &var_1e20, &var_1e10);
        int128_t var_7e30_1 = var_1e30;
        int128_t var_1e60 = var_2cc0_1;
        int128_t var_1e50 = zmm3_1;
        int128_t var_1e70;
        sub_14000da40(&var_1e70, &var_1e60, &var_1e50);
        int128_t var_3800_1 = var_1e70;
        int128_t var_25e0 = var_7d90_1;
        int128_t var_25f0;
        sub_14000df80(&var_25f0, &var_25e0);
        int128_t var_7ec0_1 = var_25f0;
        int128_t var_25c0 = var_7d90_1;
        int128_t var_25d0;
        sub_14000db90(&var_25d0, &var_25c0);
        int128_t zmm0_107 = var_25d0;
        int128_t var_25a0 = var_7ec0_1;
        int128_t var_2590 = zmm0_107;
        int128_t var_25b0;
        sub_14000d8e0(&var_25b0, &var_25a0, &var_2590);
        int128_t var_7e80_1 = var_25b0;
        int128_t var_2660 = var_7e20_1;
        int128_t var_2670;
        sub_14000df80(&var_2670, &var_2660);
        int128_t var_7eb0_1 = var_2670;
        int128_t var_2640 = var_7e20_1;
        int128_t var_2650;
        sub_14000db90(&var_2650, &var_2640);
        int128_t zmm0_110 = var_2650;
        int128_t var_2620 = var_7eb0_1;
        int128_t var_2610 = zmm0_110;
        int128_t var_2630;
        sub_14000d8e0(&var_2630, &var_2620, &var_2610);
        int128_t var_7e70_1 = var_2630;
        int128_t var_26e0 = var_7e30_1;
        int128_t var_26f0;
        sub_14000df80(&var_26f0, &var_26e0);
        int128_t var_7ea0_1 = var_26f0;
        int128_t var_26c0 = var_7e30_1;
        int128_t var_26d0;
        sub_14000db90(&var_26d0, &var_26c0);
        int128_t zmm0_113 = var_26d0;
        int128_t var_26a0 = var_7ea0_1;
        int128_t var_2690 = zmm0_113;
        int128_t var_26b0;
        sub_14000d8e0(&var_26b0, &var_26a0, &var_2690);
        int128_t var_7e60_1 = var_26b0;
        int128_t var_2760 = var_3800_1;
        int128_t var_2770;
        sub_14000df80(&var_2770, &var_2760);
        int128_t var_7e90_1 = var_2770;
        int128_t var_2740 = var_3800_1;
        int128_t var_2750;
        sub_14000db90(&var_2750, &var_2740);
        int128_t zmm0_116 = var_2750;
        int128_t var_2720 = var_7e90_1;
        int128_t var_2710 = zmm0_116;
        int128_t var_2730;
        sub_14000d8e0(&var_2730, &var_2720, &var_2710);
        var_7570 = var_2730;
        var_7580 = var_7e60_1;
        var_7590 = var_7e70_1;
        var_75a0 = var_7e80_1;
        void var_76e0;
        void* var_7e48_1 = &var_76e0;
        uint32_t count = 0x100;
        memcpy(&var_76e0, &var_75e0, 0x100);
        int128_t* var_7e40_1 = &var_79c0;
        memcpy(&var_79c0, var_7e48_1, count);
        void var_71e0;
        memcpy(&var_71e0, var_7e40_1, count);
        char var_1be1_1 = 0;
        char var_1be2_1 = 0;
        char var_1be3_1 = 0;
        char var_1be3_2 = 1;
        char var_1be2_2 = 1;
        char var_1be1_2 = 1;
        char var_1be1_3 = 0;
        int128_t var_71a0;
        int128_t var_16c0 = var_71a0;
        int128_t var_16d0;
        sub_14000e110(&var_16d0, &var_16c0);
        int128_t var_7ed0_1 = var_16d0;
        int128_t var_7190;
        int128_t var_1700 = var_7190;
        int128_t var_1710;
        sub_14000e110(&var_1710, &var_1700);
        int128_t var_7ee0_1 = var_1710;
        int128_t var_7180;
        int128_t var_1740 = var_7180;
        int128_t var_1750;
        sub_14000e110(&var_1750, &var_1740);
        int128_t var_7ef0_1 = var_1750;
        int128_t var_7170;
        int128_t var_1780 = var_7170;
        int128_t var_1790;
        sub_14000e110(&var_1790, &var_1780);
        char var_1be1_4 = 1;
        var_7170 = var_1790;
        var_7180 = var_7ef0_1;
        var_7190 = var_7ee0_1;
        var_71a0 = var_7ed0_1;
        char var_1be2_3 = 0;
        int128_t var_7160;
        int128_t var_1880 = var_7160;
        int128_t var_1890;
        sub_14000e1d0(&var_1890, &var_1880);
        int128_t var_7f00_1 = var_1890;
        int128_t var_7150;
        int128_t var_18c0 = var_7150;
        int128_t var_18d0;
        sub_14000e1d0(&var_18d0, &var_18c0);
        int128_t var_7f10_1 = var_18d0;
        int128_t var_7140;
        int128_t var_1900 = var_7140;
        int128_t var_1910;
        sub_14000e1d0(&var_1910, &var_1900);
        int128_t var_7f20_1 = var_1910;
        int128_t var_7130;
        int128_t var_1940 = var_7130;
        int128_t var_1950;
        sub_14000e1d0(&var_1950, &var_1940);
        char var_1be2_4 = 1;
        var_7130 = var_1950;
        var_7140 = var_7f20_1;
        var_7150 = var_7f10_1;
        var_7160 = var_7f00_1;
        char var_1be3_3 = 0;
        int128_t var_7120;
        int128_t var_1a40 = var_7120;
        int128_t var_1a50;
        sub_14000e170(&var_1a50, &var_1a40);
        int128_t var_7f30_1 = var_1a50;
        int128_t var_7110;
        int128_t var_1a80 = var_7110;
        int128_t var_1a90;
        sub_14000e170(&var_1a90, &var_1a80);
        int128_t var_7f40_1 = var_1a90;
        int128_t var_7100;
        int128_t var_1ac0 = var_7100;
        int128_t var_1ad0;
        sub_14000e170(&var_1ad0, &var_1ac0);
        int128_t var_7f50_1 = var_1ad0;
        int128_t var_70f0;
        int128_t var_1b00 = var_70f0;
        int128_t var_1b10;
        sub_14000e170(&var_1b10, &var_1b00);
        char var_1be3_4 = 1;
        var_70f0 = var_1b10;
        var_7100 = var_7f50_1;
        var_7110 = var_7f40_1;
        var_7120 = var_7f30_1;
        char var_1be3_5 = 0;
        char var_1be2_5 = 0;
        char var_1be1_5 = 0;
        int128_t var_72e0;
        int128_t* var_7f68_1 = &var_72e0;
        memcpy(&var_72e0, &var_71e0, 0x100);
        int128_t* var_4ff8_1 = var_7f68_1;
        int128_t* var_4ee8_1 = var_7f68_1;
        int128_t var_4460 = var_72e0;
        int128_t var_72a0;
        int128_t var_4450 = var_72a0;
        int128_t var_4470;
        sub_14000d900(&var_4470, &var_4460, &var_4450);
        var_72e0 = var_4470;
        int128_t var_72d0;
        int128_t* var_4f28_1 = &var_72d0;
        int128_t var_44a0 = var_72d0;
        int128_t var_7290;
        int128_t var_4490 = var_7290;
        int128_t var_44b0;
        sub_14000d900(&var_44b0, &var_44a0, &var_4490);
        var_72d0 = var_44b0;
        int128_t var_72c0;
        int128_t* var_4f68_1 = &var_72c0;
        int128_t var_44e0 = var_72c0;
        int128_t var_7280;
        int128_t var_44d0 = var_7280;
        int128_t var_44f0;
        sub_14000d900(&var_44f0, &var_44e0, &var_44d0);
        var_72c0 = var_44f0;
        int128_t var_72b0;
        int128_t* var_4fa8_1 = &var_72b0;
        int128_t var_4520 = var_72b0;
        int128_t var_7270;
        int128_t var_4510 = var_7270;
        int128_t var_4530;
        sub_14000d900(&var_4530, &var_4520, &var_4510);
        var_72b0 = var_4530;
        int128_t zmm2_2 = var_72c0;
        int128_t zmm3_2 = var_72b0;
        int128_t var_5be0_1 = var_72d0;
        int128_t zmm0_135 = var_72e0;
        int128_t var_7220;
        int128_t var_4060 = var_7220;
        int128_t var_4050 = zmm0_135;
        int128_t var_4070;
        sub_14000da40(&var_4070, &var_4060, &var_4050);
        int128_t var_7f60_1 = var_4070;
        int128_t var_7210;
        int128_t var_40a0 = var_7210;
        int128_t var_4090 = var_5be0_1;
        int128_t var_40b0;
        sub_14000da40(&var_40b0, &var_40a0, &var_4090);
        int128_t var_7f80_1 = var_40b0;
        int128_t var_7200;
        int128_t var_40e0 = var_7200;
        int128_t var_40d0 = zmm2_2;
        int128_t var_40f0;
        sub_14000da40(&var_40f0, &var_40e0, &var_40d0);
        int128_t var_7f90_1 = var_40f0;
        int128_t var_71f0;
        int128_t var_4120 = var_71f0;
        int128_t var_4110 = zmm3_2;
        int128_t var_4130;
        sub_14000da40(&var_4130, &var_4120, &var_4110);
        int128_t var_54c0_1 = var_4130;
        int64_t var_7ff0_1 = 0xd0c0f0e09080b0a;
        int64_t var_7fe8_1 = 0x504070601000302;
        int128_t var_4d00;
        sub_14000da60(&var_4d00, 0xd0c0f0e09080b0a, 0x504070601000302);
        int128_t zmm0_140 = var_4d00;
        int128_t var_4ce0 = var_7f60_1;
        int128_t var_4cd0 = zmm0_140;
        int128_t var_4cf0;
        sub_14000e500(&var_4cf0, &var_4ce0, &var_4cd0);
        int128_t var_7fd0_1 = var_4cf0;
        int128_t var_4d50;
        sub_14000da60(&var_4d50, var_7ff0_1, var_7fe8_1);
        int128_t zmm0_142 = var_4d50;
        int128_t var_4d30 = var_7f80_1;
        int128_t var_4d20 = zmm0_142;
        int128_t var_4d40;
        sub_14000e500(&var_4d40, &var_4d30, &var_4d20);
        int128_t var_7fc0_1 = var_4d40;
        int128_t var_4da0;
        sub_14000da60(&var_4da0, var_7ff0_1, var_7fe8_1);
        int128_t zmm0_144 = var_4da0;
        int128_t var_4d80 = var_7f90_1;
        int128_t var_4d70 = zmm0_144;
        int128_t var_4d90;
        sub_14000e500(&var_4d90, &var_4d80, &var_4d70);
        int128_t var_7fb0_1 = var_4d90;
        int128_t var_4df0;
        sub_14000da60(&var_4df0, var_7ff0_1, var_7fe8_1);
        int128_t zmm0_146 = var_4df0;
        int128_t var_4dd0 = var_54c0_1;
        int128_t var_4dc0 = zmm0_146;
        int128_t var_4de0;
        sub_14000e500(&var_4de0, &var_4dd0, &var_4dc0);
        int128_t var_4e80_1 = var_4de0;
        int128_t var_7260;
        int128_t* var_5148_1 = &var_7260;
        int128_t* var_5038_1 = &var_7260;
        int128_t var_4360 = var_7260;
        int128_t var_4350 = var_7fd0_1;
        int128_t var_4370;
        sub_14000d900(&var_4370, &var_4360, &var_4350);
        var_7260 = var_4370;
        int128_t var_7250;
        int128_t* var_5078_1 = &var_7250;
        int128_t var_43a0 = var_7250;
        int128_t var_4390 = var_7fc0_1;
        int128_t var_43b0;
        sub_14000d900(&var_43b0, &var_43a0, &var_4390);
        var_7250 = var_43b0;
        int128_t var_7240;
        int128_t* var_50b8_1 = &var_7240;
        int128_t var_43e0 = var_7240;
        int128_t var_43d0 = var_7fb0_1;
        int128_t var_43f0;
        sub_14000d900(&var_43f0, &var_43e0, &var_43d0);
        var_7240 = var_43f0;
        int128_t var_7230;
        int128_t* var_50f8_1 = &var_7230;
        int128_t var_4420 = var_7230;
        int128_t var_4410 = var_4e80_1;
        int128_t var_4430;
        sub_14000d900(&var_4430, &var_4420, &var_4410);
        var_7230 = var_4430;
        zmm2_2 = var_7240;
        zmm3_2 = var_7230;
        int128_t var_5aa0_1 = var_7250;
        int128_t zmm0_151 = var_7260;
        int128_t var_3f60 = var_72a0;
        int128_t var_3f50 = zmm0_151;
        int128_t var_3f70;
        sub_14000da40(&var_3f70, &var_3f60, &var_3f50);
        int128_t var_7fa0_1 = var_3f70;
        int128_t var_3fa0 = var_7290;
        int128_t var_3f90 = var_5aa0_1;
        int128_t var_3fb0;
        sub_14000da40(&var_3fb0, &var_3fa0, &var_3f90);
        int128_t var_8030_1 = var_3fb0;
        int128_t var_3fe0 = var_7280;
        int128_t var_3fd0 = zmm2_2;
        int128_t var_3ff0;
        sub_14000da40(&var_3ff0, &var_3fe0, &var_3fd0);
        int128_t var_8040_1 = var_3ff0;
        int128_t var_4020 = var_7270;
        int128_t var_4010 = zmm3_2;
        int128_t var_4030;
        sub_14000da40(&var_4030, &var_4020, &var_4010);
        int128_t var_55c0_1 = var_4030;
        int128_t var_4a60 = var_7fa0_1;
        int128_t var_4a70;
        sub_14000dda0(&var_4a70, &var_4a60);
        int128_t var_80c0_1 = var_4a70;
        int128_t var_4a40 = var_7fa0_1;
        int128_t var_4a50;
        sub_14000daa0(&var_4a50, &var_4a40);
        int128_t zmm0_157 = var_4a50;
        int128_t var_4a20 = var_80c0_1;
        int128_t var_4a10 = zmm0_157;
        int128_t var_4a30;
        sub_14000d8e0(&var_4a30, &var_4a20, &var_4a10);
        int128_t var_8080_1 = var_4a30;
        int128_t var_4ae0 = var_8030_1;
        int128_t var_4af0;
        sub_14000dda0(&var_4af0, &var_4ae0);
        int128_t var_80b0_1 = var_4af0;
        int128_t var_4ac0 = var_8030_1;
        int128_t var_4ad0;
        sub_14000daa0(&var_4ad0, &var_4ac0);
        int128_t zmm0_160 = var_4ad0;
        int128_t var_4aa0 = var_80b0_1;
        int128_t var_4a90 = zmm0_160;
        int128_t var_4ab0;
        sub_14000d8e0(&var_4ab0, &var_4aa0, &var_4a90);
        int128_t var_8070_1 = var_4ab0;
        int128_t var_4b60 = var_8040_1;
        int128_t var_4b70;
        sub_14000dda0(&var_4b70, &var_4b60);
        int128_t var_80a0_1 = var_4b70;
        int128_t var_4b40 = var_8040_1;
        int128_t var_4b50;
        sub_14000daa0(&var_4b50, &var_4b40);
        int128_t zmm0_163 = var_4b50;
        int128_t var_4b20 = var_80a0_1;
        int128_t var_4b10 = zmm0_163;
        int128_t var_4b30;
        sub_14000d8e0(&var_4b30, &var_4b20, &var_4b10);
        int128_t var_8060_1 = var_4b30;
        int128_t var_4be0 = var_55c0_1;
        int128_t var_4bf0;
        sub_14000dda0(&var_4bf0, &var_4be0);
        int128_t var_8090_1 = var_4bf0;
        int128_t var_4bc0 = var_55c0_1;
        int128_t var_4bd0;
        sub_14000daa0(&var_4bd0, &var_4bc0);
        int128_t zmm0_166 = var_4bd0;
        int128_t var_4ba0 = var_8090_1;
        int128_t var_4b90 = zmm0_166;
        int128_t var_4bb0;
        sub_14000d8e0(&var_4bb0, &var_4ba0, &var_4b90);
        int128_t var_4c80_1 = var_4bb0;
        int128_t* var_5298_1 = &var_72e0;
        int128_t* var_5188_1 = &var_72e0;
        int128_t var_4260 = var_72e0;
        int128_t var_4250 = var_8080_1;
        int128_t var_4270;
        sub_14000d900(&var_4270, &var_4260, &var_4250);
        var_72e0 = var_4270;
        int128_t* var_51c8_1 = &var_72d0;
        int128_t var_42a0 = var_72d0;
        int128_t var_4290 = var_8070_1;
        int128_t var_42b0;
        sub_14000d900(&var_42b0, &var_42a0, &var_4290);
        var_72d0 = var_42b0;
        int128_t* var_5208_1 = &var_72c0;
        int128_t var_42e0 = var_72c0;
        int128_t var_42d0 = var_8060_1;
        int128_t var_42f0;
        sub_14000d900(&var_42f0, &var_42e0, &var_42d0);
        var_72c0 = var_42f0;
        int128_t* var_5248_1 = &var_72b0;
        int128_t var_4320 = var_72b0;
        int128_t var_4310 = var_4c80_1;
        int128_t var_4330;
        sub_14000d900(&var_4330, &var_4320, &var_4310);
        var_72b0 = var_4330;
        int128_t zmm2_3 = var_72c0;
        int128_t zmm3_3 = var_72b0;
        int128_t var_5960_1 = var_72d0;
        int128_t zmm0_171 = var_72e0;
        int128_t var_3e60 = var_7fd0_1;
        int128_t var_3e50 = zmm0_171;
        int128_t var_3e70;
        sub_14000da40(&var_3e70, &var_3e60, &var_3e50);
        int128_t var_8050_1 = var_3e70;
        int128_t var_3ea0 = var_7fc0_1;
        int128_t var_3e90 = var_5960_1;
        int128_t var_3eb0;
        sub_14000da40(&var_3eb0, &var_3ea0, &var_3e90);
        int128_t var_80d0_1 = var_3eb0;
        int128_t var_3ee0 = var_7fb0_1;
        int128_t var_3ed0 = zmm2_3;
        int128_t var_3ef0;
        sub_14000da40(&var_3ef0, &var_3ee0, &var_3ed0);
        int128_t var_80e0_1 = var_3ef0;
        int128_t var_3f20 = var_4e80_1;
        int128_t var_3f10 = zmm3_3;
        int128_t var_3f30;
        sub_14000da40(&var_3f30, &var_3f20, &var_3f10);
        int128_t var_56c0_1 = var_3f30;
        int64_t var_8140_1 = 0xe0d0c0f0a09080b;
        int64_t var_8138_1 = 0x605040702010003;
        int128_t var_4840;
        sub_14000da60(&var_4840, 0xe0d0c0f0a09080b, 0x605040702010003);
        int128_t zmm0_176 = var_4840;
        int128_t var_4820 = var_8050_1;
        int128_t var_4810 = zmm0_176;
        int128_t var_4830;
        sub_14000e500(&var_4830, &var_4820, &var_4810);
        int128_t var_8120_1 = var_4830;
        int128_t var_4890;
        sub_14000da60(&var_4890, var_8140_1, var_8138_1);
        int128_t zmm0_178 = var_4890;
        int128_t var_4870 = var_80d0_1;
        int128_t var_4860 = zmm0_178;
        int128_t var_4880;
        sub_14000e500(&var_4880, &var_4870, &var_4860);
        int128_t var_8110_1 = var_4880;
        int128_t var_48e0;
        sub_14000da60(&var_48e0, var_8140_1, var_8138_1);
        int128_t zmm0_180 = var_48e0;
        int128_t var_48c0 = var_80e0_1;
        int128_t var_48b0 = zmm0_180;
        int128_t var_48d0;
        sub_14000e500(&var_48d0, &var_48c0, &var_48b0);
        int128_t var_8100_1 = var_48d0;
        int128_t var_4930;
        sub_14000da60(&var_4930, var_8140_1, var_8138_1);
        int128_t zmm0_182 = var_4930;
        int128_t var_4910 = var_56c0_1;
        int128_t var_4900 = zmm0_182;
        int128_t var_4920;
        sub_14000e500(&var_4920, &var_4910, &var_4900);
        var_71f0 = var_4920;
        var_7200 = var_8100_1;
        var_7210 = var_8110_1;
        var_7220 = var_8120_1;
        int128_t* var_53e8_1 = &var_7260;
        int128_t* var_52d8_1 = &var_7260;
        int128_t var_4160 = var_7260;
        int128_t var_4150 = var_7220;
        int128_t var_4170;
        sub_14000d900(&var_4170, &var_4160, &var_4150);
        var_7260 = var_4170;
        int128_t* var_5318_1 = &var_7250;
        int128_t var_41a0 = var_7250;
        int128_t var_4190 = var_7210;
        int128_t var_41b0;
        sub_14000d900(&var_41b0, &var_41a0, &var_4190);
        var_7250 = var_41b0;
        int128_t* var_5358_1 = &var_7240;
        int128_t var_41e0 = var_7240;
        int128_t var_41d0 = var_7200;
        int128_t var_41f0;
        sub_14000d900(&var_41f0, &var_41e0, &var_41d0);
        var_7240 = var_41f0;
        int128_t* var_5398_1 = &var_7230;
        int128_t var_4220 = var_7230;
        int128_t var_4210 = var_71f0;
        int128_t var_4230;
        sub_14000d900(&var_4230, &var_4220, &var_4210);
        var_7230 = var_4230;
        zmm2_3 = var_7240;
        zmm3_3 = var_7230;
        int128_t var_5820_1 = var_7250;
        int128_t zmm0_187 = var_7260;
        int128_t var_3d60 = var_8080_1;
        int128_t var_3d50 = zmm0_187;
        int128_t var_3d70;
        sub_14000da40(&var_3d70, &var_3d60, &var_3d50);
        int128_t var_80f0_1 = var_3d70;
        int128_t var_3da0 = var_8070_1;
        int128_t var_3d90 = var_5820_1;
        int128_t var_3db0;
        sub_14000da40(&var_3db0, &var_3da0, &var_3d90);
        int128_t var_8180_1 = var_3db0;
        int128_t var_3de0 = var_8060_1;
        int128_t var_3dd0 = zmm2_3;
        int128_t var_3df0;
        sub_14000da40(&var_3df0, &var_3de0, &var_3dd0);
        int128_t var_8190_1 = var_3df0;
        int128_t var_3e20 = var_4c80_1;
        int128_t var_3e10 = zmm3_3;
        int128_t var_3e30;
        sub_14000da40(&var_3e30, &var_3e20, &var_3e10);
        int128_t var_57c0_1 = var_3e30;
        int128_t var_45a0 = var_80f0_1;
        int128_t var_45b0;
        sub_14000df80(&var_45b0, &var_45a0);
        int128_t var_8200_1 = var_45b0;
        int128_t var_4580 = var_80f0_1;
        int128_t var_4590;
        sub_14000db90(&var_4590, &var_4580);
        int128_t zmm0_193 = var_4590;
        int128_t var_4560 = var_8200_1;
        int128_t var_4550 = zmm0_193;
        int128_t var_4570;
        sub_14000d8e0(&var_4570, &var_4560, &var_4550);
        int128_t var_81c0_1 = var_4570;
        int128_t var_4620 = var_8180_1;
        int128_t var_4630;
        sub_14000df80(&var_4630, &var_4620);
        int128_t var_81f0_1 = var_4630;
        int128_t var_4600 = var_8180_1;
        int128_t var_4610;
        sub_14000db90(&var_4610, &var_4600);
        int128_t zmm0_196 = var_4610;
        int128_t var_45e0 = var_81f0_1;
        int128_t var_45d0 = zmm0_196;
        int128_t var_45f0;
        sub_14000d8e0(&var_45f0, &var_45e0, &var_45d0);
        int128_t var_81b0_1 = var_45f0;
        int128_t var_46a0 = var_8190_1;
        int128_t var_46b0;
        sub_14000df80(&var_46b0, &var_46a0);
        int128_t var_81e0_1 = var_46b0;
        int128_t var_4680 = var_8190_1;
        int128_t var_4690;
        sub_14000db90(&var_4690, &var_4680);
        int128_t zmm0_199 = var_4690;
        int128_t var_4660 = var_81e0_1;
        int128_t var_4650 = zmm0_199;
        int128_t var_4670;
        sub_14000d8e0(&var_4670, &var_4660, &var_4650);
        int128_t var_81a0_1 = var_4670;
        int128_t var_4720 = var_57c0_1;
        int128_t var_4730;
        sub_14000df80(&var_4730, &var_4720);
        int128_t var_81d0_1 = var_4730;
        int128_t var_4700 = var_57c0_1;
        int128_t var_4710;
        sub_14000db90(&var_4710, &var_4700);
        int128_t zmm0_202 = var_4710;
        int128_t var_46e0 = var_81d0_1;
        int128_t var_46d0 = zmm0_202;
        int128_t var_46f0;
        sub_14000d8e0(&var_46f0, &var_46e0, &var_46d0);
        var_7270 = var_46f0;
        var_7280 = var_81a0_1;
        var_7290 = var_81b0_1;
        var_72a0 = var_81c0_1;
        void var_73e0;
        memcpy(&var_73e0, &var_72e0, 0x100);
        char var_1511_1 = 0;
        char var_1512_1 = 0;
        char var_1513_1 = 0;
        char var_1513_2 = 1;
        char var_1512_2 = 1;
        char var_1511_2 = 1;
        char var_1511_3 = 0;
        int128_t var_73a0;
        int128_t var_1370 = var_73a0;
        int128_t var_1380;
        sub_14000e170(&var_1380, &var_1370);
        int128_t var_8210_1 = var_1380;
        int128_t var_7390;
        int128_t var_13b0 = var_7390;
        int128_t var_13c0;
        sub_14000e170(&var_13c0, &var_13b0);
        int128_t var_8220_1 = var_13c0;
        int128_t var_7380;
        int128_t var_13f0 = var_7380;
        int128_t var_1400;
        sub_14000e170(&var_1400, &var_13f0);
        int128_t var_8230_1 = var_1400;
        int128_t var_7370;
        int128_t var_1430 = var_7370;
        int128_t var_1440;
        sub_14000e170(&var_1440, &var_1430);
        char var_1511_4 = 1;
        var_7370 = var_1440;
        var_7380 = var_8230_1;
        var_7390 = var_8220_1;
        var_73a0 = var_8210_1;
        char var_1512_3 = 0;
        int128_t var_7360;
        int128_t var_11b0 = var_7360;
        int128_t var_11c0;
        sub_14000e1d0(&var_11c0, &var_11b0);
        int128_t var_8240_1 = var_11c0;
        int128_t var_7350;
        int128_t var_11f0 = var_7350;
        int128_t var_1200;
        sub_14000e1d0(&var_1200, &var_11f0);
        int128_t var_8250_1 = var_1200;
        int128_t var_7340;
        int128_t var_1230 = var_7340;
        int128_t var_1240;
        sub_14000e1d0(&var_1240, &var_1230);
        int128_t var_8260_1 = var_1240;
        int128_t var_7330;
        int128_t var_1270 = var_7330;
        int128_t var_1280;
        sub_14000e1d0(&var_1280, &var_1270);
        char var_1512_4 = 1;
        var_7330 = var_1280;
        var_7340 = var_8260_1;
        var_7350 = var_8250_1;
        var_7360 = var_8240_1;
        char var_1513_3 = 0;
        int128_t var_7320;
        int128_t var_ff0 = var_7320;
        int128_t var_1000;
        sub_14000e110(&var_1000, &var_ff0);
        int128_t var_8270_1 = var_1000;
        int128_t var_7310;
        int128_t var_1030 = var_7310;
        int128_t var_1040;
        sub_14000e110(&var_1040, &var_1030);
        int128_t var_8280_1 = var_1040;
        int128_t var_7300;
        int128_t var_1070 = var_7300;
        int128_t var_1080;
        sub_14000e110(&var_1080, &var_1070);
        int128_t var_8290_1 = var_1080;
        int128_t var_72f0;
        int128_t var_10b0 = var_72f0;
        int128_t var_10c0;
        sub_14000e110(&var_10c0, &var_10b0);
        int128_t zmm0_216 = var_10c0;
        int128_t var_1190 = var_8270_1;
        int128_t var_1180_1 = var_8280_1;
        int128_t var_1170_1 = var_8290_1;
        int128_t var_1160_1 = zmm0_216;
        void var_15a0;
        memcpy(&var_15a0, &var_1190, 0x40);
        char var_1513_4 = 1;
        memcpy(&var_7320, &var_15a0, 0x40);
        char var_1513_5 = 0;
        char var_1512_5 = 0;
        char var_1511_5 = 0;
        void var_74e0;
        memcpy(&var_74e0, &var_73e0, 0x100);
        memcpy(&var_79c0, &var_74e0, 0x100);
    }
    
    int128_t zmm0_15 = *arg1;
    int128_t var_6910 = zmm0_15;
    int128_t var_7000 = zmm0_15;
    int128_t var_6ff0 = zmm0_15;
    int128_t var_6fe0 = zmm0_15;
    int128_t var_7050 = zmm0_15;
    zmm0_15 = arg1[1];
    int128_t var_68f0 = zmm0_15;
    int128_t var_6f70 = zmm0_15;
    int128_t var_6f60 = zmm0_15;
    int128_t var_6f50 = zmm0_15;
    int128_t var_6fc0 = zmm0_15;
    zmm0_15 = arg1[2];
    int128_t var_c70 = zmm0_15;
    int64_t var_dd8 = 0;
    int128_t var_a40;
    sub_14000e890(&var_a40, 0);
    int128_t var_a20 = var_a40;
    int128_t var_a30;
    sub_14000e8d0(&var_a30, &var_a20, var_dd8);
    var_a40 = var_a30;
    int128_t zmm0_17 = var_a40;
    int64_t var_dc8 = 0;
    int128_t var_a00;
    sub_14000e890(&var_a00, 1);
    int128_t var_9e0 = var_a00;
    int128_t var_9f0;
    sub_14000e8d0(&var_9f0, &var_9e0, var_dc8);
    var_a00 = var_9f0;
    int128_t zmm0_19 = var_a00;
    int64_t var_db8 = 0;
    int128_t var_9c0;
    sub_14000e890(&var_9c0, 2);
    int128_t var_9a0 = var_9c0;
    int128_t var_9b0;
    sub_14000e8d0(&var_9b0, &var_9a0, var_db8);
    var_9c0 = var_9b0;
    int128_t zmm0_21 = var_9c0;
    int64_t var_da8 = 0;
    int128_t var_980;
    sub_14000e890(&var_980, 3);
    int128_t var_960 = var_980;
    int128_t var_970;
    sub_14000e8d0(&var_970, &var_960, var_da8);
    var_980 = var_970;
    int128_t var_df0 = var_980;
    int128_t var_770 = zmm0_15;
    int128_t var_760 = zmm0_17;
    int128_t var_780;
    sub_14000d9a0(&var_780, &var_770, &var_760);
    int128_t var_7ad0 = var_780;
    int128_t var_7b0 = zmm0_15;
    int128_t var_7a0 = zmm0_19;
    int128_t var_7c0;
    sub_14000d9a0(&var_7c0, &var_7b0, &var_7a0);
    int128_t var_7b20 = var_7c0;
    int128_t var_7f0 = zmm0_15;
    int128_t var_7e0 = zmm0_21;
    int128_t var_800;
    sub_14000d9a0(&var_800, &var_7f0, &var_7e0);
    int128_t var_7b30 = var_800;
    int128_t var_830 = zmm0_15;
    int128_t var_820 = var_df0;
    int128_t var_840;
    sub_14000d9a0(&var_840, &var_830, &var_820);
    int128_t var_d20 = var_840;
    int128_t var_d30 = var_7b30;
    int128_t var_d40 = var_7b20;
    int128_t var_d50 = var_7ad0;
    int128_t var_da0;
    sub_14000ee00(&var_da0, &var_d50);
    int128_t var_6f40 = var_da0;
    int128_t var_6020 = var_79c0;
    int128_t var_6010 = var_7a80;
    int128_t var_6030;
    sub_14000d900(&var_6030, &var_6020, &var_6010);
    int128_t var_7b40 = var_6030;
    int128_t var_79b0;
    int128_t var_6060 = var_79b0;
    int128_t var_6050 = var_7a80;
    int128_t var_6070;
    sub_14000d900(&var_6070, &var_6060, &var_6050);
    int128_t var_7b50 = var_6070;
    int128_t var_79a0;
    int128_t var_60a0 = var_79a0;
    int128_t var_6090 = var_7a80;
    int128_t var_60b0;
    sub_14000d900(&var_60b0, &var_60a0, &var_6090);
    int128_t var_7b60 = var_60b0;
    int128_t var_7990;
    int128_t var_60e0 = var_7990;
    int128_t var_60d0 = var_7a80;
    int128_t var_60f0;
    sub_14000d900(&var_60f0, &var_60e0, &var_60d0);
    int128_t var_63c0 = var_60f0;
    int128_t var_5f20 = var_7980;
    int128_t var_5f10 = var_7050;
    int128_t var_5f30;
    sub_14000d900(&var_5f30, &var_5f20, &var_5f10);
    int128_t var_7b70 = var_5f30;
    int128_t var_7970;
    int128_t var_5f60 = var_7970;
    int128_t var_5f50 = var_7000;
    int128_t var_5f70;
    sub_14000d900(&var_5f70, &var_5f60, &var_5f50);
    int128_t var_7b80 = var_5f70;
    int128_t var_7960;
    int128_t var_5fa0 = var_7960;
    int128_t var_5f90 = var_6ff0;
    int128_t var_5fb0;
    sub_14000d900(&var_5fb0, &var_5fa0, &var_5f90);
    int128_t var_7b90 = var_5fb0;
    int128_t var_7950;
    int128_t var_5fe0 = var_7950;
    int128_t var_5fd0 = var_6fe0;
    int128_t var_5ff0;
    sub_14000d900(&var_5ff0, &var_5fe0, &var_5fd0);
    int128_t var_64c0 = var_5ff0;
    int128_t var_5e20 = var_7940;
    int128_t var_5e10 = var_6fc0;
    int128_t var_5e30;
    sub_14000d900(&var_5e30, &var_5e20, &var_5e10);
    int128_t var_7ba0 = var_5e30;
    int128_t var_7930;
    int128_t var_5e60 = var_7930;
    int128_t var_5e50 = var_6f70;
    int128_t var_5e70;
    sub_14000d900(&var_5e70, &var_5e60, &var_5e50);
    int128_t var_7bb0 = var_5e70;
    int128_t var_7920;
    int128_t var_5ea0 = var_7920;
    int128_t var_5e90 = var_6f60;
    int128_t var_5eb0;
    sub_14000d900(&var_5eb0, &var_5ea0, &var_5e90);
    int128_t var_7bc0 = var_5eb0;
    int128_t var_7910;
    int128_t var_5ee0 = var_7910;
    int128_t var_5ed0 = var_6f50;
    int128_t var_5ef0;
    sub_14000d900(&var_5ef0, &var_5ee0, &var_5ed0);
    int128_t var_65c0 = var_5ef0;
    int128_t zmm0_40 = var_6f40;
    int128_t var_5d20 = var_7900;
    int128_t var_5d10 = zmm0_40;
    int128_t var_5d30;
    sub_14000d900(&var_5d30, &var_5d20, &var_5d10);
    int128_t var_7bd0 = var_5d30;
    int128_t var_78f0;
    int128_t var_5d60 = var_78f0;
    int128_t var_d90;
    int128_t var_5d50 = var_d90;
    int128_t var_5d70;
    sub_14000d900(&var_5d70, &var_5d60, &var_5d50);
    int128_t var_7be0 = var_5d70;
    int128_t var_78e0;
    int128_t var_5da0 = var_78e0;
    int128_t var_d80;
    int128_t var_5d90 = var_d80;
    int128_t var_5db0;
    sub_14000d900(&var_5db0, &var_5da0, &var_5d90);
    int128_t var_7bf0 = var_5db0;
    int128_t var_78d0;
    int128_t var_5de0 = var_78d0;
    int128_t var_d70;
    int128_t var_5dd0 = var_d70;
    int128_t var_5df0;
    sub_14000d900(&var_5df0, &var_5de0, &var_5dd0);
    int128_t zmm0_44 = var_5df0;
    int128_t var_66f0 = var_7bd0;
    int128_t var_66e0 = var_7be0;
    int128_t var_66d0 = var_7bf0;
    int128_t var_66c0 = zmm0_44;
    int128_t var_6c70;
    memcpy(&var_6c70, &var_66f0, 0x40);
    int128_t zmm0_217 = var_6c70;
    int128_t var_62b0 = var_7b40;
    int128_t var_62a0 = var_7b70;
    int128_t var_6290 = var_7ba0;
    int128_t var_6280 = zmm0_217;
    void var_62f0;
    memcpy(&var_62f0, &var_62b0, 0x40);
    int128_t var_6230 = var_7b50;
    int128_t var_6220 = var_7b80;
    int128_t var_6210 = var_7bb0;
    int128_t var_6c60;
    int128_t var_6200 = var_6c60;
    void var_6270;
    memcpy(&var_6270, &var_6230, 0x40);
    int128_t var_61b0 = var_7b60;
    int128_t var_61a0 = var_7b90;
    int128_t var_6190 = var_7bc0;
    int128_t var_6c50;
    int128_t var_6180 = var_6c50;
    void var_61f0;
    memcpy(&var_61f0, &var_61b0, 0x40);
    int128_t var_6130 = var_63c0;
    int128_t var_6120 = var_64c0;
    int128_t var_6110 = var_65c0;
    int128_t var_6c40;
    int128_t var_6100 = var_6c40;
    void var_6170;
    memcpy(&var_6170, &var_6130, 0x40);
    void var_6ef0;
    memcpy(&var_6ef0, &var_62f0, 0x40);
    void var_6eb0;
    memcpy(&var_6eb0, &var_6270, 0x40);
    void var_6e70;
    memcpy(&var_6e70, &var_61f0, 0x40);
    void var_6e30;
    memcpy(&var_6e30, &var_6170, 0x40);
    int64_t rax_14;
    int64_t rdx_229;
    rax_14 = sub_14000c9d0(arg3, 0, 0x10, &data_14005fc28);
    void var_6bb0;
    memcpy(&var_6bb0, &var_6ef0, 0x40);
    void var_6bf0;
    memcpy(&var_6bf0, &var_6bb0, 0x40);
    sub_14000ca30(rax_14, rdx_229, &var_6bf0, 0x10, &data_14005fc40);
    int64_t rax_15;
    int64_t rdx_233;
    rax_15 = sub_14000c9d0(arg3, 0x10, 0x20, &data_14005fc58);
    void var_6b30;
    memcpy(&var_6b30, &var_6eb0, 0x40);
    void var_6b70;
    memcpy(&var_6b70, &var_6b30, 0x40);
    sub_14000ca30(rax_15, rdx_233, &var_6b70, 0x10, &data_14005fc70);
    int64_t rax_16;
    int64_t rdx_237;
    rax_16 = sub_14000c9d0(arg3, 0x20, 0x30, &data_14005fc88);
    void var_6ab0;
    memcpy(&var_6ab0, &var_6e70, 0x40);
    void var_6af0;
    memcpy(&var_6af0, &var_6ab0, 0x40);
    sub_14000ca30(rax_16, rdx_237, &var_6af0, 0x10, &data_14005fca0);
    int64_t rax_17;
    int64_t rdx_241;
    rax_17 = sub_14000c9d0(arg3, 0x30, 0x40, &data_14005fcb8);
    void var_6a30;
    memcpy(&var_6a30, &var_6e30, 0x40);
    void var_6a70;
    memcpy(&var_6a70, &var_6a30, 0x40);
    sub_14000ca30(rax_17, rdx_241, &var_6a70, 0x10, &data_14005fcd0);
    void var_67e0;
    memcpy(&var_67e0, &var_6f40, 0x40);
    int128_t var_69e0;
    memcpy(&var_69e0, &var_67e0, 0x40);
    int64_t var_f98 = 4;
    int128_t var_f90 = var_69e0;
    int128_t var_fd0;
    sub_14000ef60(&var_fd0, &var_f90);
    int128_t zmm0_222 = var_fd0;
    var_82a0 = zmm0_222;
    int128_t var_f70 = zmm0_222;
    int64_t var_fb8 = 0;
    int128_t var_ee0;
    sub_14000e890(&var_ee0, 4);
    int128_t var_ec0 = var_ee0;
    int128_t var_ed0;
    sub_14000e8d0(&var_ed0, &var_ec0, var_fb8);
    zmm1 = var_82a0;
    var_ee0 = var_ed0;
    int128_t zmm0_224 = var_ee0;
    int128_t var_f50 = zmm0_224;
    int128_t var_e90 = zmm1;
    int128_t var_e80 = zmm0_224;
    int128_t var_ea0;
    sub_14000d9a0(&var_ea0, &var_e90, &var_e80);
    int128_t var_f10 = var_ea0;
    int128_t var_fb0;
    sub_14000eaa0(&var_fb0, &var_f10);
    int128_t var_6780 = var_fb0;
    int64_t var_69f0;
    sub_14000ef60(&var_69f0, &var_6780);
    arg1[2] = var_69f0;
    int64_t var_69e8;
    *(arg1 + 0x28) = var_69e8;
    return arg1;
}

int64_t sub_140025550() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025570() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025590() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400255b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400255d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400255f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025610() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025630() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025650() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025670() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025690() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400256b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400256d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400256f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025710() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025730() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025750() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025770() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025790() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400257b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400257d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400257f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025810() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025830() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025850() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025870() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025890() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400258b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400258d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400258f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025910(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x673f);
    *(rdx + 0x673e);
    *(rdx + 0x673d);
}

int64_t sub_140025960() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025980() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400259a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400259c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400259e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025a00() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025a20() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025a40() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025a60() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025a80() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025aa0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025ac0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140025ae0(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x6e0f);
    *(rdx + 0x6e0e);
    *(rdx + 0x6e0d);
}

int128_t* sub_140025b30(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    __chkstk(0x8788);
    int128_t var_8720;
    void* var_8768 = &*var_8720[8];
    int64_t var_18 = -2;
    int128_t* var_7df0 = arg1;
    int32_t var_7de4 = arg2;
    int64_t var_7de0 = arg3;
    int128_t* var_7dd8 = arg1;
    int32_t var_7dcc = arg2;
    int64_t var_7dc8 = arg3;
    int128_t* var_6d68 = arg1;
    int32_t var_6d5c = arg2;
    int64_t var_6d58 = arg3;
    int32_t var_7dc0;
    __builtin_strncpy(&var_7dc0, "expand 32-byte k", 0x10);
    int64_t rdx = var_7dc0;
    int64_t var_6b00 = rdx;
    int32_t var_7db8;
    int64_t rax = var_7db8;
    int64_t var_6af8 = rax;
    int128_t var_6af0;
    sub_14000e890(&var_6af0, rdx);
    int128_t zmm0 = var_6af0;
    int128_t var_6ae0 = zmm0;
    int128_t var_6ad0;
    sub_14000e890(&var_6ad0, rax);
    int128_t var_6ab0 = var_6ad0;
    int128_t var_6ac0;
    sub_14000dd70(&var_6ac0, &var_6ab0);
    int128_t zmm0_2 = var_6ac0;
    int128_t var_6aa0 = zmm0_2;
    int128_t var_6a80 = zmm0;
    int128_t var_6a70 = zmm0_2;
    int128_t var_6a90;
    sub_14000d8e0(&var_6a90, &var_6a80, &var_6a70);
    int128_t zmm2 = var_6a90;
    int128_t var_7e90 = zmm2;
    int128_t var_6d40 = zmm2;
    int128_t zmm1 = *arg1;
    int128_t var_6d20 = zmm1;
    int128_t zmm0_3 = arg1[1];
    int128_t var_6d00 = zmm0_3;
    int128_t var_7c60 = zmm2;
    int128_t var_7c70 = zmm2;
    int128_t var_7c80 = zmm2;
    int128_t var_7c90 = zmm2;
    int128_t var_7be0 = zmm1;
    int128_t var_7bf0 = zmm1;
    int128_t var_7c00 = zmm1;
    int128_t var_7c10 = zmm1;
    int128_t var_7b60 = zmm0_3;
    int128_t var_7b70 = zmm0_3;
    int128_t var_7b80 = zmm0_3;
    int128_t var_7b90 = zmm0_3;
    zmm0_3 = arg1[2];
    int128_t var_6d0 = zmm0_3;
    int64_t var_838 = 0;
    int128_t var_4a0;
    sub_14000e890(&var_4a0, 0);
    int128_t zmm0_4 = var_4a0;
    int128_t var_490 = zmm0_4;
    int128_t var_480;
    sub_14000e890(&var_480, var_838);
    int128_t var_460 = var_480;
    int128_t var_470;
    sub_14000dd70(&var_470, &var_460);
    int128_t zmm0_6 = var_470;
    int128_t var_450 = zmm0_6;
    int128_t var_430 = zmm0_4;
    int128_t var_420 = zmm0_6;
    int128_t var_440;
    sub_14000d8e0(&var_440, &var_430, &var_420);
    int128_t zmm0_7 = var_440;
    int64_t var_828 = 0;
    int128_t var_400;
    sub_14000e890(&var_400, 1);
    int128_t zmm0_8 = var_400;
    int128_t var_3f0 = zmm0_8;
    int128_t var_3e0;
    sub_14000e890(&var_3e0, var_828);
    int128_t var_3c0 = var_3e0;
    int128_t var_3d0;
    sub_14000dd70(&var_3d0, &var_3c0);
    int128_t zmm0_10 = var_3d0;
    int128_t var_3b0 = zmm0_10;
    int128_t var_390 = zmm0_8;
    int128_t var_380 = zmm0_10;
    int128_t var_3a0;
    sub_14000d8e0(&var_3a0, &var_390, &var_380);
    int128_t zmm0_11 = var_3a0;
    int64_t var_818 = 0;
    int128_t var_360;
    sub_14000e890(&var_360, 2);
    int128_t zmm0_12 = var_360;
    int128_t var_350 = zmm0_12;
    int128_t var_340;
    sub_14000e890(&var_340, var_818);
    int128_t var_320 = var_340;
    int128_t var_330;
    sub_14000dd70(&var_330, &var_320);
    int128_t zmm0_14 = var_330;
    int128_t var_310 = zmm0_14;
    int128_t var_2f0 = zmm0_12;
    int128_t var_2e0 = zmm0_14;
    int128_t var_300;
    sub_14000d8e0(&var_300, &var_2f0, &var_2e0);
    int128_t zmm0_15 = var_300;
    int64_t var_808 = 0;
    int128_t var_2c0;
    sub_14000e890(&var_2c0, 3);
    int128_t zmm0_16 = var_2c0;
    int128_t var_2b0 = zmm0_16;
    int128_t var_2a0;
    sub_14000e890(&var_2a0, var_808);
    int128_t var_280 = var_2a0;
    int128_t var_290;
    sub_14000dd70(&var_290, &var_280);
    int128_t zmm0_18 = var_290;
    int128_t var_270 = zmm0_18;
    int128_t var_250 = zmm0_16;
    int128_t var_240 = zmm0_18;
    int128_t var_260;
    sub_14000d8e0(&var_260, &var_250, &var_240);
    int128_t var_850 = var_260;
    int128_t var_50 = zmm0_3;
    int128_t var_40 = zmm0_7;
    int128_t var_60;
    sub_14000d9a0(&var_60, &var_50, &var_40);
    int128_t var_7e00 = var_60;
    int128_t var_90 = zmm0_3;
    int128_t var_80 = zmm0_11;
    int128_t var_a0;
    sub_14000d9a0(&var_a0, &var_90, &var_80);
    int128_t var_7ee0 = var_a0;
    int128_t var_d0 = zmm0_3;
    int128_t var_c0 = zmm0_15;
    int128_t var_e0;
    sub_14000d9a0(&var_e0, &var_d0, &var_c0);
    int128_t var_7ef0 = var_e0;
    int128_t var_110 = zmm0_3;
    int128_t var_100 = var_850;
    int128_t var_120;
    sub_14000d9a0(&var_120, &var_110, &var_100);
    int128_t zmm0_23 = var_120;
    int128_t var_220 = var_7e00;
    int128_t var_210 = var_7ee0;
    int128_t var_200 = var_7ef0;
    int128_t var_1f0 = zmm0_23;
    void var_7b0;
    memcpy(&var_7b0, &var_220, 0x40);
    void var_800;
    sub_14000eb40(&var_800, &var_7b0);
    void var_580;
    memcpy(&var_580, &var_800, 0x40);
    int64_t var_640;
    memcpy(&var_640, &var_580, 0x40);
    int64_t var_638;
    int64_t var_5b8 = var_638;
    int64_t var_628;
    int64_t var_5a8 = var_628;
    int64_t var_618;
    int64_t var_598 = var_618;
    int64_t var_608;
    int64_t var_588 = var_608;
    int128_t var_600 = var_640;
    int64_t var_630;
    int128_t var_5f0 = var_630;
    int64_t var_620;
    int128_t var_5e0 = var_620;
    int64_t var_610;
    int128_t var_5d0 = var_610;
    void var_7b10;
    memcpy(&var_7b10, &var_600, 0x40);
    int128_t var_7d90;
    memcpy(&var_7d90, &var_7c90, 0x40);
    int128_t var_7d50;
    memcpy(&var_7d50, &var_7c10, 0x40);
    int128_t var_7d10;
    memcpy(&var_7d10, &var_7b90, 0x40);
    int128_t var_7cd0;
    memcpy(&var_7cd0, &var_7b10, 0x40);
    int32_t var_7ac0 = sub_14000ef80(0, arg2);
    int32_t var_7abc = arg2;
    
    while (true)
    {
        int32_t rax_10;
        int32_t rdx_30;
        rax_10 = sub_14000c720(&var_7ac0);
        int32_t var_7ab4_1 = rdx_30;
        
        if (rax_10 == 0)
            break;
        
        int128_t var_79b0;
        int128_t* var_8078_1 = &var_79b0;
        memcpy(&var_79b0, &var_7d90, 0x100);
        int128_t* var_3398_1 = var_8078_1;
        int128_t* var_3288_1 = var_8078_1;
        int128_t var_2800 = var_79b0;
        int128_t var_7970;
        int128_t var_27f0 = var_7970;
        int128_t var_2810;
        sub_14000d900(&var_2810, &var_2800, &var_27f0);
        var_79b0 = var_2810;
        int128_t var_79a0;
        int128_t* var_32c8_1 = &var_79a0;
        int128_t var_2840 = var_79a0;
        int128_t var_7960;
        int128_t var_2830 = var_7960;
        int128_t var_2850;
        sub_14000d900(&var_2850, &var_2840, &var_2830);
        var_79a0 = var_2850;
        int128_t var_7990;
        int128_t* var_3308_1 = &var_7990;
        int128_t var_2880 = var_7990;
        int128_t var_7950;
        int128_t var_2870 = var_7950;
        int128_t var_2890;
        sub_14000d900(&var_2890, &var_2880, &var_2870);
        var_7990 = var_2890;
        int128_t var_7980;
        int128_t* var_3348_1 = &var_7980;
        int128_t var_28c0 = var_7980;
        int128_t var_7940;
        int128_t var_28b0 = var_7940;
        int128_t var_28d0;
        sub_14000d900(&var_28d0, &var_28c0, &var_28b0);
        var_7980 = var_28d0;
        zmm2 = var_7990;
        int128_t zmm3 = var_7980;
        int128_t var_3f80_1 = var_79a0;
        int128_t zmm0_67 = var_79b0;
        int128_t var_78f0;
        int128_t var_2400 = var_78f0;
        int128_t var_23f0 = zmm0_67;
        int128_t var_2410;
        sub_14000da40(&var_2410, &var_2400, &var_23f0);
        int128_t var_8070_1 = var_2410;
        int128_t var_78e0;
        int128_t var_2440 = var_78e0;
        int128_t var_2430 = var_3f80_1;
        int128_t var_2450;
        sub_14000da40(&var_2450, &var_2440, &var_2430);
        int128_t var_8090_1 = var_2450;
        int128_t var_78d0;
        int128_t var_2480 = var_78d0;
        int128_t var_2470 = zmm2;
        int128_t var_2490;
        sub_14000da40(&var_2490, &var_2480, &var_2470);
        int128_t var_80a0_1 = var_2490;
        int128_t var_78c0;
        int128_t var_24c0 = var_78c0;
        int128_t var_24b0 = zmm3;
        int128_t var_24d0;
        sub_14000da40(&var_24d0, &var_24c0, &var_24b0);
        int128_t var_3860_1 = var_24d0;
        int64_t var_8100_1 = 0xd0c0f0e09080b0a;
        int64_t var_80f8_1 = 0x504070601000302;
        int128_t var_30a0;
        sub_14000da60(&var_30a0, 0xd0c0f0e09080b0a, 0x504070601000302);
        int128_t zmm0_72 = var_30a0;
        int128_t var_3080 = var_8070_1;
        int128_t var_3070 = zmm0_72;
        int128_t var_3090;
        sub_14000e500(&var_3090, &var_3080, &var_3070);
        int128_t var_80e0_1 = var_3090;
        int128_t var_30f0;
        sub_14000da60(&var_30f0, var_8100_1, var_80f8_1);
        int128_t zmm0_74 = var_30f0;
        int128_t var_30d0 = var_8090_1;
        int128_t var_30c0 = zmm0_74;
        int128_t var_30e0;
        sub_14000e500(&var_30e0, &var_30d0, &var_30c0);
        int128_t var_80d0_1 = var_30e0;
        int128_t var_3140;
        sub_14000da60(&var_3140, var_8100_1, var_80f8_1);
        int128_t zmm0_76 = var_3140;
        int128_t var_3120 = var_80a0_1;
        int128_t var_3110 = zmm0_76;
        int128_t var_3130;
        sub_14000e500(&var_3130, &var_3120, &var_3110);
        int128_t var_80c0_1 = var_3130;
        int128_t var_3190;
        sub_14000da60(&var_3190, var_8100_1, var_80f8_1);
        int128_t zmm0_78 = var_3190;
        int128_t var_3170 = var_3860_1;
        int128_t var_3160 = zmm0_78;
        int128_t var_3180;
        sub_14000e500(&var_3180, &var_3170, &var_3160);
        int128_t var_3220_1 = var_3180;
        int128_t var_7930;
        int128_t* var_34e8_1 = &var_7930;
        int128_t* var_33d8_1 = &var_7930;
        int128_t var_2700 = var_7930;
        int128_t var_26f0 = var_80e0_1;
        int128_t var_2710;
        sub_14000d900(&var_2710, &var_2700, &var_26f0);
        var_7930 = var_2710;
        int128_t var_7920;
        int128_t* var_3418_1 = &var_7920;
        int128_t var_2740 = var_7920;
        int128_t var_2730 = var_80d0_1;
        int128_t var_2750;
        sub_14000d900(&var_2750, &var_2740, &var_2730);
        var_7920 = var_2750;
        int128_t var_7910;
        int128_t* var_3458_1 = &var_7910;
        int128_t var_2780 = var_7910;
        int128_t var_2770 = var_80c0_1;
        int128_t var_2790;
        sub_14000d900(&var_2790, &var_2780, &var_2770);
        var_7910 = var_2790;
        int128_t var_7900;
        int128_t* var_3498_1 = &var_7900;
        int128_t var_27c0 = var_7900;
        int128_t var_27b0 = var_3220_1;
        int128_t var_27d0;
        sub_14000d900(&var_27d0, &var_27c0, &var_27b0);
        var_7900 = var_27d0;
        zmm2 = var_7910;
        zmm3 = var_7900;
        int128_t var_3e40_1 = var_7920;
        int128_t zmm0_83 = var_7930;
        int128_t var_2300 = var_7970;
        int128_t var_22f0 = zmm0_83;
        int128_t var_2310;
        sub_14000da40(&var_2310, &var_2300, &var_22f0);
        int128_t var_80b0_1 = var_2310;
        int128_t var_2340 = var_7960;
        int128_t var_2330 = var_3e40_1;
        int128_t var_2350;
        sub_14000da40(&var_2350, &var_2340, &var_2330);
        int128_t var_8140_1 = var_2350;
        int128_t var_2380 = var_7950;
        int128_t var_2370 = zmm2;
        int128_t var_2390;
        sub_14000da40(&var_2390, &var_2380, &var_2370);
        int128_t var_8150_1 = var_2390;
        int128_t var_23c0 = var_7940;
        int128_t var_23b0 = zmm3;
        int128_t var_23d0;
        sub_14000da40(&var_23d0, &var_23c0, &var_23b0);
        int128_t var_3960_1 = var_23d0;
        int128_t var_2e00 = var_80b0_1;
        int128_t var_2e10;
        sub_14000dda0(&var_2e10, &var_2e00);
        int128_t var_81d0_1 = var_2e10;
        int128_t var_2de0 = var_80b0_1;
        int128_t var_2df0;
        sub_14000daa0(&var_2df0, &var_2de0);
        int128_t zmm0_89 = var_2df0;
        int128_t var_2dc0 = var_81d0_1;
        int128_t var_2db0 = zmm0_89;
        int128_t var_2dd0;
        sub_14000d8e0(&var_2dd0, &var_2dc0, &var_2db0);
        int128_t var_8190_1 = var_2dd0;
        int128_t var_2e80 = var_8140_1;
        int128_t var_2e90;
        sub_14000dda0(&var_2e90, &var_2e80);
        int128_t var_81c0_1 = var_2e90;
        int128_t var_2e60 = var_8140_1;
        int128_t var_2e70;
        sub_14000daa0(&var_2e70, &var_2e60);
        int128_t zmm0_92 = var_2e70;
        int128_t var_2e40 = var_81c0_1;
        int128_t var_2e30 = zmm0_92;
        int128_t var_2e50;
        sub_14000d8e0(&var_2e50, &var_2e40, &var_2e30);
        int128_t var_8180_1 = var_2e50;
        int128_t var_2f00 = var_8150_1;
        int128_t var_2f10;
        sub_14000dda0(&var_2f10, &var_2f00);
        int128_t var_81b0_1 = var_2f10;
        int128_t var_2ee0 = var_8150_1;
        int128_t var_2ef0;
        sub_14000daa0(&var_2ef0, &var_2ee0);
        int128_t zmm0_95 = var_2ef0;
        int128_t var_2ec0 = var_81b0_1;
        int128_t var_2eb0 = zmm0_95;
        int128_t var_2ed0;
        sub_14000d8e0(&var_2ed0, &var_2ec0, &var_2eb0);
        int128_t var_8170_1 = var_2ed0;
        int128_t var_2f80 = var_3960_1;
        int128_t var_2f90;
        sub_14000dda0(&var_2f90, &var_2f80);
        int128_t var_81a0_1 = var_2f90;
        int128_t var_2f60 = var_3960_1;
        int128_t var_2f70;
        sub_14000daa0(&var_2f70, &var_2f60);
        int128_t zmm0_98 = var_2f70;
        int128_t var_2f40 = var_81a0_1;
        int128_t var_2f30 = zmm0_98;
        int128_t var_2f50;
        sub_14000d8e0(&var_2f50, &var_2f40, &var_2f30);
        int128_t var_3020_1 = var_2f50;
        int128_t* var_3638_1 = &var_79b0;
        int128_t* var_3528_1 = &var_79b0;
        int128_t var_2600 = var_79b0;
        int128_t var_25f0 = var_8190_1;
        int128_t var_2610;
        sub_14000d900(&var_2610, &var_2600, &var_25f0);
        var_79b0 = var_2610;
        int128_t* var_3568_1 = &var_79a0;
        int128_t var_2640 = var_79a0;
        int128_t var_2630 = var_8180_1;
        int128_t var_2650;
        sub_14000d900(&var_2650, &var_2640, &var_2630);
        var_79a0 = var_2650;
        int128_t* var_35a8_1 = &var_7990;
        int128_t var_2680 = var_7990;
        int128_t var_2670 = var_8170_1;
        int128_t var_2690;
        sub_14000d900(&var_2690, &var_2680, &var_2670);
        var_7990 = var_2690;
        int128_t* var_35e8_1 = &var_7980;
        int128_t var_26c0 = var_7980;
        int128_t var_26b0 = var_3020_1;
        int128_t var_26d0;
        sub_14000d900(&var_26d0, &var_26c0, &var_26b0);
        var_7980 = var_26d0;
        int128_t zmm2_1 = var_7990;
        int128_t zmm3_1 = var_7980;
        int128_t var_3d00_1 = var_79a0;
        int128_t zmm0_103 = var_79b0;
        int128_t var_2200 = var_80e0_1;
        int128_t var_21f0 = zmm0_103;
        int128_t var_2210;
        sub_14000da40(&var_2210, &var_2200, &var_21f0);
        int128_t var_8160_1 = var_2210;
        int128_t var_2240 = var_80d0_1;
        int128_t var_2230 = var_3d00_1;
        int128_t var_2250;
        sub_14000da40(&var_2250, &var_2240, &var_2230);
        int128_t var_81e0_1 = var_2250;
        int128_t var_2280 = var_80c0_1;
        int128_t var_2270 = zmm2_1;
        int128_t var_2290;
        sub_14000da40(&var_2290, &var_2280, &var_2270);
        int128_t var_81f0_1 = var_2290;
        int128_t var_22c0 = var_3220_1;
        int128_t var_22b0 = zmm3_1;
        int128_t var_22d0;
        sub_14000da40(&var_22d0, &var_22c0, &var_22b0);
        int128_t var_3a60_1 = var_22d0;
        int64_t var_8250_1 = 0xe0d0c0f0a09080b;
        int64_t var_8248_1 = 0x605040702010003;
        int128_t var_2be0;
        sub_14000da60(&var_2be0, 0xe0d0c0f0a09080b, 0x605040702010003);
        int128_t zmm0_108 = var_2be0;
        int128_t var_2bc0 = var_8160_1;
        int128_t var_2bb0 = zmm0_108;
        int128_t var_2bd0;
        sub_14000e500(&var_2bd0, &var_2bc0, &var_2bb0);
        int128_t var_8230_1 = var_2bd0;
        int128_t var_2c30;
        sub_14000da60(&var_2c30, var_8250_1, var_8248_1);
        int128_t zmm0_110 = var_2c30;
        int128_t var_2c10 = var_81e0_1;
        int128_t var_2c00 = zmm0_110;
        int128_t var_2c20;
        sub_14000e500(&var_2c20, &var_2c10, &var_2c00);
        int128_t var_8220_1 = var_2c20;
        int128_t var_2c80;
        sub_14000da60(&var_2c80, var_8250_1, var_8248_1);
        int128_t zmm0_112 = var_2c80;
        int128_t var_2c60 = var_81f0_1;
        int128_t var_2c50 = zmm0_112;
        int128_t var_2c70;
        sub_14000e500(&var_2c70, &var_2c60, &var_2c50);
        int128_t var_8210_1 = var_2c70;
        int128_t var_2cd0;
        sub_14000da60(&var_2cd0, var_8250_1, var_8248_1);
        int128_t zmm0_114 = var_2cd0;
        int128_t var_2cb0 = var_3a60_1;
        int128_t var_2ca0 = zmm0_114;
        int128_t var_2cc0;
        sub_14000e500(&var_2cc0, &var_2cb0, &var_2ca0);
        var_78c0 = var_2cc0;
        var_78d0 = var_8210_1;
        var_78e0 = var_8220_1;
        var_78f0 = var_8230_1;
        int128_t* var_3788_1 = &var_7930;
        int128_t* var_3678_1 = &var_7930;
        int128_t var_2500 = var_7930;
        int128_t var_24f0 = var_78f0;
        int128_t var_2510;
        sub_14000d900(&var_2510, &var_2500, &var_24f0);
        var_7930 = var_2510;
        int128_t* var_36b8_1 = &var_7920;
        int128_t var_2540 = var_7920;
        int128_t var_2530 = var_78e0;
        int128_t var_2550;
        sub_14000d900(&var_2550, &var_2540, &var_2530);
        var_7920 = var_2550;
        int128_t* var_36f8_1 = &var_7910;
        int128_t var_2580 = var_7910;
        int128_t var_2570 = var_78d0;
        int128_t var_2590;
        sub_14000d900(&var_2590, &var_2580, &var_2570);
        var_7910 = var_2590;
        int128_t* var_3738_1 = &var_7900;
        int128_t var_25c0 = var_7900;
        int128_t var_25b0 = var_78c0;
        int128_t var_25d0;
        sub_14000d900(&var_25d0, &var_25c0, &var_25b0);
        var_7900 = var_25d0;
        zmm2_1 = var_7910;
        zmm3_1 = var_7900;
        int128_t var_3bc0_1 = var_7920;
        int128_t zmm0_119 = var_7930;
        int128_t var_2100 = var_8190_1;
        int128_t var_20f0 = zmm0_119;
        int128_t var_2110;
        sub_14000da40(&var_2110, &var_2100, &var_20f0);
        int128_t var_8200_1 = var_2110;
        int128_t var_2140 = var_8180_1;
        int128_t var_2130 = var_3bc0_1;
        int128_t var_2150;
        sub_14000da40(&var_2150, &var_2140, &var_2130);
        int128_t var_8290_1 = var_2150;
        int128_t var_2180 = var_8170_1;
        int128_t var_2170 = zmm2_1;
        int128_t var_2190;
        sub_14000da40(&var_2190, &var_2180, &var_2170);
        int128_t var_82a0_1 = var_2190;
        int128_t var_21c0 = var_3020_1;
        int128_t var_21b0 = zmm3_1;
        int128_t var_21d0;
        sub_14000da40(&var_21d0, &var_21c0, &var_21b0);
        int128_t var_3b60_1 = var_21d0;
        int128_t var_2940 = var_8200_1;
        int128_t var_2950;
        sub_14000df80(&var_2950, &var_2940);
        int128_t var_8330_1 = var_2950;
        int128_t var_2920 = var_8200_1;
        int128_t var_2930;
        sub_14000db90(&var_2930, &var_2920);
        int128_t zmm0_125 = var_2930;
        int128_t var_2900 = var_8330_1;
        int128_t var_28f0 = zmm0_125;
        int128_t var_2910;
        sub_14000d8e0(&var_2910, &var_2900, &var_28f0);
        int128_t var_82f0_1 = var_2910;
        int128_t var_29c0 = var_8290_1;
        int128_t var_29d0;
        sub_14000df80(&var_29d0, &var_29c0);
        int128_t var_8320_1 = var_29d0;
        int128_t var_29a0 = var_8290_1;
        int128_t var_29b0;
        sub_14000db90(&var_29b0, &var_29a0);
        int128_t zmm0_128 = var_29b0;
        int128_t var_2980 = var_8320_1;
        int128_t var_2970 = zmm0_128;
        int128_t var_2990;
        sub_14000d8e0(&var_2990, &var_2980, &var_2970);
        int128_t var_82e0_1 = var_2990;
        int128_t var_2a40 = var_82a0_1;
        int128_t var_2a50;
        sub_14000df80(&var_2a50, &var_2a40);
        int128_t var_8310_1 = var_2a50;
        int128_t var_2a20 = var_82a0_1;
        int128_t var_2a30;
        sub_14000db90(&var_2a30, &var_2a20);
        int128_t zmm0_131 = var_2a30;
        int128_t var_2a00 = var_8310_1;
        int128_t var_29f0 = zmm0_131;
        int128_t var_2a10;
        sub_14000d8e0(&var_2a10, &var_2a00, &var_29f0);
        int128_t var_82d0_1 = var_2a10;
        int128_t var_2ac0 = var_3b60_1;
        int128_t var_2ad0;
        sub_14000df80(&var_2ad0, &var_2ac0);
        int128_t var_8300_1 = var_2ad0;
        int128_t var_2aa0 = var_3b60_1;
        int128_t var_2ab0;
        sub_14000db90(&var_2ab0, &var_2aa0);
        int128_t zmm0_134 = var_2ab0;
        int128_t var_2a80 = var_8300_1;
        int128_t var_2a70 = zmm0_134;
        int128_t var_2a90;
        sub_14000d8e0(&var_2a90, &var_2a80, &var_2a70);
        var_7940 = var_2a90;
        var_7950 = var_82d0_1;
        var_7960 = var_82e0_1;
        var_7970 = var_82f0_1;
        void var_7ab0;
        void* var_82b8_1 = &var_7ab0;
        uint32_t count = 0x100;
        memcpy(&var_7ab0, &var_79b0, 0x100);
        int128_t* var_82b0_1 = &var_7d90;
        memcpy(&var_7d90, var_82b8_1, count);
        void var_75b0;
        memcpy(&var_75b0, var_82b0_1, count);
        char var_1f41_1 = 0;
        char var_1f42_1 = 0;
        char var_1f43_1 = 0;
        char var_1f43_2 = 1;
        char var_1f42_2 = 1;
        char var_1f41_2 = 1;
        char var_1f41_3 = 0;
        int128_t var_7570;
        int128_t var_1a20 = var_7570;
        int128_t var_1a30;
        sub_14000e110(&var_1a30, &var_1a20);
        int128_t var_8340_1 = var_1a30;
        int128_t var_7560;
        int128_t var_1a60 = var_7560;
        int128_t var_1a70;
        sub_14000e110(&var_1a70, &var_1a60);
        int128_t var_8350_1 = var_1a70;
        int128_t var_7550;
        int128_t var_1aa0 = var_7550;
        int128_t var_1ab0;
        sub_14000e110(&var_1ab0, &var_1aa0);
        int128_t var_8360_1 = var_1ab0;
        int128_t var_7540;
        int128_t var_1ae0 = var_7540;
        int128_t var_1af0;
        sub_14000e110(&var_1af0, &var_1ae0);
        char var_1f41_4 = 1;
        var_7540 = var_1af0;
        var_7550 = var_8360_1;
        var_7560 = var_8350_1;
        var_7570 = var_8340_1;
        char var_1f42_3 = 0;
        int128_t var_7530;
        int128_t var_1be0 = var_7530;
        int128_t var_1bf0;
        sub_14000e1d0(&var_1bf0, &var_1be0);
        int128_t var_8370_1 = var_1bf0;
        int128_t var_7520;
        int128_t var_1c20 = var_7520;
        int128_t var_1c30;
        sub_14000e1d0(&var_1c30, &var_1c20);
        int128_t var_8380_1 = var_1c30;
        int128_t var_7510;
        int128_t var_1c60 = var_7510;
        int128_t var_1c70;
        sub_14000e1d0(&var_1c70, &var_1c60);
        int128_t var_8390_1 = var_1c70;
        int128_t var_7500;
        int128_t var_1ca0 = var_7500;
        int128_t var_1cb0;
        sub_14000e1d0(&var_1cb0, &var_1ca0);
        char var_1f42_4 = 1;
        var_7500 = var_1cb0;
        var_7510 = var_8390_1;
        var_7520 = var_8380_1;
        var_7530 = var_8370_1;
        char var_1f43_3 = 0;
        int128_t var_74f0;
        int128_t var_1da0 = var_74f0;
        int128_t var_1db0;
        sub_14000e170(&var_1db0, &var_1da0);
        int128_t var_83a0_1 = var_1db0;
        int128_t var_74e0;
        int128_t var_1de0 = var_74e0;
        int128_t var_1df0;
        sub_14000e170(&var_1df0, &var_1de0);
        int128_t var_83b0_1 = var_1df0;
        int128_t var_74d0;
        int128_t var_1e20 = var_74d0;
        int128_t var_1e30;
        sub_14000e170(&var_1e30, &var_1e20);
        int128_t var_83c0_1 = var_1e30;
        int128_t var_74c0;
        int128_t var_1e60 = var_74c0;
        int128_t var_1e70;
        sub_14000e170(&var_1e70, &var_1e60);
        char var_1f43_4 = 1;
        var_74c0 = var_1e70;
        var_74d0 = var_83c0_1;
        var_74e0 = var_83b0_1;
        var_74f0 = var_83a0_1;
        char var_1f43_5 = 0;
        char var_1f42_5 = 0;
        char var_1f41_5 = 0;
        int128_t var_76b0;
        int128_t* var_83d8_1 = &var_76b0;
        memcpy(&var_76b0, &var_75b0, 0x100);
        int128_t* var_5358_1 = var_83d8_1;
        int128_t* var_5248_1 = var_83d8_1;
        int128_t var_47c0 = var_76b0;
        int128_t var_7670;
        int128_t var_47b0 = var_7670;
        int128_t var_47d0;
        sub_14000d900(&var_47d0, &var_47c0, &var_47b0);
        var_76b0 = var_47d0;
        int128_t var_76a0;
        int128_t* var_5288_1 = &var_76a0;
        int128_t var_4800 = var_76a0;
        int128_t var_7660;
        int128_t var_47f0 = var_7660;
        int128_t var_4810;
        sub_14000d900(&var_4810, &var_4800, &var_47f0);
        var_76a0 = var_4810;
        int128_t var_7690;
        int128_t* var_52c8_1 = &var_7690;
        int128_t var_4840 = var_7690;
        int128_t var_7650;
        int128_t var_4830 = var_7650;
        int128_t var_4850;
        sub_14000d900(&var_4850, &var_4840, &var_4830);
        var_7690 = var_4850;
        int128_t var_7680;
        int128_t* var_5308_1 = &var_7680;
        int128_t var_4880 = var_7680;
        int128_t var_7640;
        int128_t var_4870 = var_7640;
        int128_t var_4890;
        sub_14000d900(&var_4890, &var_4880, &var_4870);
        var_7680 = var_4890;
        int128_t zmm2_2 = var_7690;
        int128_t zmm3_2 = var_7680;
        int128_t var_5f40_1 = var_76a0;
        int128_t zmm0_153 = var_76b0;
        int128_t var_75f0;
        int128_t var_43c0 = var_75f0;
        int128_t var_43b0 = zmm0_153;
        int128_t var_43d0;
        sub_14000da40(&var_43d0, &var_43c0, &var_43b0);
        int128_t var_83d0_1 = var_43d0;
        int128_t var_75e0;
        int128_t var_4400 = var_75e0;
        int128_t var_43f0 = var_5f40_1;
        int128_t var_4410;
        sub_14000da40(&var_4410, &var_4400, &var_43f0);
        int128_t var_83f0_1 = var_4410;
        int128_t var_75d0;
        int128_t var_4440 = var_75d0;
        int128_t var_4430 = zmm2_2;
        int128_t var_4450;
        sub_14000da40(&var_4450, &var_4440, &var_4430);
        int128_t var_8400_1 = var_4450;
        int128_t var_75c0;
        int128_t var_4480 = var_75c0;
        int128_t var_4470 = zmm3_2;
        int128_t var_4490;
        sub_14000da40(&var_4490, &var_4480, &var_4470);
        int128_t var_5820_1 = var_4490;
        int64_t var_8460_1 = 0xd0c0f0e09080b0a;
        int64_t var_8458_1 = 0x504070601000302;
        int128_t var_5060;
        sub_14000da60(&var_5060, 0xd0c0f0e09080b0a, 0x504070601000302);
        int128_t zmm0_158 = var_5060;
        int128_t var_5040 = var_83d0_1;
        int128_t var_5030 = zmm0_158;
        int128_t var_5050;
        sub_14000e500(&var_5050, &var_5040, &var_5030);
        int128_t var_8440_1 = var_5050;
        int128_t var_50b0;
        sub_14000da60(&var_50b0, var_8460_1, var_8458_1);
        int128_t zmm0_160 = var_50b0;
        int128_t var_5090 = var_83f0_1;
        int128_t var_5080 = zmm0_160;
        int128_t var_50a0;
        sub_14000e500(&var_50a0, &var_5090, &var_5080);
        int128_t var_8430_1 = var_50a0;
        int128_t var_5100;
        sub_14000da60(&var_5100, var_8460_1, var_8458_1);
        int128_t zmm0_162 = var_5100;
        int128_t var_50e0 = var_8400_1;
        int128_t var_50d0 = zmm0_162;
        int128_t var_50f0;
        sub_14000e500(&var_50f0, &var_50e0, &var_50d0);
        int128_t var_8420_1 = var_50f0;
        int128_t var_5150;
        sub_14000da60(&var_5150, var_8460_1, var_8458_1);
        int128_t zmm0_164 = var_5150;
        int128_t var_5130 = var_5820_1;
        int128_t var_5120 = zmm0_164;
        int128_t var_5140;
        sub_14000e500(&var_5140, &var_5130, &var_5120);
        int128_t var_51e0_1 = var_5140;
        int128_t var_7630;
        int128_t* var_54a8_1 = &var_7630;
        int128_t* var_5398_1 = &var_7630;
        int128_t var_46c0 = var_7630;
        int128_t var_46b0 = var_8440_1;
        int128_t var_46d0;
        sub_14000d900(&var_46d0, &var_46c0, &var_46b0);
        var_7630 = var_46d0;
        int128_t var_7620;
        int128_t* var_53d8_1 = &var_7620;
        int128_t var_4700 = var_7620;
        int128_t var_46f0 = var_8430_1;
        int128_t var_4710;
        sub_14000d900(&var_4710, &var_4700, &var_46f0);
        var_7620 = var_4710;
        int128_t var_7610;
        int128_t* var_5418_1 = &var_7610;
        int128_t var_4740 = var_7610;
        int128_t var_4730 = var_8420_1;
        int128_t var_4750;
        sub_14000d900(&var_4750, &var_4740, &var_4730);
        var_7610 = var_4750;
        int128_t var_7600;
        int128_t* var_5458_1 = &var_7600;
        int128_t var_4780 = var_7600;
        int128_t var_4770 = var_51e0_1;
        int128_t var_4790;
        sub_14000d900(&var_4790, &var_4780, &var_4770);
        var_7600 = var_4790;
        zmm2_2 = var_7610;
        zmm3_2 = var_7600;
        int128_t var_5e00_1 = var_7620;
        int128_t zmm0_169 = var_7630;
        int128_t var_42c0 = var_7670;
        int128_t var_42b0 = zmm0_169;
        int128_t var_42d0;
        sub_14000da40(&var_42d0, &var_42c0, &var_42b0);
        int128_t var_8410_1 = var_42d0;
        int128_t var_4300 = var_7660;
        int128_t var_42f0 = var_5e00_1;
        int128_t var_4310;
        sub_14000da40(&var_4310, &var_4300, &var_42f0);
        int128_t var_84a0_1 = var_4310;
        int128_t var_4340 = var_7650;
        int128_t var_4330 = zmm2_2;
        int128_t var_4350;
        sub_14000da40(&var_4350, &var_4340, &var_4330);
        int128_t var_84b0_1 = var_4350;
        int128_t var_4380 = var_7640;
        int128_t var_4370 = zmm3_2;
        int128_t var_4390;
        sub_14000da40(&var_4390, &var_4380, &var_4370);
        int128_t var_5920_1 = var_4390;
        int128_t var_4dc0 = var_8410_1;
        int128_t var_4dd0;
        sub_14000dda0(&var_4dd0, &var_4dc0);
        int128_t var_8530_1 = var_4dd0;
        int128_t var_4da0 = var_8410_1;
        int128_t var_4db0;
        sub_14000daa0(&var_4db0, &var_4da0);
        int128_t zmm0_175 = var_4db0;
        int128_t var_4d80 = var_8530_1;
        int128_t var_4d70 = zmm0_175;
        int128_t var_4d90;
        sub_14000d8e0(&var_4d90, &var_4d80, &var_4d70);
        int128_t var_84f0_1 = var_4d90;
        int128_t var_4e40 = var_84a0_1;
        int128_t var_4e50;
        sub_14000dda0(&var_4e50, &var_4e40);
        int128_t var_8520_1 = var_4e50;
        int128_t var_4e20 = var_84a0_1;
        int128_t var_4e30;
        sub_14000daa0(&var_4e30, &var_4e20);
        int128_t zmm0_178 = var_4e30;
        int128_t var_4e00 = var_8520_1;
        int128_t var_4df0 = zmm0_178;
        int128_t var_4e10;
        sub_14000d8e0(&var_4e10, &var_4e00, &var_4df0);
        int128_t var_84e0_1 = var_4e10;
        int128_t var_4ec0 = var_84b0_1;
        int128_t var_4ed0;
        sub_14000dda0(&var_4ed0, &var_4ec0);
        int128_t var_8510_1 = var_4ed0;
        int128_t var_4ea0 = var_84b0_1;
        int128_t var_4eb0;
        sub_14000daa0(&var_4eb0, &var_4ea0);
        int128_t zmm0_181 = var_4eb0;
        int128_t var_4e80 = var_8510_1;
        int128_t var_4e70 = zmm0_181;
        int128_t var_4e90;
        sub_14000d8e0(&var_4e90, &var_4e80, &var_4e70);
        int128_t var_84d0_1 = var_4e90;
        int128_t var_4f40 = var_5920_1;
        int128_t var_4f50;
        sub_14000dda0(&var_4f50, &var_4f40);
        int128_t var_8500_1 = var_4f50;
        int128_t var_4f20 = var_5920_1;
        int128_t var_4f30;
        sub_14000daa0(&var_4f30, &var_4f20);
        int128_t zmm0_184 = var_4f30;
        int128_t var_4f00 = var_8500_1;
        int128_t var_4ef0 = zmm0_184;
        int128_t var_4f10;
        sub_14000d8e0(&var_4f10, &var_4f00, &var_4ef0);
        int128_t var_4fe0_1 = var_4f10;
        int128_t* var_55f8_1 = &var_76b0;
        int128_t* var_54e8_1 = &var_76b0;
        int128_t var_45c0 = var_76b0;
        int128_t var_45b0 = var_84f0_1;
        int128_t var_45d0;
        sub_14000d900(&var_45d0, &var_45c0, &var_45b0);
        var_76b0 = var_45d0;
        int128_t* var_5528_1 = &var_76a0;
        int128_t var_4600 = var_76a0;
        int128_t var_45f0 = var_84e0_1;
        int128_t var_4610;
        sub_14000d900(&var_4610, &var_4600, &var_45f0);
        var_76a0 = var_4610;
        int128_t* var_5568_1 = &var_7690;
        int128_t var_4640 = var_7690;
        int128_t var_4630 = var_84d0_1;
        int128_t var_4650;
        sub_14000d900(&var_4650, &var_4640, &var_4630);
        var_7690 = var_4650;
        int128_t* var_55a8_1 = &var_7680;
        int128_t var_4680 = var_7680;
        int128_t var_4670 = var_4fe0_1;
        int128_t var_4690;
        sub_14000d900(&var_4690, &var_4680, &var_4670);
        var_7680 = var_4690;
        int128_t zmm2_3 = var_7690;
        int128_t zmm3_3 = var_7680;
        int128_t var_5cc0_1 = var_76a0;
        int128_t zmm0_189 = var_76b0;
        int128_t var_41c0 = var_8440_1;
        int128_t var_41b0 = zmm0_189;
        int128_t var_41d0;
        sub_14000da40(&var_41d0, &var_41c0, &var_41b0);
        int128_t var_84c0_1 = var_41d0;
        int128_t var_4200 = var_8430_1;
        int128_t var_41f0 = var_5cc0_1;
        int128_t var_4210;
        sub_14000da40(&var_4210, &var_4200, &var_41f0);
        int128_t var_8540_1 = var_4210;
        int128_t var_4240 = var_8420_1;
        int128_t var_4230 = zmm2_3;
        int128_t var_4250;
        sub_14000da40(&var_4250, &var_4240, &var_4230);
        int128_t var_8550_1 = var_4250;
        int128_t var_4280 = var_51e0_1;
        int128_t var_4270 = zmm3_3;
        int128_t var_4290;
        sub_14000da40(&var_4290, &var_4280, &var_4270);
        int128_t var_5a20_1 = var_4290;
        int64_t var_85b0_1 = 0xe0d0c0f0a09080b;
        int64_t var_85a8_1 = 0x605040702010003;
        int128_t var_4ba0;
        sub_14000da60(&var_4ba0, 0xe0d0c0f0a09080b, 0x605040702010003);
        int128_t zmm0_194 = var_4ba0;
        int128_t var_4b80 = var_84c0_1;
        int128_t var_4b70 = zmm0_194;
        int128_t var_4b90;
        sub_14000e500(&var_4b90, &var_4b80, &var_4b70);
        int128_t var_8590_1 = var_4b90;
        int128_t var_4bf0;
        sub_14000da60(&var_4bf0, var_85b0_1, var_85a8_1);
        int128_t zmm0_196 = var_4bf0;
        int128_t var_4bd0 = var_8540_1;
        int128_t var_4bc0 = zmm0_196;
        int128_t var_4be0;
        sub_14000e500(&var_4be0, &var_4bd0, &var_4bc0);
        int128_t var_8580_1 = var_4be0;
        int128_t var_4c40;
        sub_14000da60(&var_4c40, var_85b0_1, var_85a8_1);
        int128_t zmm0_198 = var_4c40;
        int128_t var_4c20 = var_8550_1;
        int128_t var_4c10 = zmm0_198;
        int128_t var_4c30;
        sub_14000e500(&var_4c30, &var_4c20, &var_4c10);
        int128_t var_8570_1 = var_4c30;
        int128_t var_4c90;
        sub_14000da60(&var_4c90, var_85b0_1, var_85a8_1);
        int128_t zmm0_200 = var_4c90;
        int128_t var_4c70 = var_5a20_1;
        int128_t var_4c60 = zmm0_200;
        int128_t var_4c80;
        sub_14000e500(&var_4c80, &var_4c70, &var_4c60);
        var_75c0 = var_4c80;
        var_75d0 = var_8570_1;
        var_75e0 = var_8580_1;
        var_75f0 = var_8590_1;
        int128_t* var_5748_1 = &var_7630;
        int128_t* var_5638_1 = &var_7630;
        int128_t var_44c0 = var_7630;
        int128_t var_44b0 = var_75f0;
        int128_t var_44d0;
        sub_14000d900(&var_44d0, &var_44c0, &var_44b0);
        var_7630 = var_44d0;
        int128_t* var_5678_1 = &var_7620;
        int128_t var_4500 = var_7620;
        int128_t var_44f0 = var_75e0;
        int128_t var_4510;
        sub_14000d900(&var_4510, &var_4500, &var_44f0);
        var_7620 = var_4510;
        int128_t* var_56b8_1 = &var_7610;
        int128_t var_4540 = var_7610;
        int128_t var_4530 = var_75d0;
        int128_t var_4550;
        sub_14000d900(&var_4550, &var_4540, &var_4530);
        var_7610 = var_4550;
        int128_t* var_56f8_1 = &var_7600;
        int128_t var_4580 = var_7600;
        int128_t var_4570 = var_75c0;
        int128_t var_4590;
        sub_14000d900(&var_4590, &var_4580, &var_4570);
        var_7600 = var_4590;
        zmm2_3 = var_7610;
        zmm3_3 = var_7600;
        int128_t var_5b80_1 = var_7620;
        int128_t zmm0_205 = var_7630;
        int128_t var_40c0 = var_84f0_1;
        int128_t var_40b0 = zmm0_205;
        int128_t var_40d0;
        sub_14000da40(&var_40d0, &var_40c0, &var_40b0);
        int128_t var_8560_1 = var_40d0;
        int128_t var_4100 = var_84e0_1;
        int128_t var_40f0 = var_5b80_1;
        int128_t var_4110;
        sub_14000da40(&var_4110, &var_4100, &var_40f0);
        int128_t var_85f0_1 = var_4110;
        int128_t var_4140 = var_84d0_1;
        int128_t var_4130 = zmm2_3;
        int128_t var_4150;
        sub_14000da40(&var_4150, &var_4140, &var_4130);
        int128_t var_8600_1 = var_4150;
        int128_t var_4180 = var_4fe0_1;
        int128_t var_4170 = zmm3_3;
        int128_t var_4190;
        sub_14000da40(&var_4190, &var_4180, &var_4170);
        int128_t var_5b20_1 = var_4190;
        int128_t var_4900 = var_8560_1;
        int128_t var_4910;
        sub_14000df80(&var_4910, &var_4900);
        int128_t var_8670_1 = var_4910;
        int128_t var_48e0 = var_8560_1;
        int128_t var_48f0;
        sub_14000db90(&var_48f0, &var_48e0);
        int128_t zmm0_211 = var_48f0;
        int128_t var_48c0 = var_8670_1;
        int128_t var_48b0 = zmm0_211;
        int128_t var_48d0;
        sub_14000d8e0(&var_48d0, &var_48c0, &var_48b0);
        int128_t var_8630_1 = var_48d0;
        int128_t var_4980 = var_85f0_1;
        int128_t var_4990;
        sub_14000df80(&var_4990, &var_4980);
        int128_t var_8660_1 = var_4990;
        int128_t var_4960 = var_85f0_1;
        int128_t var_4970;
        sub_14000db90(&var_4970, &var_4960);
        int128_t zmm0_214 = var_4970;
        int128_t var_4940 = var_8660_1;
        int128_t var_4930 = zmm0_214;
        int128_t var_4950;
        sub_14000d8e0(&var_4950, &var_4940, &var_4930);
        int128_t var_8620_1 = var_4950;
        int128_t var_4a00 = var_8600_1;
        int128_t var_4a10;
        sub_14000df80(&var_4a10, &var_4a00);
        int128_t var_8650_1 = var_4a10;
        int128_t var_49e0 = var_8600_1;
        int128_t var_49f0;
        sub_14000db90(&var_49f0, &var_49e0);
        int128_t zmm0_217 = var_49f0;
        int128_t var_49c0 = var_8650_1;
        int128_t var_49b0 = zmm0_217;
        int128_t var_49d0;
        sub_14000d8e0(&var_49d0, &var_49c0, &var_49b0);
        int128_t var_8610_1 = var_49d0;
        int128_t var_4a80 = var_5b20_1;
        int128_t var_4a90;
        sub_14000df80(&var_4a90, &var_4a80);
        int128_t var_8640_1 = var_4a90;
        int128_t var_4a60 = var_5b20_1;
        int128_t var_4a70;
        sub_14000db90(&var_4a70, &var_4a60);
        int128_t zmm0_220 = var_4a70;
        int128_t var_4a40 = var_8640_1;
        int128_t var_4a30 = zmm0_220;
        int128_t var_4a50;
        sub_14000d8e0(&var_4a50, &var_4a40, &var_4a30);
        var_7640 = var_4a50;
        var_7650 = var_8610_1;
        var_7660 = var_8620_1;
        var_7670 = var_8630_1;
        void var_77b0;
        memcpy(&var_77b0, &var_76b0, 0x100);
        char var_1871_1 = 0;
        char var_1872_1 = 0;
        char var_1873_1 = 0;
        char var_1873_2 = 1;
        char var_1872_2 = 1;
        char var_1871_2 = 1;
        char var_1871_3 = 0;
        int128_t var_7770;
        int128_t var_16d0 = var_7770;
        int128_t var_16e0;
        sub_14000e170(&var_16e0, &var_16d0);
        int128_t var_8680_1 = var_16e0;
        int128_t var_7760;
        int128_t var_1710 = var_7760;
        int128_t var_1720;
        sub_14000e170(&var_1720, &var_1710);
        int128_t var_8690_1 = var_1720;
        int128_t var_7750;
        int128_t var_1750 = var_7750;
        int128_t var_1760;
        sub_14000e170(&var_1760, &var_1750);
        int128_t var_86a0_1 = var_1760;
        int128_t var_7740;
        int128_t var_1790 = var_7740;
        int128_t var_17a0;
        sub_14000e170(&var_17a0, &var_1790);
        char var_1871_4 = 1;
        var_7740 = var_17a0;
        var_7750 = var_86a0_1;
        var_7760 = var_8690_1;
        var_7770 = var_8680_1;
        char var_1872_3 = 0;
        int128_t var_7730;
        int128_t var_1510 = var_7730;
        int128_t var_1520;
        sub_14000e1d0(&var_1520, &var_1510);
        int128_t var_86b0_1 = var_1520;
        int128_t var_7720;
        int128_t var_1550 = var_7720;
        int128_t var_1560;
        sub_14000e1d0(&var_1560, &var_1550);
        int128_t var_86c0_1 = var_1560;
        int128_t var_7710;
        int128_t var_1590 = var_7710;
        int128_t var_15a0;
        sub_14000e1d0(&var_15a0, &var_1590);
        int128_t var_86d0_1 = var_15a0;
        int128_t var_7700;
        int128_t var_15d0 = var_7700;
        int128_t var_15e0;
        sub_14000e1d0(&var_15e0, &var_15d0);
        char var_1872_4 = 1;
        var_7700 = var_15e0;
        var_7710 = var_86d0_1;
        var_7720 = var_86c0_1;
        var_7730 = var_86b0_1;
        char var_1873_3 = 0;
        int128_t var_76f0;
        int128_t var_1350 = var_76f0;
        int128_t var_1360;
        sub_14000e110(&var_1360, &var_1350);
        int128_t var_86e0_1 = var_1360;
        int128_t var_76e0;
        int128_t var_1390 = var_76e0;
        int128_t var_13a0;
        sub_14000e110(&var_13a0, &var_1390);
        int128_t var_86f0_1 = var_13a0;
        int128_t var_76d0;
        int128_t var_13d0 = var_76d0;
        int128_t var_13e0;
        sub_14000e110(&var_13e0, &var_13d0);
        int128_t var_8700_1 = var_13e0;
        int128_t var_76c0;
        int128_t var_1410 = var_76c0;
        int128_t var_1420;
        sub_14000e110(&var_1420, &var_1410);
        int128_t zmm0_234 = var_1420;
        int128_t var_14f0 = var_86e0_1;
        int128_t var_14e0_1 = var_86f0_1;
        int128_t var_14d0_1 = var_8700_1;
        int128_t var_14c0_1 = zmm0_234;
        void var_1900;
        memcpy(&var_1900, &var_14f0, 0x40);
        char var_1873_4 = 1;
        memcpy(&var_76f0, &var_1900, 0x40);
        char var_1873_5 = 0;
        char var_1872_5 = 0;
        char var_1871_5 = 0;
        void var_78b0;
        memcpy(&var_78b0, &var_77b0, 0x100);
        memcpy(&var_7d90, &var_78b0, 0x100);
    }
    
    int128_t zmm0_25 = *arg1;
    int128_t var_6ce0 = zmm0_25;
    int128_t var_73d0 = zmm0_25;
    int128_t var_73c0 = zmm0_25;
    int128_t var_73b0 = zmm0_25;
    int128_t var_7420 = zmm0_25;
    zmm0_25 = arg1[1];
    int128_t var_6cc0 = zmm0_25;
    int128_t var_7340 = zmm0_25;
    int128_t var_7330 = zmm0_25;
    int128_t var_7320 = zmm0_25;
    int128_t var_7390 = zmm0_25;
    zmm0_25 = arg1[2];
    int128_t var_f70 = zmm0_25;
    int64_t var_10d8 = 0;
    int128_t var_d40;
    sub_14000e890(&var_d40, 0);
    int128_t zmm0_26 = var_d40;
    int128_t var_d30 = zmm0_26;
    int128_t var_d20;
    sub_14000e890(&var_d20, var_10d8);
    int128_t var_d00 = var_d20;
    int128_t var_d10;
    sub_14000dd70(&var_d10, &var_d00);
    int128_t zmm0_28 = var_d10;
    int128_t var_cf0 = zmm0_28;
    int128_t var_cd0 = zmm0_26;
    int128_t var_cc0 = zmm0_28;
    int128_t var_ce0;
    sub_14000d8e0(&var_ce0, &var_cd0, &var_cc0);
    int128_t zmm0_29 = var_ce0;
    int64_t var_10c8 = 0;
    int128_t var_ca0;
    sub_14000e890(&var_ca0, 1);
    int128_t zmm0_30 = var_ca0;
    int128_t var_c90 = zmm0_30;
    int128_t var_c80;
    sub_14000e890(&var_c80, var_10c8);
    int128_t var_c60 = var_c80;
    int128_t var_c70;
    sub_14000dd70(&var_c70, &var_c60);
    int128_t zmm0_32 = var_c70;
    int128_t var_c50 = zmm0_32;
    int128_t var_c30 = zmm0_30;
    int128_t var_c20 = zmm0_32;
    int128_t var_c40;
    sub_14000d8e0(&var_c40, &var_c30, &var_c20);
    int128_t zmm0_33 = var_c40;
    int64_t var_10b8 = 0;
    int128_t var_c00;
    sub_14000e890(&var_c00, 2);
    int128_t zmm0_34 = var_c00;
    int128_t var_bf0 = zmm0_34;
    int128_t var_be0;
    sub_14000e890(&var_be0, var_10b8);
    int128_t var_bc0 = var_be0;
    int128_t var_bd0;
    sub_14000dd70(&var_bd0, &var_bc0);
    int128_t zmm0_36 = var_bd0;
    int128_t var_bb0 = zmm0_36;
    int128_t var_b90 = zmm0_34;
    int128_t var_b80 = zmm0_36;
    int128_t var_ba0;
    sub_14000d8e0(&var_ba0, &var_b90, &var_b80);
    int128_t zmm0_37 = var_ba0;
    int64_t var_10a8 = 0;
    int128_t var_b60;
    sub_14000e890(&var_b60, 3);
    int128_t zmm0_38 = var_b60;
    int128_t var_b50 = zmm0_38;
    int128_t var_b40;
    sub_14000e890(&var_b40, var_10a8);
    int128_t var_b20 = var_b40;
    int128_t var_b30;
    sub_14000dd70(&var_b30, &var_b20);
    int128_t zmm0_40 = var_b30;
    int128_t var_b10 = zmm0_40;
    int128_t var_af0 = zmm0_38;
    int128_t var_ae0 = zmm0_40;
    int128_t var_b00;
    sub_14000d8e0(&var_b00, &var_af0, &var_ae0);
    int128_t var_10f0 = var_b00;
    int128_t var_8f0 = zmm0_25;
    int128_t var_8e0 = zmm0_29;
    int128_t var_900;
    sub_14000d9a0(&var_900, &var_8f0, &var_8e0);
    int128_t var_7f00 = var_900;
    int128_t var_930 = zmm0_25;
    int128_t var_920 = zmm0_33;
    int128_t var_940;
    sub_14000d9a0(&var_940, &var_930, &var_920);
    int128_t var_7f90 = var_940;
    int128_t var_970 = zmm0_25;
    int128_t var_960 = zmm0_37;
    int128_t var_980;
    sub_14000d9a0(&var_980, &var_970, &var_960);
    int128_t var_7fa0 = var_980;
    int128_t var_9b0 = zmm0_25;
    int128_t var_9a0 = var_10f0;
    int128_t var_9c0;
    sub_14000d9a0(&var_9c0, &var_9b0, &var_9a0);
    int128_t var_1020 = var_9c0;
    int128_t var_1030 = var_7fa0;
    int128_t var_1040 = var_7f90;
    int128_t var_1050 = var_7f00;
    int128_t var_10a0;
    sub_14000eb40(&var_10a0, &var_1050);
    int128_t var_7310 = var_10a0;
    int128_t var_6380 = var_7d90;
    int128_t var_6370 = var_7e90;
    int128_t var_6390;
    sub_14000d900(&var_6390, &var_6380, &var_6370);
    int128_t var_7fb0 = var_6390;
    int128_t var_7d80;
    int128_t var_63c0 = var_7d80;
    int128_t var_63b0 = var_7e90;
    int128_t var_63d0;
    sub_14000d900(&var_63d0, &var_63c0, &var_63b0);
    int128_t var_7fc0 = var_63d0;
    int128_t var_7d70;
    int128_t var_6400 = var_7d70;
    int128_t var_63f0 = var_7e90;
    int128_t var_6410;
    sub_14000d900(&var_6410, &var_6400, &var_63f0);
    int128_t var_7fd0 = var_6410;
    int128_t var_7d60;
    int128_t var_6440 = var_7d60;
    int128_t var_6430 = var_7e90;
    int128_t var_6450;
    sub_14000d900(&var_6450, &var_6440, &var_6430);
    int128_t var_6720 = var_6450;
    int128_t var_6280 = var_7d50;
    int128_t var_6270 = var_7420;
    int128_t var_6290;
    sub_14000d900(&var_6290, &var_6280, &var_6270);
    int128_t var_7fe0 = var_6290;
    int128_t var_7d40;
    int128_t var_62c0 = var_7d40;
    int128_t var_62b0 = var_73d0;
    int128_t var_62d0;
    sub_14000d900(&var_62d0, &var_62c0, &var_62b0);
    int128_t var_7ff0 = var_62d0;
    int128_t var_7d30;
    int128_t var_6300 = var_7d30;
    int128_t var_62f0 = var_73c0;
    int128_t var_6310;
    sub_14000d900(&var_6310, &var_6300, &var_62f0);
    int128_t var_8000 = var_6310;
    int128_t var_7d20;
    int128_t var_6340 = var_7d20;
    int128_t var_6330 = var_73b0;
    int128_t var_6350;
    sub_14000d900(&var_6350, &var_6340, &var_6330);
    int128_t var_6820 = var_6350;
    int128_t var_6180 = var_7d10;
    int128_t var_6170 = var_7390;
    int128_t var_6190;
    sub_14000d900(&var_6190, &var_6180, &var_6170);
    int128_t var_8010 = var_6190;
    int128_t var_7d00;
    int128_t var_61c0 = var_7d00;
    int128_t var_61b0 = var_7340;
    int128_t var_61d0;
    sub_14000d900(&var_61d0, &var_61c0, &var_61b0);
    int128_t var_8020 = var_61d0;
    int128_t var_7cf0;
    int128_t var_6200 = var_7cf0;
    int128_t var_61f0 = var_7330;
    int128_t var_6210;
    sub_14000d900(&var_6210, &var_6200, &var_61f0);
    int128_t var_8030 = var_6210;
    int128_t var_7ce0;
    int128_t var_6240 = var_7ce0;
    int128_t var_6230 = var_7320;
    int128_t var_6250;
    sub_14000d900(&var_6250, &var_6240, &var_6230);
    int128_t var_6920 = var_6250;
    int128_t zmm0_58 = var_7310;
    int128_t var_6080 = var_7cd0;
    int128_t var_6070 = zmm0_58;
    int128_t var_6090;
    sub_14000d900(&var_6090, &var_6080, &var_6070);
    int128_t var_8040 = var_6090;
    int128_t var_7cc0;
    int128_t var_60c0 = var_7cc0;
    int128_t var_1090;
    int128_t var_60b0 = var_1090;
    int128_t var_60d0;
    sub_14000d900(&var_60d0, &var_60c0, &var_60b0);
    int128_t var_8050 = var_60d0;
    int128_t var_7cb0;
    int128_t var_6100 = var_7cb0;
    int128_t var_1080;
    int128_t var_60f0 = var_1080;
    int128_t var_6110;
    sub_14000d900(&var_6110, &var_6100, &var_60f0);
    int128_t var_8060 = var_6110;
    int128_t var_7ca0;
    int128_t var_6140 = var_7ca0;
    int128_t var_1070;
    int128_t var_6130 = var_1070;
    int128_t var_6150;
    sub_14000d900(&var_6150, &var_6140, &var_6130);
    int128_t zmm0_62 = var_6150;
    int128_t var_6a50 = var_8040;
    int128_t var_6a40 = var_8050;
    int128_t var_6a30 = var_8060;
    int128_t var_6a20 = zmm0_62;
    int128_t var_7040;
    memcpy(&var_7040, &var_6a50, 0x40);
    int128_t zmm0_235 = var_7040;
    int128_t var_6610 = var_7fb0;
    int128_t var_6600 = var_7fe0;
    int128_t var_65f0 = var_8010;
    int128_t var_65e0 = zmm0_235;
    void var_6650;
    memcpy(&var_6650, &var_6610, 0x40);
    int128_t var_6590 = var_7fc0;
    int128_t var_6580 = var_7ff0;
    int128_t var_6570 = var_8020;
    int128_t var_7030;
    int128_t var_6560 = var_7030;
    void var_65d0;
    memcpy(&var_65d0, &var_6590, 0x40);
    int128_t var_6510 = var_7fd0;
    int128_t var_6500 = var_8000;
    int128_t var_64f0 = var_8030;
    int128_t var_7020;
    int128_t var_64e0 = var_7020;
    void var_6550;
    memcpy(&var_6550, &var_6510, 0x40);
    int128_t var_6490 = var_6720;
    int128_t var_6480 = var_6820;
    int128_t var_6470 = var_6920;
    int128_t var_7010;
    int128_t var_6460 = var_7010;
    void var_64d0;
    memcpy(&var_64d0, &var_6490, 0x40);
    void var_72c0;
    memcpy(&var_72c0, &var_6650, 0x40);
    void var_7280;
    memcpy(&var_7280, &var_65d0, 0x40);
    void var_7240;
    memcpy(&var_7240, &var_6550, 0x40);
    void var_7200;
    memcpy(&var_7200, &var_64d0, 0x40);
    int64_t rax_15;
    int64_t rdx_247;
    rax_15 = sub_14000c9d0(arg3, 0, 0x10, &data_14005fc28);
    void var_6f80;
    memcpy(&var_6f80, &var_72c0, 0x40);
    void var_6fc0;
    memcpy(&var_6fc0, &var_6f80, 0x40);
    sub_14000ca30(rax_15, rdx_247, &var_6fc0, 0x10, &data_14005fc40);
    int64_t rax_16;
    int64_t rdx_251;
    rax_16 = sub_14000c9d0(arg3, 0x10, 0x20, &data_14005fc58);
    void var_6f00;
    memcpy(&var_6f00, &var_7280, 0x40);
    void var_6f40;
    memcpy(&var_6f40, &var_6f00, 0x40);
    sub_14000ca30(rax_16, rdx_251, &var_6f40, 0x10, &data_14005fc70);
    int64_t rax_17;
    int64_t rdx_255;
    rax_17 = sub_14000c9d0(arg3, 0x20, 0x30, &data_14005fc88);
    void var_6e80;
    memcpy(&var_6e80, &var_7240, 0x40);
    void var_6ec0;
    memcpy(&var_6ec0, &var_6e80, 0x40);
    sub_14000ca30(rax_17, rdx_255, &var_6ec0, 0x10, &data_14005fca0);
    int64_t rax_18;
    int64_t rdx_259;
    rax_18 = sub_14000c9d0(arg3, 0x30, 0x40, &data_14005fcb8);
    void var_6e00;
    memcpy(&var_6e00, &var_7200, 0x40);
    void var_6e40;
    memcpy(&var_6e40, &var_6e00, 0x40);
    sub_14000ca30(rax_18, rdx_259, &var_6e40, 0x10, &data_14005fcd0);
    void var_6bb0;
    memcpy(&var_6bb0, &var_7310, 0x40);
    int128_t var_6db0;
    memcpy(&var_6db0, &var_6bb0, 0x40);
    int64_t var_12f8 = 4;
    int128_t var_12f0 = var_6db0;
    int128_t var_1330;
    sub_14000eae0(&var_1330, &var_12f0);
    int128_t zmm0_240 = var_1330;
    int128_t var_12d0 = zmm0_240;
    int64_t var_1318 = 0;
    int128_t var_1240;
    sub_14000e890(&var_1240, 4);
    int128_t zmm0_241 = var_1240;
    var_8720 = zmm0_241;
    int128_t var_1230 = zmm0_241;
    int128_t var_1220;
    sub_14000e890(&var_1220, var_1318);
    int128_t var_1200 = var_1220;
    int128_t var_1210;
    sub_14000dd70(&var_1210, &var_1200);
    int128_t zmm0_243 = var_1210;
    int128_t var_11f0 = zmm0_243;
    int128_t var_11d0 = var_8720;
    int128_t var_11c0 = zmm0_243;
    int128_t var_11e0;
    sub_14000d8e0(&var_11e0, &var_11d0, &var_11c0);
    int128_t zmm0_244 = var_11e0;
    int128_t var_12b0 = zmm0_244;
    int128_t var_1190 = zmm0_240;
    int128_t var_1180 = zmm0_244;
    int128_t var_11a0;
    sub_14000d9a0(&var_11a0, &var_1190, &var_1180);
    int128_t var_1270 = var_11a0;
    int128_t var_1310;
    sub_14000eac0(&var_1310, &var_1270);
    int128_t var_6b50 = var_1310;
    int64_t var_6dc0;
    sub_14000eae0(&var_6dc0, &var_6b50);
    arg1[2] = var_6dc0;
    int64_t var_6db8;
    *(arg1 + 0x28) = var_6db8;
    return arg1;
}

int64_t sub_14002d8f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d910() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d930() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d950() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d970() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d990() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d9b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d9d0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002d9f0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002da10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002da30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002da50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002da70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002da90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dab0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dad0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002daf0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002db10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002db30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002db50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002db70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002db90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dbb0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dbd0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dbf0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dc10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dc30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dc50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dc70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dc90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dcb0(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x685f);
    *(rdx + 0x685e);
    *(rdx + 0x685d);
}

int64_t sub_14002dd00() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dd20() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dd40() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dd60() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dd80() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dda0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002ddc0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002dde0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002de00() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002de20() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002de40() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002de60() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14002de80(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x6f2f);
    *(rdx + 0x6f2e);
    *(rdx + 0x6f2d);
}

int128_t* sub_14002ded0(int128_t* arg1, int32_t arg2, int64_t arg3)
{
    __chkstk(0x88c8);
    int128_t var_8860;
    void* var_88a8 = &*var_8860[8];
    int64_t var_18 = -2;
    int128_t* var_7ff0 = arg1;
    int32_t var_7fe4 = arg2;
    int64_t var_7fe0 = arg3;
    int128_t* var_7fd8 = arg1;
    int32_t var_7fcc = arg2;
    int64_t var_7fc8 = arg3;
    int128_t* var_6f68 = arg1;
    int32_t var_6f5c = arg2;
    int64_t var_6f58 = arg3;
    int32_t var_7fc0;
    __builtin_strncpy(&var_7fc0, "expand 32-byte k", 0x10);
    int64_t rdx = var_7fc0;
    int64_t var_6d00 = rdx;
    int32_t var_7fb8;
    int64_t rax = var_7fb8;
    int64_t var_6cf8 = rax;
    int128_t var_6cf0;
    sub_14000e890(&var_6cf0, rdx);
    int128_t zmm0 = var_6cf0;
    int128_t var_6ce0 = zmm0;
    int128_t var_6cd0;
    sub_14000e890(&var_6cd0, rax);
    int128_t var_6cb0 = var_6cd0;
    int128_t var_6cc0;
    sub_14000dd70(&var_6cc0, &var_6cb0);
    int128_t zmm0_2 = var_6cc0;
    int128_t var_6ca0 = zmm0_2;
    int128_t var_6c80 = zmm0;
    int128_t var_6c70 = zmm0_2;
    int128_t var_6c90;
    sub_14000d8e0(&var_6c90, &var_6c80, &var_6c70);
    int128_t zmm2 = var_6c90;
    int128_t var_8090 = zmm2;
    int128_t var_6f40 = zmm2;
    int128_t zmm1 = *arg1;
    int128_t var_6f20 = zmm1;
    int128_t zmm0_3 = arg1[1];
    int128_t var_6f00 = zmm0_3;
    int128_t var_7e60 = zmm2;
    int128_t var_7e70 = zmm2;
    int128_t var_7e80 = zmm2;
    int128_t var_7e90 = zmm2;
    int128_t var_7de0 = zmm1;
    int128_t var_7df0 = zmm1;
    int128_t var_7e00 = zmm1;
    int128_t var_7e10 = zmm1;
    int128_t var_7d60 = zmm0_3;
    int128_t var_7d70 = zmm0_3;
    int128_t var_7d80 = zmm0_3;
    int128_t var_7d90 = zmm0_3;
    zmm0_3 = arg1[2];
    int128_t var_6d0 = zmm0_3;
    int64_t var_838 = 0;
    int128_t var_4a0;
    sub_14000e890(&var_4a0, 0);
    int128_t zmm0_4 = var_4a0;
    int128_t var_490 = zmm0_4;
    int128_t var_480;
    sub_14000e890(&var_480, var_838);
    int128_t var_460 = var_480;
    int128_t var_470;
    sub_14000dd70(&var_470, &var_460);
    int128_t zmm0_6 = var_470;
    int128_t var_450 = zmm0_6;
    int128_t var_430 = zmm0_4;
    int128_t var_420 = zmm0_6;
    int128_t var_440;
    sub_14000d8e0(&var_440, &var_430, &var_420);
    int128_t zmm0_7 = var_440;
    int64_t var_828 = 0;
    int128_t var_400;
    sub_14000e890(&var_400, 1);
    int128_t zmm0_8 = var_400;
    int128_t var_3f0 = zmm0_8;
    int128_t var_3e0;
    sub_14000e890(&var_3e0, var_828);
    int128_t var_3c0 = var_3e0;
    int128_t var_3d0;
    sub_14000dd70(&var_3d0, &var_3c0);
    int128_t zmm0_10 = var_3d0;
    int128_t var_3b0 = zmm0_10;
    int128_t var_390 = zmm0_8;
    int128_t var_380 = zmm0_10;
    int128_t var_3a0;
    sub_14000d8e0(&var_3a0, &var_390, &var_380);
    int128_t zmm0_11 = var_3a0;
    int64_t var_818 = 0;
    int128_t var_360;
    sub_14000e890(&var_360, 2);
    int128_t zmm0_12 = var_360;
    int128_t var_350 = zmm0_12;
    int128_t var_340;
    sub_14000e890(&var_340, var_818);
    int128_t var_320 = var_340;
    int128_t var_330;
    sub_14000dd70(&var_330, &var_320);
    int128_t zmm0_14 = var_330;
    int128_t var_310 = zmm0_14;
    int128_t var_2f0 = zmm0_12;
    int128_t var_2e0 = zmm0_14;
    int128_t var_300;
    sub_14000d8e0(&var_300, &var_2f0, &var_2e0);
    int128_t zmm0_15 = var_300;
    int64_t var_808 = 0;
    int128_t var_2c0;
    sub_14000e890(&var_2c0, 3);
    int128_t zmm0_16 = var_2c0;
    int128_t var_2b0 = zmm0_16;
    int128_t var_2a0;
    sub_14000e890(&var_2a0, var_808);
    int128_t var_280 = var_2a0;
    int128_t var_290;
    sub_14000dd70(&var_290, &var_280);
    int128_t zmm0_18 = var_290;
    int128_t var_270 = zmm0_18;
    int128_t var_250 = zmm0_16;
    int128_t var_240 = zmm0_18;
    int128_t var_260;
    sub_14000d8e0(&var_260, &var_250, &var_240);
    int128_t var_850 = var_260;
    int128_t var_50 = zmm0_3;
    int128_t var_40 = zmm0_7;
    int128_t var_60;
    sub_14000d9a0(&var_60, &var_50, &var_40);
    int128_t var_8000 = var_60;
    int128_t var_90 = zmm0_3;
    int128_t var_80 = zmm0_11;
    int128_t var_a0;
    sub_14000d9a0(&var_a0, &var_90, &var_80);
    int128_t var_80e0 = var_a0;
    int128_t var_d0 = zmm0_3;
    int128_t var_c0 = zmm0_15;
    int128_t var_e0;
    sub_14000d9a0(&var_e0, &var_d0, &var_c0);
    int128_t var_80f0 = var_e0;
    int128_t var_110 = zmm0_3;
    int128_t var_100 = var_850;
    int128_t var_120;
    sub_14000d9a0(&var_120, &var_110, &var_100);
    int128_t zmm0_23 = var_120;
    int128_t var_220 = var_8000;
    int128_t var_210 = var_80e0;
    int128_t var_200 = var_80f0;
    int128_t var_1f0 = zmm0_23;
    void var_7b0;
    memcpy(&var_7b0, &var_220, 0x40);
    void var_800;
    sub_14000eca0(&var_800, &var_7b0);
    void var_580;
    memcpy(&var_580, &var_800, 0x40);
    int64_t var_640;
    memcpy(&var_640, &var_580, 0x40);
    int64_t var_638;
    int64_t var_5b8 = var_638;
    int64_t var_628;
    int64_t var_5a8 = var_628;
    int64_t var_618;
    int64_t var_598 = var_618;
    int64_t var_608;
    int64_t var_588 = var_608;
    int128_t var_600 = var_640;
    int64_t var_630;
    int128_t var_5f0 = var_630;
    int64_t var_620;
    int128_t var_5e0 = var_620;
    int64_t var_610;
    int128_t var_5d0 = var_610;
    void var_7d10;
    memcpy(&var_7d10, &var_600, 0x40);
    int128_t var_7f90;
    memcpy(&var_7f90, &var_7e90, 0x40);
    int128_t var_7f50;
    memcpy(&var_7f50, &var_7e10, 0x40);
    int128_t var_7f10;
    memcpy(&var_7f10, &var_7d90, 0x40);
    int128_t var_7ed0;
    memcpy(&var_7ed0, &var_7d10, 0x40);
    int32_t var_7cc0 = sub_14000ef80(0, arg2);
    int32_t var_7cbc = arg2;
    
    while (true)
    {
        int32_t rax_10;
        int32_t rdx_30;
        rax_10 = sub_14000c720(&var_7cc0);
        int32_t var_7cb4_1 = rdx_30;
        
        if (rax_10 == 0)
            break;
        
        int128_t var_7bb0;
        int128_t* var_8278_1 = &var_7bb0;
        memcpy(&var_7bb0, &var_7f90, 0x100);
        int128_t* var_3498_1 = var_8278_1;
        int128_t* var_3388_1 = var_8278_1;
        int128_t var_2800 = var_7bb0;
        int128_t var_7b70;
        int128_t var_27f0 = var_7b70;
        int128_t var_2810;
        sub_14000d900(&var_2810, &var_2800, &var_27f0);
        var_7bb0 = var_2810;
        int128_t var_7ba0;
        int128_t* var_33c8_1 = &var_7ba0;
        int128_t var_2840 = var_7ba0;
        int128_t var_7b60;
        int128_t var_2830 = var_7b60;
        int128_t var_2850;
        sub_14000d900(&var_2850, &var_2840, &var_2830);
        var_7ba0 = var_2850;
        int128_t var_7b90;
        int128_t* var_3408_1 = &var_7b90;
        int128_t var_2880 = var_7b90;
        int128_t var_7b50;
        int128_t var_2870 = var_7b50;
        int128_t var_2890;
        sub_14000d900(&var_2890, &var_2880, &var_2870);
        var_7b90 = var_2890;
        int128_t var_7b80;
        int128_t* var_3448_1 = &var_7b80;
        int128_t var_28c0 = var_7b80;
        int128_t var_7b40;
        int128_t var_28b0 = var_7b40;
        int128_t var_28d0;
        sub_14000d900(&var_28d0, &var_28c0, &var_28b0);
        var_7b80 = var_28d0;
        zmm2 = var_7b90;
        int128_t zmm3 = var_7b80;
        int128_t var_4080_1 = var_7ba0;
        int128_t zmm0_67 = var_7bb0;
        int128_t var_7af0;
        int128_t var_2400 = var_7af0;
        int128_t var_23f0 = zmm0_67;
        int128_t var_2410;
        sub_14000da40(&var_2410, &var_2400, &var_23f0);
        int128_t var_8270_1 = var_2410;
        int128_t var_7ae0;
        int128_t var_2440 = var_7ae0;
        int128_t var_2430 = var_4080_1;
        int128_t var_2450;
        sub_14000da40(&var_2450, &var_2440, &var_2430);
        int128_t var_8290_1 = var_2450;
        int128_t var_7ad0;
        int128_t var_2480 = var_7ad0;
        int128_t var_2470 = zmm2;
        int128_t var_2490;
        sub_14000da40(&var_2490, &var_2480, &var_2470);
        int128_t var_82a0_1 = var_2490;
        int128_t var_7ac0;
        int128_t var_24c0 = var_7ac0;
        int128_t var_24b0 = zmm3;
        int128_t var_24d0;
        sub_14000da40(&var_24d0, &var_24c0, &var_24b0);
        int128_t var_3960_1 = var_24d0;
        int128_t var_3130 = var_8270_1;
        int128_t var_3140;
        sub_14000e290(&var_3140, &var_3130);
        int128_t var_3120 = var_3140;
        int128_t var_3170;
        sub_14000e230(&var_3170, &var_3120);
        int128_t var_82e0_1 = var_3170;
        int128_t var_3190 = var_8290_1;
        int128_t var_31a0;
        sub_14000e290(&var_31a0, &var_3190);
        int128_t var_3180 = var_31a0;
        int128_t var_31d0;
        sub_14000e230(&var_31d0, &var_3180);
        int128_t var_82d0_1 = var_31d0;
        int128_t var_31f0 = var_82a0_1;
        int128_t var_3200;
        sub_14000e290(&var_3200, &var_31f0);
        int128_t var_31e0 = var_3200;
        int128_t var_3230;
        sub_14000e230(&var_3230, &var_31e0);
        int128_t var_82c0_1 = var_3230;
        int128_t var_3250 = var_3960_1;
        int128_t var_3260;
        sub_14000e290(&var_3260, &var_3250);
        int128_t var_3240 = var_3260;
        int128_t var_3290;
        sub_14000e230(&var_3290, &var_3240);
        int128_t var_3320_1 = var_3290;
        int128_t var_7b30;
        int128_t* var_35e8_1 = &var_7b30;
        int128_t* var_34d8_1 = &var_7b30;
        int128_t var_2700 = var_7b30;
        int128_t var_26f0 = var_82e0_1;
        int128_t var_2710;
        sub_14000d900(&var_2710, &var_2700, &var_26f0);
        var_7b30 = var_2710;
        int128_t var_7b20;
        int128_t* var_3518_1 = &var_7b20;
        int128_t var_2740 = var_7b20;
        int128_t var_2730 = var_82d0_1;
        int128_t var_2750;
        sub_14000d900(&var_2750, &var_2740, &var_2730);
        var_7b20 = var_2750;
        int128_t var_7b10;
        int128_t* var_3558_1 = &var_7b10;
        int128_t var_2780 = var_7b10;
        int128_t var_2770 = var_82c0_1;
        int128_t var_2790;
        sub_14000d900(&var_2790, &var_2780, &var_2770);
        var_7b10 = var_2790;
        int128_t var_7b00;
        int128_t* var_3598_1 = &var_7b00;
        int128_t var_27c0 = var_7b00;
        int128_t var_27b0 = var_3320_1;
        int128_t var_27d0;
        sub_14000d900(&var_27d0, &var_27c0, &var_27b0);
        var_7b00 = var_27d0;
        zmm2 = var_7b10;
        zmm3 = var_7b00;
        int128_t var_3f40_1 = var_7b20;
        int128_t zmm0_83 = var_7b30;
        int128_t var_2300 = var_7b70;
        int128_t var_22f0 = zmm0_83;
        int128_t var_2310;
        sub_14000da40(&var_2310, &var_2300, &var_22f0);
        int128_t var_82b0_1 = var_2310;
        int128_t var_2340 = var_7b60;
        int128_t var_2330 = var_3f40_1;
        int128_t var_2350;
        sub_14000da40(&var_2350, &var_2340, &var_2330);
        int128_t var_82f0_1 = var_2350;
        int128_t var_2380 = var_7b50;
        int128_t var_2370 = zmm2;
        int128_t var_2390;
        sub_14000da40(&var_2390, &var_2380, &var_2370);
        int128_t var_8300_1 = var_2390;
        int128_t var_23c0 = var_7b40;
        int128_t var_23b0 = zmm3;
        int128_t var_23d0;
        sub_14000da40(&var_23d0, &var_23c0, &var_23b0);
        int128_t var_3a60_1 = var_23d0;
        int128_t var_2ec0 = var_82b0_1;
        int128_t var_2ed0;
        sub_14000dda0(&var_2ed0, &var_2ec0);
        int128_t var_8380_1 = var_2ed0;
        int128_t var_2ea0 = var_82b0_1;
        int128_t var_2eb0;
        sub_14000daa0(&var_2eb0, &var_2ea0);
        int128_t zmm0_89 = var_2eb0;
        int128_t var_2e80 = var_8380_1;
        int128_t var_2e70 = zmm0_89;
        int128_t var_2e90;
        sub_14000d8e0(&var_2e90, &var_2e80, &var_2e70);
        int128_t var_8340_1 = var_2e90;
        int128_t var_2f40 = var_82f0_1;
        int128_t var_2f50;
        sub_14000dda0(&var_2f50, &var_2f40);
        int128_t var_8370_1 = var_2f50;
        int128_t var_2f20 = var_82f0_1;
        int128_t var_2f30;
        sub_14000daa0(&var_2f30, &var_2f20);
        int128_t zmm0_92 = var_2f30;
        int128_t var_2f00 = var_8370_1;
        int128_t var_2ef0 = zmm0_92;
        int128_t var_2f10;
        sub_14000d8e0(&var_2f10, &var_2f00, &var_2ef0);
        int128_t var_8330_1 = var_2f10;
        int128_t var_2fc0 = var_8300_1;
        int128_t var_2fd0;
        sub_14000dda0(&var_2fd0, &var_2fc0);
        int128_t var_8360_1 = var_2fd0;
        int128_t var_2fa0 = var_8300_1;
        int128_t var_2fb0;
        sub_14000daa0(&var_2fb0, &var_2fa0);
        int128_t zmm0_95 = var_2fb0;
        int128_t var_2f80 = var_8360_1;
        int128_t var_2f70 = zmm0_95;
        int128_t var_2f90;
        sub_14000d8e0(&var_2f90, &var_2f80, &var_2f70);
        int128_t var_8320_1 = var_2f90;
        int128_t var_3040 = var_3a60_1;
        int128_t var_3050;
        sub_14000dda0(&var_3050, &var_3040);
        int128_t var_8350_1 = var_3050;
        int128_t var_3020 = var_3a60_1;
        int128_t var_3030;
        sub_14000daa0(&var_3030, &var_3020);
        int128_t zmm0_98 = var_3030;
        int128_t var_3000 = var_8350_1;
        int128_t var_2ff0 = zmm0_98;
        int128_t var_3010;
        sub_14000d8e0(&var_3010, &var_3000, &var_2ff0);
        int128_t var_30e0_1 = var_3010;
        int128_t* var_3738_1 = &var_7bb0;
        int128_t* var_3628_1 = &var_7bb0;
        int128_t var_2600 = var_7bb0;
        int128_t var_25f0 = var_8340_1;
        int128_t var_2610;
        sub_14000d900(&var_2610, &var_2600, &var_25f0);
        var_7bb0 = var_2610;
        int128_t* var_3668_1 = &var_7ba0;
        int128_t var_2640 = var_7ba0;
        int128_t var_2630 = var_8330_1;
        int128_t var_2650;
        sub_14000d900(&var_2650, &var_2640, &var_2630);
        var_7ba0 = var_2650;
        int128_t* var_36a8_1 = &var_7b90;
        int128_t var_2680 = var_7b90;
        int128_t var_2670 = var_8320_1;
        int128_t var_2690;
        sub_14000d900(&var_2690, &var_2680, &var_2670);
        var_7b90 = var_2690;
        int128_t* var_36e8_1 = &var_7b80;
        int128_t var_26c0 = var_7b80;
        int128_t var_26b0 = var_30e0_1;
        int128_t var_26d0;
        sub_14000d900(&var_26d0, &var_26c0, &var_26b0);
        var_7b80 = var_26d0;
        int128_t zmm2_1 = var_7b90;
        int128_t zmm3_1 = var_7b80;
        int128_t var_3e00_1 = var_7ba0;
        int128_t zmm0_103 = var_7bb0;
        int128_t var_2200 = var_82e0_1;
        int128_t var_21f0 = zmm0_103;
        int128_t var_2210;
        sub_14000da40(&var_2210, &var_2200, &var_21f0);
        int128_t var_8310_1 = var_2210;
        int128_t var_2240 = var_82d0_1;
        int128_t var_2230 = var_3e00_1;
        int128_t var_2250;
        sub_14000da40(&var_2250, &var_2240, &var_2230);
        int128_t var_8390_1 = var_2250;
        int128_t var_2280 = var_82c0_1;
        int128_t var_2270 = zmm2_1;
        int128_t var_2290;
        sub_14000da40(&var_2290, &var_2280, &var_2270);
        int128_t var_83a0_1 = var_2290;
        int128_t var_22c0 = var_3320_1;
        int128_t var_22b0 = zmm3_1;
        int128_t var_22d0;
        sub_14000da40(&var_22d0, &var_22c0, &var_22b0);
        int128_t var_3b60_1 = var_22d0;
        int128_t var_2c00 = var_8310_1;
        int128_t var_2c10;
        sub_14000de90(&var_2c10, &var_2c00);
        int128_t var_8420_1 = var_2c10;
        int128_t var_2be0 = var_8310_1;
        int128_t var_2bf0;
        sub_14000dc80(&var_2bf0, &var_2be0);
        int128_t zmm0_109 = var_2bf0;
        int128_t var_2bc0 = var_8420_1;
        int128_t var_2bb0 = zmm0_109;
        int128_t var_2bd0;
        sub_14000d8e0(&var_2bd0, &var_2bc0, &var_2bb0);
        int128_t var_83e0_1 = var_2bd0;
        int128_t var_2c80 = var_8390_1;
        int128_t var_2c90;
        sub_14000de90(&var_2c90, &var_2c80);
        int128_t var_8410_1 = var_2c90;
        int128_t var_2c60 = var_8390_1;
        int128_t var_2c70;
        sub_14000dc80(&var_2c70, &var_2c60);
        int128_t zmm0_112 = var_2c70;
        int128_t var_2c40 = var_8410_1;
        int128_t var_2c30 = zmm0_112;
        int128_t var_2c50;
        sub_14000d8e0(&var_2c50, &var_2c40, &var_2c30);
        int128_t var_83d0_1 = var_2c50;
        int128_t var_2d00 = var_83a0_1;
        int128_t var_2d10;
        sub_14000de90(&var_2d10, &var_2d00);
        int128_t var_8400_1 = var_2d10;
        int128_t var_2ce0 = var_83a0_1;
        int128_t var_2cf0;
        sub_14000dc80(&var_2cf0, &var_2ce0);
        int128_t zmm0_115 = var_2cf0;
        int128_t var_2cc0 = var_8400_1;
        int128_t var_2cb0 = zmm0_115;
        int128_t var_2cd0;
        sub_14000d8e0(&var_2cd0, &var_2cc0, &var_2cb0);
        int128_t var_83c0_1 = var_2cd0;
        int128_t var_2d80 = var_3b60_1;
        int128_t var_2d90;
        sub_14000de90(&var_2d90, &var_2d80);
        int128_t var_83f0_1 = var_2d90;
        int128_t var_2d60 = var_3b60_1;
        int128_t var_2d70;
        sub_14000dc80(&var_2d70, &var_2d60);
        int128_t zmm0_118 = var_2d70;
        int128_t var_2d40 = var_83f0_1;
        int128_t var_2d30 = zmm0_118;
        int128_t var_2d50;
        sub_14000d8e0(&var_2d50, &var_2d40, &var_2d30);
        var_7ac0 = var_2d50;
        var_7ad0 = var_83c0_1;
        var_7ae0 = var_83d0_1;
        var_7af0 = var_83e0_1;
        int128_t* var_3888_1 = &var_7b30;
        int128_t* var_3778_1 = &var_7b30;
        int128_t var_2500 = var_7b30;
        int128_t var_24f0 = var_7af0;
        int128_t var_2510;
        sub_14000d900(&var_2510, &var_2500, &var_24f0);
        var_7b30 = var_2510;
        int128_t* var_37b8_1 = &var_7b20;
        int128_t var_2540 = var_7b20;
        int128_t var_2530 = var_7ae0;
        int128_t var_2550;
        sub_14000d900(&var_2550, &var_2540, &var_2530);
        var_7b20 = var_2550;
        int128_t* var_37f8_1 = &var_7b10;
        int128_t var_2580 = var_7b10;
        int128_t var_2570 = var_7ad0;
        int128_t var_2590;
        sub_14000d900(&var_2590, &var_2580, &var_2570);
        var_7b10 = var_2590;
        int128_t* var_3838_1 = &var_7b00;
        int128_t var_25c0 = var_7b00;
        int128_t var_25b0 = var_7ac0;
        int128_t var_25d0;
        sub_14000d900(&var_25d0, &var_25c0, &var_25b0);
        var_7b00 = var_25d0;
        int128_t zmm2_2 = var_7b10;
        int128_t zmm3_2 = var_7b00;
        int128_t var_3cc0_1 = var_7b20;
        int128_t zmm0_123 = var_7b30;
        int128_t var_2100 = var_8340_1;
        int128_t var_20f0 = zmm0_123;
        int128_t var_2110;
        sub_14000da40(&var_2110, &var_2100, &var_20f0);
        int128_t var_83b0_1 = var_2110;
        int128_t var_2140 = var_8330_1;
        int128_t var_2130 = var_3cc0_1;
        int128_t var_2150;
        sub_14000da40(&var_2150, &var_2140, &var_2130);
        int128_t var_8430_1 = var_2150;
        int128_t var_2180 = var_8320_1;
        int128_t var_2170 = zmm2_2;
        int128_t var_2190;
        sub_14000da40(&var_2190, &var_2180, &var_2170);
        int128_t var_8440_1 = var_2190;
        int128_t var_21c0 = var_30e0_1;
        int128_t var_21b0 = zmm3_2;
        int128_t var_21d0;
        sub_14000da40(&var_21d0, &var_21c0, &var_21b0);
        int128_t var_3c60_1 = var_21d0;
        int128_t var_2940 = var_83b0_1;
        int128_t var_2950;
        sub_14000df80(&var_2950, &var_2940);
        int128_t var_84d0_1 = var_2950;
        int128_t var_2920 = var_83b0_1;
        int128_t var_2930;
        sub_14000db90(&var_2930, &var_2920);
        int128_t zmm0_129 = var_2930;
        int128_t var_2900 = var_84d0_1;
        int128_t var_28f0 = zmm0_129;
        int128_t var_2910;
        sub_14000d8e0(&var_2910, &var_2900, &var_28f0);
        int128_t var_8490_1 = var_2910;
        int128_t var_29c0 = var_8430_1;
        int128_t var_29d0;
        sub_14000df80(&var_29d0, &var_29c0);
        int128_t var_84c0_1 = var_29d0;
        int128_t var_29a0 = var_8430_1;
        int128_t var_29b0;
        sub_14000db90(&var_29b0, &var_29a0);
        int128_t zmm0_132 = var_29b0;
        int128_t var_2980 = var_84c0_1;
        int128_t var_2970 = zmm0_132;
        int128_t var_2990;
        sub_14000d8e0(&var_2990, &var_2980, &var_2970);
        int128_t var_8480_1 = var_2990;
        int128_t var_2a40 = var_8440_1;
        int128_t var_2a50;
        sub_14000df80(&var_2a50, &var_2a40);
        int128_t var_84b0_1 = var_2a50;
        int128_t var_2a20 = var_8440_1;
        int128_t var_2a30;
        sub_14000db90(&var_2a30, &var_2a20);
        int128_t zmm0_135 = var_2a30;
        int128_t var_2a00 = var_84b0_1;
        int128_t var_29f0 = zmm0_135;
        int128_t var_2a10;
        sub_14000d8e0(&var_2a10, &var_2a00, &var_29f0);
        int128_t var_8470_1 = var_2a10;
        int128_t var_2ac0 = var_3c60_1;
        int128_t var_2ad0;
        sub_14000df80(&var_2ad0, &var_2ac0);
        int128_t var_84a0_1 = var_2ad0;
        int128_t var_2aa0 = var_3c60_1;
        int128_t var_2ab0;
        sub_14000db90(&var_2ab0, &var_2aa0);
        int128_t zmm0_138 = var_2ab0;
        int128_t var_2a80 = var_84a0_1;
        int128_t var_2a70 = zmm0_138;
        int128_t var_2a90;
        sub_14000d8e0(&var_2a90, &var_2a80, &var_2a70);
        var_7b40 = var_2a90;
        var_7b50 = var_8470_1;
        var_7b60 = var_8480_1;
        var_7b70 = var_8490_1;
        void var_7cb0;
        void* var_8458_1 = &var_7cb0;
        uint32_t count = 0x100;
        memcpy(&var_7cb0, &var_7bb0, 0x100);
        int128_t* var_8450_1 = &var_7f90;
        memcpy(&var_7f90, var_8458_1, count);
        void var_77b0;
        memcpy(&var_77b0, var_8450_1, count);
        char var_1f41_1 = 0;
        char var_1f42_1 = 0;
        char var_1f43_1 = 0;
        char var_1f43_2 = 1;
        char var_1f42_2 = 1;
        char var_1f41_2 = 1;
        char var_1f41_3 = 0;
        int128_t var_7770;
        int128_t var_1a20 = var_7770;
        int128_t var_1a30;
        sub_14000e110(&var_1a30, &var_1a20);
        int128_t var_84e0_1 = var_1a30;
        int128_t var_7760;
        int128_t var_1a60 = var_7760;
        int128_t var_1a70;
        sub_14000e110(&var_1a70, &var_1a60);
        int128_t var_84f0_1 = var_1a70;
        int128_t var_7750;
        int128_t var_1aa0 = var_7750;
        int128_t var_1ab0;
        sub_14000e110(&var_1ab0, &var_1aa0);
        int128_t var_8500_1 = var_1ab0;
        int128_t var_7740;
        int128_t var_1ae0 = var_7740;
        int128_t var_1af0;
        sub_14000e110(&var_1af0, &var_1ae0);
        char var_1f41_4 = 1;
        var_7740 = var_1af0;
        var_7750 = var_8500_1;
        var_7760 = var_84f0_1;
        var_7770 = var_84e0_1;
        char var_1f42_3 = 0;
        int128_t var_7730;
        int128_t var_1be0 = var_7730;
        int128_t var_1bf0;
        sub_14000e1d0(&var_1bf0, &var_1be0);
        int128_t var_8510_1 = var_1bf0;
        int128_t var_7720;
        int128_t var_1c20 = var_7720;
        int128_t var_1c30;
        sub_14000e1d0(&var_1c30, &var_1c20);
        int128_t var_8520_1 = var_1c30;
        int128_t var_7710;
        int128_t var_1c60 = var_7710;
        int128_t var_1c70;
        sub_14000e1d0(&var_1c70, &var_1c60);
        int128_t var_8530_1 = var_1c70;
        int128_t var_7700;
        int128_t var_1ca0 = var_7700;
        int128_t var_1cb0;
        sub_14000e1d0(&var_1cb0, &var_1ca0);
        char var_1f42_4 = 1;
        var_7700 = var_1cb0;
        var_7710 = var_8530_1;
        var_7720 = var_8520_1;
        var_7730 = var_8510_1;
        char var_1f43_3 = 0;
        int128_t var_76f0;
        int128_t var_1da0 = var_76f0;
        int128_t var_1db0;
        sub_14000e170(&var_1db0, &var_1da0);
        int128_t var_8540_1 = var_1db0;
        int128_t var_76e0;
        int128_t var_1de0 = var_76e0;
        int128_t var_1df0;
        sub_14000e170(&var_1df0, &var_1de0);
        int128_t var_8550_1 = var_1df0;
        int128_t var_76d0;
        int128_t var_1e20 = var_76d0;
        int128_t var_1e30;
        sub_14000e170(&var_1e30, &var_1e20);
        int128_t var_8560_1 = var_1e30;
        int128_t var_76c0;
        int128_t var_1e60 = var_76c0;
        int128_t var_1e70;
        sub_14000e170(&var_1e70, &var_1e60);
        char var_1f43_4 = 1;
        var_76c0 = var_1e70;
        var_76d0 = var_8560_1;
        var_76e0 = var_8550_1;
        var_76f0 = var_8540_1;
        char var_1f43_5 = 0;
        char var_1f42_5 = 0;
        char var_1f41_5 = 0;
        int128_t var_78b0;
        int128_t* var_8578_1 = &var_78b0;
        memcpy(&var_78b0, &var_77b0, 0x100);
        int128_t* var_5558_1 = var_8578_1;
        int128_t* var_5448_1 = var_8578_1;
        int128_t var_48c0 = var_78b0;
        int128_t var_7870;
        int128_t var_48b0 = var_7870;
        int128_t var_48d0;
        sub_14000d900(&var_48d0, &var_48c0, &var_48b0);
        var_78b0 = var_48d0;
        int128_t var_78a0;
        int128_t* var_5488_1 = &var_78a0;
        int128_t var_4900 = var_78a0;
        int128_t var_7860;
        int128_t var_48f0 = var_7860;
        int128_t var_4910;
        sub_14000d900(&var_4910, &var_4900, &var_48f0);
        var_78a0 = var_4910;
        int128_t var_7890;
        int128_t* var_54c8_1 = &var_7890;
        int128_t var_4940 = var_7890;
        int128_t var_7850;
        int128_t var_4930 = var_7850;
        int128_t var_4950;
        sub_14000d900(&var_4950, &var_4940, &var_4930);
        var_7890 = var_4950;
        int128_t var_7880;
        int128_t* var_5508_1 = &var_7880;
        int128_t var_4980 = var_7880;
        int128_t var_7840;
        int128_t var_4970 = var_7840;
        int128_t var_4990;
        sub_14000d900(&var_4990, &var_4980, &var_4970);
        var_7880 = var_4990;
        int128_t zmm2_3 = var_7890;
        int128_t zmm3_3 = var_7880;
        int128_t var_6140_1 = var_78a0;
        int128_t zmm0_157 = var_78b0;
        int128_t var_77f0;
        int128_t var_44c0 = var_77f0;
        int128_t var_44b0 = zmm0_157;
        int128_t var_44d0;
        sub_14000da40(&var_44d0, &var_44c0, &var_44b0);
        int128_t var_8570_1 = var_44d0;
        int128_t var_77e0;
        int128_t var_4500 = var_77e0;
        int128_t var_44f0 = var_6140_1;
        int128_t var_4510;
        sub_14000da40(&var_4510, &var_4500, &var_44f0);
        int128_t var_8590_1 = var_4510;
        int128_t var_77d0;
        int128_t var_4540 = var_77d0;
        int128_t var_4530 = zmm2_3;
        int128_t var_4550;
        sub_14000da40(&var_4550, &var_4540, &var_4530);
        int128_t var_85a0_1 = var_4550;
        int128_t var_77c0;
        int128_t var_4580 = var_77c0;
        int128_t var_4570 = zmm3_3;
        int128_t var_4590;
        sub_14000da40(&var_4590, &var_4580, &var_4570);
        int128_t var_5a20_1 = var_4590;
        int128_t var_51f0 = var_8570_1;
        int128_t var_5200;
        sub_14000e290(&var_5200, &var_51f0);
        int128_t var_51e0 = var_5200;
        int128_t var_5230;
        sub_14000e230(&var_5230, &var_51e0);
        int128_t var_85e0_1 = var_5230;
        int128_t var_5250 = var_8590_1;
        int128_t var_5260;
        sub_14000e290(&var_5260, &var_5250);
        int128_t var_5240 = var_5260;
        int128_t var_5290;
        sub_14000e230(&var_5290, &var_5240);
        int128_t var_85d0_1 = var_5290;
        int128_t var_52b0 = var_85a0_1;
        int128_t var_52c0;
        sub_14000e290(&var_52c0, &var_52b0);
        int128_t var_52a0 = var_52c0;
        int128_t var_52f0;
        sub_14000e230(&var_52f0, &var_52a0);
        int128_t var_85c0_1 = var_52f0;
        int128_t var_5310 = var_5a20_1;
        int128_t var_5320;
        sub_14000e290(&var_5320, &var_5310);
        int128_t var_5300 = var_5320;
        int128_t var_5350;
        sub_14000e230(&var_5350, &var_5300);
        int128_t var_53e0_1 = var_5350;
        int128_t var_7830;
        int128_t* var_56a8_1 = &var_7830;
        int128_t* var_5598_1 = &var_7830;
        int128_t var_47c0 = var_7830;
        int128_t var_47b0 = var_85e0_1;
        int128_t var_47d0;
        sub_14000d900(&var_47d0, &var_47c0, &var_47b0);
        var_7830 = var_47d0;
        int128_t var_7820;
        int128_t* var_55d8_1 = &var_7820;
        int128_t var_4800 = var_7820;
        int128_t var_47f0 = var_85d0_1;
        int128_t var_4810;
        sub_14000d900(&var_4810, &var_4800, &var_47f0);
        var_7820 = var_4810;
        int128_t var_7810;
        int128_t* var_5618_1 = &var_7810;
        int128_t var_4840 = var_7810;
        int128_t var_4830 = var_85c0_1;
        int128_t var_4850;
        sub_14000d900(&var_4850, &var_4840, &var_4830);
        var_7810 = var_4850;
        int128_t var_7800;
        int128_t* var_5658_1 = &var_7800;
        int128_t var_4880 = var_7800;
        int128_t var_4870 = var_53e0_1;
        int128_t var_4890;
        sub_14000d900(&var_4890, &var_4880, &var_4870);
        var_7800 = var_4890;
        zmm2_3 = var_7810;
        zmm3_3 = var_7800;
        int128_t var_6000_1 = var_7820;
        int128_t zmm0_173 = var_7830;
        int128_t var_43c0 = var_7870;
        int128_t var_43b0 = zmm0_173;
        int128_t var_43d0;
        sub_14000da40(&var_43d0, &var_43c0, &var_43b0);
        int128_t var_85b0_1 = var_43d0;
        int128_t var_4400 = var_7860;
        int128_t var_43f0 = var_6000_1;
        int128_t var_4410;
        sub_14000da40(&var_4410, &var_4400, &var_43f0);
        int128_t var_85f0_1 = var_4410;
        int128_t var_4440 = var_7850;
        int128_t var_4430 = zmm2_3;
        int128_t var_4450;
        sub_14000da40(&var_4450, &var_4440, &var_4430);
        int128_t var_8600_1 = var_4450;
        int128_t var_4480 = var_7840;
        int128_t var_4470 = zmm3_3;
        int128_t var_4490;
        sub_14000da40(&var_4490, &var_4480, &var_4470);
        int128_t var_5b20_1 = var_4490;
        int128_t var_4f80 = var_85b0_1;
        int128_t var_4f90;
        sub_14000dda0(&var_4f90, &var_4f80);
        int128_t var_8680_1 = var_4f90;
        int128_t var_4f60 = var_85b0_1;
        int128_t var_4f70;
        sub_14000daa0(&var_4f70, &var_4f60);
        int128_t zmm0_179 = var_4f70;
        int128_t var_4f40 = var_8680_1;
        int128_t var_4f30 = zmm0_179;
        int128_t var_4f50;
        sub_14000d8e0(&var_4f50, &var_4f40, &var_4f30);
        int128_t var_8640_1 = var_4f50;
        int128_t var_5000 = var_85f0_1;
        int128_t var_5010;
        sub_14000dda0(&var_5010, &var_5000);
        int128_t var_8670_1 = var_5010;
        int128_t var_4fe0 = var_85f0_1;
        int128_t var_4ff0;
        sub_14000daa0(&var_4ff0, &var_4fe0);
        int128_t zmm0_182 = var_4ff0;
        int128_t var_4fc0 = var_8670_1;
        int128_t var_4fb0 = zmm0_182;
        int128_t var_4fd0;
        sub_14000d8e0(&var_4fd0, &var_4fc0, &var_4fb0);
        int128_t var_8630_1 = var_4fd0;
        int128_t var_5080 = var_8600_1;
        int128_t var_5090;
        sub_14000dda0(&var_5090, &var_5080);
        int128_t var_8660_1 = var_5090;
        int128_t var_5060 = var_8600_1;
        int128_t var_5070;
        sub_14000daa0(&var_5070, &var_5060);
        int128_t zmm0_185 = var_5070;
        int128_t var_5040 = var_8660_1;
        int128_t var_5030 = zmm0_185;
        int128_t var_5050;
        sub_14000d8e0(&var_5050, &var_5040, &var_5030);
        int128_t var_8620_1 = var_5050;
        int128_t var_5100 = var_5b20_1;
        int128_t var_5110;
        sub_14000dda0(&var_5110, &var_5100);
        int128_t var_8650_1 = var_5110;
        int128_t var_50e0 = var_5b20_1;
        int128_t var_50f0;
        sub_14000daa0(&var_50f0, &var_50e0);
        int128_t zmm0_188 = var_50f0;
        int128_t var_50c0 = var_8650_1;
        int128_t var_50b0 = zmm0_188;
        int128_t var_50d0;
        sub_14000d8e0(&var_50d0, &var_50c0, &var_50b0);
        int128_t var_51a0_1 = var_50d0;
        int128_t* var_57f8_1 = &var_78b0;
        int128_t* var_56e8_1 = &var_78b0;
        int128_t var_46c0 = var_78b0;
        int128_t var_46b0 = var_8640_1;
        int128_t var_46d0;
        sub_14000d900(&var_46d0, &var_46c0, &var_46b0);
        var_78b0 = var_46d0;
        int128_t* var_5728_1 = &var_78a0;
        int128_t var_4700 = var_78a0;
        int128_t var_46f0 = var_8630_1;
        int128_t var_4710;
        sub_14000d900(&var_4710, &var_4700, &var_46f0);
        var_78a0 = var_4710;
        int128_t* var_5768_1 = &var_7890;
        int128_t var_4740 = var_7890;
        int128_t var_4730 = var_8620_1;
        int128_t var_4750;
        sub_14000d900(&var_4750, &var_4740, &var_4730);
        var_7890 = var_4750;
        int128_t* var_57a8_1 = &var_7880;
        int128_t var_4780 = var_7880;
        int128_t var_4770 = var_51a0_1;
        int128_t var_4790;
        sub_14000d900(&var_4790, &var_4780, &var_4770);
        var_7880 = var_4790;
        int128_t zmm2_4 = var_7890;
        int128_t zmm3_4 = var_7880;
        int128_t var_5ec0_1 = var_78a0;
        int128_t zmm0_193 = var_78b0;
        int128_t var_42c0 = var_85e0_1;
        int128_t var_42b0 = zmm0_193;
        int128_t var_42d0;
        sub_14000da40(&var_42d0, &var_42c0, &var_42b0);
        int128_t var_8610_1 = var_42d0;
        int128_t var_4300 = var_85d0_1;
        int128_t var_42f0 = var_5ec0_1;
        int128_t var_4310;
        sub_14000da40(&var_4310, &var_4300, &var_42f0);
        int128_t var_8690_1 = var_4310;
        int128_t var_4340 = var_85c0_1;
        int128_t var_4330 = zmm2_4;
        int128_t var_4350;
        sub_14000da40(&var_4350, &var_4340, &var_4330);
        int128_t var_86a0_1 = var_4350;
        int128_t var_4380 = var_53e0_1;
        int128_t var_4370 = zmm3_4;
        int128_t var_4390;
        sub_14000da40(&var_4390, &var_4380, &var_4370);
        int128_t var_5c20_1 = var_4390;
        int128_t var_4cc0 = var_8610_1;
        int128_t var_4cd0;
        sub_14000de90(&var_4cd0, &var_4cc0);
        int128_t var_8720_1 = var_4cd0;
        int128_t var_4ca0 = var_8610_1;
        int128_t var_4cb0;
        sub_14000dc80(&var_4cb0, &var_4ca0);
        int128_t zmm0_199 = var_4cb0;
        int128_t var_4c80 = var_8720_1;
        int128_t var_4c70 = zmm0_199;
        int128_t var_4c90;
        sub_14000d8e0(&var_4c90, &var_4c80, &var_4c70);
        int128_t var_86e0_1 = var_4c90;
        int128_t var_4d40 = var_8690_1;
        int128_t var_4d50;
        sub_14000de90(&var_4d50, &var_4d40);
        int128_t var_8710_1 = var_4d50;
        int128_t var_4d20 = var_8690_1;
        int128_t var_4d30;
        sub_14000dc80(&var_4d30, &var_4d20);
        int128_t zmm0_202 = var_4d30;
        int128_t var_4d00 = var_8710_1;
        int128_t var_4cf0 = zmm0_202;
        int128_t var_4d10;
        sub_14000d8e0(&var_4d10, &var_4d00, &var_4cf0);
        int128_t var_86d0_1 = var_4d10;
        int128_t var_4dc0 = var_86a0_1;
        int128_t var_4dd0;
        sub_14000de90(&var_4dd0, &var_4dc0);
        int128_t var_8700_1 = var_4dd0;
        int128_t var_4da0 = var_86a0_1;
        int128_t var_4db0;
        sub_14000dc80(&var_4db0, &var_4da0);
        int128_t zmm0_205 = var_4db0;
        int128_t var_4d80 = var_8700_1;
        int128_t var_4d70 = zmm0_205;
        int128_t var_4d90;
        sub_14000d8e0(&var_4d90, &var_4d80, &var_4d70);
        int128_t var_86c0_1 = var_4d90;
        int128_t var_4e40 = var_5c20_1;
        int128_t var_4e50;
        sub_14000de90(&var_4e50, &var_4e40);
        int128_t var_86f0_1 = var_4e50;
        int128_t var_4e20 = var_5c20_1;
        int128_t var_4e30;
        sub_14000dc80(&var_4e30, &var_4e20);
        int128_t zmm0_208 = var_4e30;
        int128_t var_4e00 = var_86f0_1;
        int128_t var_4df0 = zmm0_208;
        int128_t var_4e10;
        sub_14000d8e0(&var_4e10, &var_4e00, &var_4df0);
        var_77c0 = var_4e10;
        var_77d0 = var_86c0_1;
        var_77e0 = var_86d0_1;
        var_77f0 = var_86e0_1;
        int128_t* var_5948_1 = &var_7830;
        int128_t* var_5838_1 = &var_7830;
        int128_t var_45c0 = var_7830;
        int128_t var_45b0 = var_77f0;
        int128_t var_45d0;
        sub_14000d900(&var_45d0, &var_45c0, &var_45b0);
        var_7830 = var_45d0;
        int128_t* var_5878_1 = &var_7820;
        int128_t var_4600 = var_7820;
        int128_t var_45f0 = var_77e0;
        int128_t var_4610;
        sub_14000d900(&var_4610, &var_4600, &var_45f0);
        var_7820 = var_4610;
        int128_t* var_58b8_1 = &var_7810;
        int128_t var_4640 = var_7810;
        int128_t var_4630 = var_77d0;
        int128_t var_4650;
        sub_14000d900(&var_4650, &var_4640, &var_4630);
        var_7810 = var_4650;
        int128_t* var_58f8_1 = &var_7800;
        int128_t var_4680 = var_7800;
        int128_t var_4670 = var_77c0;
        int128_t var_4690;
        sub_14000d900(&var_4690, &var_4680, &var_4670);
        var_7800 = var_4690;
        int128_t zmm2_5 = var_7810;
        int128_t zmm3_5 = var_7800;
        int128_t var_5d80_1 = var_7820;
        int128_t zmm0_213 = var_7830;
        int128_t var_41c0 = var_8640_1;
        int128_t var_41b0 = zmm0_213;
        int128_t var_41d0;
        sub_14000da40(&var_41d0, &var_41c0, &var_41b0);
        int128_t var_86b0_1 = var_41d0;
        int128_t var_4200 = var_8630_1;
        int128_t var_41f0 = var_5d80_1;
        int128_t var_4210;
        sub_14000da40(&var_4210, &var_4200, &var_41f0);
        int128_t var_8730_1 = var_4210;
        int128_t var_4240 = var_8620_1;
        int128_t var_4230 = zmm2_5;
        int128_t var_4250;
        sub_14000da40(&var_4250, &var_4240, &var_4230);
        int128_t var_8740_1 = var_4250;
        int128_t var_4280 = var_51a0_1;
        int128_t var_4270 = zmm3_5;
        int128_t var_4290;
        sub_14000da40(&var_4290, &var_4280, &var_4270);
        int128_t var_5d20_1 = var_4290;
        int128_t var_4a00 = var_86b0_1;
        int128_t var_4a10;
        sub_14000df80(&var_4a10, &var_4a00);
        int128_t var_87b0_1 = var_4a10;
        int128_t var_49e0 = var_86b0_1;
        int128_t var_49f0;
        sub_14000db90(&var_49f0, &var_49e0);
        int128_t zmm0_219 = var_49f0;
        int128_t var_49c0 = var_87b0_1;
        int128_t var_49b0 = zmm0_219;
        int128_t var_49d0;
        sub_14000d8e0(&var_49d0, &var_49c0, &var_49b0);
        int128_t var_8770_1 = var_49d0;
        int128_t var_4a80 = var_8730_1;
        int128_t var_4a90;
        sub_14000df80(&var_4a90, &var_4a80);
        int128_t var_87a0_1 = var_4a90;
        int128_t var_4a60 = var_8730_1;
        int128_t var_4a70;
        sub_14000db90(&var_4a70, &var_4a60);
        int128_t zmm0_222 = var_4a70;
        int128_t var_4a40 = var_87a0_1;
        int128_t var_4a30 = zmm0_222;
        int128_t var_4a50;
        sub_14000d8e0(&var_4a50, &var_4a40, &var_4a30);
        int128_t var_8760_1 = var_4a50;
        int128_t var_4b00 = var_8740_1;
        int128_t var_4b10;
        sub_14000df80(&var_4b10, &var_4b00);
        int128_t var_8790_1 = var_4b10;
        int128_t var_4ae0 = var_8740_1;
        int128_t var_4af0;
        sub_14000db90(&var_4af0, &var_4ae0);
        int128_t zmm0_225 = var_4af0;
        int128_t var_4ac0 = var_8790_1;
        int128_t var_4ab0 = zmm0_225;
        int128_t var_4ad0;
        sub_14000d8e0(&var_4ad0, &var_4ac0, &var_4ab0);
        int128_t var_8750_1 = var_4ad0;
        int128_t var_4b80 = var_5d20_1;
        int128_t var_4b90;
        sub_14000df80(&var_4b90, &var_4b80);
        int128_t var_8780_1 = var_4b90;
        int128_t var_4b60 = var_5d20_1;
        int128_t var_4b70;
        sub_14000db90(&var_4b70, &var_4b60);
        int128_t zmm0_228 = var_4b70;
        int128_t var_4b40 = var_8780_1;
        int128_t var_4b30 = zmm0_228;
        int128_t var_4b50;
        sub_14000d8e0(&var_4b50, &var_4b40, &var_4b30);
        var_7840 = var_4b50;
        var_7850 = var_8750_1;
        var_7860 = var_8760_1;
        var_7870 = var_8770_1;
        void var_79b0;
        memcpy(&var_79b0, &var_78b0, 0x100);
        char var_1871_1 = 0;
        char var_1872_1 = 0;
        char var_1873_1 = 0;
        char var_1873_2 = 1;
        char var_1872_2 = 1;
        char var_1871_2 = 1;
        char var_1871_3 = 0;
        int128_t var_7970;
        int128_t var_16d0 = var_7970;
        int128_t var_16e0;
        sub_14000e170(&var_16e0, &var_16d0);
        int128_t var_87c0_1 = var_16e0;
        int128_t var_7960;
        int128_t var_1710 = var_7960;
        int128_t var_1720;
        sub_14000e170(&var_1720, &var_1710);
        int128_t var_87d0_1 = var_1720;
        int128_t var_7950;
        int128_t var_1750 = var_7950;
        int128_t var_1760;
        sub_14000e170(&var_1760, &var_1750);
        int128_t var_87e0_1 = var_1760;
        int128_t var_7940;
        int128_t var_1790 = var_7940;
        int128_t var_17a0;
        sub_14000e170(&var_17a0, &var_1790);
        char var_1871_4 = 1;
        var_7940 = var_17a0;
        var_7950 = var_87e0_1;
        var_7960 = var_87d0_1;
        var_7970 = var_87c0_1;
        char var_1872_3 = 0;
        int128_t var_7930;
        int128_t var_1510 = var_7930;
        int128_t var_1520;
        sub_14000e1d0(&var_1520, &var_1510);
        int128_t var_87f0_1 = var_1520;
        int128_t var_7920;
        int128_t var_1550 = var_7920;
        int128_t var_1560;
        sub_14000e1d0(&var_1560, &var_1550);
        int128_t var_8800_1 = var_1560;
        int128_t var_7910;
        int128_t var_1590 = var_7910;
        int128_t var_15a0;
        sub_14000e1d0(&var_15a0, &var_1590);
        int128_t var_8810_1 = var_15a0;
        int128_t var_7900;
        int128_t var_15d0 = var_7900;
        int128_t var_15e0;
        sub_14000e1d0(&var_15e0, &var_15d0);
        char var_1872_4 = 1;
        var_7900 = var_15e0;
        var_7910 = var_8810_1;
        var_7920 = var_8800_1;
        var_7930 = var_87f0_1;
        char var_1873_3 = 0;
        int128_t var_78f0;
        int128_t var_1350 = var_78f0;
        int128_t var_1360;
        sub_14000e110(&var_1360, &var_1350);
        int128_t var_8820_1 = var_1360;
        int128_t var_78e0;
        int128_t var_1390 = var_78e0;
        int128_t var_13a0;
        sub_14000e110(&var_13a0, &var_1390);
        int128_t var_8830_1 = var_13a0;
        int128_t var_78d0;
        int128_t var_13d0 = var_78d0;
        int128_t var_13e0;
        sub_14000e110(&var_13e0, &var_13d0);
        int128_t var_8840_1 = var_13e0;
        int128_t var_78c0;
        int128_t var_1410 = var_78c0;
        int128_t var_1420;
        sub_14000e110(&var_1420, &var_1410);
        int128_t zmm0_242 = var_1420;
        int128_t var_14f0 = var_8820_1;
        int128_t var_14e0_1 = var_8830_1;
        int128_t var_14d0_1 = var_8840_1;
        int128_t var_14c0_1 = zmm0_242;
        void var_1900;
        memcpy(&var_1900, &var_14f0, 0x40);
        char var_1873_4 = 1;
        memcpy(&var_78f0, &var_1900, 0x40);
        char var_1873_5 = 0;
        char var_1872_5 = 0;
        char var_1871_5 = 0;
        void var_7ab0;
        memcpy(&var_7ab0, &var_79b0, 0x100);
        memcpy(&var_7f90, &var_7ab0, 0x100);
    }
    
    int128_t zmm0_25 = *arg1;
    int128_t var_6ee0 = zmm0_25;
    int128_t var_75d0 = zmm0_25;
    int128_t var_75c0 = zmm0_25;
    int128_t var_75b0 = zmm0_25;
    int128_t var_7620 = zmm0_25;
    zmm0_25 = arg1[1];
    int128_t var_6ec0 = zmm0_25;
    int128_t var_7540 = zmm0_25;
    int128_t var_7530 = zmm0_25;
    int128_t var_7520 = zmm0_25;
    int128_t var_7590 = zmm0_25;
    zmm0_25 = arg1[2];
    int128_t var_f70 = zmm0_25;
    int64_t var_10d8 = 0;
    int128_t var_d40;
    sub_14000e890(&var_d40, 0);
    int128_t zmm0_26 = var_d40;
    int128_t var_d30 = zmm0_26;
    int128_t var_d20;
    sub_14000e890(&var_d20, var_10d8);
    int128_t var_d00 = var_d20;
    int128_t var_d10;
    sub_14000dd70(&var_d10, &var_d00);
    int128_t zmm0_28 = var_d10;
    int128_t var_cf0 = zmm0_28;
    int128_t var_cd0 = zmm0_26;
    int128_t var_cc0 = zmm0_28;
    int128_t var_ce0;
    sub_14000d8e0(&var_ce0, &var_cd0, &var_cc0);
    int128_t zmm0_29 = var_ce0;
    int64_t var_10c8 = 0;
    int128_t var_ca0;
    sub_14000e890(&var_ca0, 1);
    int128_t zmm0_30 = var_ca0;
    int128_t var_c90 = zmm0_30;
    int128_t var_c80;
    sub_14000e890(&var_c80, var_10c8);
    int128_t var_c60 = var_c80;
    int128_t var_c70;
    sub_14000dd70(&var_c70, &var_c60);
    int128_t zmm0_32 = var_c70;
    int128_t var_c50 = zmm0_32;
    int128_t var_c30 = zmm0_30;
    int128_t var_c20 = zmm0_32;
    int128_t var_c40;
    sub_14000d8e0(&var_c40, &var_c30, &var_c20);
    int128_t zmm0_33 = var_c40;
    int64_t var_10b8 = 0;
    int128_t var_c00;
    sub_14000e890(&var_c00, 2);
    int128_t zmm0_34 = var_c00;
    int128_t var_bf0 = zmm0_34;
    int128_t var_be0;
    sub_14000e890(&var_be0, var_10b8);
    int128_t var_bc0 = var_be0;
    int128_t var_bd0;
    sub_14000dd70(&var_bd0, &var_bc0);
    int128_t zmm0_36 = var_bd0;
    int128_t var_bb0 = zmm0_36;
    int128_t var_b90 = zmm0_34;
    int128_t var_b80 = zmm0_36;
    int128_t var_ba0;
    sub_14000d8e0(&var_ba0, &var_b90, &var_b80);
    int128_t zmm0_37 = var_ba0;
    int64_t var_10a8 = 0;
    int128_t var_b60;
    sub_14000e890(&var_b60, 3);
    int128_t zmm0_38 = var_b60;
    int128_t var_b50 = zmm0_38;
    int128_t var_b40;
    sub_14000e890(&var_b40, var_10a8);
    int128_t var_b20 = var_b40;
    int128_t var_b30;
    sub_14000dd70(&var_b30, &var_b20);
    int128_t zmm0_40 = var_b30;
    int128_t var_b10 = zmm0_40;
    int128_t var_af0 = zmm0_38;
    int128_t var_ae0 = zmm0_40;
    int128_t var_b00;
    sub_14000d8e0(&var_b00, &var_af0, &var_ae0);
    int128_t var_10f0 = var_b00;
    int128_t var_8f0 = zmm0_25;
    int128_t var_8e0 = zmm0_29;
    int128_t var_900;
    sub_14000d9a0(&var_900, &var_8f0, &var_8e0);
    int128_t var_8100 = var_900;
    int128_t var_930 = zmm0_25;
    int128_t var_920 = zmm0_33;
    int128_t var_940;
    sub_14000d9a0(&var_940, &var_930, &var_920);
    int128_t var_8190 = var_940;
    int128_t var_970 = zmm0_25;
    int128_t var_960 = zmm0_37;
    int128_t var_980;
    sub_14000d9a0(&var_980, &var_970, &var_960);
    int128_t var_81a0 = var_980;
    int128_t var_9b0 = zmm0_25;
    int128_t var_9a0 = var_10f0;
    int128_t var_9c0;
    sub_14000d9a0(&var_9c0, &var_9b0, &var_9a0);
    int128_t var_1020 = var_9c0;
    int128_t var_1030 = var_81a0;
    int128_t var_1040 = var_8190;
    int128_t var_1050 = var_8100;
    int128_t var_10a0;
    sub_14000eca0(&var_10a0, &var_1050);
    int128_t var_7510 = var_10a0;
    int128_t var_6580 = var_7f90;
    int128_t var_6570 = var_8090;
    int128_t var_6590;
    sub_14000d900(&var_6590, &var_6580, &var_6570);
    int128_t var_81b0 = var_6590;
    int128_t var_7f80;
    int128_t var_65c0 = var_7f80;
    int128_t var_65b0 = var_8090;
    int128_t var_65d0;
    sub_14000d900(&var_65d0, &var_65c0, &var_65b0);
    int128_t var_81c0 = var_65d0;
    int128_t var_7f70;
    int128_t var_6600 = var_7f70;
    int128_t var_65f0 = var_8090;
    int128_t var_6610;
    sub_14000d900(&var_6610, &var_6600, &var_65f0);
    int128_t var_81d0 = var_6610;
    int128_t var_7f60;
    int128_t var_6640 = var_7f60;
    int128_t var_6630 = var_8090;
    int128_t var_6650;
    sub_14000d900(&var_6650, &var_6640, &var_6630);
    int128_t var_6920 = var_6650;
    int128_t var_6480 = var_7f50;
    int128_t var_6470 = var_7620;
    int128_t var_6490;
    sub_14000d900(&var_6490, &var_6480, &var_6470);
    int128_t var_81e0 = var_6490;
    int128_t var_7f40;
    int128_t var_64c0 = var_7f40;
    int128_t var_64b0 = var_75d0;
    int128_t var_64d0;
    sub_14000d900(&var_64d0, &var_64c0, &var_64b0);
    int128_t var_81f0 = var_64d0;
    int128_t var_7f30;
    int128_t var_6500 = var_7f30;
    int128_t var_64f0 = var_75c0;
    int128_t var_6510;
    sub_14000d900(&var_6510, &var_6500, &var_64f0);
    int128_t var_8200 = var_6510;
    int128_t var_7f20;
    int128_t var_6540 = var_7f20;
    int128_t var_6530 = var_75b0;
    int128_t var_6550;
    sub_14000d900(&var_6550, &var_6540, &var_6530);
    int128_t var_6a20 = var_6550;
    int128_t var_6380 = var_7f10;
    int128_t var_6370 = var_7590;
    int128_t var_6390;
    sub_14000d900(&var_6390, &var_6380, &var_6370);
    int128_t var_8210 = var_6390;
    int128_t var_7f00;
    int128_t var_63c0 = var_7f00;
    int128_t var_63b0 = var_7540;
    int128_t var_63d0;
    sub_14000d900(&var_63d0, &var_63c0, &var_63b0);
    int128_t var_8220 = var_63d0;
    int128_t var_7ef0;
    int128_t var_6400 = var_7ef0;
    int128_t var_63f0 = var_7530;
    int128_t var_6410;
    sub_14000d900(&var_6410, &var_6400, &var_63f0);
    int128_t var_8230 = var_6410;
    int128_t var_7ee0;
    int128_t var_6440 = var_7ee0;
    int128_t var_6430 = var_7520;
    int128_t var_6450;
    sub_14000d900(&var_6450, &var_6440, &var_6430);
    int128_t var_6b20 = var_6450;
    int128_t zmm0_58 = var_7510;
    int128_t var_6280 = var_7ed0;
    int128_t var_6270 = zmm0_58;
    int128_t var_6290;
    sub_14000d900(&var_6290, &var_6280, &var_6270);
    int128_t var_8240 = var_6290;
    int128_t var_7ec0;
    int128_t var_62c0 = var_7ec0;
    int128_t var_1090;
    int128_t var_62b0 = var_1090;
    int128_t var_62d0;
    sub_14000d900(&var_62d0, &var_62c0, &var_62b0);
    int128_t var_8250 = var_62d0;
    int128_t var_7eb0;
    int128_t var_6300 = var_7eb0;
    int128_t var_1080;
    int128_t var_62f0 = var_1080;
    int128_t var_6310;
    sub_14000d900(&var_6310, &var_6300, &var_62f0);
    int128_t var_8260 = var_6310;
    int128_t var_7ea0;
    int128_t var_6340 = var_7ea0;
    int128_t var_1070;
    int128_t var_6330 = var_1070;
    int128_t var_6350;
    sub_14000d900(&var_6350, &var_6340, &var_6330);
    int128_t zmm0_62 = var_6350;
    int128_t var_6c50 = var_8240;
    int128_t var_6c40 = var_8250;
    int128_t var_6c30 = var_8260;
    int128_t var_6c20 = zmm0_62;
    int128_t var_7240;
    memcpy(&var_7240, &var_6c50, 0x40);
    int128_t zmm0_243 = var_7240;
    int128_t var_6810 = var_81b0;
    int128_t var_6800 = var_81e0;
    int128_t var_67f0 = var_8210;
    int128_t var_67e0 = zmm0_243;
    void var_6850;
    memcpy(&var_6850, &var_6810, 0x40);
    int128_t var_6790 = var_81c0;
    int128_t var_6780 = var_81f0;
    int128_t var_6770 = var_8220;
    int128_t var_7230;
    int128_t var_6760 = var_7230;
    void var_67d0;
    memcpy(&var_67d0, &var_6790, 0x40);
    int128_t var_6710 = var_81d0;
    int128_t var_6700 = var_8200;
    int128_t var_66f0 = var_8230;
    int128_t var_7220;
    int128_t var_66e0 = var_7220;
    void var_6750;
    memcpy(&var_6750, &var_6710, 0x40);
    int128_t var_6690 = var_6920;
    int128_t var_6680 = var_6a20;
    int128_t var_6670 = var_6b20;
    int128_t var_7210;
    int128_t var_6660 = var_7210;
    void var_66d0;
    memcpy(&var_66d0, &var_6690, 0x40);
    void var_74c0;
    memcpy(&var_74c0, &var_6850, 0x40);
    void var_7480;
    memcpy(&var_7480, &var_67d0, 0x40);
    void var_7440;
    memcpy(&var_7440, &var_6750, 0x40);
    void var_7400;
    memcpy(&var_7400, &var_66d0, 0x40);
    int64_t rax_15;
    int64_t rdx_259;
    rax_15 = sub_14000c9d0(arg3, 0, 0x10, &data_14005fc28);
    void var_7180;
    memcpy(&var_7180, &var_74c0, 0x40);
    void var_71c0;
    memcpy(&var_71c0, &var_7180, 0x40);
    sub_14000ca30(rax_15, rdx_259, &var_71c0, 0x10, &data_14005fc40);
    int64_t rax_16;
    int64_t rdx_263;
    rax_16 = sub_14000c9d0(arg3, 0x10, 0x20, &data_14005fc58);
    void var_7100;
    memcpy(&var_7100, &var_7480, 0x40);
    void var_7140;
    memcpy(&var_7140, &var_7100, 0x40);
    sub_14000ca30(rax_16, rdx_263, &var_7140, 0x10, &data_14005fc70);
    int64_t rax_17;
    int64_t rdx_267;
    rax_17 = sub_14000c9d0(arg3, 0x20, 0x30, &data_14005fc88);
    void var_7080;
    memcpy(&var_7080, &var_7440, 0x40);
    void var_70c0;
    memcpy(&var_70c0, &var_7080, 0x40);
    sub_14000ca30(rax_17, rdx_267, &var_70c0, 0x10, &data_14005fca0);
    int64_t rax_18;
    int64_t rdx_271;
    rax_18 = sub_14000c9d0(arg3, 0x30, 0x40, &data_14005fcb8);
    void var_7000;
    memcpy(&var_7000, &var_7400, 0x40);
    void var_7040;
    memcpy(&var_7040, &var_7000, 0x40);
    sub_14000ca30(rax_18, rdx_271, &var_7040, 0x10, &data_14005fcd0);
    void var_6db0;
    memcpy(&var_6db0, &var_7510, 0x40);
    int128_t var_6fb0;
    memcpy(&var_6fb0, &var_6db0, 0x40);
    int64_t var_12f8 = 4;
    int128_t var_12f0 = var_6fb0;
    int128_t var_1330;
    sub_14000eb20(&var_1330, &var_12f0);
    int128_t zmm0_248 = var_1330;
    int128_t var_12d0 = zmm0_248;
    int64_t var_1318 = 0;
    int128_t var_1240;
    sub_14000e890(&var_1240, 4);
    int128_t zmm0_249 = var_1240;
    var_8860 = zmm0_249;
    int128_t var_1230 = zmm0_249;
    int128_t var_1220;
    sub_14000e890(&var_1220, var_1318);
    int128_t var_1200 = var_1220;
    int128_t var_1210;
    sub_14000dd70(&var_1210, &var_1200);
    int128_t zmm0_251 = var_1210;
    int128_t var_11f0 = zmm0_251;
    int128_t var_11d0 = var_8860;
    int128_t var_11c0 = zmm0_251;
    int128_t var_11e0;
    sub_14000d8e0(&var_11e0, &var_11d0, &var_11c0);
    int128_t zmm0_252 = var_11e0;
    int128_t var_12b0 = zmm0_252;
    int128_t var_1190 = zmm0_248;
    int128_t var_1180 = zmm0_252;
    int128_t var_11a0;
    sub_14000d9a0(&var_11a0, &var_1190, &var_1180);
    int128_t var_1270 = var_11a0;
    int128_t var_1310;
    sub_14000ea80(&var_1310, &var_1270);
    int128_t var_6d50 = var_1310;
    int64_t var_6fc0;
    sub_14000eb20(&var_6fc0, &var_6d50);
    arg1[2] = var_6fc0;
    int64_t var_6fb8;
    *(arg1 + 0x28) = var_6fb8;
    return arg1;
}

int64_t sub_140035d10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035d30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035d50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035d70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035d90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035db0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035dd0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035df0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035e10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035e30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035e50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035e70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035e90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035eb0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035ed0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035ef0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035f10() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035f30() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035f50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035f70() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035f90() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035fb0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035fd0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140035ff0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036010() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036030() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036050() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036070() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036090() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400360b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400360d0(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x699f);
    *(rdx + 0x699e);
    *(rdx + 0x699d);
}

int64_t sub_140036120() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036140() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036160() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036180() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400361a0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400361c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400361e0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036200() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036220() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036240() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036260() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140036280() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400362a0(int64_t, int64_t arg2)
{
    arg_10 = arg2;
    void* rdx = (arg2 & 0xffffffffffffffe0);
    *(rdx + 0x706f);
    *(rdx + 0x706e);
    *(rdx + 0x706d);
}

int64_t* sub_1400362f0(int64_t* arg1, int64_t arg2, char* arg3, int64_t arg4)
{
    int64_t var_18 = arg2;
    char* var_10 = arg3;
    int64_t var_8 = arg4;
    
    if ((sub_14000c0d0() & 1) != 0)
        sub_140036370(arg1, arg2, arg3, arg4);
    else
        sub_140036a40(arg1, arg2, arg3, arg4);
    
    return arg1;
}

int64_t* sub_140036370(int64_t* arg1, int64_t arg2, char* arg3, int64_t arg4)
{
    int64_t var_338 = arg2;
    char* var_330 = arg3;
    int64_t var_328 = arg4;
    int64_t var_2d0 = arg2;
    char* var_2c8 = arg3;
    int64_t var_2c0 = arg4;
    int32_t var_30c;
    
    if (arg4 != 0xc)
        var_30c = 0;
    else
    {
        char* var_78_1 = arg3;
        int64_t var_70_1 = arg4;
        int64_t var_68_1 = 0;
        int64_t var_60_1 = 4;
        int64_t var_48_1 = 0;
        int64_t var_40_1 = 4;
        char* var_38_1 = arg3;
        int64_t var_30_1 = arg4;
        int64_t var_28_1 = 4;
        int64_t var_20_1 = 0;
        int64_t var_58_1 = 1;
        int64_t var_18_1 = 4;
        
        if (4 > arg4)
        {
            sub_14005cb50(4, arg4);
            /* no return */
        }
        
        char* var_10_1 = arg3;
        char* var_8_1 = arg3;
        var_30c = sub_14000f2f0(arg3, 4);
    }
    
    if (arg4 < 8)
    {
        sub_14005cd80();
        /* no return */
    }
    
    if (arg4 < 4)
    {
        sub_14005cd80();
        /* no return */
    }
    
    char* var_f0 = arg3;
    int64_t var_e8 = arg4;
    int64_t var_e0 = (arg4 - 8);
    int64_t var_d8 = (arg4 - 4);
    int64_t var_c0 = (arg4 - 8);
    int64_t var_b8 = (arg4 - 4);
    char* var_b0 = arg3;
    int64_t var_a8 = arg4;
    int64_t var_a0 = (arg4 - 4);
    int64_t var_98 = (arg4 - 8);
    
    if ((arg4 - 4) < (arg4 - 8))
    {
        sub_14005cbc0((arg4 - 8), (arg4 - 4));
        /* no return */
    }
    
    int64_t rdx_3 = ((arg4 - 4) - (arg4 - 8));
    int64_t var_d0 = 1;
    int64_t var_90 = rdx_3;
    
    if ((arg4 - 4) > arg4)
    {
        sub_14005cb50((arg4 - 4), arg4);
        /* no return */
    }
    
    char* var_88 = arg3;
    void* rcx_12 = &arg3[(arg4 - 8)];
    void* var_80 = rcx_12;
    int32_t rax_8 = sub_14000f2f0(rcx_12, rdx_3);
    
    if (arg4 < 4)
    {
        sub_14005cd80();
        /* no return */
    }
    
    char* var_108 = arg3;
    int64_t var_100 = arg4;
    int64_t var_f8 = (arg4 - 4);
    char* rax_10;
    int64_t rdx_9;
    rax_10 = sub_14000c2f0((arg4 - 4), arg3, arg4);
    int32_t var_318 = var_30c;
    int32_t var_310 = sub_14000f2f0(rax_10, rdx_9);
    int64_t* rax_12 = sub_14000c890(arg2, 0x10);
    int64_t* var_1b8 = rax_12;
    int64_t var_1b0 = 0x10;
    int64_t* var_168 = rax_12;
    int64_t var_160 = 0x10;
    int64_t var_1a8 = 0x10;
    int64_t* var_158 = &var_1a8;
    void* const var_150 = &data_14005fae0;
    
    if (var_1a8 != 0x10)
    {
        char var_199 = 0;
        int64_t var_198 = 0;
        int64_t rcx_19;
        rcx_19 = var_199;
        sub_14000e930(rcx_19, &var_1a8, &data_14005fae0, &var_198, &data_14005fb58);
        /* no return */
    }
    
    int64_t* var_128 = rax_12;
    int64_t var_120 = 0x10;
    int128_t var_148;
    sub_14000e070(&var_148, rax_12);
    int128_t zmm0 = var_148;
    int128_t var_2a8 = zmm0;
    int64_t* rax_13;
    int64_t rdx_13;
    rax_13 = sub_14000c980(arg2, 0x10);
    int64_t* var_248 = rax_13;
    int64_t var_240 = rdx_13;
    int64_t* var_1f8 = rax_13;
    int64_t var_1f0 = rdx_13;
    int64_t var_238 = rdx_13;
    int64_t* var_1e8 = &var_238;
    void* const var_1e0 = &data_14005fae0;
    
    if (var_238 != 0x10)
    {
        char var_229 = 0;
        int64_t var_228 = 0;
        sub_14000e930(var_229, &var_238, &data_14005fae0, &var_228, &data_14005fb58);
        /* no return */
    }
    
    int64_t* var_118 = rax_13;
    int64_t var_110 = rdx_13;
    int128_t var_1d8;
    sub_14000e070(&var_1d8, rax_13);
    int128_t zmm1 = var_1d8;
    int128_t var_288 = zmm1;
    int128_t var_278 = zmm0;
    int64_t var_308;
    sub_14000ef60(&var_308, &var_278);
    int128_t var_268 = zmm1;
    int64_t var_2f8;
    sub_14000ef60(&var_2f8, &var_268);
    int64_t var_258 = 0;
    int64_t var_250 = rax_8;
    int64_t var_2e8;
    sub_14000eb00(&var_2e8, &var_258);
    *arg1 = var_308;
    int64_t var_300;
    arg1[1] = var_300;
    arg1[2] = var_2f8;
    int64_t var_2f0;
    arg1[3] = var_2f0;
    arg1[4] = var_2e8;
    int64_t var_2e0;
    arg1[5] = var_2e0;
    return arg1;
}

int64_t* sub_140036a40(int64_t* arg1, int64_t arg2, char* arg3, int64_t arg4)
{
    int64_t var_338 = arg2;
    char* var_330 = arg3;
    int64_t var_328 = arg4;
    int64_t var_2d0 = arg2;
    char* var_2c8 = arg3;
    int64_t var_2c0 = arg4;
    int32_t var_30c;
    
    if (arg4 != 0xc)
        var_30c = 0;
    else
    {
        char* var_78_1 = arg3;
        int64_t var_70_1 = arg4;
        int64_t var_68_1 = 0;
        int64_t var_60_1 = 4;
        int64_t var_48_1 = 0;
        int64_t var_40_1 = 4;
        char* var_38_1 = arg3;
        int64_t var_30_1 = arg4;
        int64_t var_28_1 = 4;
        int64_t var_20_1 = 0;
        int64_t var_58_1 = 1;
        int64_t var_18_1 = 4;
        
        if (4 > arg4)
        {
            sub_14005cb50(4, arg4);
            /* no return */
        }
        
        char* var_10_1 = arg3;
        char* var_8_1 = arg3;
        var_30c = sub_14000f2f0(arg3, 4);
    }
    
    if (arg4 < 8)
    {
        sub_14005cd80();
        /* no return */
    }
    
    if (arg4 < 4)
    {
        sub_14005cd80();
        /* no return */
    }
    
    char* var_f0 = arg3;
    int64_t var_e8 = arg4;
    int64_t var_e0 = (arg4 - 8);
    int64_t var_d8 = (arg4 - 4);
    int64_t var_c0 = (arg4 - 8);
    int64_t var_b8 = (arg4 - 4);
    char* var_b0 = arg3;
    int64_t var_a8 = arg4;
    int64_t var_a0 = (arg4 - 4);
    int64_t var_98 = (arg4 - 8);
    
    if ((arg4 - 4) < (arg4 - 8))
    {
        sub_14005cbc0((arg4 - 8), (arg4 - 4));
        /* no return */
    }
    
    int64_t rdx_3 = ((arg4 - 4) - (arg4 - 8));
    int64_t var_d0 = 1;
    int64_t var_90 = rdx_3;
    
    if ((arg4 - 4) > arg4)
    {
        sub_14005cb50((arg4 - 4), arg4);
        /* no return */
    }
    
    char* var_88 = arg3;
    void* rcx_12 = &arg3[(arg4 - 8)];
    void* var_80 = rcx_12;
    int32_t rax_8 = sub_14000f2f0(rcx_12, rdx_3);
    
    if (arg4 < 4)
    {
        sub_14005cd80();
        /* no return */
    }
    
    char* var_108 = arg3;
    int64_t var_100 = arg4;
    int64_t var_f8 = (arg4 - 4);
    char* rax_10;
    int64_t rdx_9;
    rax_10 = sub_14000c2f0((arg4 - 4), arg3, arg4);
    int32_t var_318 = var_30c;
    int32_t var_310 = sub_14000f2f0(rax_10, rdx_9);
    int64_t* rax_12 = sub_14000c890(arg2, 0x10);
    int64_t* var_1b8 = rax_12;
    int64_t var_1b0 = 0x10;
    int64_t* var_168 = rax_12;
    int64_t var_160 = 0x10;
    int64_t var_1a8 = 0x10;
    int64_t* var_158 = &var_1a8;
    void* const var_150 = &data_14005fae0;
    
    if (var_1a8 != 0x10)
    {
        char var_199 = 0;
        int64_t var_198 = 0;
        int64_t rcx_19;
        rcx_19 = var_199;
        sub_14000e930(rcx_19, &var_1a8, &data_14005fae0, &var_198, &data_14005fb58);
        /* no return */
    }
    
    int64_t* var_128 = rax_12;
    int64_t var_120 = 0x10;
    int128_t var_148;
    sub_14000e070(&var_148, rax_12);
    int128_t zmm0 = var_148;
    int128_t var_2a8 = zmm0;
    int64_t* rax_13;
    int64_t rdx_13;
    rax_13 = sub_14000c980(arg2, 0x10);
    int64_t* var_248 = rax_13;
    int64_t var_240 = rdx_13;
    int64_t* var_1f8 = rax_13;
    int64_t var_1f0 = rdx_13;
    int64_t var_238 = rdx_13;
    int64_t* var_1e8 = &var_238;
    void* const var_1e0 = &data_14005fae0;
    
    if (var_238 != 0x10)
    {
        char var_229 = 0;
        int64_t var_228 = 0;
        sub_14000e930(var_229, &var_238, &data_14005fae0, &var_228, &data_14005fb58);
        /* no return */
    }
    
    int64_t* var_118 = rax_13;
    int64_t var_110 = rdx_13;
    int128_t var_1d8;
    sub_14000e070(&var_1d8, rax_13);
    int128_t zmm1 = var_1d8;
    int128_t var_288 = zmm1;
    int128_t var_278 = zmm0;
    int64_t var_308;
    sub_14000eb20(&var_308, &var_278);
    int128_t var_268 = zmm1;
    int64_t var_2f8;
    sub_14000eb20(&var_2f8, &var_268);
    int64_t var_258 = 0;
    int64_t var_250 = rax_8;
    int64_t var_2e8;
    sub_14000eb00(&var_2e8, &var_258);
    *arg1 = var_308;
    int64_t var_300;
    arg1[1] = var_300;
    arg1[2] = var_2f8;
    int64_t var_2f0;
    arg1[3] = var_2f0;
    arg1[4] = var_2e8;
    int64_t var_2e0;
    arg1[5] = var_2e0;
    return arg1;
}

int64_t sub_140037100(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_70 = arg5;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg2;
    int64_t var_30 = arg1;
    
    if (arg2 < arg1)
    {
        sub_14005cbc0(arg1, arg2);
        /* no return */
    }
    
    int64_t rdx_1 = (arg2 - arg1);
    int64_t var_68 = 1;
    int64_t var_98 = rdx_1;
    int64_t var_28 = rdx_1;
    
    if (arg2 > arg4)
    {
        sub_14005cb50(arg2, arg4);
        /* no return */
    }
    
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_10 = arg3;
    int64_t result = (arg3 + arg1);
    int64_t result_1 = result;
    return result;
}

int64_t sub_140037200(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    return (arg2 << 2);
}

bool sub_140037220(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    int64_t rcx = *arg1;
    int64_t rdx = *arg2;
    bool rax = (rcx > rdx & 1);
    rcx = rcx < rdx;
    rcx &= 1;
    return (rax - rcx);
}

int64_t sub_140037250(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    char var_11 = 1;
    
    if ((sub_140037590(&var_30, &var_28) + 1) >= 2)
        return var_28;
    
    char var_11_1 = 0;
    return var_30;
}

int64_t sub_1400372c0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400372e0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x47);
}

int64_t* sub_140037300(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = 1;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[2] = arg3;
    arg1[3] = 1;
    return arg1;
}

uint64_t sub_140037350(void* arg1, int64_t* arg2)
{
    void* var_68 = arg1;
    int64_t* var_60 = arg2;
    int64_t* rax = *arg2;
    int64_t rax_1 = arg2[1];
    int64_t rcx = arg2[3];
    int64_t var_80;
    int64_t var_78;
    
    if (rax_1 != 0)
    {
        if ((rax_1 == 1 && rcx == 0))
        {
            int64_t* var_58_1 = rax;
            int64_t rax_7 = rax[1];
            var_80 = *rax;
            var_78 = rax_7;
        }
        else
        {
            var_80 = 0;
            var_78 = 0;
        }
    }
    else if (rcx == 0)
    {
        var_80 = 1;
        var_78 = 0;
    }
    else
    {
        var_80 = 0;
        var_78 = 0;
    }
    int64_t* var_50 = &var_80;
    int64_t rax_4 = 1;
    
    if (var_80 == 0)
        rax_4 = 0;
    
    if (rax_4 == 1)
        char var_69 = 1;
    else
        char var_69_1 = 0;
    
    char var_41 = 0;
    int64_t rcx_3 = *(arg1 + 0x20);
    int64_t rax_11 = *(arg1 + 0x28);
    void var_30;
    memcpy(&var_30, arg2, 0x30);
    return ((sub_140056fc0(rcx_3, rax_11, &var_30) & 1) & 1);
}

int64_t sub_140037520(int32_t arg1)
{
    int32_t var_8 = arg1;
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    if (rax == 0)
    {
        sub_140037560();
        /* no return */
    }
    
    int32_t var_4 = arg1;
    return arg1;
}

void sub_140037560() __noreturn
{
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140037580(int32_t arg1) __pure
{
    int64_t rax;
    int64_t var_8 = rax;
    *var_8[4] = arg1;
    return arg1;
}

int64_t sub_140037590(int64_t* arg1, int64_t* arg2)
{
    return sub_140037220(arg1, arg2);
}

int64_t* sub_1400375c0(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_58 = arg5;
    char const (** const var_50)[0x1c] = &data_14005ff10;
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int64_t var_8 = arg4;
    
    if (arg4 != 0)
    {
        *arg1 = arg2;
        arg1[1] = arg3;
        arg1[2] = arg4;
        return arg1;
    }
    
    char const (** const var_48)[0x1c] = &data_14005ff10;
    int64_t var_40 = 1;
    int64_t var_38 = 8;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    sub_14005c700(&var_48);
    /* no return */
}

int64_t* sub_1400376a0(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    return arg1;
}

int64_t sub_1400376c0(int64_t* arg1)
{
    int64_t* var_c0 = arg1;
    int64_t rcx = *arg1;
    int64_t rax_1 = arg1[1];
    int64_t var_b8 = rcx;
    int64_t var_b0 = rax_1;
    int64_t var_a8 = rcx;
    int64_t var_a0 = rax_1;
    int64_t result;
    int64_t var_c8;
    
    if (rax_1 != 0)
    {
        int64_t rdx_1 = *arg1;
        int64_t rcx_1 = arg1[1];
        int64_t var_98_1 = rdx_1;
        int64_t var_90_1 = rcx_1;
        int64_t var_88_1 = rdx_1;
        int64_t var_80_1 = rcx_1;
        int64_t var_78_1 = rcx_1;
        int64_t rdx_2 = arg1[2];
        int64_t var_70_1 = rdx_2;
        int64_t rax_3 = sub_140037250(rcx_1, rdx_2);
        int64_t var_68_1 = rax_3;
        int64_t result_1 = *arg1;
        int64_t rcx_3 = arg1[1];
        int64_t result_2 = result_1;
        int64_t var_58_1 = rcx_3;
        int64_t result_3 = result_1;
        int64_t var_48_1 = rcx_3;
        int64_t var_40_1 = rcx_3;
        
        if (rax_3 > rcx_3)
        {
            sub_14005c7a0("assertion failed: mid <= self.le…");
            /* no return */
        }
        
        int64_t result_4 = result_1;
        int64_t r9_2 = (result_1 + rax_3);
        int64_t var_30_1 = r9_2;
        int64_t result_5 = result_1;
        int64_t var_20_1 = rax_3;
        int64_t r8_3 = (rcx_3 - rax_3);
        int64_t var_18_1 = r8_3;
        int64_t var_10_1 = r9_2;
        int64_t var_8_1 = r8_3;
        *arg1 = r9_2;
        arg1[1] = r8_3;
        result = result_1;
        var_c8 = rax_3;
    }
    else
    {
        result = 0;
        var_c8 = 0;
    }
    return result;
}

uint64_t sub_140037840(int32_t arg1)
{
    int32_t var_4 = arg1;
    int32_t var_c;
    
    if (sub_140037580(arg1) < 0x80000000)
    {
        int32_t var_8 = sub_140037580(arg1);
        var_c = 1;
    }
    else
        var_c = 0;
    
    return var_c;
}

uint64_t sub_140037890(int32_t* arg1, int64_t* arg2)
{
    int32_t* var_80 = arg1;
    int64_t* var_78 = arg2;
    int32_t rax;
    int32_t rdx;
    rax = sub_140037840(*arg1);
    char var_1d5;
    
    if (rax != 1)
    {
        void* rax_5;
        int64_t rdx_2;
        rax_5 = sub_140037b90(*arg1);
        int64_t rax_6 = 1;
        
        if (rax_5 == 0)
            rax_6 = 0;
        
        if (rax_6 == 1)
        {
            void* var_60_1 = rax_5;
            int64_t var_58_1 = rdx_2;
            var_1d5 = (sub_1400577c0(arg2) & 1);
        }
        else
        {
            int32_t var_84 = sub_140037580(*arg1);
            int32_t* var_40_1 = &var_84;
            uint64_t (* var_38_1)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
            int32_t* var_30_1 = &var_84;
            uint64_t (* var_90_1)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
            int32_t* var_a8 = &var_84;
            uint64_t (* var_a0_1)(int32_t* arg1, int64_t* arg2) = var_90_1;
            void var_d8;
            sub_140037300(&var_d8, &data_14005ffe0, &var_a8);
            var_1d5 = (sub_140037350(arg2, &var_d8) & 1);
        }
    }
    else
    {
        int32_t var_1cc = rdx;
        void var_1c8;
        memset(&var_1c8, 0, 0x80);
        int64_t rdx_1 = sub_140037d20();
        
        if (0 == 0)
        {
            int32_t* var_18_1 = &var_1cc;
            uint64_t (* var_10_1)(int32_t* arg1) = sub_14005a040;
            int32_t* var_8_1 = &var_1cc;
            uint64_t (* var_f0_1)(int32_t* arg1) = sub_14005a040;
            int32_t* var_108 = &var_1cc;
            uint64_t (* var_100_1)(int32_t* arg1) = var_f0_1;
            void var_138;
            sub_140037300(&var_138, &data_14005ffc0, &var_108);
            var_1d5 = (sub_140037350(arg2, &var_138) & 1);
        }
        else
        {
            int64_t var_70_1 = 0;
            int64_t var_68_1 = rdx_1;
            var_1d5 = (sub_140057ed0(nullptr, rdx_1, arg2) & 1);
        }
    }
    
    return (var_1d5 & 1);
}

int64_t sub_140037b80(int32_t arg1) __pure
{
    int64_t rax;
    int64_t var_8 = rax;
    *var_8[4] = arg1;
    return arg1;
}

char const* const sub_140037b90(int32_t arg1)
{
    int32_t var_4 = arg1;
    int64_t var_10;
    
    if ((arg1 - 0x80000000) <= 0xe)
        switch (arg1)
        {
            case 0x80000000:
            {
                var_10 = 0x27;
                return "getrandom: this target is not su…";
                break;
            }
            case 0x80000001:
            {
                var_10 = 0x26;
                return "errno: did not return a positive…";
                break;
            }
            case 0x80000002:
            {
                var_10 = 0x14;
                return "unexpected situationSecRandomCop…";
                break;
            }
            case 0x80000003:
            {
                var_10 = 0x32;
                return "SecRandomCopyBytes: iOS Security…";
                break;
            }
            case 0x80000004:
            {
                var_10 = 0x2d;
                return "RtlGenRandom: Windows system fun…";
                break;
            }
            case 0x80000005:
            {
                var_10 = 0x2f;
                return "RDRAND: failed multiple times: C…";
                break;
            }
            case 0x80000006:
            {
                var_10 = 0x21;
                return "RDRAND: instruction not supporte…";
                break;
            }
            case 0x80000007:
            {
                var_10 = 0x1d;
                return "Web Crypto API is unavailableCal…";
                break;
            }
            case 0x80000008:
            {
                var_10 = 0x2d;
                return "Calling Web API crypto.getRandom…";
                break;
            }
            case 0x8000000b:
            {
                var_10 = 0x31;
                return "randSecure: VxWorks RNG module i…";
                break;
            }
            case 0x8000000c:
            {
                var_10 = 0x2d;
                return "Node.js crypto CommonJS module i…";
                break;
            }
            case 0x8000000d:
            {
                var_10 = 0x30;
                return "Calling Node.js API crypto.rando…";
                break;
            }
            case 0x8000000e:
            {
                var_10 = 0x65;
                return "Node.js ES modules are not direc…";
                break;
            }
        }
    return nullptr;
}

int64_t sub_140037d20() __pure
{
    int32_t rcx;
    int32_t var_14 = rcx;
    int64_t rdx;
    int64_t var_10 = rdx;
    int64_t r8;
    int64_t var_8 = r8;
    return 0;
}

uint64_t sub_140037d50(int64_t arg1, int64_t arg2)
{
    int64_t var_60 = arg1;
    int64_t var_58 = arg2;
    void var_a0;
    sub_1400375c0(&var_a0, arg1, arg2, 0xffffffff, &data_1400602a8);
    int64_t var_b8;
    sub_1400376a0(&var_b8, &var_a0);
    int64_t var_88 = var_b8;
    int64_t var_b0;
    int64_t var_80 = var_b0;
    int64_t var_a8;
    int64_t var_78 = var_a8;
    int32_t var_bc;
    
    while (true)
    {
        uint8_t* pbBuffer;
        int64_t rdx_2;
        pbBuffer = sub_1400376c0(&var_88);
        int64_t rax_3 = 1;
        
        if (pbBuffer == 0)
            rax_3 = 0;
        
        if (rax_3 == 0)
        {
            var_bc = 0;
            break;
        }
        
        uint8_t* pbBuffer_1 = pbBuffer;
        int64_t var_48_1 = rdx_2;
        int64_t var_30_1 = 0;
        int64_t var_28_1 = 0;
        uint8_t* pbBuffer_3 = pbBuffer;
        int64_t var_8_1 = rdx_2;
        NTSTATUS rax_5 = BCryptGenRandom(nullptr, pbBuffer, rdx_2, BCRYPT_USE_SYSTEM_PREFERRED_RNG);
        NTSTATUS var_40_1 = rax_5;
        
        if ((rax_5 >> 0x1e) == 3)
        {
            uint8_t* pbBuffer_2 = pbBuffer;
            int64_t var_18_1 = rdx_2;
            char rax_9 = SystemFunction036();
            char var_39_1 = rax_9;
            
            if (rax_9 == 0)
            {
                int32_t rcx_5 = (rax_5 ^ 0x80000000);
                int32_t var_38_1 = rcx_5;
                int32_t rax_10 = sub_140037520(rcx_5);
                int32_t var_34_1 = rax_10;
                var_bc = sub_140037b80(rax_10);
                break;
            }
        }
    }
    
    return var_bc;
}

int64_t* sub_140037ef0(int64_t* arg1, int64_t arg2)
{
    int64_t rax;
    int64_t var_8_1 = rax;
    int64_t var_8 = arg2;
    *arg1 = arg2;
    arg1[1] = 1;
    arg1[2] = 8;
    __builtin_memset(&arg1[3], 0, 0x18);
    return arg1;
}

int64_t* sub_140037f30(int64_t* arg1, void* arg2)
{
    int64_t var_a0;
    __builtin_memcpy(&var_a0, "\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x18);
    int64_t var_88 = 0;
    int64_t var_80 = 1;
    int64_t var_78 = -1;
    int64_t var_68 = 1;
    void* var_38 = arg2;
    void* var_30 = (arg2 + 8);
    int64_t var_58 = *(arg2 + 0x18);
    int64_t* var_28 = &var_58;
    int64_t rax_1 = *(arg2 + 8);
    int64_t var_20 = rax_1;
    
    if (rax_1 == var_58)
        *arg1 = -0x8000000000000000;
    else
    {
        int64_t* rax_2 = *(arg2 + 8);
        int64_t* var_18_1 = rax_2;
        *(arg2 + 8) = &rax_2[3];
        int64_t* var_10_1 = rax_2;
        int64_t* var_8_1 = rax_2;
        int64_t rdx_3 = rax_2[1];
        int64_t rcx_5 = rax_2[2];
        *arg1 = *rax_2;
        arg1[1] = rdx_3;
        arg1[2] = rcx_5;
    }
    
    return arg1;
}

uint64_t* sub_140038060(uint64_t* arg1, void* arg2)
{
    void* var_30 = arg2;
    int64_t rcx = *(arg2 + 0x18);
    int64_t var_28 = rcx;
    int64_t rax_1 = *(arg2 + 8);
    int64_t var_20 = rax_1;
    int64_t var_18 = rcx;
    int64_t var_10 = rax_1;
    sub_14003e000(rcx, rax_1);
    int64_t var_8 = 0x18;
    uint64_t temp0 = (COMBINE(0, (rcx - rax_1)) / 0x18);
    *arg1 = temp0;
    arg1[1] = 1;
    arg1[2] = temp0;
    return arg1;
}

int64_t* sub_140038130(int64_t* arg1, int64_t* arg2)
{
    int64_t r8_1 = arg2[1];
    int64_t r8_2 = arg2[2];
    int64_t rdx = arg2[3];
    *arg1 = *arg2;
    arg1[1] = r8_1;
    arg1[2] = r8_2;
    arg1[3] = rdx;
    return arg1;
}

int64_t sub_140038180(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_70 = arg5;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg2;
    int64_t var_30 = arg1;
    
    if (arg2 < arg1)
    {
        sub_14005cbc0(arg1, arg2);
        /* no return */
    }
    
    int64_t rdx_1 = (arg2 - arg1);
    int64_t var_68 = 1;
    int64_t var_98 = rdx_1;
    int64_t var_28 = rdx_1;
    
    if (arg2 > arg4)
    {
        sub_14005cb50(arg2, arg4);
        /* no return */
    }
    
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_10 = arg3;
    int64_t result = (arg3 + arg1);
    int64_t result_1 = result;
    return result;
}

void* sub_140038280(void* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_20 = arg2;
    int64_t var_c8;
    sub_14003bd50(&var_c8, arg2);
    int64_t rax;
    rax = var_c8 == 0;
    
    if ((rax & 1) != 0)
        *(arg1 + 8) = 0;
    else
    {
        int64_t rcx_1 = var_c8;
        int64_t rcx_17 = arg2[3];
        int64_t var_18_1 = rcx_17;
        int64_t rax_3 = arg2[3];
        bool c_1 = rax_3 >= -1;
        int64_t rax_4;
        rax_4 = c_1;
        
        if (c_1)
        {
            sub_14005cd40();
            /* no return */
        }
        
        arg2[3] = (rax_3 + 1);
        int64_t var_88 = rcx_17;
        int64_t var_80_1 = rcx_1;
        int64_t var_c0;
        int64_t var_78_1 = var_c0;
        int64_t var_b8;
        int64_t var_70_1 = var_b8;
        int64_t var_b0;
        int64_t var_68_1 = var_b0;
        memcpy(arg1, &var_88, 0x28);
    }
    
    return arg1;
}

int64_t sub_140038440() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140038460(int64_t* arg1)
{
    int64_t* var_f8 = arg1;
    int64_t var_f0 = 8;
    int64_t rax_1 = sub_140041ee0(sub_140042120(arg1, 8));
    int64_t rax_2 = 1;
    
    if (rax_1 == 0)
        rax_2 = 0;
    
    int64_t var_108;
    
    if (rax_2 != 0)
    {
        int64_t var_d8_1 = rax_1;
        var_108 = sub_140038880();
        return 1;
    }
    
    int64_t* var_d0_1 = arg1;
    int64_t var_c8_1 = 8;
    int64_t rdx_1 = *arg1;
    int64_t r8_1 = arg1[1];
    int64_t var_c0_1 = rdx_1;
    int64_t var_b8_1 = r8_1;
    int64_t var_a0_1 = rdx_1;
    int64_t var_98_1 = r8_1;
    int64_t var_90_1 = 8;
    int64_t rax_4;
    int64_t rdx_2;
    rax_4 = sub_140040a50(8, rdx_1, r8_1);
    *arg1 = rax_4;
    arg1[1] = rdx_2;
    int64_t var_88_1 = rdx_1;
    int64_t var_80_1 = r8_1;
    int64_t var_78_1 = 8;
    int64_t var_70_1 = 8;
    int64_t var_68_1 = rdx_1;
    int64_t var_60_1 = r8_1;
    int64_t var_48_1 = 0;
    int64_t var_40_1 = 8;
    int64_t var_38_1 = rdx_1;
    int64_t var_30_1 = r8_1;
    int64_t var_28_1 = 8;
    int64_t var_20_1 = 0;
    int64_t var_58_1 = 1;
    int64_t var_18_1 = 8;
    
    if (8 > r8_1)
    {
        sub_14005cb50(8, r8_1);
        /* no return */
    }
    
    int64_t var_10_1 = rdx_1;
    int64_t var_8_1 = rdx_1;
    int64_t var_e8_1 = rdx_1;
    int64_t var_e0_1 = 8;
    int64_t var_b0_1 = rdx_1;
    int64_t var_a8_1 = 8;
    var_108 = rdx_1;
    return 0;
}

int64_t sub_140038670(int64_t* arg1)
{
    int64_t* var_f8 = arg1;
    int64_t var_f0 = 4;
    int64_t rax_1 = sub_140041ee0(sub_140042120(arg1, 4));
    int64_t rax_2 = 1;
    
    if (rax_1 == 0)
        rax_2 = 0;
    
    int64_t var_108;
    
    if (rax_2 != 0)
    {
        int64_t var_d8_1 = rax_1;
        var_108 = sub_140038920();
        return 1;
    }
    
    int64_t* var_d0_1 = arg1;
    int64_t var_c8_1 = 4;
    int64_t rdx_1 = *arg1;
    int64_t r8_1 = arg1[1];
    int64_t var_c0_1 = rdx_1;
    int64_t var_b8_1 = r8_1;
    int64_t var_a0_1 = rdx_1;
    int64_t var_98_1 = r8_1;
    int64_t var_90_1 = 4;
    int64_t rax_4;
    int64_t rdx_2;
    rax_4 = sub_140040a50(4, rdx_1, r8_1);
    *arg1 = rax_4;
    arg1[1] = rdx_2;
    int64_t var_88_1 = rdx_1;
    int64_t var_80_1 = r8_1;
    int64_t var_78_1 = 4;
    int64_t var_70_1 = 4;
    int64_t var_68_1 = rdx_1;
    int64_t var_60_1 = r8_1;
    int64_t var_48_1 = 0;
    int64_t var_40_1 = 4;
    int64_t var_38_1 = rdx_1;
    int64_t var_30_1 = r8_1;
    int64_t var_28_1 = 4;
    int64_t var_20_1 = 0;
    int64_t var_58_1 = 1;
    int64_t var_18_1 = 4;
    
    if (4 > r8_1)
    {
        sub_14005cb50(4, r8_1);
        /* no return */
    }
    
    int64_t var_10_1 = rdx_1;
    int64_t var_8_1 = rdx_1;
    int64_t var_e8_1 = rdx_1;
    int64_t var_e0_1 = 4;
    int64_t var_b0_1 = rdx_1;
    int64_t var_a8_1 = 4;
    var_108 = rdx_1;
    return 0;
}

int64_t sub_140038880() __pure
{
    int64_t rcx;
    int64_t var_10 = rcx;
    int64_t var_8 = rcx;
    int64_t var_18 = rcx;
    return 1;
}

int64_t* sub_1400388c0(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg2;
    arg1[1] = arg2;
    *arg1 = -0x8000000000000000;
    return arg1;
}

int64_t* sub_1400388f0(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg2;
    arg1[1] = arg2;
    *arg1 = -0x8000000000000000;
    return arg1;
}

int64_t sub_140038920() __pure
{
    int64_t rcx;
    int64_t var_10 = rcx;
    int64_t var_8 = rcx;
    int64_t var_18 = rcx;
    return 1;
}

int64_t* sub_140038960(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg2;
    arg1[1] = arg2;
    *arg1 = 0;
    return arg1;
}

int64_t sub_140038990(int64_t arg1) __pure
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    return arg1;
}

int64_t sub_1400389c0(int64_t* arg1)
{
    int64_t* var_30 = arg1;
    int64_t rax = *arg1;
    int64_t var_20 = (rax + 0x20);
    int64_t var_18 = (rax + 0x20);
    int64_t rax_3 = **arg1;
    int64_t var_10 = rax_3;
    int64_t rax_5 = *(*arg1 + 0x10);
    int64_t var_8 = rax_5;
    int64_t var_40 = rax_3;
    int64_t var_48 = rax_5;
    return sub_140039c20(&var_48);
}

char* sub_140038a30(char* arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_e8 = 0;
    int32_t var_dc = 0x20;
    char var_d5 = 3;
    int32_t var_d4 = 0xc;
    int64_t var_d0 = 2;
    int64_t var_c0 = 0;
    int64_t var_b8;
    __builtin_memcpy(&var_b8, "\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x20);
    int64_t var_98 = 0;
    int64_t var_90 = 1;
    int64_t var_88 = -1;
    int64_t var_70 = arg2;
    char var_71 = 1;
    int64_t var_68 = arg2;
    int64_t var_60 = arg2;
    int64_t var_80 = arg2;
    uint64_t rax_1 = (var_80 & 3);
    
    if (rax_1 > 3)
    {
        sub_14005c7a0("internal error: entered unreacha…");
        /* no return */
    }
    
    switch (rax_1)
    {
        case 0:
        {
            int64_t var_40_1 = arg2;
            *(arg1 + 8) = arg2;
            *arg1 = 2;
            break;
        }
        case 1:
        {
            int64_t var_38_1 = arg2;
            int64_t var_28_1 = (arg2 - 1);
            int64_t var_20_1 = (arg2 - 1);
            int64_t var_18_1 = (arg2 - 1);
            char var_71_1 = 0;
            *(arg1 + 8) = sub_14003ae80((arg2 - 1));
            *arg1 = 3;
            break;
        }
        case 2:
        {
            int32_t rcx_1 = (var_80 >> 0x20);
            int32_t var_58_1 = rcx_1;
            *(arg1 + 4) = rcx_1;
            *arg1 = 0;
            break;
        }
        case 3:
        {
            int32_t rcx_2 = *var_80[4];
            int32_t var_54_1 = rcx_2;
            char rax_7 = sub_140038c20(rcx_2);
            int64_t* var_50_1 = &var_80;
            
            if ((rax_7 == 0x29 & 1) != 0)
            {
                sub_140039df0();
                /* no return */
            }
            
            rcx_2 = rax_7;
            char var_41_1 = rcx_2;
            arg1[1] = rcx_2;
            *arg1 = 1;
            break;
        }
    }
    
    return arg1;
}

int64_t sub_140038bf0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0xc7);
}

int32_t* sub_140038c20(int32_t arg1) __pure
{
    int32_t var_150 = arg1;
    int32_t* var_148 = &var_150;
    char var_149;
    
    if (var_150 != 0)
    {
        int32_t* var_140_1 = &var_150;
        
        if (var_150 == 1)
            var_149 = 1;
        else
        {
            int32_t* var_138_1 = &var_150;
            
            if (var_150 != 2)
            {
                int32_t* var_130_1 = &var_150;
                
                if (var_150 != 3)
                {
                    int32_t* var_128_1 = &var_150;
                    
                    if (var_150 != 4)
                    {
                        int32_t* var_120_1 = &var_150;
                        
                        if (var_150 != 5)
                        {
                            int32_t* var_118_1 = &var_150;
                            
                            if (var_150 != 6)
                            {
                                int32_t* var_110_1 = &var_150;
                                
                                if (var_150 != 7)
                                {
                                    int32_t* var_108_1 = &var_150;
                                    
                                    if (var_150 != 8)
                                    {
                                        int32_t* var_100_1 = &var_150;
                                        
                                        if (var_150 != 9)
                                        {
                                            int32_t* var_f8_1 = &var_150;
                                            
                                            if (var_150 != 0xa)
                                            {
                                                int32_t* var_f0_1 = &var_150;
                                                
                                                if (var_150 != 0xb)
                                                {
                                                    int32_t* var_e8_1 = &var_150;
                                                    
                                                    if (var_150 != 0xc)
                                                    {
                                                        int32_t* var_e0_1 = &var_150;
                                                        
                                                        if (var_150 != 0xd)
                                                        {
                                                            int32_t* var_d8_1 = &var_150;
                                                            
                                                            if (var_150 != 0xe)
                                                            {
                                                                int32_t* var_d0_1 = &var_150;
                                                                
                                                                if (var_150 != 0xf)
                                                                {
                                                                    int32_t* var_c8_1 = &var_150;
                                                                    
                                                                    if (var_150 != 0x10)
                                                                    {
                                                                        int32_t* var_c0_1 = &var_150;
                                                                        
                                                                        if (var_150 != 0x11)
                                                                        {
                                                                            int32_t* var_b8_1 = &var_150;
                                                                            
                                                                            if (var_150 != 0x12)
                                                                            {
                                                                                int32_t* var_b0_1 = &var_150;
                                                                                
                                                                                if (var_150 != 0x13)
                                                                                {
                                                                                    int32_t* var_a8_1 = &var_150;
                                                                                    
                                                                                    if (var_150 != 0x14)
                                                                                    {
                                                                                        int32_t* var_a0_1 = &var_150;
                                                                                        
                                                                                        if (var_150 != 0x15)
                                                                                        {
                                                                                            int32_t* var_98_1 = &var_150;
                                                                                            
                                                                                            if (var_150 != 0x16)
                                                                                            {
                                                                                                int32_t* var_90_1 = &var_150;
                                                                                                
                                                                                                if (var_150 != 0x17)
                                                                                                {
                                                                                                    int32_t* var_88_1 = &var_150;
                                                                                                    
                                                                                                    if (var_150 != 0x18)
                                                                                                    {
                                                                                                        int32_t* var_80_1 = &var_150;
                                                                                                        
                                                                                                        if (var_150 != 0x19)
                                                                                                        {
                                                                                                            int32_t* var_78_1 = &var_150;
                                                                                                            
                                                                                                            if (var_150 != 0x1a)
                                                                                                            {
                                                                                                                int32_t* var_70_1 = &var_150;
                                                                                                                
                                                                                                                if (var_150 != 0x1b)
                                                                                                                {
                                                                                                                    int32_t* var_68_1 = &var_150;
                                                                                                                    
                                                                                                                    if (var_150 != 0x1c)
                                                                                                                    {
                                                                                                                        int32_t* var_60_1 = &var_150;
                                                                                                                        
                                                                                                                        if (var_150 != 0x1d)
                                                                                                                        {
                                                                                                                            int32_t* var_58_1 = &var_150;
                                                                                                                            
                                                                                                                            if (var_150 != 0x1e)
                                                                                                                            {
                                                                                                                                int32_t* var_50_1 = &var_150;
                                                                                                                                
                                                                                                                                if (var_150 != 0x1f)
                                                                                                                                {
                                                                                                                                    int32_t* var_48_1 = &var_150;
                                                                                                                                    
                                                                                                                                    if (var_150 != 0x20)
                                                                                                                                    {
                                                                                                                                        int32_t* var_40_1 = &var_150;
                                                                                                                                        
                                                                                                                                        if (var_150 != 0x21)
                                                                                                                                        {
                                                                                                                                            int32_t* var_38_1 = &var_150;
                                                                                                                                            
                                                                                                                                            if (var_150 != 0x22)
                                                                                                                                            {
                                                                                                                                                int32_t* var_30_1 = &var_150;
                                                                                                                                                
                                                                                                                                                if (var_150 != 0x23)
                                                                                                                                                {
                                                                                                                                                    int32_t* var_28_1 = &var_150;
                                                                                                                                                    
                                                                                                                                                    if (var_150 != 0x27)
                                                                                                                                                    {
                                                                                                                                                        int32_t* var_20_1 = &var_150;
                                                                                                                                                        
                                                                                                                                                        if (var_150 != 0x25)
                                                                                                                                                        {
                                                                                                                                                            int32_t* var_18_1 = &var_150;
                                                                                                                                                            
                                                                                                                                                            if (var_150 != 0x24)
                                                                                                                                                            {
                                                                                                                                                                int32_t* var_10_1 = &var_150;
                                                                                                                                                                
                                                                                                                                                                if (var_150 != 0x26)
                                                                                                                                                                {
                                                                                                                                                                    int32_t* var_8_1 = &var_150;
                                                                                                                                                                    
                                                                                                                                                                    if (var_150 != 0x28)
                                                                                                                                                                        var_149 = 0x29;
                                                                                                                                                                    else
                                                                                                                                                                        var_149 = 0x28;
                                                                                                                                                                }
                                                                                                                                                                else
                                                                                                                                                                    var_149 = 0x26;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                                var_149 = 0x24;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                            var_149 = 0x25;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                        var_149 = 0x27;
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                    var_149 = 0x23;
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                                var_149 = 0x22;
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                            var_149 = 0x21;
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                        var_149 = 0x20;
                                                                                                                                }
                                                                                                                                else
                                                                                                                                    var_149 = 0x1f;
                                                                                                                            }
                                                                                                                            else
                                                                                                                                var_149 = 0x1e;
                                                                                                                        }
                                                                                                                        else
                                                                                                                            var_149 = 0x1d;
                                                                                                                    }
                                                                                                                    else
                                                                                                                        var_149 = 0x1c;
                                                                                                                }
                                                                                                                else
                                                                                                                    var_149 = 0x1b;
                                                                                                            }
                                                                                                            else
                                                                                                                var_149 = 0x1a;
                                                                                                        }
                                                                                                        else
                                                                                                            var_149 = 0x19;
                                                                                                    }
                                                                                                    else
                                                                                                        var_149 = 0x18;
                                                                                                }
                                                                                                else
                                                                                                    var_149 = 0x17;
                                                                                            }
                                                                                            else
                                                                                                var_149 = 0x16;
                                                                                        }
                                                                                        else
                                                                                            var_149 = 0x15;
                                                                                    }
                                                                                    else
                                                                                        var_149 = 0x14;
                                                                                }
                                                                                else
                                                                                    var_149 = 0x13;
                                                                            }
                                                                            else
                                                                                var_149 = 0x12;
                                                                        }
                                                                        else
                                                                            var_149 = 0x11;
                                                                    }
                                                                    else
                                                                        var_149 = 0x10;
                                                                }
                                                                else
                                                                    var_149 = 0xf;
                                                            }
                                                            else
                                                                var_149 = 0xe;
                                                        }
                                                        else
                                                            var_149 = 0xd;
                                                    }
                                                    else
                                                        var_149 = 0xc;
                                                }
                                                else
                                                    var_149 = 0xb;
                                            }
                                            else
                                                var_149 = 0xa;
                                        }
                                        else
                                            var_149 = 9;
                                    }
                                    else
                                        var_149 = 8;
                                }
                                else
                                    var_149 = 7;
                            }
                            else
                                var_149 = 6;
                        }
                        else
                            var_149 = 5;
                    }
                    else
                        var_149 = 4;
                }
                else
                    var_149 = 3;
            }
            else
                var_149 = 2;
        }
    }
    else
        var_149 = 0;
    
    int32_t* result;
    result = var_149;
    return result;
}

void* sub_140039060(char arg1, int128_t* arg2)
{
    char var_1 = arg1;
    return sub_140045b70(arg1, sub_14003e510(arg2), &data_1400611d8);
}

uint64_t sub_1400390a0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_14003de30(*arg1, arg2) & 1);
}

uint64_t sub_1400390c0(int64_t* arg1, void* arg2)
{
    int64_t* var_10 = arg1;
    void* var_8 = arg2;
    return (sub_14003ac30(*arg1, arg2) & 1);
}

uint64_t sub_1400390e0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_140057ed0(*arg1, arg1[1], arg2) & 1);
}

uint64_t sub_140039110(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_140059fa0(*arg1, arg2) & 1);
}

int64_t sub_140039130(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    sub_1400397e0(arg1, arg2);
    return (arg1 + arg2);
}

int64_t sub_140039170(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_1400605b0;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_1400605b0;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140039290(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_1400392b0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_10 = -2;
    char const (** const var_c8)[0x2b] = &data_1400605b0;
    char const (** const var_c0)[0x2b] = &data_1400605b0;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_b8)[0x2b] = &data_1400605b0;
            int64_t var_b0 = 1;
            int64_t var_98 = 0;
            int64_t var_a8 = 8;
            int64_t var_a0 = 0;
            sub_14005c700(&var_b8);
            /* no return */
        }
        
        if ((arg1 & (arg4 - 1)) == 0)
        {
            int64_t var_28_1 = arg2;
            int64_t var_20_1 = arg2;
            
            if (arg2 != 0)
            {
                int64_t rcx_10 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
                int64_t rax_19 = ((rcx_10 & 0x3333333333333333) + ((rcx_10 >> 2) & 0x3333333333333333));
                
                if (((((rax_19 + (rax_19 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
                {
                    char const (** const var_88)[0x2b] = &data_1400605b0;
                    int64_t var_80 = 1;
                    int64_t var_68 = 0;
                    int64_t var_78 = 8;
                    int64_t var_70 = 0;
                    sub_14005c700(&var_88);
                    /* no return */
                }
                
                if ((arg2 & (arg4 - 1)) == 0)
                {
                    char result = sub_14003a8c0(arg1, arg2, arg3, arg5);
                    
                    if ((result & 1) != 0)
                        return result;
                }
            }
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140039500(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140039520(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    char var_11 = 1;
    
    if ((sub_1400398a0(&var_30, &var_28) + 1) >= 2)
    {
        char var_11_1 = 0;
        return var_30;
    }
    
    return var_28;
}

int64_t sub_140039590() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_1400395b0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x47);
}

uint64_t sub_1400395d0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int64_t var_8 = arg4;
    return ((sub_140039d30(arg1, arg2, arg3, arg4) ^ 0xff) & 1);
}

int64_t* sub_140039600(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7)
{
    int64_t var_40 = arg2;
    int64_t var_38 = arg3;
    int64_t var_30 = arg4;
    int64_t var_28 = arg5;
    int64_t var_20 = arg6;
    int64_t var_18 = arg7;
    *arg1 = arg2;
    arg1[1] = arg3;
    arg1[4] = arg6;
    arg1[5] = arg7;
    arg1[2] = arg4;
    arg1[3] = arg5;
    return arg1;
}

int64_t* sub_140039680(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = 5;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[2] = arg3;
    arg1[3] = 5;
    return arg1;
}

int64_t* sub_1400396d0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = 2;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[2] = arg3;
    arg1[3] = 2;
    return arg1;
}

uint64_t sub_140039720(char* arg1)
{
    char* var_8 = arg1;
    char* rax;
    rax = 0x41;
    char var_9;
    
    if ((0x41 <= *arg1 && *arg1 <= 0x5a))
        var_9 = 1;
    else
    {
        rax = 0x61;
        
        if (0x61 <= *arg1)
        {
            rax = *arg1 <= 0x7a;
            rax &= 1;
            var_9 = rax;
        }
        else
            var_9 = 0;
    }
    
    rax = var_9;
    rax &= 1;
    return rax;
}

uint64_t sub_140039780(int32_t arg1)
{
    int32_t var_c = arg1;
    int32_t temp0 = _bswap(arg1);
    int32_t var_4 = temp0;
    return temp0;
}

uint64_t sub_1400397b0(int32_t arg1)
{
    int32_t var_8 = arg1;
    return _bswap(arg1);
}

bool sub_1400397e0(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    bool result = (arg1 + arg2) < arg1;
    int64_t var_10 = (arg1 + arg2);
    int64_t rcx;
    rcx = result;
    rcx &= 1;
    char var_1 = rcx;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140039820(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t result;
    int64_t rdx;
    rdx = HIGHQ((arg1 * arg2));
    result = LOWQ((arg1 * arg2));
    int64_t result_1 = result;
    result = ((arg1 * arg2) >> 0x40) != {0};
    int64_t result_2 = result_1;
    result_1 = result;
    result_1 &= 1;
    char var_1 = result_1;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t* sub_140039870(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    sub_14003a9e0(arg1, arg2, arg3);
    return arg1;
}

int64_t sub_1400398a0(int64_t* arg1, int64_t* arg2)
{
    return sub_14003dd50(arg1, arg2);
}

int64_t sub_1400398d0(char* arg1)
{
    char* var_8 = arg1;
    char rax = *arg1;
    
    if (rax < 3)
        return (rax - 3);
    
    return sub_140039b60(&arg1[8]);
}

void sub_140039900(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    
    if (*arg1 != 0)
        sub_1400399f0(&arg1[1]);
}

void sub_140039930(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    
    if (*arg1 != 0)
        sub_1400399f0(&arg1[1]);
}

int64_t sub_140039960(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    int64_t rax_2 = *arg1[1];
    
    if (rax_2 != 0)
        rax_2(*arg1);
    
    return sub_14003f240(arg1);
}

int64_t sub_1400399b0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_14003f240(*(arg2 + 0x28));
}

int64_t sub_1400399d0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_1400389c0(arg1);
}

int64_t sub_1400399f0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140039b20(arg1);
}

int64_t sub_140039a10(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140039960(arg1);
}

int64_t sub_140039a30(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140041070(arg1);
}

int64_t sub_140039a50(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140039bc0(arg1);
}

int64_t sub_140039a70(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_28 = 0;
    
    while (var_28 != arg2)
    {
        int64_t* rcx_1 = (arg1 + (var_28 * 0x18));
        var_28 += 1;
        sub_140039a30(rcx_1);
    }
    
    return arg2;
}

int64_t sub_140039ae0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t result;
    
    while (true)
    {
        result = *(arg2 + 0x20);
        
        if (*(arg2 + 0x30) == result)
            break;
        
        int64_t* rcx_1 = (*(arg2 + 0x28) + (*(arg2 + 0x30) * 0x18));
        *(arg2 + 0x30) += 1;
        sub_140039a30(rcx_1);
    }
    
    return result;
}

int64_t sub_140039b20(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14003ae50(arg1);
}

int64_t* sub_140039b40(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14003af60(arg1);
}

int64_t sub_140039b60(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    sub_140039a10(*arg1);
    return sub_14003f1a0(arg1);
}

int64_t sub_140039ba0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_14003f1a0(*(arg2 + 0x28));
}

int64_t sub_140039bc0(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    sub_14003f160(arg1);
    return sub_140039c20(arg1);
}

int64_t sub_140039c00(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039c20(*(arg2 + 0x28));
}

int64_t sub_140039c20(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_14003db90(arg1);
}

int64_t sub_140039c40(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t result = 1;
    
    if (*arg1 == 0)
        result = 0;
    
    if (result != 0)
        return sub_1400399f0(arg1);
    
    return result;
}

int64_t sub_140039c80(void* arg1)
{
    void* var_8 = arg1;
    return sub_14003af90(arg1);
}

int64_t sub_140039ca0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    int64_t result = 0;
    
    if (*arg1 == 0)
        result = 1;
    
    if (result != 0)
        return sub_1400399f0(&arg1[1]);
    
    return result;
}

int64_t sub_140039ce0(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    
    if (arg1 != 0)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140039d10(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    return arg2;
}

uint64_t sub_140039d30(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_50 = arg1;
    int64_t* var_10 = &var_50;
    int64_t var_40 = arg3;
    int64_t* var_8 = &var_40;
    return (sub_140041df0(var_50, arg2, var_40, arg4) & 1);
}

int64_t sub_140039da0(int64_t arg1) __pure
{
    int64_t var_10 = arg1;
    int64_t rdx;
    int64_t var_8 = rdx;
    return arg1;
}

int64_t sub_140039dc0(char arg1)
{
    char result = (arg1 & 1);
    char result_1 = result;
    
    if ((arg1 & 1) != 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140039df0() __noreturn
{
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140039e10(void* arg1)
{
    char var_a9 = 0;
    void* var_40 = arg1;
    int64_t result_1;
    sub_140038060(&result_1, arg1);
    int64_t result = result_1;
    int64_t result_3 = result;
    int64_t var_90;
    int64_t var_a8 = var_90;
    int64_t var_88;
    int64_t var_a0 = var_88;
    int64_t* var_30 = &var_a8;
    int64_t result_2 = result;
    int64_t var_80 = 1;
    int64_t* var_28 = &var_80;
    
    if (var_a8 != 0)
    {
        int64_t* var_20_1 = &var_a0;
        int64_t* var_18_1 = &result_2;
        int64_t* var_10_1 = &var_a0;
        int64_t* var_8_1 = &result_2;
        
        if (var_a0 == result)
            return result;
    }
    
    int64_t var_70 = 0;
    sub_14003a870(nullptr, &var_a8, &var_80, &var_70, &data_140060900);
    /* no return */
}

int64_t* sub_140039f20(int64_t* arg1, int64_t* arg2, int64_t arg3)
{
    int64_t* var_10 = arg2;
    int64_t var_8 = arg3;
    int64_t var_50;
    sub_140039ff0(&var_50, arg2, arg3);
    int64_t rax = 1;
    
    if (var_50 == 0)
        rax = 0;
    
    if (rax != 0)
    {
        *arg1 = var_50;
        int64_t var_48;
        arg1[1] = var_48;
        int64_t var_40;
        arg1[2] = var_40;
        int64_t var_38;
        arg1[3] = var_38;
    }
    else
        *arg1 = 0;
    
    return arg1;
}

int64_t* sub_140039ff0(int64_t* arg1, int64_t* arg2, int64_t arg3)
{
    int64_t var_10 = -2;
    int64_t var_f0 = arg3;
    int64_t* var_18 = arg2;
    char var_19 = 1;
    
    while (true)
    {
        int64_t var_e8;
        sub_14003bd50(&var_e8, arg2);
        int64_t rax_1 = 1;
        
        if (var_e8 == 0)
            rax_1 = 0;
        
        if (rax_1 != 1)
        {
            char var_19_2 = 0;
            sub_14003b0f0(arg1);
            return arg1;
        }
        
        char var_19_1 = 0;
        int128_t var_d8;
        int128_t var_58_1 = var_d8;
        int128_t var_68 = var_e8;
        void var_88;
        sub_14003e400(&var_88, &var_f0, &var_68);
        int64_t var_a8;
        sub_14003b100(&var_a8, &var_88);
        int64_t rax_2;
        rax_2 = var_a8 == 0;
        
        if ((rax_2 & 1) == 0)
        {
            int128_t var_98;
            int128_t var_38_1 = var_98;
            int128_t var_48 = var_a8;
            sub_140038130(arg1, &var_48);
            return arg1;
        }
        
        char var_19_3 = 1;
    }
}

int64_t sub_14003a100(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x10f);
}

int64_t* sub_14003a130(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    arg1[3] = 0;
    return arg1;
}

int64_t sub_14003a160(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t result;
    int64_t var_40;
    
    if (arg1 != 0)
    {
        if (arg1 == 0)
        {
            sub_14005ce00();
            /* no return */
        }
        
        if (arg3 <= (COMBINE(0, (0x7fffffffffffffff - (arg2 - 1))) / arg1))
            goto label_14003a20d;
        
        result = 0;
        var_40 = 0;
    }
    else
    {
    label_14003a20d:
        sub_140039820(arg1, arg3);
        int64_t rax_6 = (arg1 * arg3);
        int64_t var_10_1 = rax_6;
        int64_t var_8_1 = arg2;
        result = arg2;
        var_40 = rax_6;
    }
    return result;
}

uint64_t sub_14003a260(int32_t* arg1, int32_t* arg2)
{
    int32_t* var_10 = arg1;
    int32_t* var_8 = arg2;
    return (sub_14003acc0(arg1, arg2) & 1);
}

uint64_t sub_14003a280(int64_t* arg1, int64_t arg2, int64_t* arg3)
{
    int64_t* var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t* var_18 = arg3;
    char var_31;
    
    if (arg2 == 8)
    {
        int64_t* var_10_1 = arg1;
        int64_t* var_8_1 = arg1;
        var_31 = (sub_14003acf0(arg1, arg3) & 1);
    }
    else
    {
        int64_t var_30 = 0;
        var_31 = 1;
    }
    
    return (var_31 & 1);
}

int64_t sub_14003a2f0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_40 = arg5;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg3;
    int64_t var_20 = arg4;
    int64_t var_18 = arg2;
    
    if (arg2 != arg4)
    {
        sub_14005cc70(arg2, arg4);
        /* no return */
    }
    
    int64_t var_10 = arg3;
    int64_t var_8 = arg1;
    sub_1400392b0(arg3, arg1, 1, 1, arg2);
    return memcpy(arg1, arg3, arg2);
}

int64_t sub_14003a3b0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    sub_14003a3f0(arg1, 1, 1, arg2);
    return arg1;
}

int64_t sub_14003a3f0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_10 = -2;
    char const (** const var_88)[0x2b] = &data_1400605b0;
    int64_t var_48 = arg1;
    int64_t var_40 = arg2;
    int64_t var_38 = arg3;
    int64_t var_30 = arg4;
    int64_t var_28 = arg1;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg3 - ((arg3 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_80)[0x2b] = &data_1400605b0;
            int64_t var_78 = 1;
            int64_t var_60 = 0;
            int64_t var_70 = 8;
            int64_t var_68 = 0;
            sub_14005c700(&var_80);
            /* no return */
        }
        
        if ((arg1 & (arg3 - 1)) == 0)
        {
            int64_t rcx_7;
            rcx_7 = arg2 == 0;
            uint64_t var_50_1;
            
            if (arg2 == 0)
                var_50_1 = -1;
            else
            {
                int64_t rax_13;
                rax_13 = rcx_7;
                
                if ((rax_13 & 1) != 0)
                {
                    sub_14005ce00();
                    /* no return */
                }
                
                var_50_1 = (COMBINE(0, 0x7fffffffffffffff) / arg2);
            }
            
            if (arg4 <= var_50_1)
                return arg4;
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_14003a580(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_14003a5a0(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    int64_t var_40 = (arg1 + arg2);
    return arg1;
}

int64_t* sub_14003a5f0(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_10 = -2;
    int64_t var_28 = arg4;
    char var_29 = 1;
    char var_2a = 1;
    int64_t rax;
    rax = arg2 == 0;
    
    if ((rax & 1) != 0)
    {
        char var_29_1 = 0;
        sub_14003e5f0(arg1, arg4);
    }
    else
    {
        int64_t var_20_1 = arg2;
        int64_t var_18_1 = arg3;
        char var_2a_1 = 0;
        sub_140039870(arg1, arg2, arg3);
    }
    
    return arg1;
}

int64_t sub_14003a680(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x4e);
}

int64_t sub_14003a6b0(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x4f);
}

int64_t sub_14003a6d0(int64_t* arg1)
{
    int64_t rax = 0;
    
    if (*arg1 == 0)
        rax = 1;
    
    int64_t result;
    
    if (rax != 0)
        result = 0;
    else
    {
        int64_t result_1 = *arg1;
        int64_t rax_2 = arg1[1];
        int64_t result_2 = result_1;
        int64_t var_8_1 = rax_2;
        result = result_1;
        int64_t var_18 = rax_2;
    }
    
    int64_t rax_4 = 0;
    
    if (*arg1 == 0)
        rax_4 = 1;
    
    if (rax_4 != 0)
        sub_140039ca0(arg1);
    
    return result;
}

int64_t sub_14003a760(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t result;
    
    if (var_20 != 0)
        result = 0;
    else
    {
        int64_t var_8_1 = arg2;
        result = arg2;
    }
    
    if (var_20 != 0)
        sub_140039900(&var_20);
    
    return result;
}

int64_t sub_14003a7b0(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t result;
    
    if (var_20 != 0)
        result = 0;
    else
    {
        int64_t var_8_1 = arg2;
        result = arg2;
    }
    
    if (var_20 != 0)
        sub_140039930(&var_20);
    
    return result;
}

uint64_t sub_14003a800(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t rax = 1;
    
    if (var_10 == 0)
        rax = 0;
    
    char var_2;
    
    if (rax != 0)
        var_2 = 0;
    else
        var_2 = 1;
    
    int64_t rax_1 = 1;
    
    if (var_10 == 0)
        rax_1 = 0;
    
    if (rax_1 != 0)
        sub_140039c40(&var_10);
    
    rax_1 = var_2;
    rax_1 &= 1;
    return rax_1;
}

void sub_14003a870(char arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t arg5) __noreturn
{
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    char var_1 = arg1;
    sub_14005c8c0(arg1, &var_18, &data_140060a90, &var_10, &data_140060a90, arg4, arg5);
    /* no return */
}

uint64_t sub_14003a8c0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t rax_1;
    char rdx;
    rdx = HIGHQ((arg3 * arg4));
    rax_1 = LOWQ((arg3 * arg4));
    int64_t rcx = rax_1;
    rax_1 = ((arg3 * arg4) >> 0x40) != {0};
    int64_t var_28 = rcx;
    char var_19 = (rax_1 & 1);
    int64_t var_18 = rcx;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
    {
        sub_14005c7e0("is_nonoverlapping: `size_of::<T>…");
        /* no return */
    }
    
    int64_t var_70 = 1;
    int64_t var_8 = rcx;
    int64_t var_60;
    
    if (arg1 < arg2)
        var_60 = (arg2 - arg1);
    else
        var_60 = (arg1 - arg2);
    
    int64_t rax_7;
    rax_7 = var_60 >= rcx;
    rax_7 &= 1;
    return rax_7;
}

int64_t* sub_14003a9c0(int64_t* arg1, int64_t* arg2)
{
    sub_14003fcf0(arg1, arg2);
    return arg1;
}

int64_t* sub_14003a9e0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    int64_t var_38;
    sub_1400413f0(&var_38, arg2, arg3);
    *arg1 = var_38;
    int64_t var_30;
    arg1[1] = var_30;
    int64_t var_28;
    arg1[2] = var_28;
    return arg1;
}

int64_t* sub_14003aa40(int64_t* arg1, int64_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    arg1[3] = arg2[3];
    return arg1;
}

int64_t* sub_14003aa70(int64_t* arg1, char arg2, int64_t arg3)
{
    char var_79 = arg2;
    int64_t var_78 = arg3;
    
    if (arg2 != 0)
    {
        int64_t var_98;
        sub_140041a30(&var_98, arg3, 0);
        int64_t var_90;
        int64_t var_88;
        
        if (var_98 != 0)
        {
            int64_t var_10 = var_90;
            int64_t var_8 = var_88;
            sub_14005c5d0(var_90);
            /* no return */
        }
        
        int64_t var_48_1 = var_90;
        int64_t var_40_1 = var_88;
        int64_t var_c8 = var_90;
        int64_t var_b8_1 = 0;
        int64_t* var_38_1 = &var_c8;
        int64_t* var_30_1 = &var_c8;
        int64_t var_28_1 = var_88;
        int64_t var_20_1 = var_88;
        sub_140039170(var_88, 1);
        int32_t c;
        c = arg2;
        memset(var_88, c, arg3);
        int64_t* var_18_1 = &var_c8;
        *arg1 = var_c8;
        arg1[1] = var_88;
        arg1[2] = arg3;
    }
    else
    {
        int64_t var_b0;
        sub_140041a30(&var_b0, arg3, 1);
        int64_t var_a8;
        int64_t var_a0;
        
        if (var_b0 != 0)
        {
            int64_t var_58 = var_a8;
            int64_t var_50 = var_a0;
            sub_14005c5d0(var_a8);
            /* no return */
        }
        
        int64_t var_68_1 = var_a8;
        int64_t var_60_1 = var_a0;
        *arg1 = var_a8;
        arg1[1] = var_a0;
        arg1[2] = arg3;
    }
    
    return arg1;
}

uint64_t sub_14003ac30(int64_t* arg1, void* arg2)
{
    int64_t* var_10 = arg1;
    void* var_8 = arg2;
    bool var_19;
    
    if (*arg1 != 0)
    {
        void* var_18 = &arg1[1];
        var_19 = (sub_140057a10(arg2, "SomeC:\Users\IEUser\.cargo\git\c…", 4, &var_18, &data_140060af8) & 1);
    }
    else
        var_19 = (sub_1400577c0(arg2, "None", 4) & 1);
    
    return (var_19 & 1);
}

uint64_t sub_14003acc0(int32_t* arg1, int32_t* arg2)
{
    int32_t* var_18 = arg1;
    int32_t* var_10 = arg2;
    int32_t rax;
    rax = *arg1 == *arg2;
    rax &= 1;
    rax = rax;
    rax &= 1;
    return rax;
}

uint64_t sub_14003acf0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_18 = arg1;
    int64_t* var_10 = arg2;
    int64_t rax;
    rax = *arg1 == *arg2;
    rax &= 1;
    rax = rax;
    rax ^= 0xff;
    rax &= 1;
    return rax;
}

uint64_t sub_14003ad20(char arg1) __pure
{
    int64_t rax;
    int64_t var_8 = rax;
    *var_8[5] = (arg1 & 1);
    rax = *var_8[5];
    rax &= 1;
    
    if (rax != 0)
        *var_8[6] = 0;
    else
        *var_8[6] = 1;
    
    uint64_t rax_1;
    rax_1 = *var_8[6];
    rax_1 &= 1;
    return rax_1;
}

int64_t sub_14003ad50(int64_t arg1) __pure
{
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    if (rax == 0)
        return 0;
    
    int64_t var_10_1 = arg1;
    int64_t rdx;
    int64_t var_8_1 = rdx;
    int64_t var_18 = rdx;
    return arg1;
}

int64_t sub_14003adb0(int64_t arg1) __pure
{
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    if (rax == 0)
        return 0;
    
    int64_t var_8_1 = arg1;
    return arg1;
}

int64_t sub_14003ae00(int64_t arg1) __pure
{
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    if (rax == 0)
        return 0;
    
    int64_t var_8_1 = arg1;
    return arg1;
}

int64_t sub_14003ae50(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    void var_18;
    sub_140038a30(&var_18, *arg1);
    return sub_1400398d0(&var_18);
}

int64_t sub_14003ae80(int64_t arg1)
{
    int64_t var_8 = arg1;
    sub_140039ce0(arg1);
    return arg1;
}

int64_t* sub_14003aeb0(int64_t* arg1, int64_t* arg2)
{
    int64_t rax = 0;
    
    if (*arg2 == -0x8000000000000000)
        rax = 1;
    
    if (rax != 0)
    {
        int64_t rcx_6 = arg2[1];
        int64_t var_8_1 = rcx_6;
        arg1[1] = rcx_6;
        *arg1 = -0x8000000000000000;
    }
    else
    {
        int64_t rdx_1 = arg2[1];
        int64_t rcx_1 = arg2[2];
        *arg1 = *arg2;
        arg1[1] = rdx_1;
        arg1[2] = rcx_1;
    }
    
    return arg1;
}

int64_t* sub_14003af60(int64_t* arg1)
{
    int64_t rax;
    int64_t var_8_1 = rax;
    **arg1 = arg1[1];
    return arg1;
}

int64_t* sub_14003af80(int64_t* arg1)
{
    int64_t rax;
    int64_t var_8 = rax;
    *arg1 = 0;
    return arg1;
}

int64_t sub_14003af90(void* arg1)
{
    int64_t var_10 = -2;
    void* var_38 = arg1;
    void* var_48 = arg1;
    void* rcx = var_48;
    void* var_40 = rcx;
    int64_t rax = *(rcx + 8);
    int64_t var_30 = rax;
    int64_t var_28 = rax;
    void** var_20 = &var_40;
    int64_t rax_1 = sub_140039e10(rcx);
    int64_t var_18 = rax_1;
    sub_140039a70(rax, rax_1);
    return sub_1400399d0(&var_48);
}

int64_t sub_14003b000(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400399d0((arg2 + 0x30));
}

int64_t sub_14003b020(int64_t* arg1)
{
    int64_t var_80 = 1;
    int64_t var_78 = 1;
    int64_t* var_50 = arg1;
    void* var_48 = &arg1[1];
    int64_t var_60 = arg1[1];
    int64_t* var_40 = arg1;
    int64_t* var_38 = &var_60;
    int64_t rax_1 = *arg1;
    int64_t var_30 = rax_1;
    rax_1 = rax_1 == var_60;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
        return 0;
    
    int64_t result_1 = *arg1;
    void* var_28_1 = &arg1[1];
    void* var_20_1 = &arg1[1];
    int64_t rcx_5 = *arg1;
    int64_t var_18_1 = rcx_5;
    *arg1 = (rcx_5 + 1);
    int64_t* var_10_1 = &result_1;
    int64_t result = result_1;
    int64_t result_2 = result;
    return result;
}

int64_t* sub_14003b0f0(int64_t* arg1)
{
    int64_t rax;
    int64_t var_8 = rax;
    *arg1 = 0;
    return arg1;
}

int64_t* sub_14003b100(int64_t* arg1, int64_t* arg2)
{
    int64_t rax = 1;
    
    if (*arg2 == 0)
        rax = 0;
    
    if (rax != 0)
    {
        int64_t rdx_2 = arg2[1];
        int64_t rdx_3 = arg2[2];
        int64_t rcx_1 = arg2[3];
        *arg1 = *arg2;
        arg1[1] = rdx_2;
        arg1[2] = rdx_3;
        arg1[3] = rcx_1;
    }
    else
        *arg1 = 0;
    
    return arg1;
}

int64_t sub_14003b1c0(int64_t arg1) __pure
{
    int64_t var_10 = arg1;
    int64_t rdx;
    int64_t var_8 = rdx;
    return arg1;
}

int64_t* sub_14003b1e0(int64_t* arg1)
{
    int64_t var_18;
    sub_14003e630(&var_18);
    *arg1 = var_18;
    int64_t var_10;
    arg1[1] = var_10;
    int64_t var_8;
    arg1[2] = var_8;
    return arg1;
}

int64_t* sub_14003b230(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    char var_31 = 0;
    char var_32 = 0;
    char var_31_1 = 1;
    int128_t var_80;
    sub_14003a9c0(&var_80, arg3);
    char var_32_1 = 1;
    int128_t* var_30 = &var_80;
    int128_t* var_18 = &var_80;
    int64_t rax_1 = sub_14003eb70(&var_80);
    int64_t var_28 = rax_1;
    int64_t var_20 = (rax_1 + 4);
    int64_t var_68 = sub_140039da0((rax_1 + 4));
    int64_t var_60 = 4;
    
    if ((sub_14003ddf0(&var_68, &data_140060b98) & 1) != 0)
    {
        var_32_1 = 0;
        int64_t var_70;
        int64_t var_48_1 = var_70;
        int128_t var_58 = var_80;
        sub_14003e9c0(arg2, &var_58);
    }
    
    char var_31_2 = 0;
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    
    if ((var_32_1 & 1) != 0)
        sub_140039a30(&var_80);
    
    char var_32_2 = 0;
    return arg1;
}

void sub_14003b360(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xb7) & 1) != 0)
        sub_140039a50(*(arg2 + 0x50));
}

void sub_14003b390(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0xb6) & 1) == 0)
        return;
    
    sub_140039a30((arg2 + 0x68));
}

int128_t* sub_14003b3c0(int128_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    char var_51 = 0;
    char var_52 = 0;
    char var_52_1 = 1;
    int128_t var_1a8;
    sub_14003ecd0(&var_1a8, &data_140060ba8, 8);
    char var_51_1 = 1;
    int64_t rax;
    int64_t rdx;
    rax = sub_14003f2f0(arg2);
    void* rax_1 = sub_14003e4d0(rax, rdx);
    
    if (rax_1 == 0)
    {
        sub_14005c680();
        /* no return */
    }
    
    void* var_38 = rax_1;
    void* var_50 = rax_1;
    void* var_30 = rax_1;
    void* var_18 = rax_1;
    int64_t rax_4 = sub_14003eb70(rax_1);
    int64_t var_28 = rax_4;
    int64_t var_20 = (rax_4 + 4);
    int64_t var_190 = sub_140039da0((rax_4 + 4));
    int64_t var_188 = 4;
    
    if ((sub_14003ddf0(&var_190, &data_140060bd0) & 1) != 0)
    {
        *(arg1 + 8) = sub_140040bd0(0x15, "Valid IHDR chunk not provided", 0x1d);
        *arg1 = -0x8000000000000000;
        goto label_14003b71d;
    }
    
    var_52_1 = 0;
    int64_t var_148_1 = arg2[2];
    int128_t var_158 = *arg2;
    int64_t var_178;
    sub_14003f450(&var_178, &var_158);
    int64_t var_140 = var_178;
    int64_t var_170;
    int64_t var_138_1 = var_170;
    int64_t var_168;
    int64_t var_130_1 = var_168;
    int64_t var_160;
    int64_t var_128_1 = var_160;
    
    while (true)
    {
        int64_t var_120;
        sub_140037f30(&var_120, &var_140);
        
        if ((var_120 == -0x8000000000000000 & 1) != 0)
            break;
        
        int64_t var_110;
        int64_t var_f8_1 = var_110;
        int128_t var_108 = var_120;
        int64_t rax_15;
        int64_t rdx_4;
        rax_15 = sub_14003fb30(&var_108);
        sub_14003f570(&var_1a8, rax_15, rdx_4);
        sub_140039a30(&var_108);
    }
    
    sub_140039c80(&var_140);
    void var_b0;
    sub_14003f5d0(&var_b0, "IEND", 4, 1, 0);
    int64_t var_c8;
    sub_14003aeb0(&var_c8, &var_b0);
    int64_t rax_16 = 0;
    
    if (var_c8 == -0x8000000000000000)
        rax_16 = 1;
    
    if (rax_16 != 0)
    {
        int64_t var_c0;
        int64_t var_48_1 = var_c0;
        sub_1400388c0(arg1, var_c0);
    label_14003b71d:
        sub_140041070(&var_1a8);
        char var_51_4 = 0;
        
        if ((var_52_1 & 1) != 0)
            sub_140039bc0(arg2);
    }
    else
    {
        int64_t var_b8;
        int64_t var_d8_1 = var_b8;
        int128_t var_e8 = var_c8;
        int64_t rax_19;
        int64_t rdx_6;
        rax_19 = sub_14003fb30(&var_e8);
        sub_14003f570(&var_1a8, rax_19, rdx_6);
        char var_51_2 = 0;
        int64_t var_198;
        arg1[1] = var_198;
        *arg1 = var_1a8;
        sub_140039a30(&var_e8);
        char var_51_3 = 0;
    }
    
    return arg1;
}

void sub_14003b780(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0x1f6) & 1) != 0)
        sub_140039bc0(*(arg2 + 0x88));
}

void sub_14003b7b0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0x1f7) & 1) == 0)
        return;
    
    sub_140041070((arg2 + 0xa0));
}

int64_t sub_14003b7f0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039c80((arg2 + 0x108));
}

int64_t sub_14003b820(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039a30((arg2 + 0x160));
}

int64_t sub_14003b850(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039a30((arg2 + 0x140));
}

uint64_t sub_14003b880(int32_t* arg1, char* arg2, int64_t arg3)
{
    int32_t* var_30 = arg1;
    char* var_28 = arg2;
    int64_t var_20 = arg3;
    int32_t* var_10 = arg1;
    int32_t rax_6;
    rax_6 = sub_14003b940(arg2, arg3) == sub_1400397b0(*arg1);
    rax_6 &= 1;
    return rax_6;
}

int64_t sub_14003b900(int32_t* arg1, int32_t arg2)
{
    int32_t* var_10 = arg1;
    int32_t var_8 = arg2;
    int32_t result = sub_140039780(arg2);
    *arg1 = result;
    return result;
}

uint64_t sub_14003b940(char* arg1, int64_t arg2)
{
    char* var_10 = arg1;
    int64_t var_8 = arg2;
    return (sub_14003b970(0xffffffff, arg1, arg2) ^ 0xffffffff);
}

uint64_t sub_14003b970(int32_t arg1, char* arg2, int64_t arg3)
{
    int32_t var_41c = arg1;
    char* var_10 = arg2;
    int64_t var_8 = arg3;
    int64_t var_418 = 0;
    uint64_t rax_5;
    
    while (true)
    {
        if (var_418 >= arg3)
            return var_41c;
        
        void var_410;
        memcpy(&var_410, &data_140060c18, 0x400);
        
        if (var_418 >= arg3)
        {
            sub_14005c830(var_418, arg3);
            /* no return */
        }
        
        int64_t rax_4;
        rax_4 = var_41c;
        rax_4 ^= arg2[var_418];
        rax_5 = rax_4;
        
        if (rax_5 >= 0x100)
            break;
        
        var_41c = (*(&var_410 + (rax_5 << 2)) ^ (var_41c >> 8));
        bool c_1 = var_418 >= -1;
        int64_t rax_10;
        rax_10 = c_1;
        
        if (c_1)
        {
            sub_14005cd40();
            /* no return */
        }
        
        var_418 += 1;
    }
    
    sub_14005c830(rax_5, 0x100);
    /* no return */
}

uint64_t sub_14003ba80(int32_t* arg1, int32_t arg2)
{
    int32_t* var_10 = arg1;
    int32_t var_8 = arg2;
    char var_15;
    
    if (arg2 >= 0x80000000)
        var_15 = 0;
    else
    {
        *arg1 = sub_140039780(arg2);
        var_15 = 1;
    }
    
    int32_t* rax;
    rax = var_15;
    rax &= 1;
    return rax;
}

void* sub_14003bae0(int64_t arg1)
{
    int64_t var_8 = arg1;
    return sub_14003bb40((arg1 + 4));
}

int64_t* sub_14003bb00(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_18 = arg2;
    int64_t var_10 = arg3;
    int64_t var_8 = arg4;
    *arg1 = arg2;
    arg1[1] = arg3;
    arg1[2] = arg4;
    arg1[3] = arg5;
    return arg1;
}

void* sub_14003bb40(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    return sub_14003bb70(sub_140039da0(arg1), 4);
}

void* sub_14003bb70(int64_t arg1, int64_t arg2)
{
    int64_t var_48 = arg1;
    int64_t var_40 = arg2;
    
    if (sub_140039d10(arg1, arg2) != 4)
    {
        arg1 = 0x15;
        return sub_140040bd0(arg1, "Chunk type is not 4 bytes long. …", 0x33);
    }
    
    int64_t var_10_1 = arg1;
    int64_t var_8_1 = arg2;
    int64_t rax_1;
    int64_t rdx_1;
    rax_1 = sub_14003a5a0(arg1, arg2);
    int64_t var_f0 = rax_1;
    int64_t var_e8_1 = rdx_1;
    char* var_d8;
    char rax_6;
    
    do
    {
        char* rax_3 = sub_14003b020(&var_f0);
        int64_t rax_4 = 1;
        
        if (rax_3 == 0)
            rax_4 = 0;
        
        if (rax_4 == 0)
            return nullptr;
        
        var_d8 = rax_3;
        rax_6 = sub_140039720(var_d8);
    } while ((rax_6 & 1) != 0);
    char var_c9_1 = 0x15;
    char** var_28_1 = &var_d8;
    uint64_t (* var_20_1)(int64_t* arg1, int64_t* arg2) = sub_140039110;
    char** var_18_1 = &var_d8;
    uint64_t (* var_50_1)(int64_t* arg1, int64_t* arg2) = sub_140039110;
    char** var_68 = &var_d8;
    uint64_t (* var_60_1)(int64_t* arg1, int64_t* arg2) = var_50_1;
    void var_98;
    sub_140042170(&var_98, &data_1400610e0, &var_68);
    int64_t var_b0;
    sub_14003e520(&var_b0, &var_98);
    int64_t var_c8 = var_b0;
    int64_t var_a8;
    int64_t var_c0_1 = var_a8;
    int64_t var_a0;
    int64_t var_b8_1 = var_a0;
    return sub_140039060(var_c9_1, &var_c8);
}

int64_t* sub_14003bd50(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_68 = arg2;
    void* var_c8 = &arg2[2];
    
    if ((sub_14003ddc0(&var_c8, &data_140061128) & 1) != 0)
        *arg1 = 0;
    else
    {
        int64_t rax_1;
        int64_t rdx_1;
        rax_1 = sub_140038460(arg2);
        int32_t* rax_3 = sub_14003ae00(sub_14003a7b0(rax_1, rdx_1));
        int64_t rax_4 = 0;
        
        if (rax_3 == 0)
            rax_4 = 1;
        
        if (rax_4 == 0)
        {
            int32_t* var_60_1 = rax_3;
            
            if (((sub_14003ad20((sub_14003a800(sub_14003bae0(rax_3)) & 1)) & 1) & 1) == 0)
            {
                int32_t* var_18_1 = rax_3;
                void* var_8_1 = &rax_3[1];
                arg2[2] = rax_3[1];
                int32_t* var_28_1 = rax_3;
                uint64_t r8_1 = sub_1400397b0(*rax_3);
                uint64_t var_50_1 = r8_1;
                void var_a0;
                sub_140041f30(&var_a0, arg2, r8_1);
                int64_t rax_16;
                int64_t rdx_12;
                rax_16 = sub_14003ad50(sub_14003a6d0(&var_a0));
                int64_t rax_17 = 0;
                
                if (rax_16 == 0)
                    rax_17 = 1;
                
                if (rax_17 == 0)
                {
                    int64_t var_48_1 = rax_16;
                    int64_t var_40_1 = rdx_12;
                    int64_t rax_19;
                    int64_t rdx_15;
                    rax_19 = sub_140038670(arg2);
                    int64_t rax_21 = sub_14003adb0(sub_14003a760(rax_19, rdx_15));
                    int64_t rax_22 = 0;
                    
                    if (rax_21 == 0)
                        rax_22 = 1;
                    
                    if (rax_22 == 0)
                    {
                        int64_t var_38_1 = rax_21;
                        int64_t var_88;
                        sub_14003bb00(&var_88, rax_3, rax_16, rdx_12, rax_21);
                        *arg1 = var_88;
                        int64_t var_80;
                        arg1[1] = var_80;
                        int64_t var_78;
                        arg1[2] = var_78;
                        int64_t var_70;
                        arg1[3] = var_70;
                    }
                    else
                        sub_14003af80(arg1);
                }
                else
                    sub_14003af80(arg1);
            }
            else
                sub_14003af80(arg1);
        }
        else
            sub_14003af80(arg1);
    }
    
    return arg1;
}

int64_t sub_14003c020(uint64_t arg1, int64_t arg2)
{
    int64_t var_60 = arg2;
    uint64_t var_58 = arg1;
    int64_t var_50 = 1;
    uint64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg2;
    uint64_t var_20 = arg1;
    int64_t result;
    int64_t rdx;
    result = sub_14003c130(1, arg2, arg1, 0);
    int64_t rax = 0;
    
    if (result == 0)
        rax = 1;
    
    if (rax != 0)
    {
        sub_14005c5f0();
        /* no return */
    }
    
    int64_t result_1 = result;
    int64_t var_10 = rdx;
    int64_t result_2 = result;
    return result;
}

int64_t sub_14003c0c0(int64_t arg1, uint64_t arg2)
{
    char* var_40 = &data_140071141;
    int64_t var_38 = arg1;
    sub_14003dec0(&data_140071141, 1);
    char var_19 = data_140071141;
    int64_t* var_18 = &var_38;
    int64_t* var_10 = &var_38;
    int64_t rax_1 = var_38;
    int64_t var_8 = rax_1;
    return j_sub_140049a90(arg2, rax_1);
}

int64_t sub_14003c130(int64_t arg1, int64_t arg2, uint64_t arg3, char arg4)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t result_3 = arg2;
    int64_t var_90 = arg1;
    char var_81 = (arg4 & 1);
    int64_t* var_80 = &result_3;
    uint64_t var_78 = arg3;
    int64_t result;
    uint64_t var_100;
    
    if (arg3 != 0)
    {
        uint64_t rax;
        rax = arg4;
        int64_t result_1;
        
        if ((rax & 1) != 0)
        {
            int64_t result_15 = result_3;
            uint64_t var_e0_1 = arg3;
            int64_t* var_50_1 = &result_15;
            int64_t* var_48_1 = &result_15;
            int64_t result_16 = result_3;
            int64_t result_17 = result_16;
            result_1 = j_sub_140049bc0(arg3, result_16);
        }
        else
            result_1 = sub_14003c0c0(result_3, arg3);
        
        int64_t result_9 = result_1;
        
        if (result_1 != 0)
        {
            sub_140039ce0(result_1);
            int64_t result_10 = result_1;
            int64_t result_11 = result_1;
            int64_t result_12 = result_1;
            int64_t result_13 = result_1;
            int64_t result_14 = result_1;
            uint64_t var_8_1 = arg3;
            sub_140039ce0(result_1);
            result = result_1;
            var_100 = arg3;
        }
        else
        {
            int64_t var_c8_1 = 0;
            int64_t var_d0_1 = 0;
            result = 0;
            var_100 = 0;
        }
    }
    else
    {
        int64_t* var_70_1 = &result_3;
        int64_t result_2 = result_3;
        int64_t result_6 = result_2;
        int64_t result_7 = result_2;
        int64_t result_8 = result_2;
        sub_140039ce0(result_2);
        int64_t result_4 = result_2;
        int64_t result_5 = result_2;
        uint64_t var_a8_1 = 0;
        sub_140039ce0(result_2);
        result = result_2;
        var_100 = var_a8_1;
    }
    return result;
}

int64_t sub_14003c400(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, int64_t arg5, uint64_t arg6, char arg7)
{
    char const (** const var_248)[0x49] = &data_140061198;
    char var_236 = 0;
    char var_235 = 0;
    int64_t var_230 = arg3;
    int64_t var_220 = arg5;
    int64_t var_f8 = arg1;
    void* var_f0 = arg2;
    char var_e1 = (arg7 & 1);
    int64_t* var_e0 = &var_230;
    int64_t var_200 = arg4;
    int64_t result;
    uint64_t var_208;
    int64_t r9;
    
    if (var_200 != 0)
    {
        int64_t* var_d8_1 = &var_200;
        int64_t* var_d0_1 = &var_230;
        int64_t rax_2 = var_230;
        int64_t var_c8_1 = rax_2;
        int64_t* var_c0_1 = &var_220;
        int64_t rcx_1 = var_220;
        int64_t var_b8_1 = rcx_1;
        
        if (rax_2 == rcx_1)
        {
            int64_t* var_58_1 = &var_220;
            uint64_t var_50_1 = arg6;
            int64_t* var_48_1 = &var_230;
            uint64_t rax_6;
            rax_6 = arg6 >= var_200;
            char var_271_1 = rax_6;
            rax_6 &= 1;
            char var_39_1 = rax_6;
            sub_140039dc0((var_271_1 & 1));
            void* var_1e8_1 = arg2;
            int64_t var_1e0 = var_230;
            int64_t var_1d8_1 = arg4;
            uint64_t var_1d0_1 = arg6;
            int64_t* var_150_1 = &var_1e0;
            int64_t* var_148_1 = &var_1e0;
            int64_t var_140_1 = rax_2;
            int64_t result_17 = j_sub_140049b20(arg2, var_200, rax_2, arg6);
            int64_t result_18 = result_17;
            int64_t result_19 = result_17;
            int64_t result_11;
            
            if (result_17 != 0)
            {
                sub_140039ce0(result_17);
                result_11 = result_17;
            }
            else
                result_11 = 0;
            
            int64_t rax_18 = 1;
            
            if (result_11 == 0)
                rax_18 = 0;
            
            int64_t result_9;
            
            if (rax_18 == 0)
                result_9 = 0;
            else
            {
                int64_t result_16 = result_11;
                result_9 = result_11;
            }
            
            int64_t rax_21 = 0;
            
            if (result_9 == 0)
                rax_21 = 1;
            
            if (rax_21 != 0)
            {
                result = 0;
                var_208 = 0;
            }
            else
            {
                rax_21 = arg7;
                int64_t result_14 = result_9;
                int64_t result_15 = result_9;
                int64_t result_2;
                uint64_t var_120_1;
                int64_t result_4;
                
                if ((rax_21 & 1) != 0)
                {
                    int64_t result_20 = result_17;
                    int64_t rcx_24 = (result_17 + var_200);
                    int64_t var_18_1 = rcx_24;
                    int64_t count = (arg6 - var_200);
                    int64_t count_1 = count;
                    sub_140039170(rcx_24, 1);
                    memset(rcx_24, 0, count);
                    int64_t result_13 = result_9;
                    uint64_t var_1a0_2 = arg6;
                    result_4 = result_9;
                    result_2 = result_4;
                    var_120_1 = arg6;
                }
                else
                {
                    int64_t result_12 = result_9;
                    uint64_t var_1a0_1 = arg6;
                    result_4 = result_9;
                    result_2 = result_4;
                    var_120_1 = arg6;
                }
                
                sub_140039ce0(result_4);
                result = result_2;
                var_208 = var_120_1;
            }
        }
        else
        {
            r9 = arg7;
            r9 &= 1;
            int64_t result_8;
            uint64_t rdx_4;
            result_8 = sub_14003c130(arg1, var_220, arg6, r9);
            int64_t rax_5 = 0;
            
            if (result_8 == 0)
                rax_5 = 1;
            
            int64_t result_1;
            uint64_t var_190_1;
            
            if (rax_5 == 0)
            {
                int64_t result_10 = result_8;
                uint64_t var_a8_1 = rdx_4;
                result_1 = result_8;
                var_190_1 = rdx_4;
            }
            else
            {
                result_1 = 0;
                var_190_1 = 0;
            }
            
            int64_t rax_8 = 0;
            
            if (result_1 == 0)
                rax_8 = 1;
            
            if (rax_8 != 0)
            {
                result = 0;
                var_208 = 0;
            }
            else
            {
                int64_t result_5 = result_1;
                uint64_t var_98_1 = var_190_1;
                void* var_90_1 = arg2;
                void* var_88_1 = arg2;
                int64_t result_6 = result_1;
                int64_t result_7 = result_1;
                sub_1400392b0(arg2, result_1, 1, 1, var_200);
                memcpy(result_1, arg2, var_200);
                int64_t var_178 = var_230;
                int64_t var_170_1 = arg4;
                int64_t* var_70_1 = &var_178;
                
                if (var_200 != 0)
                {
                    int64_t var_108 = var_230;
                    int64_t var_100_1 = arg4;
                    int64_t* var_68_1 = &var_108;
                    int64_t* var_60_1 = &var_108;
                    j_sub_140049af0(arg2, var_200, rax_2);
                }
                
                result = result_1;
                var_208 = var_190_1;
            }
        }
    }
    else
    {
        r9 = arg7;
        r9 &= 1;
        int64_t result_3;
        uint64_t rdx_1;
        result_3 = sub_14003c130(arg1, var_220, arg6, r9);
        result = result_3;
        var_208 = rdx_1;
    }
    return result;
}

int64_t* sub_14003cb30(int64_t* arg1, int64_t arg2, uint64_t arg3, int64_t* arg4, int64_t arg5)
{
    char var_1bb = 0;
    int64_t s;
    __builtin_memset(&s, 0, 0x20);
    int64_t var_198 = -0x7fffffffffffffff;
    int64_t var_190 = 0;
    int64_t var_180 = -0x7fffffffffffffff;
    int64_t var_178 = 0;
    int64_t rax_1 = 0;
    
    if (arg2 == 0)
        rax_1 = 1;
    
    if (rax_1 != 0)
    {
        int64_t var_130_1 = 1;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x20);
        int64_t var_148_1 = 1;
        arg1[1] = 0;
        arg1[2] = 0;
        *arg1 = 1;
    }
    else
    {
        int64_t var_a8_1 = arg2;
        uint64_t var_a0_1 = arg3;
        int64_t var_130 = 0;
        int64_t var_98_1 = arg2;
        uint64_t var_90_1 = arg3;
        int64_t var_148 = 0;
        int64_t var_88_1 = arg2;
        uint64_t var_80_1 = arg3;
        int64_t var_158 = arg2;
        uint64_t var_150_1 = arg3;
        int64_t* var_78_1 = &var_158;
        uint64_t var_70_1 = arg3;
        int64_t rax_5 = 1;
        
        if (arg4[1] == 0)
            rax_5 = 0;
        
        int64_t var_108_1;
        int64_t var_100_1;
        
        if (rax_5 == 1)
        {
            void* rdx_1 = *arg4;
            void* var_68_1 = rdx_1;
            int64_t rax_8 = arg4[2];
            int64_t var_f8 = arg4[1];
            int64_t* var_60_1 = &var_f8;
            int64_t rax_9 = var_f8;
            int64_t var_58_1 = rax_9;
            int64_t* var_50_1 = &var_158;
            int64_t var_48_1 = arg2;
            int64_t rax_10;
            rax_10 = rax_9 == arg2;
            char var_1f1_1 = rax_10;
            rax_10 &= 1;
            char var_39_1 = rax_10;
            int64_t rcx_4;
            rcx_4 = var_1f1_1;
            rcx_4 &= 1;
            sub_140039dc0(rcx_4);
            int64_t rax_13;
            int64_t rdx_6;
            rax_13 = sub_14003db10(arg5, rdx_1, var_f8, rax_8, arg2, arg3);
            var_108_1 = rax_13;
            var_100_1 = rdx_6;
        }
        else
        {
            int64_t rax_11;
            int64_t rdx_4;
            rax_11 = sub_14003db60(arg5, arg2, arg3);
            var_108_1 = rax_11;
            var_100_1 = rdx_4;
        }
        
        int64_t* var_38_1 = &var_158;
        int64_t rax_15 = 0;
        
        if (var_108_1 == 0)
            rax_15 = 1;
        
        if (rax_15 != 0)
        {
            arg1[1] = arg2;
            arg1[2] = arg3;
            *arg1 = 1;
        }
        else
        {
            int64_t var_30_1 = var_108_1;
            int64_t var_28_1 = var_100_1;
            arg1[1] = var_108_1;
            arg1[2] = var_100_1;
            *arg1 = 0;
        }
    }
    
    return arg1;
}

int64_t* sub_14003cfb0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_48 = arg2;
    
    if (*arg2 != 0)
    {
        int64_t var_40_1 = 8;
        int64_t var_38_1 = 0x18;
        int64_t rax_2 = *arg2;
        int64_t var_30_1 = rax_2;
        sub_140039820(0x18, rax_2);
        int64_t rcx_1 = (rax_2 * 0x18);
        int64_t var_28_1 = rcx_1;
        int64_t var_20_1 = 8;
        int64_t var_18_1 = rcx_1;
        int64_t rdx_2 = arg2[1];
        int64_t var_10_1 = rdx_2;
        int64_t var_8_1 = rdx_2;
        *arg1 = rdx_2;
        arg1[1] = 8;
        arg1[2] = rcx_1;
    }
    else
        arg1[1] = 0;
    
    return arg1;
}

int64_t sub_14003d0a0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x30);
    int64_t var_1a8 = 8;
    int64_t var_1a0 = 8;
    int64_t* var_d0 = arg1;
    int64_t var_c8 = arg2;
    int64_t var_c0 = arg3;
    int64_t result;
    int64_t var_190;
    
    if ((((arg2 + arg3) < arg2 & 1) & 1) != 0)
    {
        int64_t var_168_1 = 0;
        int64_t var_160_1 = 0;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x20);
        result = 0;
        var_190 = 0;
    }
    else
    {
        int64_t rcx_2 = (arg2 + arg3);
        int64_t var_168 = 1;
        int64_t var_b0_1 = rcx_2;
        int64_t var_178_1 = -0x7fffffffffffffff;
        int64_t var_a8_1 = rcx_2;
        int64_t var_188_1 = -0x7fffffffffffffff;
        int64_t var_a0_1 = rcx_2;
        int64_t rcx_6 = (*arg1 << 1);
        int64_t var_98_1 = rcx_6;
        int64_t rax_3 = sub_140039520(rcx_6, rcx_2);
        int64_t var_90_1 = rax_3;
        int64_t rax_4 = sub_140039520(8, rax_3);
        int64_t var_88_1 = rax_4;
        int64_t var_80_1 = 1;
        int64_t rax_5;
        uint64_t rdx_3;
        rax_5 = sub_14003a160(1, 1, rax_4);
        int64_t var_78_1 = rax_5;
        uint64_t var_70_1 = rdx_3;
        void var_118;
        sub_140041940(&var_118, arg1);
        int64_t var_130;
        sub_14003cb30(&var_130, rax_5, rdx_3, &var_118, &arg1[2]);
        int64_t result_1;
        int64_t var_120;
        
        if (var_130 == 0)
        {
            int64_t result_2 = result_1;
            int64_t var_60_1 = var_120;
            int64_t var_148_1 = 0;
            int64_t result_3 = result_1;
            int64_t var_50_1 = var_120;
            int64_t result_4 = result_1;
            arg1[1] = result_1;
            *arg1 = rax_4;
            result = -0x7fffffffffffffff;
            var_190 = 0;
        }
        else
        {
            int64_t result_5 = result_1;
            int64_t var_38_1 = var_120;
            int64_t var_148_2 = 1;
            int64_t result_6 = result_1;
            int64_t var_28_1 = var_120;
            result = result_1;
            var_190 = var_120;
        }
    }
    return result;
}

int64_t sub_14003d4f0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x30);
    int64_t var_1a8 = 4;
    int64_t var_1a0 = 4;
    int64_t* var_d0 = arg1;
    int64_t var_c8 = arg2;
    int64_t var_c0 = arg3;
    int64_t result;
    int64_t var_190;
    
    if ((((arg2 + arg3) < arg2 & 1) & 1) != 0)
    {
        int64_t var_168_1 = 0;
        int64_t var_160_1 = 0;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x20);
        result = 0;
        var_190 = 0;
    }
    else
    {
        int64_t rcx_2 = (arg2 + arg3);
        int64_t var_168 = 1;
        int64_t var_b0_1 = rcx_2;
        int64_t var_178_1 = -0x7fffffffffffffff;
        int64_t var_a8_1 = rcx_2;
        int64_t var_188_1 = -0x7fffffffffffffff;
        int64_t var_a0_1 = rcx_2;
        int64_t rcx_6 = (*arg1 << 1);
        int64_t var_98_1 = rcx_6;
        int64_t rax_3 = sub_140039520(rcx_6, rcx_2);
        int64_t var_90_1 = rax_3;
        int64_t rax_4 = sub_140039520(4, rax_3);
        int64_t var_88_1 = rax_4;
        int64_t var_80_1 = 8;
        int64_t rax_5;
        uint64_t rdx_3;
        rax_5 = sub_14003a160(0x18, 8, rax_4);
        int64_t var_78_1 = rax_5;
        uint64_t var_70_1 = rdx_3;
        void var_118;
        sub_14003cfb0(&var_118, arg1);
        int64_t var_130;
        sub_14003cb30(&var_130, rax_5, rdx_3, &var_118, &arg1[2]);
        int64_t result_1;
        int64_t var_120;
        
        if (var_130 == 0)
        {
            int64_t result_2 = result_1;
            int64_t var_60_1 = var_120;
            int64_t var_148_1 = 0;
            int64_t result_3 = result_1;
            int64_t var_50_1 = var_120;
            int64_t result_4 = result_1;
            arg1[1] = result_1;
            *arg1 = rax_4;
            result = -0x7fffffffffffffff;
            var_190 = 0;
        }
        else
        {
            int64_t result_5 = result_1;
            int64_t var_38_1 = var_120;
            int64_t var_148_2 = 1;
            int64_t result_6 = result_1;
            int64_t var_28_1 = var_120;
            result = result_1;
            var_190 = var_120;
        }
    }
    return result;
}

int64_t sub_14003d940(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t rax;
    int64_t rdx;
    rax = sub_14003d0a0(arg1, arg2, arg3);
    int64_t result = 1;
    
    if (rax == -0x7fffffffffffffff)
        result = 0;
    
    if (result != 1)
        return result;
    
    int64_t var_10 = rax;
    int64_t var_8 = rdx;
    sub_14005c5d0(rax);
    /* no return */
}

int64_t sub_14003d9b0(int64_t* arg1)
{
    int64_t* var_18 = arg1;
    int64_t rax;
    int64_t rdx_1;
    rax = sub_14003d4f0(arg1, *arg1, 1);
    int64_t result = 1;
    
    if (rax == -0x7fffffffffffffff)
        result = 0;
    
    if (result != 1)
        return result;
    
    int64_t var_10 = rax;
    int64_t var_8 = rdx_1;
    sub_14005c5d0(rax);
    /* no return */
}

int64_t sub_14003da10(int64_t* arg1)
{
    int64_t* var_18 = arg1;
    int64_t rax;
    int64_t rdx_1;
    rax = sub_14003d0a0(arg1, *arg1, 1);
    int64_t result = 1;
    
    if (rax == -0x7fffffffffffffff)
        result = 0;
    
    if (result != 1)
        return result;
    
    int64_t var_10 = rax;
    int64_t var_8 = rdx_1;
    sub_14005c5d0(rax);
    /* no return */
}

int64_t sub_14003da70(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_60 = arg3;
    int64_t var_38 = arg1;
    void* var_30 = arg2;
    int64_t* var_28 = &var_60;
    
    if (arg4 == 0)
        return arg4;
    
    void* var_20_1 = arg2;
    int64_t var_50 = var_60;
    int64_t var_48_1 = arg4;
    int64_t* var_18_1 = &var_50;
    int64_t* var_10_1 = &var_50;
    int64_t rax_2 = var_60;
    int64_t var_8_1 = rax_2;
    return j_sub_140049af0(arg2, arg4, rax_2);
}

int64_t sub_14003db10(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, int64_t arg5, uint64_t arg6)
{
    int64_t var_30 = arg1;
    void* var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t var_18 = arg4;
    int64_t var_10 = arg5;
    uint64_t var_8 = arg6;
    return sub_14003c400(arg1, arg2, arg3, arg4, arg5, arg6, 0);
}

int64_t sub_14003db60(int64_t arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    uint64_t var_8 = arg3;
    return sub_14003c130(arg1, arg2, arg3, 0);
}

int64_t sub_14003db90(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    void* var_38;
    sub_14003cfb0(&var_38, arg1);
    int64_t result = 1;
    int64_t var_30;
    
    if (var_30 == 0)
        result = 0;
    
    if (result != 1)
        return result;
    
    void* rdx_1 = var_38;
    void* var_18_1 = rdx_1;
    int64_t var_10_1 = var_30;
    int64_t var_28;
    int64_t var_8_1 = var_28;
    return sub_14003da70(&arg1[2], rdx_1, var_30, var_28);
}

int64_t* sub_14003dc00(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_70 = arg2;
    int64_t var_68 = arg3;
    int64_t* var_60 = arg1;
    int64_t* var_58 = &var_70;
    int64_t* var_38 = &var_70;
    int64_t rdx = var_70;
    int64_t var_30 = rdx;
    int64_t var_28 = rdx;
    int64_t* var_20 = &var_68;
    int64_t rcx = var_68;
    int64_t var_18 = rcx;
    int64_t var_10 = rcx;
    sub_14003e000(rcx, rdx);
    int64_t var_8 = 1;
    int64_t rax_1 = (rcx - rdx);
    sub_14003a3f0(rdx, 1, 1, rax_1);
    int64_t var_50 = rdx;
    int64_t var_48 = rax_1;
    return sub_14003e890(arg1, rdx, rax_1);
}

int128_t* sub_14003dcd0(int128_t* arg1)
{
    int64_t var_10 = -2;
    int64_t rax = arg1[1];
    int128_t zmm0 = *arg1;
    int128_t* result = sub_14003c020(0x18, 8);
    result[1] = rax;
    *result = zmm0;
    return result;
}

int64_t sub_14003dd30(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041030((arg2 + 0x30));
}

bool sub_14003dd50(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    int64_t rcx = *arg1;
    int64_t rdx = *arg2;
    bool rax = (rcx > rdx & 1);
    rcx = rcx < rdx;
    rcx &= 1;
    return (rax - rcx);
}

uint64_t sub_14003dd80(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_140039d30(*arg1, arg1[1], *arg2, arg2[1]) & 1);
}

uint64_t sub_14003ddc0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_14003a260(*arg1, *arg2) & 1);
}

uint64_t sub_14003ddf0(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    return (sub_1400395d0(*arg1, arg1[1], *arg2, arg2[1]) & 1);
}

uint64_t sub_14003de30(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg1;
    int64_t* var_8 = arg2;
    char var_11;
    
    if ((*(arg2 + 0x34) & 0x10) != 0)
        var_11 = (sub_140059c10(arg1, arg2) & 1);
    else if ((*(arg2 + 0x34) & 0x20) == 0)
        var_11 = (sub_14005a2a0(arg1, arg2) & 1);
    else
        var_11 = (sub_140059cc0(arg1, arg2) & 1);
    
    return (var_11 & 1);
}

int64_t sub_14003dec0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_140061260;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_140061260;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_14003dfe0(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_14003e000(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg1 >= arg2)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_14003e030(int32_t arg1, char* arg2, int64_t arg3)
{
    char const (** const var_1a0)[0x3b] = &data_1400613e8;
    int32_t var_194 = arg1;
    char* var_c0 = arg2;
    int64_t var_b8 = arg3;
    int32_t rax = var_194;
    int32_t var_ac = rax;
    int64_t var_190;
    
    if (rax < 0x80)
        var_190 = 1;
    else if (rax < 0x800)
        var_190 = 2;
    else if (rax < 0x10000)
        var_190 = 3;
    else
        var_190 = 4;
    
    if ((var_190 - 1) <= 3)
        switch (var_190)
        {
            case 1:
            {
                if (arg3 >= 1)
                {
                    char* var_a8_1 = arg2;
                    *arg2 = var_194;
                label_14003e2b3:
                    int64_t rdx_1 = var_190;
                    int64_t var_58 = rdx_1;
                    return sub_140038180(0, rdx_1, arg2, arg3, &data_140061468);
                }
                break;
            }
            case 2:
            {
                if (arg3 >= 2)
                {
                    char* var_a0_1 = arg2;
                    void* var_98_1 = &arg2[1];
                    *arg2 = (((var_194 >> 6) & 0x1f) | 0xc0);
                    arg2[1] = ((var_194 & 0x3f) | 0x80);
                    goto label_14003e2b3;
                }
                break;
            }
            case 3:
            {
                if (arg3 >= 3)
                {
                    char* var_90_1 = arg2;
                    void* var_88_1 = &arg2[1];
                    void* var_80_1 = &arg2[2];
                    *arg2 = (((var_194 >> 0xc) & 0xf) | 0xe0);
                    arg2[1] = (((var_194 >> 6) & 0x3f) | 0x80);
                    arg2[2] = ((var_194 & 0x3f) | 0x80);
                    goto label_14003e2b3;
                }
                break;
            }
            case 4:
            {
                if (arg3 >= 4)
                {
                    char* var_78_1 = arg2;
                    void* var_70_1 = &arg2[1];
                    void* var_68_1 = &arg2[2];
                    void* var_60_1 = &arg2[3];
                    *arg2 = (((var_194 >> 0x12) & 7) | 0xf0);
                    arg2[1] = (((var_194 >> 0xc) & 0x3f) | 0x80);
                    arg2[2] = (((var_194 >> 6) & 0x3f) | 0x80);
                    arg2[3] = ((var_194 & 0x3f) | 0x80);
                    goto label_14003e2b3;
                }
                break;
            }
        }
    
    int64_t* var_50 = &var_190;
    uint64_t (* var_48)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_40 = &var_190;
    uint64_t (* var_e8)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int128_t var_128 = &var_190;
    int32_t* var_38 = &var_194;
    uint64_t (* var_30)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
    int32_t* var_28 = &var_194;
    uint64_t (* var_d8)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
    int128_t var_118 = &var_194;
    int64_t var_f8 = arg3;
    int64_t* var_20 = &var_f8;
    uint64_t (* var_18)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_10 = &var_f8;
    uint64_t (* var_c8)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int128_t var_108 = &var_f8;
    int128_t var_158 = var_128;
    int128_t var_148 = var_118;
    int128_t var_138 = var_108;
    int128_t* var_8 = &var_158;
    char const (** const var_188)[0x3b] = &data_1400613e8;
    int64_t var_180 = 3;
    int64_t var_168 = 0;
    int64_t var_160 = 0;
    int128_t* var_178 = &var_158;
    int64_t var_170 = 3;
    sub_14005c700(&var_188);
    /* no return */
}

int64_t* sub_14003e400(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg2;
    
    if ((sub_14003ffd0(arg2, arg3) & 1) != 0)
    {
        int64_t rdx_2 = arg3[1];
        int64_t rdx_3 = arg3[2];
        int64_t rcx_2 = arg3[3];
        *arg1 = *arg3;
        arg1[1] = rdx_2;
        arg1[2] = rdx_3;
        arg1[3] = rcx_2;
    }
    else
        *arg1 = 0;
    
    return arg1;
}

int64_t sub_14003e4b0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14003e4d0(int64_t arg1, int64_t arg2) __pure
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    
    if (arg2 < 1)
        return 0;
    
    int64_t var_8_1 = arg1;
    return arg1;
}

int128_t* sub_14003e510(int128_t* arg1)
{
    return sub_14003dcd0(arg1);
}

int64_t* sub_14003e520(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_10 = arg2;
    int64_t* rax = *arg2;
    int64_t rax_1 = arg2[1];
    int64_t rcx = arg2[3];
    int64_t var_20;
    int64_t var_18;
    
    if (rax_1 != 0)
    {
        if ((rax_1 == 1 && rcx == 0))
        {
            int64_t* var_8_1 = rax;
            var_20 = *rax;
            var_18 = rax[1];
        }
        else
        {
            var_20 = 0;
            var_18 = 0;
        }
    }
    else if (rcx == 0)
    {
        var_20 = 1;
        var_18 = 0;
    }
    else
    {
        var_20 = 0;
        var_18 = 0;
    }
    
    sub_14003a5f0(arg1, var_20, var_18, arg2);
    return arg1;
}

int128_t* sub_14003e5f0(int128_t* arg1, int64_t arg2)
{
    int64_t var_8 = arg2;
    void var_38;
    memcpy(&var_38, arg2, 0x30);
    sub_140055de0(arg1, &var_38);
    return arg1;
}

int64_t* sub_14003e630(int64_t* arg1)
{
    *arg1 = 0;
    arg1[1] = 8;
    arg1[2] = 0;
    return arg1;
}

int64_t* sub_14003e650(int64_t* arg1, int64_t arg2, char arg3)
{
    int64_t var_10 = -2;
    int64_t var_120;
    __builtin_memcpy(&var_120, "\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", 0x18);
    char var_101 = arg3;
    int64_t* var_c8 = arg1;
    int64_t var_c0 = arg2;
    char var_d1 = 1;
    int64_t* var_b8 = arg1;
    int64_t rcx = arg1[2];
    int64_t var_b0 = rcx;
    
    if (arg2 > (*arg1 - rcx))
        sub_14003d940(arg1, rcx, arg2);
    
    int64_t* var_a8 = arg1;
    void* rdx = arg1[1];
    void* var_a0 = rdx;
    void* var_98 = rdx;
    int64_t r8 = arg1[2];
    int64_t var_90 = r8;
    char* var_100 = (rdx + r8);
    void* var_88 = &arg1[2];
    char* rcx_2 = arg1[2];
    void* var_f8 = &arg1[2];
    char* var_f0 = rcx_2;
    int64_t var_80 = 1;
    int64_t var_78 = arg2;
    int64_t var_e8 = 1;
    int64_t var_e0 = arg2;
    
    while (true)
    {
        int64_t* var_70_1 = &var_e8;
        int64_t* var_68_1 = &var_e8;
        int64_t* var_60_1 = &var_e0;
        
        if (var_e8 >= var_e0)
            break;
        
        int64_t rcx_4 = var_e8;
        int64_t var_40_1 = rcx_4;
        var_e8 = sub_140039130(rcx_4, 1);
        char* var_38_1 = var_100;
        char* var_18_1 = &var_101;
        rcx_2 = var_101;
        char var_29_1 = rcx_2;
        *var_100 = rcx_2;
        char* var_28_1 = var_100;
        var_100 = &var_100[1];
        void** var_20_1 = &var_f8;
        var_f0 = &var_f0[1];
    }
    
    if (arg2 <= 0)
        return sub_140039b40(&var_f8);
    
    char* var_58_1 = var_100;
    char var_d1_1 = 0;
    rcx_2 = var_101;
    char var_49_1 = rcx_2;
    *var_100 = rcx_2;
    void** var_48_1 = &var_f8;
    void* var_f0_1 = &var_f0[1];
    return sub_140039b40(&var_f8);
}

int64_t sub_14003e830(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x97);
}

int64_t* sub_14003e860(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039b40((arg2 + 0x70));
}

int64_t* sub_14003e890(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* var_60 = arg1;
    int64_t var_58 = arg2;
    int64_t var_50 = arg3;
    int64_t var_48 = arg3;
    int64_t* var_40 = arg1;
    int64_t rax = arg1[2];
    int64_t var_38 = rax;
    
    if (arg3 > (*arg1 - rax))
        sub_14003d940(arg1, rax, arg3);
    
    int64_t rcx_2 = arg1[2];
    int64_t var_30 = rcx_2;
    int64_t var_28 = arg2;
    int64_t* var_20 = arg1;
    int64_t rax_5 = arg1[1];
    int64_t var_18 = rax_5;
    int64_t var_10 = rax_5;
    int64_t rax_6 = (rax_5 + rcx_2);
    int64_t var_8 = rax_6;
    sub_1400392b0(arg2, rax_6, 1, 1, arg3);
    memcpy(rax_6, arg2, arg3);
    arg1[2] += arg3;
    return arg1;
}

int64_t sub_14003e9b0(void* arg1)
{
    int64_t rax;
    int64_t var_8_1 = rax;
    void* var_8 = arg1;
    return *(arg1 + 0x10);
}

int64_t* sub_14003e9c0(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_48 = arg1;
    int64_t rax = arg1[2];
    int64_t var_40 = rax;
    int64_t* var_38 = arg1;
    
    if (rax == *arg1)
        sub_14003d9b0(arg1);
    
    int64_t* var_30 = arg1;
    void* rdx = arg1[1];
    void* var_28 = rdx;
    void* var_20 = rdx;
    int64_t* rdx_1 = (rdx + (rax * 0x18));
    int64_t* var_18 = rdx_1;
    int64_t r9_2 = arg2[1];
    int64_t r8_1 = arg2[2];
    *rdx_1 = *arg2;
    rdx_1[1] = r9_2;
    rdx_1[2] = r8_1;
    arg1[2] = (rax + 1);
    return arg1;
}

int64_t sub_14003ea80(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039a30(*(arg2 + 0x28));
}

int64_t* sub_14003eab0(int64_t* arg1, char arg2)
{
    int64_t var_10 = -2;
    int64_t* var_58 = arg1;
    char var_49 = arg2;
    int64_t rax = arg1[2];
    int64_t var_48 = rax;
    int64_t* var_40 = arg1;
    
    if (rax == *arg1)
        sub_14003da10(arg1);
    
    int64_t* var_38 = arg1;
    char* rdx = arg1[1];
    char* var_30 = rdx;
    char* var_28 = rdx;
    void* var_20 = &rdx[rax];
    char var_11 = arg2;
    rdx[rax] = arg2;
    arg1[2] = (rax + 1);
    return arg1;
}

int64_t sub_14003eb50() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_14003eb70(void* arg1)
{
    void* var_18 = arg1;
    void* var_10 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    return result;
}

int64_t* sub_14003eb90(int64_t* arg1, int64_t arg2, char arg3)
{
    int64_t var_10 = -2;
    int64_t* var_30 = arg1;
    int64_t var_28 = arg2;
    char var_19 = arg3;
    char var_31 = 1;
    int64_t rax = arg1[2];
    int64_t var_18 = rax;
    
    if (arg2 <= rax)
        return sub_14003ec30(arg1, arg2);
    
    char var_31_1 = 0;
    return sub_14003e650(arg1, (arg2 - rax), arg3);
}

int64_t sub_14003ec10(int64_t, void* arg2)
{
    arg_10 = arg2;
    *(arg2 + 0x47);
}

void sub_14003ec30(void* arg1, int64_t arg2)
{
    void* var_48 = arg1;
    int64_t var_40 = arg2;
    
    if (arg2 <= *(arg1 + 0x10))
    {
        int64_t rdx_1 = (*(arg1 + 0x10) - arg2);
        int64_t var_38_1 = rdx_1;
        void* var_30_1 = arg1;
        int64_t r8_1 = *(arg1 + 8);
        int64_t var_28_1 = r8_1;
        int64_t var_20_1 = r8_1;
        int64_t r8_2 = (r8_1 + arg2);
        int64_t var_18_1 = r8_2;
        int64_t var_10_1 = r8_2;
        int64_t var_8_1 = rdx_1;
        *(arg1 + 0x10) = arg2;
    }
}

int64_t* sub_14003eca0(int64_t* arg1, char arg2, int64_t arg3)
{
    char var_9 = arg2;
    int64_t var_8 = arg3;
    sub_14003aa70(arg1, arg2, arg3);
    return arg1;
}

int64_t* sub_14003ecd0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    sub_1400413f0(arg1, arg2, arg3);
    return arg1;
}

int64_t* sub_14003ed00(int64_t* arg1)
{
    *arg1 = 0;
    arg1[1] = 1;
    arg1[2] = 0;
    return arg1;
}

int64_t* sub_14003ed40(int64_t* arg1, int32_t arg2)
{
    int64_t* var_e0 = arg1;
    int32_t var_d8 = arg2;
    int32_t var_d4 = arg2;
    
    if (arg2 < 0x80)
    {
        arg2 = arg2;
        return sub_14003eab0(arg1, arg2);
    }
    
    int64_t* var_d0_1 = arg1;
    int32_t var_f4 = 0;
    int32_t* var_c8_1 = &var_f4;
    int64_t var_c0_1 = 4;
    int64_t rax_5;
    int64_t rdx_1;
    rax_5 = sub_14003e030(arg2, &var_f4, 4);
    int64_t var_120_1 = rax_5;
    int64_t var_b8_1 = rax_5;
    int64_t var_b0_1 = rdx_1;
    int64_t var_a8_1 = rax_5;
    int64_t var_a0_1 = rdx_1;
    int64_t var_98_1 = rax_5;
    int64_t var_90_1 = rdx_1;
    int64_t var_88_1 = rdx_1;
    int64_t var_80_1 = rax_5;
    int64_t var_78_1 = rdx_1;
    int64_t var_70_1 = rax_5;
    int64_t var_68_1 = rax_5;
    int64_t rcx_3 = (rax_5 + rdx_1);
    int64_t var_60_1 = rcx_3;
    int64_t var_f0 = rax_5;
    int64_t var_e8 = rcx_3;
    int64_t* var_58_1 = &var_f0;
    int64_t* var_38_1 = &var_f0;
    int64_t rdx_2 = var_f0;
    int64_t var_30_1 = rdx_2;
    int64_t var_28_1 = rdx_2;
    int64_t* var_20_1 = &var_e8;
    int64_t rcx_4 = var_e8;
    int64_t var_18_1 = rcx_4;
    int64_t var_10_1 = rcx_4;
    sub_14003e000(rcx_4, rdx_2);
    int64_t var_8_1 = 1;
    int64_t rax_7 = (rcx_4 - rdx_2);
    sub_14003a3f0(rdx_2, 1, 1, rax_7);
    int64_t var_50_1 = rdx_2;
    int64_t var_48_1 = rax_7;
    return sub_14003e890(arg1, rdx_2, rax_7);
}

uint64_t sub_14003ef10(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    return (*(arg1 + 0x10) == 0 & 1);
}

int64_t* sub_14003ef30(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* var_b8 = arg1;
    int64_t var_b0 = arg2;
    int64_t var_a8 = arg3;
    int64_t* var_a0 = arg1;
    int64_t var_98 = arg2;
    int64_t var_90 = arg3;
    int64_t var_88 = arg3;
    int64_t var_80 = arg2;
    int64_t var_78 = arg3;
    int64_t var_70 = arg2;
    int64_t var_68 = arg2;
    int64_t rdx_1 = (arg2 + arg3);
    int64_t var_60 = rdx_1;
    int64_t var_c8 = arg2;
    int64_t var_c0 = rdx_1;
    int64_t* var_58 = &var_c8;
    int64_t* var_38 = &var_c8;
    int64_t rdx_2 = var_c8;
    int64_t var_30 = rdx_2;
    int64_t var_28 = rdx_2;
    int64_t* var_20 = &var_c0;
    int64_t rcx = var_c0;
    int64_t var_18 = rcx;
    int64_t var_10 = rcx;
    sub_14003e000(rcx, rdx_2);
    int64_t var_8 = 1;
    int64_t rax_2 = (rcx - rdx_2);
    sub_14003a3f0(rdx_2, 1, 1, rax_2);
    int64_t var_50 = rdx_2;
    int64_t var_48 = rax_2;
    return sub_14003e890(arg1, rdx_2, rax_2);
}

uint64_t sub_14003f060(void* arg1, int64_t* arg2)
{
    void* var_48 = arg1;
    int64_t* var_40 = arg2;
    void* var_38 = arg1;
    void* var_30 = arg1;
    void* rax = *(arg1 + 8);
    void* var_28 = rax;
    void* var_20 = rax;
    int64_t rax_1 = *(arg1 + 0x10);
    int64_t var_18 = rax_1;
    sub_14003a3f0(rax, 1, 1, rax_1);
    void* var_10 = rax;
    int64_t var_8 = rax_1;
    return (sub_140057ed0(rax, rax_1, arg2) & 1);
}

int64_t sub_14003f0f0(void* arg1)
{
    void* var_40 = arg1;
    void* var_38 = arg1;
    void* var_30 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_18 = rax;
    sub_14003a3f0(result, 1, 1, rax);
    int64_t result_3 = result;
    int64_t var_8 = rax;
    return result;
}

int64_t sub_14003f160(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t rcx = *(arg1 + 8);
    int64_t var_18 = rcx;
    int64_t var_10 = rcx;
    int64_t rdx = *(arg1 + 0x10);
    int64_t var_8 = rdx;
    return sub_140039a70(rcx, rdx);
}

int64_t sub_14003f1a0(int64_t* arg1)
{
    int64_t* var_48 = arg1;
    void* rax = *arg1;
    void* var_40 = rax;
    void* var_38 = rax;
    int64_t var_28 = 0x18;
    int64_t var_18 = 8;
    int64_t var_50 = 0x18;
    int64_t var_58 = 8;
    int64_t* var_10 = &var_58;
    void* var_8_1 = rax;
    return sub_14003da70(&arg1[1], rax, var_58, var_50);
}

int64_t sub_14003f240(int64_t* arg1)
{
    int64_t* var_58 = arg1;
    void* rax = *arg1;
    void* rcx = arg1[1];
    void* var_50 = rax;
    void* var_48 = rcx;
    void* var_40 = rax;
    void* var_38 = rcx;
    int64_t result = *(rcx + 8);
    int64_t result_1 = result;
    int64_t rcx_1 = *(rcx + 0x10);
    int64_t var_18 = rcx_1;
    int64_t var_68 = rcx_1;
    int64_t* var_10 = &var_68;
    
    if (result == 0)
        return result;
    
    void* var_8_1 = rax;
    return sub_14003da70(&arg1[2], rax, var_68, result);
}

int64_t sub_14003f2f0(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t result = *(arg1 + 8);
    int64_t result_1 = result;
    int64_t result_2 = result;
    int64_t rax = *(arg1 + 0x10);
    int64_t var_8 = rax;
    sub_14003a3f0(result, 0x18, 8, rax);
    return result;
}

int64_t sub_14003f350(void* arg1)
{
    int64_t rdx;
    int64_t var_58 = rdx;
    void* var_40 = arg1;
    void* var_30 = arg1;
    int64_t rax = *(arg1 + 8);
    int64_t var_28 = rax;
    int64_t var_20 = rax;
    int64_t rax_1 = *(arg1 + 0x10);
    int64_t var_18 = rax_1;
    sub_14003a3f0(rax, 1, 1, rax_1);
    int64_t var_10 = rax;
    int64_t var_8 = rax_1;
    return sub_14003b1c0(rax);
}

int64_t sub_14003f3c0(void* arg1, int64_t arg2)
{
    int64_t r8;
    int64_t var_60 = r8;
    void* var_40 = arg1;
    int64_t var_38 = arg2;
    void* var_30 = arg1;
    int64_t rax = *(arg1 + 8);
    int64_t var_28 = rax;
    int64_t var_20 = rax;
    int64_t rax_1 = *(arg1 + 0x10);
    int64_t var_18 = rax_1;
    sub_14003a3f0(rax, 1, 1, rax_1);
    int64_t var_10 = rax;
    int64_t var_8 = rax_1;
    return sub_140040a50(arg2, rax, rax_1);
}

int64_t* sub_14003f450(int64_t* arg1, int64_t* arg2)
{
    int64_t var_a0 = *arg2;
    int64_t rax_1 = arg2[1];
    int64_t var_90 = arg2[2];
    int64_t* var_70 = &var_a0;
    int64_t* var_68 = &var_a0;
    int64_t* var_60 = &var_a0;
    int64_t* var_58 = &var_90;
    int64_t* var_50 = &var_a0;
    int64_t* var_48 = &var_a0;
    int64_t var_40 = rax_1;
    int64_t var_38 = rax_1;
    int64_t var_30 = rax_1;
    int64_t* var_28 = &var_a0;
    int64_t* var_20 = &var_a0;
    int64_t rcx = var_90;
    int64_t var_18 = rcx;
    int64_t* var_10 = &var_a0;
    int64_t* var_8 = &var_a0;
    int64_t rax_6 = var_a0;
    *arg1 = rax_1;
    arg1[2] = rax_6;
    arg1[1] = rax_1;
    arg1[3] = (rax_1 + (rcx * 0x18));
    return arg1;
}

int64_t* sub_14003f570(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    int64_t rax_2;
    int64_t rdx_1;
    rax_2 = sub_14003a5a0(arg2, arg3);
    return sub_14003dc00(arg1, rax_2, rdx_1);
}

int64_t* sub_14003f5d0(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_10 = -2;
    int64_t var_2e0 = arg2;
    int64_t var_100 = arg2;
    int64_t var_f8 = arg3;
    int64_t var_f0 = arg4;
    int64_t var_e8 = arg5;
    char var_101 = 0;
    char var_101_1 = 1;
    arg2 = 0;
    int128_t var_2b0;
    sub_14003eca0(&var_2b0, arg2, 8);
    sub_14003f570(&var_2b0, arg4, arg5);
    int64_t rax_1 = sub_14003e9b0(&var_2b0);
    bool c = rax_1 >= -4;
    int64_t rax_3;
    rax_3 = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    sub_14003eb90(&var_2b0, (rax_1 + 4), 0);
    char var_101_2 = 0;
    int128_t var_298 = var_2b0;
    int128_t* var_18 = &var_298;
    int32_t* rax_6 = sub_14003eb70(&var_298);
    int32_t* var_e0 = rax_6;
    char var_101_4;
    
    if ((sub_14003ba80(rax_6, arg5) & 1) != 0)
    {
        int32_t* var_70_1 = rax_6;
        int64_t var_68_1 = var_2e0;
        int64_t var_60_1 = arg3;
        void* var_48_1 = &rax_6[1];
        int64_t var_40_1 = var_2e0;
        int64_t var_38_1 = arg3;
        int64_t rax_14 = sub_140041ee0(sub_14003bb70(var_2e0, arg3));
        int64_t var_58_1;
        
        if (rax_14 != 0)
        {
            int64_t var_30_1 = rax_14;
            var_58_1 = sub_140038990(rax_14);
        }
        else
        {
            int64_t var_28_1 = var_2e0;
            int64_t var_20_1 = arg3;
            sub_14003a2f0(&rax_6[1], 4, var_2e0, arg3, &data_1400615b8);
            var_58_1 = 0;
        }
        
        int64_t rax_19 = sub_140041ee0(var_58_1);
        int64_t rax_24;
        rax_24 = rax_19 == 0;
        
        if ((rax_24 & 1) != 0)
        {
            sub_14003fb50(&var_298);
            int64_t rcx_20 = *var_298[8];
            *arg1 = var_298;
            arg1[1] = rcx_20;
            int64_t var_2a0;
            arg1[2] = var_2a0;
            char var_101_3 = 0;
        }
        else
        {
            int64_t var_d8_1 = rax_19;
            sub_1400388f0(arg1, rax_19);
            sub_140039a30(&var_298);
            var_101_4 = 0;
        }
    }
    else
    {
        char var_259_1 = 0x15;
        int64_t var_1d0 = arg5;
        int64_t* var_88_1 = &var_1d0;
        uint64_t (* var_80_1)(int64_t* arg1, int64_t* arg2) = sub_140059cc0;
        int64_t* var_78_1 = &var_1d0;
        uint64_t (* var_90_1)(int64_t* arg1, int64_t* arg2) = sub_140059cc0;
        int128_t var_1f8 = &var_1d0;
        int64_t var_d0_1 = 0;
        int32_t var_c4_1 = 0x20;
        char var_bd_1 = 3;
        int32_t var_bc_1 = 8;
        int64_t var_b8_1 = 2;
        int64_t var_140;
        int64_t var_b0_1 = var_140;
        int64_t var_a8_1 = 0;
        int64_t var_a0_1 = 8;
        int32_t var_160_1 = 0x20;
        int32_t var_15c_1 = 8;
        int64_t var_180_1 = var_140;
        int64_t var_170_1 = 8;
        int64_t var_198_1 = 3;
        int128_t var_1a8_1 = 0;
        int128_t var_1b8_1 = 0;
        int128_t var_1c8 = 2;
        void var_228;
        sub_140039600(&var_228, &data_140061688, 1, &var_1f8, 1, &var_1c8, 1);
        int128_t var_240;
        sub_14003e520(&var_240, &var_228);
        int64_t var_230;
        int64_t var_248_1 = var_230;
        int128_t var_258 = var_240;
        arg1[1] = sub_140039060(var_259_1, &var_258);
        *arg1 = -0x8000000000000000;
        sub_140039a30(&var_298);
        var_101_4 = 0;
    }
    return arg1;
}

void sub_14003fad0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if ((*(arg2 + 0x277) & 1) != 0)
        sub_140041070((arg2 + 0xc8));
}

int64_t sub_14003fb00(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140039a30((arg2 + 0xe0));
}

int64_t sub_14003fb30(void* arg1)
{
    void* var_8 = arg1;
    return sub_14003f350(arg1);
}

int64_t sub_14003fb50(void* arg1)
{
    void* var_18 = arg1;
    void* var_8 = arg1;
    char* rax;
    int64_t rdx;
    rax = sub_14003fc40(arg1);
    int32_t rax_1 = sub_14003b940(rax, rdx);
    int32_t var_c = rax_1;
    return sub_14003b900(sub_14003fba0(arg1), rax_1);
}

int64_t sub_14003fba0(void* arg1)
{
    void* var_58 = arg1;
    void* var_8 = arg1;
    int32_t* rax = sub_14003eb70(arg1);
    int32_t* var_50 = rax;
    int32_t* var_18 = rax;
    uint64_t rax_4 = sub_1400397b0(*rax);
    bool c = rax_4 >= -8;
    int64_t rax_5;
    rax_5 = c;
    
    if (c)
    {
        sub_14005cd40();
        /* no return */
    }
    
    int64_t var_48 = (rax_4 + 8);
    int64_t result;
    int64_t rdx_1;
    result = sub_14003f3c0(arg1, (rax_4 + 8));
    int64_t result_1 = result;
    int64_t var_38 = rdx_1;
    int64_t result_2 = result;
    int64_t var_28 = rdx_1;
    return result;
}

int64_t sub_14003fc40(void* arg1)
{
    void* var_50 = arg1;
    void* var_8 = arg1;
    int32_t* rax = sub_14003eb70(arg1);
    int32_t* var_48 = rax;
    int32_t* var_18 = rax;
    void* var_10 = &rax[1];
    int64_t rax_1 = sub_140039da0(&rax[1]);
    int64_t var_40 = rax_1;
    int64_t var_38 = 4;
    int32_t* var_28 = rax;
    uint64_t rax_6 = sub_1400397b0(*rax);
    bool c = rax_6 >= -4;
    int64_t rax_7;
    rax_7 = c;
    
    if (!(c))
        return sub_14003a3b0(rax_1, (rax_6 + 4));
    
    sub_14005cd40();
    /* no return */
}

int64_t* sub_14003fcf0(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t* var_30 = arg2;
    int64_t rcx = *arg2;
    int64_t var_28 = rcx;
    int64_t var_18 = (rcx + 4);
    int64_t* var_20 = arg2;
    int64_t var_50;
    sub_14003f5d0(&var_50, sub_140039da0((rcx + 4)), 4, arg2[1], arg2[2]);
    int64_t rax_3 = 0;
    
    if (var_50 == -0x8000000000000000)
        rax_3 = 1;
    
    int64_t var_48;
    
    if (rax_3 != 0)
    {
        int64_t var_38 = var_48;
        char const (** const var_78_1)[0x58] = &data_140061710;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_38, &data_140061498);
        /* no return */
    }
    
    *arg1 = var_50;
    arg1[1] = var_48;
    int64_t var_40;
    arg1[2] = var_40;
    return arg1;
}

int64_t sub_14003fde0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400399f0((arg2 + 0x60));
}

int64_t* sub_14003fe10(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_30 = arg2;
    int64_t rdx = *arg2;
    int64_t r8 = arg2[1];
    int64_t var_18 = rdx;
    int64_t var_10 = r8;
    int64_t var_8 = 8;
    int64_t rax_1;
    int64_t rdx_1;
    rax_1 = sub_140040a50(8, rdx, r8);
    int64_t var_28 = rax_1;
    int64_t var_20 = rdx_1;
    int32_t var_34;
    memset(&var_34, 0, 4);
    *arg1 = rax_1;
    arg1[1] = rdx_1;
    arg1[2] = var_34;
    return arg1;
}

int64_t* sub_14003fea0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t var_40 = arg2;
    int64_t rax_1 = sub_140041ee0(sub_140040040(&var_40));
    int64_t rax_2 = 1;
    
    if (rax_1 == 0)
        rax_2 = 0;
    
    if (rax_2 != 0)
    {
        int64_t var_8_1 = rax_1;
        sub_140038960(arg1, rax_1);
    }
    else
    {
        int64_t rax_4 = sub_140041ee0(sub_140040340(&var_40));
        int64_t rax_5 = 1;
        
        if (rax_4 == 0)
            rax_5 = 0;
        
        if (rax_5 == 0)
        {
            *arg1 = var_40;
            arg1[1] = arg3;
        }
        else
        {
            int64_t var_10_1 = rax_4;
            sub_140038960(arg1, rax_4);
        }
    }
    
    return arg1;
}

int64_t* sub_14003ff80(int64_t* arg1, int64_t* arg2, int64_t arg3)
{
    int64_t var_30 = arg3;
    int64_t r9;
    int64_t var_28 = r9;
    int64_t* var_8 = arg2;
    void var_20;
    sub_14003fe10(&var_20, arg2);
    sub_140039f20(arg1, &var_20, &var_30);
    return arg1;
}

uint64_t sub_14003ffd0(int64_t* arg1, int64_t* arg2)
{
    int64_t var_28 = *arg1;
    int64_t* var_20 = arg2;
    int64_t* var_18 = arg2;
    int64_t rcx = *arg2;
    int64_t var_10 = rcx;
    int64_t var_8 = (rcx + 4);
    int64_t var_40 = sub_140039da0((rcx + 4));
    int64_t var_38 = 4;
    return (sub_14003dd80(&var_40, *arg1) & 1);
}

void* sub_140040040(int64_t* arg1)
{
    int64_t* var_e0 = arg1;
    
    if (arg1[1] < 8)
    {
        int64_t var_110 = arg1[1];
        int64_t* var_120_1 = &var_110;
        void* const var_a0_1 = &data_1400618d0;
        uint64_t (* var_98_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
        void* const var_90_1 = &data_1400618d0;
        uint64_t (* var_100_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
        int64_t* var_c8_1 = var_120_1;
        uint64_t (* var_c0_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
        int64_t* var_b8_1 = var_120_1;
        uint64_t (* var_f0_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
        void* const var_140 = &data_1400618d0;
        uint64_t (* var_138_1)(int64_t* arg1, int64_t* arg2) = var_100_1;
        int64_t* var_130_1 = var_120_1;
        uint64_t (* var_128_1)(int64_t* arg1, int64_t* arg2) = var_f0_1;
        void var_170;
        sub_1400396d0(&var_170, &data_1400618b0, &var_140);
        int64_t var_188;
        sub_14003e520(&var_188, &var_170);
        int64_t var_1a0 = var_188;
        int64_t var_180;
        int64_t var_198_1 = var_180;
        int64_t var_178;
        int64_t var_190_1 = var_178;
        return sub_140039060(0x15, &var_1a0);
    }
    
    int64_t* rax = *arg1;
    int64_t rcx_1 = arg1[1];
    int64_t* var_88_1 = rax;
    int64_t var_80_1 = rcx_1;
    int64_t var_78_1 = 8;
    int64_t var_70_1 = 8;
    int64_t* var_68_1 = rax;
    int64_t var_60_1 = rcx_1;
    int64_t var_48_1 = 0;
    int64_t var_40_1 = 8;
    int64_t* var_38_1 = rax;
    int64_t var_30_1 = rcx_1;
    int64_t var_28_1 = 8;
    int64_t var_20_1 = 0;
    int64_t var_58_1 = 1;
    int64_t var_18_1 = 8;
    
    if (8 > rcx_1)
    {
        sub_14005cb50(8, rcx_1);
        /* no return */
    }
    
    int64_t* var_10_1 = rax;
    int64_t* var_8_1 = rax;
    
    if ((sub_14003a280(rax, 8, &data_140061838) & 1) == 0)
        return nullptr;
    
    int64_t* rcx_2;
    rcx_2 = 0x15;
    return sub_140040bd0(rcx_2, "Buffer does not start with a val…", 0x30);
}

void* sub_140040340(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_1c8 = arg1;
    void var_488;
    sub_14003ed00(&var_488);
    void var_430;
    sub_14003fe10(&var_430, arg1);
    void var_450;
    sub_14003a130(&var_450, &var_430);
    int64_t var_470;
    sub_14003aa40(&var_470, &var_450);
    int64_t var_418 = var_470;
    int64_t var_468;
    int64_t var_410 = var_468;
    int64_t var_460;
    int64_t var_408 = var_460;
    int64_t var_458;
    int64_t var_400 = var_458;
    
    while (true)
    {
        int64_t var_3f8;
        sub_140038280(&var_3f8, &var_418);
        int64_t var_3f0;
        int64_t rax_4;
        rax_4 = var_3f0 == 0;
        
        if ((rax_4 & 1) != 0)
            break;
        
        int64_t var_3d0 = var_3f8;
        int128_t var_3c8 = var_3f0;
        int128_t* var_a0_1 = &var_3c8;
        int128_t* var_58_1 = &var_3c8;
        int64_t rcx_7 = var_3c8;
        int64_t var_28_1 = rcx_7;
        int64_t var_20_1 = (rcx_7 + 4);
        int64_t rax_7 = sub_140039da0((rcx_7 + 4));
        int64_t var_50_1 = rax_7;
        int64_t var_48_1 = 4;
        int32_t* rax_8 = var_3c8;
        int32_t* var_38_1 = rax_8;
        uint64_t rax_13 = sub_1400397b0(*rax_8);
        bool c_1 = rax_13 >= -4;
        int64_t rax_14;
        rax_14 = c_1;
        
        if (c_1)
        {
            sub_14005cd40();
            /* no return */
        }
        
        int128_t var_3e0;
        
        if ((sub_14003b880(*var_3e0[8], sub_14003a3b0(rax_7, (rax_13 + 4)), (rax_13 + 4)) & 1) == 0)
        {
            int128_t* var_b0_1 = &var_3c8;
            int64_t rcx_19 = var_3c8;
            int64_t var_a8_1 = rcx_19;
            int64_t var_18_1 = (rcx_19 + 4);
            int64_t var_2c8 = sub_140039da0((rcx_19 + 4));
            int64_t var_2c0_1 = 4;
            int128_t* var_d0_1 = &var_3c8;
            int32_t* rax_22 = var_3c8;
            int32_t* var_c0_1 = rax_22;
            int32_t var_2b4 = sub_1400397b0(*rax_22);
            int128_t* var_78_1 = &var_3c8;
            int32_t* rax_27 = *var_3e0[8];
            int32_t* var_68_1 = rax_27;
            int32_t var_2b0 = sub_1400397b0(*rax_27);
            int128_t* var_98_1 = &var_3c8;
            int32_t* rax_32 = *var_3e0[8];
            int32_t* var_88_1 = rax_32;
            int32_t var_2ac = sub_1400397b0(*rax_32);
            int64_t* var_2f0_1 = &var_2c8;
            int32_t* var_2e8_1 = &var_2b4;
            int32_t* var_2e0_1 = &var_2b0;
            int32_t* var_2d8_1 = &var_2ac;
            int64_t* var_2d0_1 = &var_3d0;
            int64_t* var_160_1 = var_2d0_1;
            uint64_t (* var_158_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
            int64_t* var_150_1 = var_2d0_1;
            uint64_t (* var_168_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
            int64_t* var_1b0_1 = var_2f0_1;
            uint64_t (* var_1a8_1)(int64_t* arg1, int64_t* arg2) = sub_1400390e0;
            int64_t* var_1a0_1 = var_2f0_1;
            uint64_t (* var_1b8_1)(int64_t* arg1, int64_t* arg2) = sub_1400390e0;
            int128_t var_298_1 = var_2f0_1;
            int32_t* var_e8_1 = var_2e8_1;
            uint64_t (* var_e0_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int32_t* var_d8_1 = var_2e8_1;
            uint64_t (* var_f0_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int128_t var_288_1 = var_2e8_1;
            int32_t* var_110_1 = var_2e0_1;
            uint64_t (* var_108_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int32_t* var_100_1 = var_2e0_1;
            uint64_t (* var_118_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int128_t var_278_1 = var_2e0_1;
            int32_t* var_138_1 = var_2d8_1;
            uint64_t (* var_130_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int32_t* var_128_1 = var_2d8_1;
            uint64_t (* var_140_1)(int32_t* arg1, int64_t* arg2) = sub_140059b60;
            int128_t var_268_1 = var_2d8_1;
            int128_t var_348 = var_2d0_1;
            int128_t var_338_1 = var_298_1;
            int128_t var_328_1 = var_288_1;
            int128_t var_318_1 = var_278_1;
            int128_t var_308_1 = var_268_1;
            void var_378;
            sub_140039680(&var_378, &data_140061960, &var_348);
            int128_t var_390;
            sub_14003e520(&var_390, &var_378);
            int64_t var_380;
            int64_t var_398_1 = var_380;
            int128_t var_3a8 = var_390;
            int64_t rax_38;
            int64_t rdx_10;
            rax_38 = sub_14003f0f0(&var_3a8);
            sub_14003ef30(&var_488, rax_38, rdx_10);
            sub_140041050(&var_3a8);
            sub_14003ed40(&var_488, 0xa);
        }
    }
    
    void* result;
    
    if ((sub_14003ef10(&var_488) & 1) != 0)
    {
        result = nullptr;
        sub_140041050(&var_488);
    }
    else
    {
        char var_249_1 = 0x15;
        void* var_188_1 = &var_488;
        uint64_t (* var_180_1)(void* arg1, int64_t* arg2) = sub_14003f060;
        void* var_178_1 = &var_488;
        uint64_t (* var_190_1)(void* arg1, int64_t* arg2) = sub_14003f060;
        int128_t var_1e8 = &var_488;
        void var_218;
        sub_140042170(&var_218, &data_1400618f8, &var_1e8);
        int128_t var_230;
        sub_14003e520(&var_230, &var_218);
        int64_t var_220;
        int64_t var_238_1 = var_220;
        int128_t var_248 = var_230;
        result = sub_140039060(var_249_1, &var_248);
        sub_140041050(&var_488);
    }
    
    return result;
}

int64_t sub_1400409a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050((arg2 + 0xc0));
}

int64_t sub_1400409d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041050((arg2 + 0x1a0));
}

int64_t sub_140040a00(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    
    if ((arg2 >= arg1 && arg2 <= arg3))
        return arg2;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140040a50(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t r9;
    int64_t var_60 = r9;
    int64_t var_40 = arg1;
    int64_t var_38 = arg2;
    int64_t var_30 = arg3;
    int64_t var_28 = arg1;
    int64_t var_20 = arg3;
    
    if (arg1 > arg3)
    {
        sub_14005cae0(arg1, arg3);
        /* no return */
    }
    
    sub_140040a00(arg1, arg3, arg3);
    int64_t var_18 = (arg3 - arg1);
    int64_t var_10 = arg2;
    int64_t result = (arg2 + arg1);
    int64_t result_1 = result;
    return result;
}

int128_t* sub_140040ae0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int128_t var_60;
    sub_1400413f0(&var_60, arg1, arg2);
    int128_t zmm0 = var_60;
    int128_t* result = sub_140041560(0x18, 8);
    int64_t var_50;
    result[1] = var_50;
    *result = zmm0;
    return result;
}

int64_t sub_140040b70(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140041030((arg2 + 0x60));
}

int64_t* sub_140040ba0(int64_t* arg1, int64_t arg2)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg2;
    arg1[1] = arg2;
    *arg1 = 0;
    return arg1;
}

void* sub_140040bd0(char arg1, int64_t arg2, int64_t arg3)
{
    int64_t rax;
    rax = arg1;
    char var_11 = rax;
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    return sub_140045b70(rax, sub_1400413d0(arg2, arg3), &data_140061a48);
}

int64_t sub_140040c30(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_10 = -2;
    char const (** const var_c8)[0x2b] = &data_140061b38;
    char const (** const var_c0)[0x2b] = &data_140061b38;
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_b8)[0x2b] = &data_140061b38;
            int64_t var_b0 = 1;
            int64_t var_98 = 0;
            int64_t var_a8 = 8;
            int64_t var_a0 = 0;
            sub_14005c700(&var_b8);
            /* no return */
        }
        
        if ((arg1 & (arg4 - 1)) == 0)
        {
            int64_t var_28_1 = arg2;
            int64_t var_20_1 = arg2;
            
            if (arg2 != 0)
            {
                int64_t rcx_10 = (arg4 - ((arg4 >> 1) & 0x5555555555555555));
                int64_t rax_19 = ((rcx_10 & 0x3333333333333333) + ((rcx_10 >> 2) & 0x3333333333333333));
                
                if (((((rax_19 + (rax_19 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
                {
                    char const (** const var_88)[0x2b] = &data_140061b38;
                    int64_t var_80 = 1;
                    int64_t var_68 = 0;
                    int64_t var_78 = 8;
                    int64_t var_70 = 0;
                    sub_14005c700(&var_88);
                    /* no return */
                }
                
                if ((arg2 & (arg4 - 1)) == 0)
                {
                    char result = sub_1400412d0(arg1, arg2, arg3, arg5);
                    
                    if ((result & 1) != 0)
                        return result;
                }
            }
        }
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140040e80(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140040ea0(int64_t arg1, int64_t arg2)
{
    int64_t var_20 = arg1;
    int64_t var_18 = arg2;
    int64_t result;
    int64_t rdx;
    rdx = HIGHQ((arg1 * arg2));
    result = LOWQ((arg1 * arg2));
    int64_t result_1 = result;
    result = ((arg1 * arg2) >> 0x40) != {0};
    int64_t result_2 = result_1;
    result_1 = result;
    result_1 &= 1;
    char var_1 = result_1;
    
    if ((result & 1) == 0)
        return result;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140040ef0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = -2;
    char const (** const var_68)[0x2b] = &data_140061b38;
    int64_t var_30 = arg1;
    int64_t var_28 = arg2;
    int64_t var_20 = arg1;
    
    if (arg1 != 0)
    {
        int64_t rcx_1 = (arg2 - ((arg2 >> 1) & 0x5555555555555555));
        int64_t rax_6 = ((rcx_1 & 0x3333333333333333) + ((rcx_1 >> 2) & 0x3333333333333333));
        
        if (((((rax_6 + (rax_6 >> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) >> 0x38) != 1)
        {
            char const (** const var_60)[0x2b] = &data_140061b38;
            int64_t var_58 = 1;
            int64_t var_40 = 0;
            int64_t var_50 = 8;
            int64_t var_48 = 0;
            sub_14005c700(&var_60);
            /* no return */
        }
        
        int64_t result = (arg1 & (arg2 - 1));
        
        if (result == 0)
            return result;
    }
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

void sub_140041010(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_140041030(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140041050(arg1);
}

int64_t sub_140041050(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140041070(arg1);
}

int64_t sub_140041070(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t* var_18 = arg1;
    sub_140041dc0(arg1);
    return sub_1400410d0(arg1);
}

int64_t sub_1400410b0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400410d0(*(arg2 + 0x28));
}

int64_t sub_1400410d0(int64_t* arg1)
{
    int64_t* var_8 = arg1;
    return sub_140041e70(arg1);
}

int64_t sub_1400410f0(int64_t arg1)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg1;
    
    if (arg1 != 0)
        return;
    
    sub_14005c7e0("unsafe precondition(s) violated:…");
    /* no return */
}

int64_t sub_140041120(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_28 = arg1;
    int64_t var_20 = arg2;
    int64_t var_18 = arg3;
    int64_t result;
    int64_t var_40;
    
    if (arg1 != 0)
    {
        if (arg1 == 0)
        {
            sub_14005ce00();
            /* no return */
        }
        
        if (arg3 <= (COMBINE(0, (0x7fffffffffffffff - (arg2 - 1))) / arg1))
            goto label_1400411cd;
        
        result = 0;
        var_40 = 0;
    }
    else
    {
    label_1400411cd:
        sub_140040ea0(arg1, arg3);
        int64_t rax_6 = (arg1 * arg3);
        int64_t var_10_1 = rax_6;
        int64_t var_8_1 = arg2;
        result = arg2;
        var_40 = rax_6;
    }
    return result;
}

int64_t sub_140041220()
{
    int64_t rcx;
    int64_t var_8 = rcx;
    return 0;
}

int64_t sub_140041240() __pure
{
    int64_t __saved_rcx_1;
    int64_t __saved_rcx = __saved_rcx_1;
    return 0;
}

int64_t sub_140041260() __pure
{
    int64_t rcx;
    int64_t var_18 = rcx;
    int64_t rdx;
    int64_t var_10 = rdx;
    int64_t r8;
    int64_t var_8 = r8;
}

int64_t sub_140041280() __pure
{
    int64_t rcx;
    int64_t var_48 = rcx;
    int64_t var_20 = 0x44b0c997f5fae444;
    int64_t var_28 = -0x29a768a78c0930a;
    int64_t var_10 = 0x44b0c997f5fae444;
    int64_t var_8 = -0x29a768a78c0930a;
    return 0x44b0c997f5fae444;
}

uint64_t sub_1400412d0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_58 = arg1;
    int64_t var_50 = arg2;
    int64_t var_48 = arg3;
    int64_t var_40 = arg4;
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t rax_1;
    char rdx;
    rdx = HIGHQ((arg3 * arg4));
    rax_1 = LOWQ((arg3 * arg4));
    int64_t rcx = rax_1;
    rax_1 = ((arg3 * arg4) >> 0x40) != {0};
    int64_t var_28 = rcx;
    char var_19 = (rax_1 & 1);
    int64_t var_18 = rcx;
    rax_1 &= 1;
    
    if ((rax_1 & 1) != 0)
    {
        sub_14005c7e0("is_nonoverlapping: `size_of::<T>…");
        /* no return */
    }
    
    int64_t var_70 = 1;
    int64_t var_8 = rcx;
    int64_t var_60;
    
    if (arg1 < arg2)
        var_60 = (arg2 - arg1);
    else
        var_60 = (arg1 - arg2);
    
    int64_t rax_7;
    rax_7 = var_60 >= rcx;
    rax_7 &= 1;
    return rax_7;
}

int128_t* sub_1400413d0(int64_t arg1, int64_t arg2)
{
    int64_t var_10 = arg1;
    int64_t var_8 = arg2;
    return sub_140040ae0(arg1, arg2);
}

int64_t* sub_1400413f0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_70 = arg2;
    int64_t var_68 = arg3;
    int64_t var_58 = arg3;
    int64_t var_88;
    sub_140041a30(&var_88, arg3, 0);
    int64_t var_80;
    int64_t var_78;
    
    if (var_88 != 0)
    {
        int64_t var_10 = var_80;
        int64_t var_8 = var_78;
        sub_14005c5d0(var_80);
        /* no return */
    }
    
    int64_t var_50 = var_80;
    int64_t var_48 = var_78;
    int64_t var_a0 = var_80;
    int64_t var_90 = 0;
    int64_t var_40 = arg2;
    int64_t* var_38 = &var_a0;
    int64_t* var_30 = &var_a0;
    int64_t var_28 = var_78;
    int64_t var_20 = var_78;
    sub_140040c30(arg2, var_78, 1, 1, arg3);
    memcpy(var_78, arg2, arg3);
    int64_t* var_18 = &var_a0;
    *arg1 = var_a0;
    arg1[1] = var_78;
    arg1[2] = arg3;
    return arg1;
}

int64_t sub_140041560(uint64_t arg1, int64_t arg2)
{
    int64_t var_60 = arg2;
    uint64_t var_58 = arg1;
    int64_t var_50 = 1;
    uint64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg2;
    uint64_t var_20 = arg1;
    int64_t result;
    int64_t rdx;
    result = sub_140041670(1, arg2, arg1, 0);
    int64_t rax = 0;
    
    if (result == 0)
        rax = 1;
    
    if (rax != 0)
    {
        sub_14005c5f0();
        /* no return */
    }
    
    int64_t result_1 = result;
    int64_t var_10 = rdx;
    int64_t result_2 = result;
    return result;
}

int64_t sub_140041600(int64_t arg1, uint64_t arg2)
{
    char* var_40 = &data_140071141;
    int64_t var_38 = arg1;
    sub_140040ef0(&data_140071141, 1);
    char var_19 = data_140071141;
    int64_t* var_18 = &var_38;
    int64_t* var_10 = &var_38;
    int64_t rax_1 = var_38;
    int64_t var_8 = rax_1;
    return j_sub_140049a90(arg2, rax_1);
}

int64_t sub_140041670(int64_t arg1, int64_t arg2, uint64_t arg3, char arg4)
{
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    int64_t result_3 = arg2;
    int64_t var_90 = arg1;
    char var_81 = (arg4 & 1);
    int64_t* var_80 = &result_3;
    uint64_t var_78 = arg3;
    int64_t result;
    uint64_t var_100;
    
    if (arg3 != 0)
    {
        uint64_t rax;
        rax = arg4;
        int64_t result_1;
        
        if ((rax & 1) != 0)
        {
            int64_t result_15 = result_3;
            uint64_t var_e0_1 = arg3;
            int64_t* var_50_1 = &result_15;
            int64_t* var_48_1 = &result_15;
            int64_t result_16 = result_3;
            int64_t result_17 = result_16;
            result_1 = j_sub_140049bc0(arg3, result_16);
        }
        else
            result_1 = sub_140041600(result_3, arg3);
        
        int64_t result_9 = result_1;
        
        if (result_1 != 0)
        {
            sub_1400410f0(result_1);
            int64_t result_10 = result_1;
            int64_t result_11 = result_1;
            int64_t result_12 = result_1;
            int64_t result_13 = result_1;
            int64_t result_14 = result_1;
            uint64_t var_8_1 = arg3;
            sub_1400410f0(result_1);
            result = result_1;
            var_100 = arg3;
        }
        else
        {
            int64_t var_c8_1 = 0;
            int64_t var_d0_1 = 0;
            result = 0;
            var_100 = 0;
        }
    }
    else
    {
        int64_t* var_70_1 = &result_3;
        int64_t result_2 = result_3;
        int64_t result_6 = result_2;
        int64_t result_7 = result_2;
        int64_t result_8 = result_2;
        sub_1400410f0(result_2);
        int64_t result_4 = result_2;
        int64_t result_5 = result_2;
        uint64_t var_a8_1 = 0;
        sub_1400410f0(result_2);
        result = result_2;
        var_100 = var_a8_1;
    }
    return result;
}

int64_t* sub_140041940(int64_t* arg1, int64_t* arg2)
{
    int64_t* var_48 = arg2;
    
    if (*arg2 != 0)
    {
        int64_t var_40_1 = 1;
        int64_t var_38_1 = 1;
        int64_t rax_2 = *arg2;
        int64_t var_30_1 = rax_2;
        sub_140040ea0(1, rax_2);
        int64_t var_28_1 = rax_2;
        int64_t var_20_1 = 1;
        int64_t var_18_1 = rax_2;
        int64_t rdx_2 = arg2[1];
        int64_t var_10_1 = rdx_2;
        int64_t var_8_1 = rdx_2;
        *arg1 = rdx_2;
        arg1[1] = 1;
        arg1[2] = rax_2;
    }
    else
        arg1[1] = 0;
    
    return arg1;
}

int64_t* sub_140041a30(int64_t* arg1, int64_t arg2, char arg3)
{
    int64_t var_10 = -2;
    int64_t var_100 = -0x7fffffffffffffff;
    int64_t var_f8 = -0x7fffffffffffffff;
    int64_t var_f0 = 0;
    int64_t var_e8 = -0x7fffffffffffffff;
    int64_t var_e0 = 0;
    int64_t var_d8 = -0x7fffffffffffffff;
    int64_t var_d0 = 0;
    int64_t var_c8 = -0x7fffffffffffffff;
    int64_t var_c0 = 0;
    int64_t var_b8 = -0x7fffffffffffffff;
    int64_t var_68 = arg2;
    
    if (arg2 != 0)
    {
        int64_t var_60_1 = 1;
        int64_t rax_1;
        uint64_t rdx;
        rax_1 = sub_140041120(1, 1, arg2);
        int64_t rax_3 = 0;
        
        if (rax_1 == 0)
            rax_3 = 1;
        
        if (rax_3 != 0)
        {
            arg1[1] = 0;
            arg1[2] = 1;
            *arg1 = 1;
        }
        else
        {
            int64_t var_58_1 = rax_1;
            uint64_t var_50_1 = rdx;
            int64_t var_a8 = rax_1;
            uint64_t var_a0_1 = rdx;
            int64_t* var_48_1 = &var_a8;
            uint64_t var_40_1 = rdx;
            uint64_t rax_4;
            rax_4 = (arg3 & 1);
            rax_4 &= 1;
            int64_t var_88_1;
            int64_t var_80_1;
            void var_a9;
            
            if (rax_4 == 0)
            {
                int64_t rax_7;
                int64_t rdx_2;
                rax_7 = sub_140041d90(&var_a9, rax_1, rdx);
                var_88_1 = rax_7;
                var_80_1 = rdx_2;
            }
            else
            {
                int64_t rax_8;
                int64_t rdx_4;
                rax_8 = sub_140041d60(&var_a9, rax_1, rdx);
                var_88_1 = rax_8;
                var_80_1 = rdx_4;
            }
            int64_t rax_10 = 0;
            
            if (var_88_1 == 0)
                rax_10 = 1;
            
            if (rax_10 == 0)
            {
                int64_t var_38_1 = var_88_1;
                int64_t var_30_1 = var_80_1;
                int64_t var_28_1 = var_88_1;
                arg1[1] = arg2;
                arg1[2] = var_88_1;
                *arg1 = 0;
            }
            else
            {
                arg1[1] = rax_1;
                arg1[2] = rdx;
                *arg1 = 1;
            }
        }
    }
    else
    {
        int64_t var_20_1 = 1;
        int64_t var_18_1 = 1;
        sub_1400410f0(1);
        arg1[1] = 0;
        arg1[2] = 1;
        *arg1 = 0;
    }
    
    return arg1;
}

int64_t sub_140041ca0() __pure
{
    int64_t rdx;
    arg_10 = rdx;
}

int64_t sub_140041cc0(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_60 = arg3;
    int64_t var_38 = arg1;
    void* var_30 = arg2;
    int64_t* var_28 = &var_60;
    
    if (arg4 == 0)
        return arg4;
    
    void* var_20_1 = arg2;
    int64_t var_50 = var_60;
    int64_t var_48_1 = arg4;
    int64_t* var_18_1 = &var_50;
    int64_t* var_10_1 = &var_50;
    int64_t rax_2 = var_60;
    int64_t var_8_1 = rax_2;
    return j_sub_140049af0(arg2, arg4, rax_2);
}

int64_t sub_140041d60(int64_t arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    uint64_t var_8 = arg3;
    return sub_140041670(arg1, arg2, arg3, 1);
}

int64_t sub_140041d90(int64_t arg1, int64_t arg2, uint64_t arg3)
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    uint64_t var_8 = arg3;
    return sub_140041670(arg1, arg2, arg3, 0);
}

int64_t sub_140041dc0(void* arg1)
{
    void* var_28 = arg1;
    void* var_20 = arg1;
    int64_t rax = *(arg1 + 8);
    int64_t var_18 = rax;
    int64_t var_10 = rax;
    int64_t result = *(arg1 + 0x10);
    int64_t result_1 = result;
    return result;
}

uint64_t sub_140041df0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_38 = arg1;
    int64_t var_30 = arg2;
    int64_t var_28 = arg3;
    int64_t var_20 = arg4;
    char var_39;
    int32_t rax;
    
    if (arg2 != arg4)
        var_39 = 0;
    else
    {
        int64_t var_10_1 = arg2;
        rax = memcmp(arg1, arg3, arg2) == 0;
        rax &= 1;
        var_39 = rax;
    }
    
    rax = var_39;
    rax &= 1;
    return rax;
}

int64_t sub_140041e70(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    void* var_38;
    sub_140041940(&var_38, arg1);
    int64_t result = 1;
    int64_t var_30;
    
    if (var_30 == 0)
        result = 0;
    
    if (result != 1)
        return result;
    
    void* rdx_1 = var_38;
    void* var_18_1 = rdx_1;
    int64_t var_10_1 = var_30;
    int64_t var_28;
    int64_t var_8_1 = var_28;
    return sub_140041cc0(&arg1[2], rdx_1, var_30, var_28);
}

int64_t sub_140041ee0(int64_t arg1) __pure
{
    int64_t rax = 1;
    
    if (arg1 == 0)
        rax = 0;
    
    if (rax == 0)
        return 0;
    
    int64_t var_8_1 = arg1;
    return arg1;
}

int64_t* sub_140041f30(int64_t* arg1, int64_t* arg2, int64_t arg3)
{
    int64_t* var_d8 = arg2;
    int64_t var_d0 = arg3;
    int64_t rax_3 = sub_140041ee0(sub_140042120(arg2, arg3));
    int64_t rax_4 = 1;
    
    if (rax_3 == 0)
        rax_4 = 0;
    
    if (rax_4 != 0)
    {
        int64_t var_c8_1 = rax_3;
        sub_140040ba0(arg1, rax_3);
    }
    else
    {
        int64_t* var_c0_1 = arg2;
        int64_t var_b8_1 = arg3;
        int64_t rdx_2 = *arg2;
        int64_t r8 = arg2[1];
        int64_t var_b0_1 = rdx_2;
        int64_t var_a8_1 = r8;
        int64_t var_a0_1 = rdx_2;
        int64_t var_98_1 = r8;
        int64_t var_90_1 = arg3;
        int64_t rax_6;
        int64_t rdx_3;
        rax_6 = sub_140040a50(arg3, rdx_2, r8);
        *arg2 = rax_6;
        arg2[1] = rdx_3;
        int64_t var_88_1 = rdx_2;
        int64_t var_80_1 = r8;
        int64_t var_78_1 = arg3;
        int64_t var_70_1 = arg3;
        int64_t var_68_1 = rdx_2;
        int64_t var_60_1 = r8;
        int64_t var_48_1 = 0;
        int64_t var_40_1 = arg3;
        int64_t var_38_1 = rdx_2;
        int64_t var_30_1 = r8;
        int64_t var_28_1 = arg3;
        int64_t var_20_1 = 0;
        int64_t var_58_1 = 1;
        int64_t var_18_1 = arg3;
        
        if (arg3 > r8)
        {
            sub_14005cb50(arg3, r8);
            /* no return */
        }
        
        int64_t var_10_1 = rdx_2;
        int64_t var_8_1 = rdx_2;
        *arg1 = rdx_2;
        arg1[1] = arg3;
    }
    
    return arg1;
}

void* sub_140042120(void* arg1, int64_t arg2)
{
    void* var_10 = arg1;
    int64_t var_8 = arg2;
    
    if (arg2 <= *(arg1 + 8))
        return nullptr;
    
    arg1 = 0x25;
    return sub_140040bd0(arg1, "BufferReader advance would resul…", 0x43);
}

int64_t* sub_140042170(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_10 = arg2;
    int64_t var_8 = arg3;
    *arg1 = arg2;
    arg1[1] = 1;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[2] = arg3;
    arg1[3] = 1;
    return arg1;
}

int64_t sub_1400421c0() __pure
{
    return -0x4674e48ea859be88;
}

int64_t sub_1400421e0() __pure
{
    return 0xe555424bca868a8;
}

int64_t sub_140042200(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_140057b40(*arg1, arg1[1], arg2);
}

int64_t sub_140042220(int64_t* arg1, int64_t* arg2)
{
    int64_t* rcx = *arg1;
    char rax = *(arg2 + 0x34);
    
    if ((rax & 0x10) != 0)
        /* tailcall */
        return sub_140059c10(rcx, arg2);
    
    if ((rax & 0x20) != 0)
        /* tailcall */
        return sub_140059cc0(rcx, arg2);
    
    /* tailcall */
    return sub_14005a2a0(rcx, arg2);
}

int64_t sub_140042250(int64_t* arg1, void* arg2)
{
    char* rcx = *arg1;
    
    if (*rcx == 0)
        /* tailcall */
        return sub_1400577c0(arg2, "NoneSome", 4);
    
    void* var_10 = &rcx[1];
    return sub_140057a10(arg2, "Some", 4, &var_10, &data_140061f38);
}

int64_t sub_1400422c0(int64_t* arg1)
{
    int64_t* rax = *arg1;
    *rax;
    /* jump -> *(rax[1] + 0x18) */
}

int64_t sub_1400422e0(int64_t* arg1, int64_t* arg2)
{
    char* rcx = *arg1;
    char rax = *(arg2 + 0x34);
    
    if ((rax & 0x10) != 0)
        /* tailcall */
        return sub_1400598a0(rcx, arg2);
    
    if ((rax & 0x20) != 0)
        /* tailcall */
        return sub_140059950(rcx, arg2);
    
    /* tailcall */
    return sub_140059fa0(rcx, arg2);
}

int64_t sub_140042310(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140057550(arg2, &data_140061f30, 2);
}

int64_t sub_140042330(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_1400566c0(*arg1, arg2);
}

int64_t sub_140042340(int64_t* arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140057ed0(*arg1, arg1[1], arg2);
}

int64_t sub_140042360(int32_t* arg1, int64_t* arg2)
{
    char rax = *(arg2 + 0x34);
    
    if ((rax & 0x10) != 0)
        /* tailcall */
        return sub_140059ab0(arg1, arg2);
    
    if ((rax & 0x20) != 0)
        /* tailcall */
        return sub_140059b60(arg1, arg2);
    
    /* tailcall */
    return sub_14005a040(arg1);
}

int64_t sub_140042390(int64_t* arg1, int64_t* arg2)
{
    char rax = *(arg2 + 0x34);
    
    if ((rax & 0x10) != 0)
        /* tailcall */
        return sub_140059c10(arg1, arg2);
    
    if ((rax & 0x20) != 0)
        /* tailcall */
        return sub_140059cc0(arg1, arg2);
    
    /* tailcall */
    return sub_14005a2a0(arg1, arg2);
}

char const (**)[0x1d] sub_1400423c0(int64_t* arg1, int32_t arg2)
{
    int64_t var_18 = -2;
    int32_t var_1c = 0;
    void* r8;
    
    if (arg2 < 0x80)
    {
        var_1c = arg2;
        r8 = 1;
    }
    else if (arg2 < 0x800)
    {
        var_1c = ((arg2 >> 6) | 0xc0);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_1c[1] = arg2;
        r8 = 2;
    }
    else if (arg2 >= 0x10000)
    {
        var_1c = (((arg2 >> 0x12) & 7) | 0xf0);
        *var_1c[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
        *var_1c[2] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_1c[3] = arg2;
        r8 = 4;
    }
    else
    {
        var_1c = ((arg2 >> 0xc) | 0xe0);
        *var_1c[1] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_1c[2] = arg2;
        r8 = 3;
    }
    
    char const (** result)[0x1d] = sub_140046860(*arg1, &var_1c, r8);
    
    if (result != 0)
    {
        if (arg1[1] != 0)
            sub_140042850(&arg1[1]);
        
        arg1[1] = result;
    }
    
    result = result != 0;
    return result;
}

int64_t sub_1400424c0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t result = *(arg2 + 0x28);
    **(arg2 + 0x30) = result;
    return result;
}

int64_t sub_1400424f0(int64_t* arg1, int32_t arg2)
{
    int32_t var_24 = 0;
    int64_t rsi;
    
    if (arg2 < 0x80)
    {
        var_24 = arg2;
        rsi = 1;
    }
    else if (arg2 < 0x800)
    {
        var_24 = ((arg2 >> 6) | 0xc0);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[1] = arg2;
        rsi = 2;
    }
    else if (arg2 >= 0x10000)
    {
        var_24 = (((arg2 >> 0x12) & 7) | 0xf0);
        *var_24[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
        *var_24[2] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[3] = arg2;
        rsi = 4;
    }
    else
    {
        var_24 = ((arg2 >> 0xc) | 0xe0);
        *var_24[1] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[2] = arg2;
        rsi = 3;
    }
    
    int64_t* rdi = *arg1;
    int64_t rbx = rdi[2];
    
    if ((*rdi - rbx) < rsi)
    {
        sub_14005b440(rdi, rbx, rsi);
        rbx = rdi[2];
    }
    
    memcpy((rdi[1] + rbx), &var_24, rsi);
    rdi[2] = (rbx + rsi);
    return 0;
}

int64_t sub_1400425e0(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_140062330, arg2);
}

int64_t sub_140042600(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_140062390, arg2);
}

int64_t sub_140042620(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_140062360, arg2);
}

uint64_t sub_140042640(int64_t* arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140048c30(arg1, arg2);
}

int64_t sub_140042650(int64_t* arg1, int64_t* arg2, int128_t* arg3)
{
    int64_t var_20 = -2;
    int64_t* var_48 = arg2;
    int128_t var_40 = *arg3;
    int64_t var_30 = arg3[1];
    int64_t rsi = *arg1;
    int64_t* r9 = nullptr;
    
    if (rsi != -0x8000000000000000)
        r9 = arg1;
    
    int32_t result = sub_140048f60(arg2, &var_40, arg1[4], r9);
    
    if ((rsi << 1) == 0)
        return result;
    
    j_sub_140049af0(arg1[1], rsi, 1);
    return result;
}

int64_t sub_1400426e0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042ad0(*(arg2 + 0x40));
}

void sub_140042710() __noreturn
{
    sub_140043fb0();
    /* no return */
}

void sub_140042720(void* arg1)
{
    if (*(arg1 + 8) == 0)
        return;
    
    /* tailcall */
    return sub_140042850((arg1 + 8));
}

int64_t* sub_140042740(void* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t rax = *arg2;
    
    if (rax != 0)
        rax(arg1);
    
    int64_t rdx = arg2[1];
    
    if (rdx == 0)
        return arg2;
    
    /* tailcall */
    return j_sub_140049af0(arg1, rdx, arg2[2]);
}

void* sub_140042790(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0x30);
    int64_t rdx = *(result + 8);
    
    if (rdx == 0)
        return result;
    
    return j_sub_140049af0(*(arg2 + 0x28), rdx, *(*(arg2 + 0x30) + 0x10));
}

void sub_1400427d0(int64_t* arg1)
{
    arg1[1] -= 1;
    
    if (arg1[1] == 1)
    {
        *arg1 = 0;
        char temp0_1 = *(arg1 + 0xc);
        *(arg1 + 0xc) = 0;
        
        if (temp0_1 == 2)
            /* tailcall */
            return WakeByAddressSingle((arg1 + 0xc));
    }
}

void sub_140042800(int32_t* arg1)
{
    if (*arg1 == 1)
    {
        int64_t* rax = *(arg1 + 8);
        
        if (rax != 0)
        {
            int64_t temp0_1 = *rax;
            *rax -= 1;
            
            if (temp0_1 == 1)
                /* tailcall */
                return sub_140043500(&arg1[2]);
        }
    }
}

void sub_140042830(int64_t* arg1)
{
    int64_t rdx = *arg1;
    
    if (rdx == 0)
        return;
    
    /* tailcall */
    return j_sub_140049af0(arg1[1], rdx, 1);
}

void* sub_140042850(int64_t* arg1)
{
    int64_t var_10 = -2;
    void* result = *arg1;
    uint64_t rcx_1 = (result & 3);
    
    if (((rcx_1 - 2) < 2 || rcx_1 == 0))
        return result;
    
    void* rcx_3 = *(result - 1);
    int64_t* rax = *(result + 7);
    int64_t rax_1 = *rax;
    
    if (rax_1 != 0)
        rax_1(rcx_3);
    
    int64_t rdx_1 = rax[1];
    
    if (rdx_1 != 0)
        j_sub_140049af0(rcx_3, rdx_1, rax[2]);
    
    /* tailcall */
    return j_sub_140049af0((result - 1), 0x18, 8);
}

int64_t sub_1400428e0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(*(arg2 + 0x30) + 8);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x28), rdx, *(*(arg2 + 0x30) + 0x10));
    
    return j_sub_140049af0(*(arg2 + 0x20), 0x18, 8);
}

void sub_140042930(int32_t* arg1)
{
    if (*arg1 == 1)
    {
        char* rcx = *(arg1 + 8);
        int64_t rdx_1 = *(arg1 + 0x10);
        *rcx = 0;
        
        if (rdx_1 != 0)
            /* tailcall */
            return j_sub_140049af0(rcx, rdx_1, 1);
    }
}

void sub_140042960(int64_t* arg1)
{
    int64_t rdx = *arg1;
    
    if (rdx == 0)
        return;
    
    /* tailcall */
    return j_sub_140049af0(arg1[1], rdx, 1);
}

int64_t sub_140042980(char* arg1, char arg2)
{
    if (((arg2 == 0 && (data_1400711c0 << 1) != 0) && sub_14005b570() == 0))
        arg1[1] = 1;
    
    char result = *arg1;
    *arg1 = 0;
    
    if (result != 2)
        return result;
    
    /* tailcall */
    return WakeByAddressSingle(arg1);
}

void sub_1400429d0(int64_t* arg1)
{
    int64_t rdx = *arg1;
    
    if (rdx == 0)
        return;
    
    /* tailcall */
    return j_sub_140049af0(arg1[1], rdx, 1);
}

void sub_1400429f0(int64_t* arg1)
{
    void* rsi = arg1[1];
    int64_t i_1 = arg1[2];
    
    if (i_1 != 0)
    {
        int64_t* r14_1 = (rsi + 8);
        int64_t i;
        
        do
        {
            int64_t rdx_1 = r14_1[-1];
            
            if (rdx_1 != 0)
                j_sub_140049af0(*r14_1, rdx_1, 1);
            
            r14_1 = &r14_1[4];
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    int64_t rdx_2 = *arg1;
    
    if (rdx_2 == 0)
        return;
    
    /* tailcall */
    return j_sub_140049af0(rsi, (rdx_2 << 5), 8);
}

int64_t sub_140042a80(int64_t* arg1)
{
    int64_t rdx = *arg1;
    int64_t result = (rdx << 1);
    
    if (result != 0)
        /* tailcall */
        return j_sub_140049af0(arg1[1], rdx, 1);
    
    return result;
}

void sub_140042ab0(int64_t* arg1)
{
    if (*arg1 == 0)
        return;
    
    /* tailcall */
    return sub_140042850(arg1);
}

int64_t sub_140042ad0(int64_t* arg1)
{
    int64_t rdx = *arg1;
    int64_t result = (rdx << 1);
    
    if (result != 0)
        /* tailcall */
        return j_sub_140049af0(arg1[1], rdx, 1);
    
    return result;
}

void sub_140042b00(void* arg1, int64_t arg2)
{
    if (arg2 != 0)
    {
        int64_t rax = *(arg1 + 0x10);
        int64_t rsi_2 = (rax - arg2);
        
        if (rax < arg2)
        {
            sub_14005cb50(arg2, rax);
            /* no return */
        }
        
        *(arg1 + 0x10) = 0;
        
        if (rax != arg2)
        {
            int64_t rax_1 = *(arg1 + 8);
            memmove(rax_1, (arg2 + rax_1), rsi_2);
            *(arg1 + 0x10) = rsi_2;
        }
    }
}

void sub_140042b60(int64_t* arg1)
{
    int64_t var_10 = -2;
    int64_t rdx;
    
    if (arg1[3] != 0)
    {
        rdx = *arg1;
        
        if (rdx != 0)
            /* tailcall */
            return j_sub_140049af0(arg1[1], rdx, 1);
        
        return;
    }
    
    void* rax = sub_140045830(arg1);
    void* var_20 = rax;
    
    if (rax != 0)
        sub_140042850(&var_20);
    
    rdx = *arg1;
    
    if (rdx != 0)
        /* tailcall */
        return j_sub_140049af0(arg1[1], rdx, 1);
}

int64_t* sub_140042bd0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* result = *(arg2 + 0x30);
    int64_t rdx = *result;
    
    if (rdx == 0)
        return result;
    
    return j_sub_140049af0(*(*(arg2 + 0x30) + 8), rdx, 1);
}

int64_t sub_140042c10() __pure
{
    return 0;
}

int64_t sub_140042c20(int64_t* arg1, int128_t* arg2)
{
    /* tailcall */
    return sub_140058060(*arg1, arg2);
}

int64_t sub_140042c30(int64_t* arg1)
{
    *arg1;
    /* jump -> *(arg1[1] + 0x18) */
}

uint64_t sub_140042c50(char* arg1, uint64_t arg2, uint128_t* arg3, int64_t arg4)
{
    char zmm13[0x10];
    char var_58[0x10] = zmm13;
    char zmm12[0x10];
    char var_68[0x10] = zmm12;
    char zmm11[0x10];
    char var_78[0x10] = zmm11;
    char zmm10[0x10];
    char var_88[0x10] = zmm10;
    char zmm9[0x10];
    char var_98[0x10] = zmm9;
    char zmm8[0x10];
    char var_a8[0x10] = zmm8;
    char zmm7[0x10];
    char var_b8[0x10] = zmm7;
    char zmm6[0x10];
    char var_c8[0x10] = zmm6;
    uint64_t rdi;
    
    if (arg2 < arg4)
    {
        char rax_1 = *arg1;
        uint128_t* var_140;
        char rcx;
        char (* r15_1)[0x10];
        
        if (arg2 != 2)
        {
            int64_t rdx_1 = 0;
            
            if (arg2 >= 4)
                rdx_1 = (arg2 - 4);
            
            void* r8_1 = (arg2 - 1);
            
            do
            {
                if (rdx_1 >= (r8_1 + 1))
                {
                    sub_140058a40(&var_140, arg3, arg4, arg1, arg2);
                    uint64_t var_138;
                    int64_t var_128;
                    char* var_f8;
                    void* var_f0;
                    
                    if (var_140 == 0)
                    {
                        if (*var_128[2] != 0)
                            goto label_1400431a1_1;
                        
                        char rax_22 = var_128;
                        
                        if (var_138 != 0)
                        {
                            if (var_138 >= var_f0)
                            {
                                if (var_138 != var_f0)
                                {
                                    sub_14005cd20(var_f8, var_f0, var_138, var_f0, &data_1400623c0);
                                    /* no return */
                                }
                            }
                            else if (var_f8[var_138] < 0xc0)
                            {
                                sub_14005cd20(var_f8, var_f0, var_138, var_f0, &data_1400623c0);
                                /* no return */
                            }
                        }
                        
                        if (var_138 != var_f0)
                        {
                            char r11_2 = var_f8[var_138];
                            uint32_t r9_14 = r11_2;
                            
                            if (r9_14 < 0)
                            {
                                int32_t r10_7 = (r9_14 & 0x1f);
                                int32_t rsi_8 = (var_f8[(var_138 + 1)] & 0x3f);
                                
                                if (r9_14 < 0xe0)
                                    r9_14 = ((r10_7 << 6) | rsi_8);
                                else
                                {
                                    int32_t r9_17 = ((var_f8[(var_138 + 2)] & 0x3f) | (rsi_8 << 6));
                                    
                                    if (r11_2 < 0xf0)
                                        r9_14 = (r9_17 | (r10_7 << 0xc));
                                    else
                                        r9_14 = (((var_f8[(var_138 + 3)] & 0x3f) | (r9_17 << 6)) | ((r10_7 & 7) << 0x12));
                                }
                            }
                            
                            rdi = 1;
                            
                            if (rax_22 == 0)
                            {
                                int64_t rax_25 = 1;
                                
                                if (r9_14 >= 0x80)
                                {
                                    rax_25 = 2;
                                    
                                    if (r9_14 >= 0x800)
                                        rax_25 = (4 - 0);
                                }
                                
                                uint64_t r8_12 = (var_138 + rax_25);
                                
                                if (var_138 != -(rax_25))
                                {
                                    if (r8_12 >= var_f0)
                                    {
                                        if (r8_12 != var_f0)
                                        {
                                            sub_14005cd20(var_f8, var_f0, r8_12, var_f0, &data_1400623c0);
                                            /* no return */
                                        }
                                    }
                                    else if (var_f8[r8_12] <= 0xbf)
                                    {
                                        sub_14005cd20(var_f8, var_f0, r8_12, var_f0, &data_1400623c0);
                                        /* no return */
                                    }
                                }
                                
                                var_f8[r8_12];
                            }
                        }
                        else
                            rdi = rax_22 != 0;
                        
                        goto label_1400431e7;
                    }
                    
                    uint64_t var_108;
                    rdi = var_108;
                    int64_t var_120;
                    int64_t var_118;
                    int64_t var_e8;
                    int64_t var_e0;
                    
                    if (rdi == -1)
                    {
                        int64_t r15_7 = var_118;
                        int64_t r9_10 = (r15_7 + (var_e0 - 1));
                        
                        if (r9_10 >= var_f0)
                            goto label_1400431a1_1;
                        
                        do
                        {
                            int64_t rcx_22;
                            int64_t r15_8;
                            
                            if (!((TEST_BITQ(var_120, var_f8[r9_10]))))
                            {
                                r15_8 = (r15_7 + var_e0);
                            label_1400431eb:
                                rcx_22 = r15_8;
                            }
                            else
                            {
                                int64_t r9_12 = 0;
                                char* r10_4 = (var_e8 + var_138);
                                int64_t rdi_1 = r15_7;
                                bool cond:3_1;
                                
                                do
                                {
                                    if ((var_138 + r9_12) >= var_e0)
                                    {
                                        int64_t r10_5 = ((var_138 - 1) + r15_7);
                                        rdi = ((var_e8 + var_138) - 1);
                                        int64_t r9_13 = (1 - var_138);
                                        bool cond:6_1;
                                        
                                        do
                                        {
                                            if (r9_13 == 1)
                                                goto label_140043297;
                                            
                                            if ((var_138 - 1) >= var_e0)
                                            {
                                                sub_14005c830(-(r9_13), var_e0);
                                                /* no return */
                                            }
                                            
                                            if (r10_5 >= var_f0)
                                            {
                                                sub_14005c830(r10_5, var_f0);
                                                /* no return */
                                            }
                                            
                                            char rcx_26 = *rdi;
                                            r9_13 += 1;
                                            rdi -= 1;
                                            cond:6_1 = rcx_26 == var_f8[r10_5];
                                            r10_5 -= 1;
                                        } while (cond:6_1);
                                        r15_8 = (r15_7 + var_128);
                                        goto label_1400431eb;
                                    }
                                    
                                    if ((var_138 + rdi_1) >= var_f0)
                                    {
                                        void* r15_9 = (r15_7 + var_138);
                                        
                                        if (var_f0 > r15_9)
                                            r15_9 = var_f0;
                                        
                                        sub_14005c830(r15_9, var_f0);
                                        /* no return */
                                    }
                                    
                                    char r14_3 = *r10_4;
                                    rcx_22 = (rdi_1 + 1);
                                    r10_4 = &r10_4[1];
                                    r9_12 += 1;
                                    cond:3_1 = r14_3 == var_f8[(var_138 + rdi_1)];
                                    rdi_1 = rcx_22;
                                } while (cond:3_1);
                            }
                            r9_10 = (rcx_22 + (var_e0 - 1));
                            rdi = 0;
                            r15_7 = rcx_22;
                        } while (r9_10 < var_f0);
                        
                        goto label_1400431e7;
                    }
                    
                    int64_t rcx_13 = var_118;
                    int64_t r9_6 = (rcx_13 + (var_e0 - 1));
                    
                    if (r9_6 < var_f0)
                    {
                    label_140043097:
                        
                        if ((TEST_BITQ(var_120, var_f8[r9_6])))
                        {
                            uint64_t r9_8 = rdi;
                            
                            if (var_138 > rdi)
                                r9_8 = var_138;
                            
                            uint64_t r13_4 = r9_8;
                            bool cond:4_1;
                            
                            do
                            {
                                if (r13_4 >= var_e0)
                                {
                                    uint64_t r10_3 = var_138;
                                    int64_t r9_9;
                                    
                                    do
                                    {
                                        if (rdi >= r10_3)
                                        {
                                        label_140043297:
                                            rdi = 1;
                                            return rdi;
                                        }
                                        
                                        r10_3 -= 1;
                                        
                                        if (r10_3 >= var_e0)
                                        {
                                            sub_14005c830(r10_3, var_e0);
                                            /* no return */
                                        }
                                        
                                        r9_9 = (r10_3 + rcx_13);
                                        
                                        if (r9_9 >= var_f0)
                                        {
                                            sub_14005c830(r9_9, var_f0);
                                            /* no return */
                                        }
                                    } while (*(var_e8 + r10_3) == var_f8[r9_9]);
                                    rcx_13 += var_128;
                                    rdi = (var_e0 - var_128);
                                    r9_6 = (rcx_13 + (var_e0 - 1));
                                    
                                    if (r9_6 < var_f0)
                                        goto label_140043097;
                                    
                                    goto label_1400431a1_1;
                                }
                                
                                if ((rcx_13 + r13_4) >= var_f0)
                                {
                                    void* rcx_29 = (rcx_13 + r9_8);
                                    
                                    if (var_f0 > rcx_29)
                                        rcx_29 = var_f0;
                                    
                                    sub_14005c830(rcx_29, var_f0);
                                    /* no return */
                                }
                                
                                cond:4_1 = *(var_e8 + r13_4) == var_f8[(rcx_13 + r13_4)];
                                r13_4 += 1;
                            } while (cond:4_1);
                        }
                    }
                    
                    goto label_1400431a1_1;
                }
                
                r15_1 = r8_1;
                
                if (r8_1 >= arg2)
                {
                    sub_14005c830(r15_1, arg2);
                    /* no return */
                }
                
                rcx = *(arg1 + r15_1);
                r8_1 = &*r15_1[-1];
            } while (rcx == rax_1);
            
            if ((arg2 + 0xf) <= arg4)
                goto label_140042d89;
            
            goto label_140042d48;
        }
        
        if (arg4 < 0x11)
        {
        label_140042d48:
            rdi = 1;
            
            if (memcmp(arg3, arg1, arg2) != 0)
            {
                void* buffer1 = (arg3 + 1);
                int64_t rsi_2 = (arg4 - 1);
                
                while (rsi_2 >= arg2)
                {
                    int32_t rax_4 = memcmp(buffer1, arg1, arg2);
                    buffer1 += 1;
                    rsi_2 -= 1;
                    
                    if (rax_4 == 0)
                        return rdi;
                }
                
            label_1400431a1:
                rdi = 0;
            }
        }
        else
        {
            rcx = arg1[1];
            r15_1 = 1;
        label_140042d89:
            uint128_t zmm0 = rax_1;
            zmm6 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm0, zmm0), 0), 0);
            zmm0 = rcx;
            zmm7 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm0, zmm0), 0), 0);
            var_140 = arg3;
            int64_t var_138_1 = arg4;
            void* var_130_1 = &arg1[1];
            void* var_128_1 = (arg2 - 1);
            int64_t r12_2;
            
            if ((arg2 + 0x3f) >= arg4)
            {
                rdi = 0;
                r12_2 = 0;
            }
            else
            {
                int64_t rcx_7 = (arg2 + 0x7f);
                r12_2 = 0;
                rdi = 0;
                int64_t var_d0_1 = rcx_7;
                
                do
                {
                    zmm12 = *((arg3 + r12_2) + 0x10);
                    zmm10 = *((arg3 + r12_2) + 0x20);
                    zmm8 = *((arg3 + r12_2) + 0x30);
                    zmm0 = _mm_cmpeq_epi8(*(arg3 + r12_2), zmm6);
                    zmm13 = *((((r15_1 + arg3) + 0x30) + r12_2) - 0x20);
                    zmm11 = *((((r15_1 + arg3) + 0x30) + r12_2) - 0x10);
                    zmm9 = *(((r15_1 + arg3) + 0x30) + r12_2);
                    uint32_t temp0_10 = _mm_movemask_epi8((_mm_cmpeq_epi8(*((((r15_1 + arg3) + 0x30) + r12_2) - 0x30), zmm7) & zmm0));
                    
                    if (temp0_10 != 0)
                    {
                        rcx_7 = var_d0_1;
                        int32_t rax_10;
                        rax_10 = (sub_14005b190(&var_140, r12_2, temp0_10, (rdi & 1)) | rdi);
                        rax_10 &= 1;
                        rdi = rax_10;
                    }
                    
                    zmm12 = _mm_cmpeq_epi8(zmm12, zmm6);
                    uint32_t temp0_13 = _mm_movemask_epi8((_mm_cmpeq_epi8(zmm13, zmm7) & zmm12));
                    
                    if (temp0_13 != 0)
                    {
                        rcx_7 = var_d0_1;
                        int32_t rax_11;
                        rax_11 = (sub_14005b190(&var_140, (r12_2 + 0x10), temp0_13, (rdi & 1)) | rdi);
                        rax_11 &= 1;
                        rdi = rax_11;
                    }
                    
                    zmm10 = _mm_cmpeq_epi8(zmm10, zmm6);
                    uint32_t temp0_16 = _mm_movemask_epi8((_mm_cmpeq_epi8(zmm11, zmm7) & zmm10));
                    
                    if (temp0_16 != 0)
                    {
                        rcx_7 = var_d0_1;
                        int32_t rax_12;
                        rax_12 = (sub_14005b190(&var_140, (r12_2 + 0x20), temp0_16, (rdi & 1)) | rdi);
                        rax_12 &= 1;
                        rdi = rax_12;
                    }
                    
                    zmm8 = _mm_cmpeq_epi8(zmm8, zmm6);
                    uint32_t temp0_19 = _mm_movemask_epi8((_mm_cmpeq_epi8(zmm9, zmm7) & zmm8));
                    
                    if (temp0_19 != 0)
                    {
                        rcx_7 = var_d0_1;
                        int32_t rax_13;
                        rax_13 = (sub_14005b190(&var_140, (r12_2 + 0x30), temp0_19, (rdi & 1)) | rdi);
                        rax_13 &= 1;
                        rdi = rax_13;
                        int64_t rax_14 = (rcx_7 + r12_2);
                        r12_2 += 0x40;
                        
                        if (rax_14 >= arg4)
                            break;
                    }
                    else
                    {
                        int64_t rax_8 = (rcx_7 + r12_2);
                        r12_2 += 0x40;
                        
                        if (rax_8 >= arg4)
                            break;
                    }
                } while ((rdi & 1) == 0);
            }
            
            char i = (rdi & 1);
            char zmm1[0x10];
            
            if ((((arg2 + r12_2) + 0xf) < arg4 && i == 0))
            {
                do
                {
                    zmm1 = *((arg3 + r15_1) + r12_2);
                    zmm0 = _mm_cmpeq_epi8(*(arg3 + r12_2), zmm6);
                    uint32_t temp0_22 = _mm_movemask_epi8((_mm_cmpeq_epi8(zmm1, zmm7) & zmm0));
                    
                    if (temp0_22 != 0)
                        rdi = sub_14005b190(&var_140, r12_2, temp0_22, 0);
                    
                    i = (rdi & 1);
                    
                    if (((arg2 + 0x1f) + r12_2) >= arg4)
                        break;
                    
                    r12_2 += 0x10;
                } while (i == 0);
            }
            
            void* rsi_4 = (arg4 - (arg2 - 1));
            zmm1 = *(r15_1 + ((arg3 + rsi_4) - 0x10));
            zmm0 = _mm_cmpeq_epi8(*((arg3 + rsi_4) - 0x10), zmm6);
            uint32_t temp0_25 = _mm_movemask_epi8((_mm_cmpeq_epi8(zmm1, zmm7) & zmm0));
            
            if (temp0_25 != 0)
            {
                uint128_t* rbx;
                rbx = i != 0;
                rdi = (sub_14005b190(&var_140, (rsi_4 - 0x10), temp0_25, i) | rbx);
                rdi &= 1;
            }
            else
                rdi &= 1;
        }
    }
    else if (arg2 != arg4)
    {
    label_1400431a1_1:
        rdi = 0;
    }
    else
        rdi = memcmp(arg1, arg3, arg2) == 0;
    
label_1400431e7:
    return rdi;
}

int64_t sub_140043450(void* arg1, void* arg2)
{
    /* tailcall */
    return sub_140057b40(*(arg1 + 8), *(arg1 + 0x10), arg2);
}

int64_t sub_140043470(int64_t* arg1, int32_t arg2)
{
    sub_1400435f0(arg1, arg2);
    return 0;
}

int64_t sub_140043490(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t rbx = arg1[2];
    
    if ((*arg1 - rbx) < arg3)
    {
        sub_14005b440(arg1, rbx, arg3);
        rbx = arg1[2];
    }
    
    memcpy((arg1[1] + rbx), arg2, arg3);
    arg1[2] = (rbx + arg3);
    return 0;
}

void sub_140043500(int64_t* arg1)
{
    void* rsi = *arg1;
    int64_t rdx = *(rsi + 0x18);
    
    if (rdx != 0)
        j_sub_140049af0(*(rsi + 0x20), rdx, 1);
    
    if (rsi != -1)
    {
        int64_t temp0_1 = *(rsi + 8);
        *(rsi + 8) -= 1;
        
        if (temp0_1 == 1)
            /* tailcall */
            return j_sub_140049af0(rsi, 0x30, 8);
    }
}

void sub_140043560(int64_t* arg1)
{
    void* rsi = *arg1;
    
    if (*(rsi + 0x10) == 1)
    {
        char* rcx = *(rsi + 0x18);
        int64_t rdx_1 = *(rsi + 0x20);
        *rcx = 0;
        
        if (rdx_1 != 0)
            j_sub_140049af0(rcx, rdx_1, 1);
    }
    
    if (rsi != -1)
    {
        int64_t temp0_1 = *(rsi + 8);
        *(rsi + 8) -= 1;
        
        if (temp0_1 == 1)
            /* tailcall */
            return j_sub_140049af0(rsi, 0x38, 8);
    }
}

void sub_1400435c0(int64_t* arg1)
{
    void* rcx = *arg1;
    
    if (rcx != -1)
    {
        int64_t temp0_1 = *(rcx + 8);
        *(rcx + 8) -= 1;
        
        if (temp0_1 == 1)
            /* tailcall */
            return j_sub_140049af0(rcx, 0x38, 8);
    }
}

char* sub_1400435f0(int64_t* arg1, int32_t arg2)
{
    char* result;
    
    if (arg2 >= 0x80)
    {
        int32_t var_24 = 0;
        int64_t rdi_2;
        
        if (arg2 < 0x800)
        {
            var_24 = ((arg2 >> 6) | 0xc0);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[1] = arg2;
            rdi_2 = 2;
        }
        else if (arg2 >= 0x10000)
        {
            var_24 = (((arg2 >> 0x12) & 7) | 0xf0);
            *var_24[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
            *var_24[2] = (((arg2 >> 6) & 0x3f) | 0x80);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[3] = arg2;
            rdi_2 = 4;
        }
        else
        {
            var_24 = ((arg2 >> 0xc) | 0xe0);
            *var_24[1] = (((arg2 >> 6) & 0x3f) | 0x80);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[2] = arg2;
            rdi_2 = 3;
        }
        
        int64_t rbx_2 = arg1[2];
        
        if ((*arg1 - rbx_2) < rdi_2)
        {
            sub_14005b440(arg1, rbx_2, rdi_2);
            rbx_2 = arg1[2];
        }
        
        result = memcpy((arg1[1] + rbx_2), &var_24, rdi_2);
        arg1[2] = (rbx_2 + rdi_2);
    }
    else
    {
        int64_t rdi = arg1[2];
        
        if (rdi == *arg1)
            sub_1400437a0(arg1);
        
        result = arg1[1];
        result[rdi] = arg2;
        arg1[2] = (rdi + 1);
    }
    
    return result;
}

int64_t sub_140043700(int64_t* arg1, int64_t arg2, uint64_t arg3, int64_t* arg4)
{
    int64_t result;
    
    if (arg2 == 0)
    {
        arg1[1] = 0;
        result = 1;
    }
    else
    {
        int64_t rdx;
        
        if (arg4[1] != 0)
            rdx = arg4[2];
        
        int64_t rax_1;
        
        if ((arg4[1] == 0 || rdx == 0))
        {
            if (arg3 == 0)
            {
                rax_1 = arg2;
                
                if (rax_1 != 0)
                    goto label_14004373e;
                
                goto label_140043766;
            }
            
            data_140071141;
            rax_1 = j_sub_140049a90(arg3, arg2);
            
            if (rax_1 != 0)
                goto label_14004373e;
            
            goto label_140043766;
        }
        
        rax_1 = j_sub_140049b20(*arg4, rdx, arg2, arg3);
        
        if (rax_1 == 0)
        {
        label_140043766:
            arg1[1] = arg2;
            arg1[2] = arg3;
            result = 1;
        }
        else
        {
        label_14004373e:
            arg1[1] = rax_1;
            arg1[2] = arg3;
            result = 0;
        }
    }
    
    *arg1 = result;
    return result;
}

int64_t sub_1400437a0(int64_t* arg1)
{
    int64_t rax = *arg1;
    
    if (rax == -1)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    uint64_t rcx = (rax + 1);
    uint64_t rdx = (rax * 2);
    
    if (rdx > rcx)
        rcx = rdx;
    
    uint64_t rdi = 8;
    
    if (rcx >= 9)
        rdi = rcx;
    
    int64_t var_48;
    int64_t rax_1;
    
    if (rax == 0)
        rax_1 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rax;
        rax_1 = 1;
    }
    
    int64_t var_40 = rax_1;
    int64_t var_30;
    sub_140043700(&var_30, (!(rdi) >> 0x3f), rdi, &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t sub_140043840(int64_t* arg1)
{
    int64_t rax = *arg1;
    
    if (rax == -1)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t r8 = (rax + 1);
    int64_t rcx = (rax * 2);
    
    if (rcx > r8)
        r8 = rcx;
    
    int32_t rdx;
    rdx = (r8 >> 0x3e) == 0;
    int64_t rdi = 4;
    
    if (r8 >= 5)
        rdi = r8;
    
    int64_t var_48;
    int64_t rax_2;
    
    if (rax == 0)
        rax_2 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rcx;
        rax_2 = 2;
    }
    
    int64_t var_40 = rax_2;
    int64_t var_30;
    sub_140043700(&var_30, (rdx * 2), (rdi * 2), &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t sub_1400438e0(int64_t* arg1)
{
    int64_t rax = *arg1;
    
    if (rax == -1)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t rcx = (rax + 1);
    int64_t rdx = (rax * 2);
    
    if (rdx > rcx)
        rcx = rdx;
    
    int32_t rdx_1;
    rdx_1 = (rcx >> 0x3a) == 0;
    int64_t rdi = 4;
    
    if (rcx >= 5)
        rdi = rcx;
    
    int64_t var_48;
    int64_t rax_2;
    
    if (rax == 0)
        rax_2 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = (rax << 5);
        rax_2 = 8;
    }
    
    int64_t var_40 = rax_2;
    int64_t var_30;
    sub_140043700(&var_30, (rdx_1 << 3), (rdi << 5), &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t sub_140043990(int64_t* arg1)
{
    int64_t rax = *arg1;
    
    if (rax == -1)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t rcx = (rax + 1);
    int64_t rdx = (rax * 2);
    
    if (rdx > rcx)
        rcx = rdx;
    
    int32_t rdx_1;
    rdx_1 = (rcx >> 0x3b) == 0;
    int64_t rdi = 4;
    
    if (rcx >= 5)
        rdi = rcx;
    
    int64_t var_48;
    int64_t rax_2;
    
    if (rax == 0)
        rax_2 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = (rax << 4);
        rax_2 = 8;
    }
    
    int64_t var_40 = rax_2;
    int64_t var_30;
    sub_140043700(&var_30, (rdx_1 << 3), (rdi << 4), &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t* sub_140043a40(int64_t arg1, void* arg2)
{
    int64_t var_10 = (arg1 + 8);
    return sub_1400578d0(arg2, "Utf8Errorvalid_up_toerror_lenNon…", 9, "valid_up_toerror_lenNoneSome", 0xb, arg1, &data_140062298, "error_lenNoneSome", 9, &var_10, &data_1400622b8);
}

int64_t sub_140043ac0(int64_t arg1, void* arg2)
{
    int64_t var_10 = arg1;
    return sub_140057a10(arg2, "TryFromIntError", 0xf, &var_10, &data_140062300);
}

void sub_140043b00(int64_t* arg1, int64_t* arg2)
{
    uint32_t r12 = arg2[2];
    char* r13 = *arg2;
    int64_t r14 = arg2[1];
    
    while (true)
    {
        uint32_t r15_1;
        
        if (r12 != 0)
        {
            arg2[2] = 0;
            r15_1 = 0;
        }
        else
        {
            if (r13 == r14)
                return;
            
            void* rax_1 = &r13[1];
            *arg2 = rax_1;
            char rdx = *r13;
            r12 = rdx;
            
            if (r12 >= 0)
            {
                r15_1 = 0;
                r13 = rax_1;
            }
            else
            {
                int32_t rcx_3 = (r12 & 0x1f);
                rax_1 = &r13[2];
                *arg2 = rax_1;
                int32_t r8_2 = (r13[1] & 0x3f);
                
                if (r12 <= 0xdf)
                {
                    r12 = ((rcx_3 << 6) | r8_2);
                    r15_1 = 0;
                    r13 = rax_1;
                }
                else
                {
                    rax_1 = &r13[3];
                    *arg2 = rax_1;
                    int32_t r12_3 = ((r13[2] & 0x3f) | (r8_2 << 6));
                    
                    if (rdx < 0xf0)
                    {
                        r12 = (r12_3 | (rcx_3 << 0xc));
                        
                        if (r12 <= 0xffff)
                        {
                            r15_1 = 0;
                            r13 = rax_1;
                        }
                        else
                        {
                        label_140043c29:
                            uint32_t r12_6 = ((r12 & 0x3ff) | 0xdc00);
                            arg2[2] = r12_6;
                            r13 = rax_1;
                            r15_1 = r12_6;
                            r12 = (((r12 + 0xff0000) >> 0xa) | 0xd800);
                        }
                    }
                    else
                    {
                        rax_1 = &r13[4];
                        *arg2 = rax_1;
                        r12 = (((r13[3] & 0x3f) | (r12_3 << 6)) | ((rcx_3 & 7) << 0x12));
                        
                        if (r12 > 0xffff)
                            goto label_140043c29;
                        
                        r15_1 = 0;
                        r13 = rax_1;
                    }
                }
            }
        }
        
        int64_t rbx_1 = arg1[2];
        
        if (rbx_1 == *arg1)
        {
            void* r8_5 = (r14 - r13);
            void* r8_6 = (r8_5 + 3);
            
            if (r8_5 >= -3)
                r8_6 = -ffffffffffffffff;
            
            sub_14005b3a0(arg1, rbx_1, (((r8_6 >> 2) - 0) + 2));
        }
        
        *(arg1[1] + (rbx_1 << 1)) = r12;
        arg1[2] = (rbx_1 + 1);
        r12 = r15_1;
    }
}

int64_t sub_140043c90(int64_t arg1, int64_t arg2)
{
    int64_t var_40 = -2;
    AddVectoredExceptionHandler(0, sub_14004d360);
    int32_t StackSizeInBytes = 0x5000;
    SetThreadStackGuarantee(&StackSizeInBytes);
    data_140071028(GetCurrentThread(), u"main");
    StackSizeInBytes = 0;
    sub_140044050(sub_140044240(&StackSizeInBytes));
    int64_t result = *(arg2 + 0x28)(arg1);
    
    if (data_140071144 != 4)
    {
        char var_68 = 1;
        StackSizeInBytes = &var_68;
        sub_14005b8e0(&StackSizeInBytes);
    }
    
    return result;
}

int64_t sub_140043d3a(void* arg1 @ rbp, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t rax = **(arg1 - 0x18);
    
    if (rax != 0)
        rax(*(arg1 - 0x20));
    
    int64_t rdx = *(*(arg1 - 0x18) + 8);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg1 - 0x20), rdx, *(*(arg1 - 0x18) + 0x10));
    
    if (data_140071144 != 4)
    {
        *(arg1 - 0x30) = 1;
        *(arg1 - 0x60) = (arg1 - 0x30);
        sub_14005b8e0((arg1 - 0x60));
    }
    
    return 0x65;
}

void sub_140043d71(void* arg1 @ rbp) __noreturn
{
    *(arg1 - 0x28) = 0;
    *(arg1 - 0x24) = 0;
    *(arg1 - 0x60) = &data_140062440;
    *(arg1 - 0x58) = 1;
    *(arg1 - 0x50) = (arg1 - 0x10);
    *(arg1 - 0x48) = {0};
    *(arg1 - 0x30) = sub_1400471c0((arg1 - 0x28), (arg1 - 0x60));
    sub_140042ab0((arg1 - 0x30));
    trap(0xd);
}

int64_t sub_140043dd0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(*(arg2 + 0x80));
    return &data_140043dc1;
}

int64_t sub_140043e00(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(nullptr);
    return &data_140043dc1;
}

int64_t sub_140043e30(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rax;
    int64_t rdx;
    rax = sub_14005b5a0(*(arg2 + 0x90));
    *(arg2 + 0x60) = rax;
    *(arg2 + 0x68) = rdx;
    return sub_140043d3a;
}

int64_t sub_140043e70(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rax;
    int64_t rdx;
    rax = sub_14005b5a0(nullptr);
    *(arg2 + 0x60) = rax;
    *(arg2 + 0x68) = rdx;
    return sub_140043d3a;
}

void* sub_140043eb0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0x68);
    int64_t rdx = *(result + 8);
    
    if (rdx == 0)
        return result;
    
    return j_sub_140049af0(*(arg2 + 0x60), rdx, *(*(arg2 + 0x68) + 0x10));
}

int64_t sub_140043ef0(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(nullptr);
    return sub_140043d71;
}

int64_t sub_140043f20(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(*(arg2 + 0x88));
    return sub_140043d71;
}

int64_t sub_140043f50(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(*(arg2 + 0x98));
    return &data_140043dc1;
}

int64_t sub_140043f80(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    sub_14005b5a0(nullptr);
    return &data_140043dc1;
}

void sub_140043fb0() __noreturn
{
    int32_t var_18 = 0;
    char var_14 = 0;
    char const (** const var_50)[0x34] = &data_140062488;
    int64_t var_48 = 1;
    void var_10;
    void* var_40 = &var_10;
    int128_t var_38 = {0};
    int64_t var_20 = sub_1400471c0(&var_18, &var_50);
    sub_140042ab0(&var_20);
    trap(0xd);
}

int64_t sub_140044010()
{
    void var_20;
    void* rdx;
    sub_1400577e0(&var_20, rdx, "AccessErrorcannot access a Threa…", 0xb);
    return sub_140056bb0(&var_20);
}

void* sub_140044050(int64_t* arg1)
{
    int64_t var_18 = -2;
    int64_t var_30 = arg1[5];
    int64_t* var_40 = arg1;
    int64_t* var_38 = &var_30;
    TEB* gsbase;
    uint32_t rax_3 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68);
    void var_20;
    
    if (rax_3 == 0)
    {
        char var_19_1 = 1;
        sub_14004e210((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60), sub_14004e1a0);
        *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68) = 1;
    }
    else if (rax_3 != 1)
    {
        int64_t temp0 = *arg1;
        *arg1 -= 1;
        
        if (temp0 == 1)
            sub_140043560(&var_40);
        
        char const (** const var_98)[0x1f] = &data_140062508;
        sub_14005ca50("cannot access a Thread Local Sto…", 0x46, &var_20, &data_140062090[0x10]);
        /* no return */
    }
    
    if (*(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60) == 0)
    {
        void* result = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
        *(result + 0x60) = arg1;
        *(result + 0x58) = var_30;
        return result;
    }
    
    int64_t* var_48 = arg1;
    int64_t* var_50 = arg1;
    int32_t var_28 = 0;
    char var_24 = 0;
    char const (** const var_88)[0x50] = &data_140062570;
    int64_t var_80 = 1;
    void* var_78 = &var_20;
    int128_t var_70 = {0};
    int64_t var_58 = sub_1400471c0(&var_28, &var_88);
    sub_140042ab0(&var_58);
    trap(0xd);
}

int64_t* sub_1400441d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* result = *(arg2 + 0x70);
    int64_t temp0 = *result;
    *result -= 1;
    
    if (temp0 == 1)
        result = sub_140043560((arg2 + 0x68));
    
    *(arg2 + 0x9f) = 0;
    return result;
}

void sub_140044200(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x9f) != 0)
    {
        int64_t* rax = *(arg2 + 0x78);
        int64_t temp0_1 = *rax;
        *rax -= 1;
        
        if (temp0_1 == 1)
            sub_140043560((arg2 + 0x78));
    }
}

int64_t* sub_140044240(int128_t* arg1)
{
    int64_t var_20 = -2;
    char var_21 = 1;
    int64_t* result_3;
    uint64_t rdx;
    result_3 = sub_1400562c0(8, 0x28);
    int64_t* result;
    
    if (rdx == 0)
    {
        result = result_3;
        
        if (result == 0)
        {
        label_1400442f0:
            char var_21_1 = 1;
            sub_14005c5f0();
            /* no return */
        }
    }
    else
    {
        data_140071141;
        result = j_sub_140049a90(rdx, result_3);
        
        if (result == 0)
            goto label_1400442f0;
    }
    
    *result = 1;
    result[1] = 1;
    int64_t* result_1 = result;
    result[4] = arg1[1];
    *(result + 0x10) = *arg1;
    int64_t rax_3 = data_1400711d8;
    int64_t rcx_2;
    bool z_1;
    
    do
    {
        if (rax_3 == -1)
        {
            int64_t* result_2 = result;
            sub_14005b4e0();
            /* no return */
        }
        
        rcx_2 = (rax_3 + 1);
        
        if (rax_3 == data_1400711d8)
        {
            data_1400711d8 = rcx_2;
            z_1 = true;
        }
        else
        {
            rax_3 = data_1400711d8;
            z_1 = false;
        }
    } while (!(z_1));
    result[5] = rcx_2;
    result[6] = 0;
    return result;
}

int64_t* sub_140044310(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* result = *(arg2 + 0x30);
    int64_t temp0 = *result;
    *result -= 1;
    
    if (temp0 == 1)
        result = sub_1400435c0((arg2 + 0x28));
    
    *(arg2 + 0x47) = 0;
    return result;
}

void sub_140044340(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x47) != 0)
        sub_140042930(*(arg2 + 0x38));
}

int128_t* sub_140044370(int128_t* arg1)
{
    int64_t var_48 = -2;
    uint64_t var_60 = 0;
    void* lpBuffer_2 = 2;
    int64_t var_50 = 0;
    uint64_t r8 = 0x200;
    void* lpBuffer_1 = 2;
    uint64_t rsi = 0;
    uint64_t rdi = 0;
    uint64_t rbx = 0;
    
    while (true)
    {
        uint64_t r14_1 = 0x200;
        void var_490;
        void* lpBuffer = &var_490;
        uint64_t r12_1 = r8;
        
        while (true)
        {
            SetLastError(NO_ERROR);
            uint32_t rax_2 = GetCurrentDirectoryW(r12_1, lpBuffer);
            uint64_t r13_1 = rax_2;
            enum WIN32_ERROR rax_3;
            
            if (rax_2 == 0)
                rax_3 = GetLastError();
            
            int128_t* result;
            uint64_t rdx_4;
            
            if ((rax_2 == 0 && rax_3 != NO_ERROR))
            {
                result = arg1;
                *(result + 8) = ((GetLastError() << 0x20) | 2);
                *result = -0x8000000000000000;
                rdx_4 = var_60;
                
                if (rdx_4 != 0)
                    j_sub_140049af0(lpBuffer_2, (rdx_4 * 2), 2);
            }
            else
            {
                r8 = r13_1;
                
                if (r12_1 == r8)
                {
                    if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
                    {
                        sub_14005c7a0("internal error: entered unreacha…");
                        /* no return */
                    }
                    
                    uint64_t r12_2 = (r12_1 * 2);
                    
                    if (r12_2 >= 0xffffffff)
                        r12_2 = 0xffffffff;
                    
                    r8 = r12_2;
                    
                    if (r8 < 0x201)
                        break;
                    
                    goto label_140044410;
                }
                
                if (r12_1 >= r8)
                {
                    if (r14_1 < r8)
                    {
                        sub_14005cb50(r8, r14_1);
                        /* no return */
                    }
                    
                    int128_t var_90;
                    sub_140047380(&var_90, lpBuffer, r8, r13_1);
                    int128_t zmm0_1 = var_90;
                    result = arg1;
                    int128_t var_80;
                    result[1] = var_80;
                    *result = zmm0_1;
                    rdx_4 = var_60;
                    
                    if (rdx_4 != 0)
                        j_sub_140049af0(lpBuffer_2, (rdx_4 * 2), 2);
                }
                else
                {
                    if (r8 < 0x201)
                        break;
                    
                label_140044410:
                    uint64_t r8_1 = (r8 - rbx);
                    
                    if (r8_1 > (rdi - rbx))
                    {
                        sub_14005b3a0(&var_60, rbx, r8_1);
                        rsi = var_60;
                        lpBuffer_1 = lpBuffer_2;
                    }
                    
                    rbx = 0xffffffff;
                    
                    if (rsi < 0xffffffff)
                        rbx = rsi;
                    
                    uint64_t var_50_1 = rbx;
                    rdi = rsi;
                    r14_1 = rbx;
                    lpBuffer = lpBuffer_1;
                    r12_1 = rbx;
                    continue;
                }
            }
            return result;
        }
    }
}

void sub_1400445a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x458);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x460), (rdx * 2), 2);
}

int64_t* sub_1400445f0(int64_t* arg1)
{
    int64_t var_48 = -2;
    int64_t var_4c8;
    int64_t rdx;
    int64_t r8;
    sub_14004d0f0(&var_4c8, rdx, r8);
    int64_t rax = var_4c8;
    PWSTR lpName_1;
    
    if (rax != -0x8000000000000000)
    {
        PWSTR lpName = lpName_1;
        uint64_t var_60 = 0;
        int64_t* lpBuffer_2 = 2;
        int64_t var_50_1 = 0;
        uint64_t r8_1 = 0x200;
        int64_t* lpBuffer_1 = 2;
        uint64_t rdi_1 = 0;
        uint64_t rbx_1 = 0;
        uint64_t r14_1 = 0;
    label_1400446bf:
        uint64_t r15_1 = 0x200;
        int64_t* lpBuffer = &var_4c8;
        uint64_t r13_1 = r8_1;
        
        while (true)
        {
            SetLastError(NO_ERROR);
            uint32_t rax_2 = GetEnvironmentVariableW(lpName, lpBuffer, r13_1);
            enum WIN32_ERROR rax_3;
            
            if (rax_2 == 0)
                rax_3 = GetLastError();
            
            int64_t var_a0;
            
            if ((rax_2 == 0 && rax_3 != NO_ERROR))
            {
                var_a0 = ((GetLastError() << 0x20) | 2);
                int64_t var_a8_1 = -0x8000000000000000;
                uint64_t rdx_6 = var_60;
                
                if (rdx_6 != 0)
                    j_sub_140049af0(lpBuffer_2, (rdx_6 * 2), 2);
                
                *arg1 = -0x8000000000000000;
                sub_140042850(&var_a0);
            }
            else
            {
                r8_1 = rax_2;
                
                if (r13_1 != r8_1)
                {
                    if (r13_1 < r8_1)
                    {
                        if (r8_1 < 0x201)
                            goto label_1400446bf;
                        
                        goto label_1400446d0;
                    }
                    
                    if (r15_1 < r8_1)
                    {
                        sub_14005cb50(r8_1, r15_1);
                        /* no return */
                    }
                    
                    int128_t var_c8;
                    sub_140047380(&var_c8, lpBuffer, r8_1, r13_1);
                    int64_t var_a8;
                    var_a8 = var_c8;
                    uint64_t rdx_4 = var_60;
                    
                    if (rdx_4 != 0)
                        j_sub_140049af0(lpBuffer_2, (rdx_4 * 2), 2);
                    
                    if (var_a8 == -0x8000000000000000)
                    {
                        *arg1 = -0x8000000000000000;
                        sub_140042850(&var_a0);
                    }
                    else
                    {
                        int128_t var_b8;
                        *(arg1 + 0x10) = var_b8;
                        *arg1 = var_a8;
                    }
                }
                else
                {
                    if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
                    {
                        sub_14005c7a0("internal error: entered unreacha…");
                        /* no return */
                    }
                    
                    uint64_t r13_2 = (r13_1 * 2);
                    
                    if (r13_2 >= 0xffffffff)
                        r13_2 = 0xffffffff;
                    
                    r8_1 = r13_2;
                    
                    if (r8_1 < 0x201)
                        goto label_1400446bf;
                    
                label_1400446d0:
                    uint64_t r8_2 = (r8_1 - r14_1);
                    
                    if (r8_2 > (rbx_1 - r14_1))
                    {
                        sub_14005b3a0(&var_60, r14_1, r8_2);
                        rdi_1 = var_60;
                        lpBuffer_1 = lpBuffer_2;
                    }
                    
                    r14_1 = 0xffffffff;
                    
                    if (rdi_1 < 0xffffffff)
                        r14_1 = rdi_1;
                    
                    uint64_t var_50_2 = r14_1;
                    rbx_1 = rdi_1;
                    r15_1 = r14_1;
                    lpBuffer = lpBuffer_1;
                    r13_1 = r14_1;
                    continue;
                }
            }
            
            if (rax == 0)
                break;
            
            j_sub_140049af0(lpName, (rax * 2), 2);
            break;
        }
    }
    else
    {
        sub_140042850(&lpName_1);
        *arg1 = -0x8000000000000000;
    }
    return arg1;
}

void sub_1400448f0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x488);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x490), (rdx * 2), 2);
}

void sub_140044940(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x480) != 0)
        j_sub_140049af0(*(arg2 + 0x478), (*(arg2 + 0x480) * 2), 2);
}

int128_t** sub_1400449a0(int128_t** arg1)
{
    sub_1400449c0(arg1);
    return arg1;
}

int128_t** sub_1400449c0(int128_t** arg1)
{
    uint64_t r13;
    uint64_t var_20 = r13;
    int128_t zmm6;
    int128_t var_58 = zmm6;
    int64_t var_60 = -2;
    PWSTR rax = GetCommandLineW();
    int64_t var_98 = 0;
    int128_t* var_90 = 8;
    int64_t var_88 = 0;
    int16_t rsi_1;
    PWSTR rdi_1;
    
    if (rax != 0)
    {
        rdi_1 = rax;
        rsi_1 = *rax;
    }
    
    int64_t rbx_3;
    int64_t rsi_9;
    int128_t* rdi_2;
    int64_t var_c0;
    int64_t var_b0;
    int32_t var_78;
    
    if ((rax == 0 || rsi_1 == 0))
    {
        sub_14004c6b0(&var_c0);
        int64_t rdx_8 = var_c0;
        int64_t var_a0_1;
        int64_t var_80_1;
        uint64_t rbx;
        int64_t rsi_8;
        int64_t var_b8;
        
        if (rdx_8 != -0x8000000000000000)
        {
            var_80_1 = rdx_8;
            var_a0_1 = var_b8;
            rsi_8 = var_b0;
            char var_a8;
            rbx = var_a8;
            int32_t var_a7;
            var_78 = var_a7;
            var_78 = var_a7;
        }
        else
        {
            var_c0 = var_b8;
            sub_140042850(&var_c0);
            var_a0_1 = 1;
            rbx = 1;
            rsi_8 = 0;
            var_80_1 = 0;
        }
        sub_1400438e0(&var_98);
        rdi_2 = var_90;
        *rdi_2 = var_80_1;
        *(rdi_2 + 8) = var_a0_1;
        rdi_2[1] = rsi_8;
        *(rdi_2 + 0x18) = rbx;
        int32_t rax_18 = var_78;
        *(rdi_2 + 0x1c) = var_78;
        *(rdi_2 + 0x19) = rax_18;
        rbx_3 = var_98;
        rsi_9 = 1;
    }
    else
    {
        int64_t var_d8 = 0;
        int16_t* var_d0_1 = 2;
        int64_t var_c8_1 = 0;
        int16_t* rax_1 = 2;
        uint64_t r14_1 = 0;
        char r15_1 = 0;
        
        if (rsi_1 != 0)
        {
            while (true)
            {
                rdi_1 = &rdi_1[1];
                uint32_t rcx;
                
                if (rsi_1 != 9)
                    rcx = rsi_1;
                
                if ((rsi_1 == 9 || rcx == 0x20))
                {
                    if ((r15_1 & 1) == 0)
                        break;
                }
                else if (rcx == 0x22)
                {
                    r15_1 = (!(r15_1) & 1);
                    rsi_1 = *rdi_1;
                    
                    if (rsi_1 == 0)
                        break;
                    
                    continue;
                }
                
                if (r14_1 == var_d8)
                {
                    sub_140043840(&var_d8);
                    rax_1 = var_d0_1;
                }
                
                rax_1[r14_1] = rsi_1;
                r14_1 += 1;
                uint64_t var_c8_2 = r14_1;
                rsi_1 = *rdi_1;
                
                if (rsi_1 == 0)
                    break;
            }
        }
        
        while (true)
        {
            uint32_t rax_2 = *rdi_1;
            
            if ((rax_2 != 0x20 && rax_2 != 9))
                break;
            
            rdi_1 = &rdi_1[1];
        }
        
        sub_140047380(&var_c0, var_d0_1, r14_1, r13);
        sub_1400438e0(&var_98);
        int128_t zmm0_1 = var_c0;
        var_90[1] = var_b0;
        *var_90 = zmm0_1;
        int64_t var_88_1 = 1;
        var_78 = 0;
        int16_t* var_70_1 = 2;
        uint64_t var_68_1 = 0;
        int16_t* r15_2 = 2;
        uint64_t r13_1 = 0;
        zmm6 = *u"\\\\\\\\";
        int32_t rax_4 = 0;
        
        while (true)
        {
            int32_t r12_1 = rax_4;
            uint32_t rsi_3 = *rdi_1;
            
            if (rsi_3 == 0)
            {
                int64_t rdx_9;
                
                if ((r13_1 != 0 || r12_1 != 0))
                {
                label_140044ed9:
                    sub_140047380(&var_c0, var_70_1, r13_1, r13_1);
                    
                    if (var_88_1 == var_98)
                        sub_1400438e0(&var_98);
                    
                    rdi_2 = var_90;
                    int64_t rax_20 = (var_88_1 << 5);
                    int128_t zmm0_3 = var_c0;
                    *((rdi_2 + rax_20) + 0x10) = var_b0;
                    *(rdi_2 + rax_20) = zmm0_3;
                    rsi_9 = (var_88_1 + 1);
                    rbx_3 = var_98;
                    rdx_9 = var_78;
                    
                    if (rdx_9 == 0)
                        break;
                }
                else
                {
                    rdi_2 = var_90;
                    rsi_9 = var_88_1;
                    rbx_3 = var_98;
                    rdx_9 = var_78;
                    
                    if (rdx_9 == 0)
                        break;
                }
                
                j_sub_140049af0(var_70_1, (rdx_9 * 2), 2);
                break;
            }
            
            PWSTR rbx_1 = rdi_1;
            rdi_1 = &rdi_1[1];
            
            if (rsi_3 <= 0x21)
            {
                if (((rsi_3 != 9 && rsi_3 != 0x20) || r12_1 != 0))
                    goto label_140044c64;
                
                r15_2 = var_70_1;
                sub_140047380(&var_c0, r15_2, r13_1, r13_1);
                
                if (var_88_1 == var_98)
                    sub_1400438e0(&var_98);
                
                int64_t rcx_7 = (var_88_1 << 5);
                int128_t zmm0_2 = var_c0;
                *((var_90 + rcx_7) + 0x10) = var_b0;
                *(var_90 + rcx_7) = zmm0_2;
                var_88_1 += 1;
                var_68_1 = 0;
                
                while (true)
                {
                    uint32_t rax_6 = *rdi_1;
                    
                    if ((rax_6 != 0x20 && rax_6 != 9))
                        break;
                    
                    rdi_1 = &rdi_1[1];
                }
                
                r13_1 = 0;
                rax_4 = r12_1;
                continue;
            }
            
            if (rsi_3 == 0x22)
            {
                rax_4 = 1;
                
                if (r12_1 == 0)
                    continue;
                else
                {
                    uint32_t rcx_10 = *rdi_1;
                    
                    if (rcx_10 == 0x22)
                    {
                        if (r13_1 == var_78)
                            sub_140043840(&var_78);
                        
                        r15_2 = var_70_1;
                        r15_2[r13_1] = 0x22;
                        r13_1 += 1;
                        var_68_1 = r13_1;
                        
                        if (rbx_1[1] != 0)
                            rdi_1 = &rbx_1[2];
                        
                        rax_4 = r12_1;
                        continue;
                    }
                    else
                    {
                        rax_4 = 0;
                        
                        if (rcx_10 != 0)
                            continue;
                    }
                }
                
                goto label_140044ed9;
            }
            
            if (rsi_3 != 0x5c)
            {
            label_140044c64:
                
                if (r13_1 == var_78)
                    sub_140043840(&var_78);
                
                r15_2 = var_70_1;
                r15_2[r13_1] = rsi_3;
                r13_1 += 1;
            }
            else
            {
                int16_t i = *rdi_1;
                int64_t rsi_6 = 0;
                
                while (i == 0x5c)
                {
                    rdi_1 = &rdi_1[1];
                    i = rbx_1[(rsi_6 + 2)];
                    rsi_6 += 1;
                }
                
                if (i == 0x22)
                {
                    uint64_t i_5 = ((rsi_6 + 1) >> 1);
                    
                    if ((var_78 - r13_1) < i_5)
                    {
                        sub_14005b3a0(&var_78, r13_1, i_5);
                        r13_1 = var_68_1;
                    label_140044ccb:
                        r15_2 = var_70_1;
                        uint64_t i_3;
                        
                        if ((rsi_6 + 1) >= 0x20)
                        {
                            int64_t rcx_15 = (i_5 & 0xfffffffffffffff0);
                            i_3 = (i_5 & 0xf);
                            void* rdx_7 = &r15_2[(r13_1 + 8)];
                            r13_1 += rcx_15;
                            int64_t r8_6 = 0;
                            
                            do
                            {
                                *((rdx_7 + (r8_6 << 1)) - 0x10) = zmm6;
                                *(rdx_7 + (r8_6 << 1)) = zmm6;
                                r8_6 += 0x10;
                            } while (rcx_15 != r8_6);
                            
                            if (i_5 != rcx_15)
                                goto label_140044d8d;
                        }
                        else
                        {
                            i_3 = i_5;
                        label_140044d8d:
                            uint64_t i_1;
                            
                            do
                            {
                                r15_2[r13_1] = 0x5c;
                                r13_1 += 1;
                                i_1 = i_3;
                                i_3 -= 1;
                            } while (i_1 != 1);
                        }
                    }
                    else if ((rsi_6 + 1) >= 2)
                        goto label_140044ccb;
                    
                    var_68_1 = r13_1;
                    rax_4 = r12_1;
                    
                    if ((rsi_6 & 1) != 0)
                        continue;
                    else
                    {
                        i_5 = *rdi_1 != 0;
                        
                        if (r13_1 == var_78)
                            sub_140043840(&var_78);
                        
                        int64_t rsi_7;
                        rsi_7 = i_5;
                        rdi_1 = &rdi_1[rsi_7];
                        r15_2 = var_70_1;
                        r15_2[r13_1] = 0x22;
                    }
                    
                    r13_1 += 1;
                }
                else if ((var_78 - r13_1) < (rsi_6 + 1))
                {
                    sub_14005b3a0(&var_78, r13_1, (rsi_6 + 1));
                    r15_2 = var_70_1;
                    r13_1 = var_68_1;
                label_140044ce6:
                    uint64_t i_4;
                    
                    if ((rsi_6 + 1) >= 0x10)
                    {
                        int64_t rcx_13 = ((rsi_6 + 1) & 0xfffffffffffffff0);
                        i_4 = ((rsi_6 + 1) & 0xf);
                        void* rdx_5 = &r15_2[(r13_1 + 8)];
                        r13_1 += rcx_13;
                        int64_t r8_5 = 0;
                        
                        do
                        {
                            *((rdx_5 + (r8_5 << 1)) - 0x10) = zmm6;
                            *(rdx_5 + (r8_5 << 1)) = zmm6;
                            r8_5 += 0x10;
                        } while (rcx_13 != r8_5);
                        
                        if ((rsi_6 + 1) != rcx_13)
                            goto label_140044d3d;
                    }
                    else
                    {
                        i_4 = (rsi_6 + 1);
                    label_140044d3d:
                        uint64_t i_2;
                        
                        do
                        {
                            r15_2[r13_1] = 0x5c;
                            r13_1 += 1;
                            i_2 = i_4;
                            i_4 -= 1;
                        } while (i_2 != 1);
                    }
                }
                else if (rsi_6 != -1)
                    goto label_140044ce6;
            }
            
            var_68_1 = r13_1;
            rax_4 = r12_1;
            continue;
        }
        
        int64_t rdx_12 = var_d8;
        
        if (rdx_12 != 0)
            j_sub_140049af0(var_d0_1, (rdx_12 * 2), 2);
    }
    *arg1 = rdi_2;
    arg1[1] = rdi_2;
    arg1[2] = rbx_3;
    arg1[3] = &rdi_2[(rsi_9 * 2)];
    return arg1;
}

void sub_140044f90(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x20);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x28), (rdx * 2), 2);
}

void sub_140044ff0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x38);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x40), rdx, 1);
}

void sub_140045040(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x80);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x88), (rdx * 2), 2);
}

void sub_1400450a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x38);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x40), rdx, 1);
}

void sub_1400450f0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x38);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x40), rdx, 1);
}

void sub_140045140(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x78) != 0)
        j_sub_140049af0(*(arg2 + 0x58), *(arg2 + 0x78), 1);
}

int64_t sub_1400451a0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_1400429f0((arg2 + 0x60));
}

int64_t* sub_1400451e0(int64_t* arg1, void* arg2)
{
    int64_t var_20 = -2;
    int64_t* r9 = *(arg2 + 8);
    int64_t rax_2;
    
    if (r9 != *(arg2 + 0x18))
    {
        *(arg2 + 8) = &r9[4];
        rax_2 = *r9;
    }
    
    if ((r9 != *(arg2 + 0x18) && rax_2 != -0x8000000000000000))
    {
        char* r8_1 = r9[1];
        int64_t rdx = r9[2];
        
        if ((r9[3] == 0 && rdx != 0))
        {
            void* r10_2 = &r8_1[rdx];
            char* rsi_1 = r8_1;
            void* r11_5;
            
            do
            {
                r11_5 = &rsi_1[1];
                char rbx_1 = *rsi_1;
                
                if (rbx_1 < 0)
                {
                    if (rbx_1 < 0xe0)
                    {
                        if (r11_5 != r10_2)
                            r11_5 = &rsi_1[2];
                    }
                    else if (rbx_1 != 0xed)
                    {
                        void* rsi_4 = &rsi_1[2];
                        
                        if (r11_5 == r10_2)
                            rsi_4 = r11_5;
                        
                        void* const r11_7;
                        r11_7 = rsi_4 != r10_2;
                        r11_5 = (r11_7 + rsi_4);
                        
                        if (rbx_1 >= 0xf0)
                        {
                            int64_t rsi_5;
                            rsi_5 = r11_5 != r10_2;
                            r11_5 += rsi_5;
                        }
                    }
                    else
                    {
                        if (r11_5 == r10_2)
                            break;
                        
                        if (&rsi_1[2] == r10_2)
                            break;
                        
                        if (rsi_1[1] > 0x9f)
                        {
                            uint64_t r9_3 = ((*(r9 + 0x19) | (((*(r9 + 0x1f) << 0x10) | *(r9 + 0x1d)) << 0x20)) << 8);
                            int64_t var_40 = rax_2;
                            char* var_38 = r8_1;
                            int64_t var_30 = rdx;
                            uint64_t var_28 = r9_3;
                            char const (** const var_48)[0x17] = &data_1400626a8;
                            sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_40, &data_140062130);
                            /* no return */
                        }
                        
                        r11_5 = &rsi_1[3];
                    }
                }
                
                rsi_1 = r11_5;
            } while (r11_5 != r10_2);
        }
        
        *arg1 = rax_2;
        arg1[1] = r8_1;
        arg1[2] = rdx;
    }
    else
        *arg1 = -0x8000000000000000;
    
    return arg1;
}

void sub_140045330(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x28);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x30), rdx, 1);
}

int64_t* sub_140045370(int64_t* arg1, int64_t arg2, int64_t arg3, uint64_t arg4 @ rdi)
{
    uint64_t var_18 = arg4;
    int64_t var_20 = -2;
    int32_t var_b0 = 0;
    int64_t var_a8 = {0};
    int32_t var_98 = 7;
    int64_t var_94 = 0;
    int16_t var_8c = 0;
    *var_94[4] = 1;
    int64_t rax_1;
    HANDLE hObject_1;
    rax_1 = sub_14004b9d0(arg2, arg3, &var_b0);
    
    if (rax_1 == 0)
    {
        HANDLE hObject = hObject_1;
        sub_14004bc70(&var_b0, hObject_1);
        int64_t var_58;
        int64_t var_50;
        uint64_t var_40;
        int64_t var_38_1;
        int64_t var_30_1;
        int64_t r8_1;
        
        if (var_b0 != 2)
        {
            uint64_t var_78;
            arg4 = var_78;
            var_40 = 0;
            var_38_1 = 1;
            var_30_1 = 0;
            r8_1 = 1;
            
            if (arg4 == 0)
            {
                arg4 = 0;
                goto label_1400454ba;
            }
            
            var_a8 = 0;
            sub_140043700(&var_58, (!(arg4) >> 0x3f), arg4, &var_b0);
            
            if (var_58 == 0)
            {
                var_38_1 = var_50;
                var_40 = arg4;
                r8_1 = 1;
                goto label_1400454ba;
            }
            
            arg1[1] = 0x2600000003;
            *arg1 = -0x8000000000000000;
        }
        else
        {
            var_50 = var_a8;
            var_58 = 1;
            sub_140042850(&var_50);
            var_40 = 0;
            var_38_1 = 1;
            var_30_1 = 0;
            r8_1 = 0;
        label_1400454ba:
            int64_t rax_4;
            int64_t rdx_5;
            rax_4 = sub_1400461a0(&hObject, &var_40, r8_1, arg4);
            
            if (rax_4 == 0)
            {
                arg1[2] = var_30_1;
                *arg1 = var_40;
            }
            else
            {
                arg1[1] = rdx_5;
                uint64_t rdx_6 = var_40;
                *arg1 = -0x8000000000000000;
                
                if (rdx_6 != 0)
                    j_sub_140049af0(var_38_1, rdx_6, 1);
            }
        }
        CloseHandle(hObject);
    }
    else
    {
        arg1[1] = hObject_1;
        *arg1 = -0x8000000000000000;
    }
    
    return arg1;
}

int64_t sub_140045520(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return CloseHandle(*(arg2 + 0xb0));
}

void sub_140045550(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x98);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0xa0), rdx, 1);
}

HANDLE sub_140045590(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t var_40 = -2;
    int64_t rsi = arg4;
    int64_t rdi = arg3;
    int32_t var_70 = 0;
    int128_t var_68 = {0};
    int32_t var_58 = 7;
    int64_t var_54 = 0;
    int16_t var_4c = 0;
    *var_54[5] = 1;
    var_4c = 1;
    *var_54[7] = 1;
    int64_t rax;
    HANDLE hObject_2;
    rax = sub_14004b9d0(arg1, arg2, &var_70);
    HANDLE hObject = hObject_2;
    
    if (rax != 0)
        return hObject;
    
    HANDLE rsi_1;
    
    if (rsi == 0)
    {
    label_1400457b2:
        rsi_1 = nullptr;
    }
    else
    {
        HANDLE hObject_1 = hObject;
        
        while (true)
        {
            int64_t rax_2;
            HANDLE rdx_1;
            rax_2 = sub_14004c1b0(hObject, rdi, rsi, nullptr);
            var_70 = rax_2;
            var_68 = rdx_1;
            
            if (rax_2 == 0)
            {
                if (rdx_1 == 0)
                {
                    rdx_1 = &data_140062950;
                label_1400457b9:
                    rsi_1 = rdx_1;
                    hObject = hObject_1;
                    break;
                }
                
                if (rsi < rdx_1)
                {
                    sub_14005cae0(rdx_1, rsi);
                    /* no return */
                }
                
                rdi += rdx_1;
                rsi -= rdx_1;
                goto label_140045633;
            }
            
            uint64_t rax_7;
            
            switch ((rdx_1 & 3))
            {
                case 0:
                {
                    rax_7 = *(rdx_1 + 0x10);
                    break;
                }
                case 1:
                {
                    rax_7 = *(rdx_1 + 0xf);
                    break;
                }
                case 2:
                {
                    goto label_1400457b9;
                }
                case 3:
                {
                    rax_7 = (rdx_1 >> 0x20);
                    
                    if (rax_7 > 0x28)
                        rax_7 = 0x29;
                    else
                        switch (rax_7)
                        {
                            case 0:
                            {
                                rax_7 = 0;
                                break;
                            }
                            case 1:
                            {
                                rax_7 = 1;
                                break;
                            }
                            case 2:
                            {
                                rax_7 = 2;
                                break;
                            }
                            case 3:
                            {
                                rax_7 = 3;
                                break;
                            }
                            case 4:
                            {
                                rax_7 = 4;
                                break;
                            }
                            case 5:
                            {
                                rax_7 = 5;
                                break;
                            }
                            case 6:
                            {
                                rax_7 = 6;
                                break;
                            }
                            case 7:
                            {
                                rax_7 = 7;
                                break;
                            }
                            case 8:
                            {
                                rax_7 = 8;
                                break;
                            }
                            case 9:
                            {
                                rax_7 = 9;
                                break;
                            }
                            case 0xa:
                            {
                                rax_7 = 0xa;
                                break;
                            }
                            case 0xb:
                            {
                                rax_7 = 0xb;
                                break;
                            }
                            case 0xc:
                            {
                                rax_7 = 0xc;
                                break;
                            }
                            case 0xd:
                            {
                                rax_7 = 0xd;
                                break;
                            }
                            case 0xe:
                            {
                                rax_7 = 0xe;
                                break;
                            }
                            case 0xf:
                            {
                                rax_7 = 0xf;
                                break;
                            }
                            case 0x10:
                            {
                                rax_7 = 0x10;
                                break;
                            }
                            case 0x11:
                            {
                                rax_7 = 0x11;
                                break;
                            }
                            case 0x12:
                            {
                                rax_7 = 0x12;
                                break;
                            }
                            case 0x13:
                            {
                                rax_7 = 0x13;
                                break;
                            }
                            case 0x14:
                            {
                                rax_7 = 0x14;
                                break;
                            }
                            case 0x15:
                            {
                                rax_7 = 0x15;
                                break;
                            }
                            case 0x16:
                            {
                                rax_7 = 0x16;
                                break;
                            }
                            case 0x17:
                            {
                                rax_7 = 0x17;
                                break;
                            }
                            case 0x18:
                            {
                                rax_7 = 0x18;
                                break;
                            }
                            case 0x19:
                            {
                                rax_7 = 0x19;
                                break;
                            }
                            case 0x1a:
                            {
                                rax_7 = 0x1a;
                                break;
                            }
                            case 0x1b:
                            {
                                rax_7 = 0x1b;
                                break;
                            }
                            case 0x1c:
                            {
                                rax_7 = 0x1c;
                                break;
                            }
                            case 0x1d:
                            {
                                rax_7 = 0x1d;
                                break;
                            }
                            case 0x1e:
                            {
                                rax_7 = 0x1e;
                                break;
                            }
                            case 0x1f:
                            {
                                rax_7 = 0x1f;
                                break;
                            }
                            case 0x20:
                            {
                                rax_7 = 0x20;
                                break;
                            }
                            case 0x21:
                            {
                                rax_7 = 0x21;
                                break;
                            }
                            case 0x22:
                            {
                                rax_7 = 0x22;
                                break;
                            }
                            case 0x23:
                            {
                                rax_7 = 0x23;
                                break;
                            }
                            case 0x24:
                            {
                                rax_7 = 0x24;
                                break;
                            }
                            case 0x25:
                            {
                                rax_7 = 0x25;
                                break;
                            }
                            case 0x26:
                            {
                                rax_7 = 0x26;
                                break;
                            }
                            case 0x27:
                            {
                                rax_7 = 0x27;
                                break;
                            }
                            case 0x28:
                            {
                                rax_7 = 0x28;
                                break;
                            }
                        }
                    break;
                }
            }
            
            if (rax_7 != 0x23)
                goto label_1400457b9;
            
            sub_140042850(&var_68);
        label_140045633:
            hObject = hObject_1;
            
            if (rsi == 0)
                goto label_1400457b2;
        }
    }
    
    CloseHandle(hObject);
    return rsi_1;
}

int64_t sub_1400457f0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return CloseHandle(*(arg2 + 0x50));
}

void* sub_140045830(void* arg1)
{
    int64_t var_40 = -2;
    int64_t r14 = *(arg1 + 0x10);
    
    if (r14 != 0)
    {
        void* rsi_1 = (arg1 + 0x19);
        void* r9_1 = nullptr;
        void* var_50_1 = arg1;
        
        while (true)
        {
            *(arg1 + 0x18) = 1;
            void* result_3 = (r14 - r9_1);
            int64_t rax_1;
            void* result;
            rax_1 = sub_14004c930(STD_OUTPUT_HANDLE, (*(arg1 + 8) + r9_1), result_3, rsi_1);
            int64_t var_70_1 = rax_1;
            void* result_1 = result;
            
            if (rax_1 != 1)
                goto label_140045910;
            
            uint64_t rax_3 = (result & 3);
            arg1 = var_50_1;
            void* result_2;
            uint64_t rax_4;
            void* r9_3;
            
            if (rax_3 < 2)
            {
                int64_t var_60_1 = 1;
                result_2 = result;
                *(arg1 + 0x18) = 0;
                r9_3 = r9_1;
                
                if (rax_3 != 1)
                    rax_4 = *(result + 0x10);
                else
                    rax_4 = *(result + 0xf);
                
            label_140045931:
                
                if (rax_4 != 0x23)
                    goto label_140045aa8;
                
                sub_140042850(&result_2);
                arg1 = var_50_1;
                goto label_140045880;
            }
            
            if (rax_3 != 2)
            {
                int64_t var_60_2 = 1;
                result_2 = result;
                *(arg1 + 0x18) = 0;
                rax_4 = (result >> 0x20);
                
                if (rax_4 > 0x28)
                {
                    rax_4 = 0x29;
                    r9_3 = r9_1;
                }
                else
                {
                    r9_3 = r9_1;
                    
                    switch (rax_4)
                    {
                        case 0:
                        {
                            rax_4 = 0;
                            break;
                        }
                        case 1:
                        {
                            rax_4 = 1;
                            break;
                        }
                        case 2:
                        {
                            rax_4 = 2;
                            break;
                        }
                        case 3:
                        {
                            rax_4 = 3;
                            break;
                        }
                        case 4:
                        {
                            rax_4 = 4;
                            break;
                        }
                        case 5:
                        {
                            rax_4 = 5;
                            break;
                        }
                        case 6:
                        {
                            rax_4 = 6;
                            break;
                        }
                        case 7:
                        {
                            rax_4 = 7;
                            break;
                        }
                        case 8:
                        {
                            rax_4 = 8;
                            break;
                        }
                        case 9:
                        {
                            rax_4 = 9;
                            break;
                        }
                        case 0xa:
                        {
                            rax_4 = 0xa;
                            break;
                        }
                        case 0xb:
                        {
                            rax_4 = 0xb;
                            break;
                        }
                        case 0xc:
                        {
                            rax_4 = 0xc;
                            break;
                        }
                        case 0xd:
                        {
                            rax_4 = 0xd;
                            break;
                        }
                        case 0xe:
                        {
                            rax_4 = 0xe;
                            break;
                        }
                        case 0xf:
                        {
                            rax_4 = 0xf;
                            break;
                        }
                        case 0x10:
                        {
                            rax_4 = 0x10;
                            break;
                        }
                        case 0x11:
                        {
                            rax_4 = 0x11;
                            break;
                        }
                        case 0x12:
                        {
                            rax_4 = 0x12;
                            break;
                        }
                        case 0x13:
                        {
                            rax_4 = 0x13;
                            break;
                        }
                        case 0x14:
                        {
                            rax_4 = 0x14;
                            break;
                        }
                        case 0x15:
                        {
                            rax_4 = 0x15;
                            break;
                        }
                        case 0x16:
                        {
                            rax_4 = 0x16;
                            break;
                        }
                        case 0x17:
                        {
                            rax_4 = 0x17;
                            break;
                        }
                        case 0x18:
                        {
                            rax_4 = 0x18;
                            break;
                        }
                        case 0x19:
                        {
                            rax_4 = 0x19;
                            break;
                        }
                        case 0x1a:
                        {
                            rax_4 = 0x1a;
                            break;
                        }
                        case 0x1b:
                        {
                            rax_4 = 0x1b;
                            break;
                        }
                        case 0x1c:
                        {
                            rax_4 = 0x1c;
                            break;
                        }
                        case 0x1d:
                        {
                            rax_4 = 0x1d;
                            break;
                        }
                        case 0x1e:
                        {
                            rax_4 = 0x1e;
                            break;
                        }
                        case 0x1f:
                        {
                            rax_4 = 0x1f;
                            break;
                        }
                        case 0x20:
                        {
                            rax_4 = 0x20;
                            break;
                        }
                        case 0x21:
                        {
                            rax_4 = 0x21;
                            break;
                        }
                        case 0x22:
                        {
                            rax_4 = 0x22;
                            break;
                        }
                        case 0x23:
                        {
                            rax_4 = 0x23;
                            break;
                        }
                        case 0x24:
                        {
                            rax_4 = 0x24;
                            break;
                        }
                        case 0x25:
                        {
                            rax_4 = 0x25;
                            break;
                        }
                        case 0x26:
                        {
                            rax_4 = 0x26;
                            break;
                        }
                        case 0x27:
                        {
                            rax_4 = 0x27;
                            break;
                        }
                        case 0x28:
                        {
                            rax_4 = 0x28;
                            break;
                        }
                    }
                }
                
                goto label_140045931;
            }
            
            if ((result >> 0x20) != 6)
            {
                *(arg1 + 0x18) = 0;
                r9_3 = r9_1;
                
                if (r9_3 != 0)
                    goto label_140045aad;
            }
            else
            {
                sub_140042850(&result_1);
                result = result_3;
            label_140045910:
                arg1 = var_50_1;
                *(arg1 + 0x18) = 0;
                r9_3 = r9_1;
                
                if (result == 0)
                {
                    result = &data_1400626e8;
                label_140045aa8:
                    
                    if (r9_3 != 0)
                    {
                    label_140045aad:
                        int64_t rax_9 = *(arg1 + 0x10);
                        void* rsi_2 = (rax_9 - r9_3);
                        
                        if (rax_9 < r9_3)
                        {
                            sub_14005cb50(r9_3, rax_9);
                            /* no return */
                        }
                        
                        *(arg1 + 0x10) = 0;
                        
                        if (rax_9 != r9_3)
                        {
                            int64_t rcx_3 = *(arg1 + 8);
                            memmove(rcx_3, (r9_3 + rcx_3), rsi_2);
                            *(arg1 + 0x10) = rsi_2;
                        }
                    }
                }
                else
                {
                    r9_1 = (r9_3 + result);
                label_140045880:
                    r14 = *(arg1 + 0x10);
                    
                    if (r9_1 >= r14)
                    {
                        if (r9_1 == 0)
                            break;
                        
                        result = nullptr;
                        
                        if (r14 < r9_1)
                        {
                            sub_14005cb50(r9_1, r14);
                            /* no return */
                        }
                    }
                    else
                        continue;
                    
                    *(arg1 + 0x10) = nullptr;
                }
            }
            
            return result;
        }
    }
    
    return nullptr;
}

int64_t sub_140045b20(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042b00(*(arg2 + 0x48), *(arg2 + 0x50));
}

int64_t sub_140045b60(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_140045c10(arg1, arg2);
}

void* sub_140045b70(char arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_28 = -2;
    data_140071141;
    int64_t* rax_1 = j_sub_140049a90(0x18, 8);
    
    if (rax_1 != 0)
    {
        *rax_1 = arg2;
        rax_1[1] = arg3;
        rax_1[2] = arg1;
        return (rax_1 + 1);
    }
    
    int64_t var_30 = arg2;
    int64_t var_38 = arg3;
    sub_14005c5f0();
    /* no return */
}

int64_t* sub_140045be0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042740(*(arg2 + 0x28), *(arg2 + 0x20));
}

int64_t sub_140045c10(int64_t* arg1, void* arg2)
{
    int64_t var_28 = -2;
    void* rsi = *arg1;
    char var_58;
    void* var_48;
    
    switch ((rsi & 3))
    {
        case 0:
        {
            sub_1400577e0(&var_48, arg2, "Error", 5);
            return sub_140056bb0(sub_140056a00(sub_140056a00(&var_48, "kind", 4, (rsi + 0x10), &data_140062740), "messageKindError", 7, rsi, &data_140062788[0x10]));
            break;
        }
        case 1:
        {
            var_48 = (rsi - 1);
            return sub_1400578d0(arg2, "Customerror)library\std\src\io\s…", 6, "kind", 4, (rsi + 0xf), &data_140062740, "error)library\std\src\io\stdio.r…", 5, &var_48, &data_1400627b8);
            break;
        }
        case 2:
        {
            uint32_t var_30 = (rsi >> 0x20);
            sub_1400577e0(&var_58, arg2, &data_140062710, 2);
            int64_t* rax_6 = sub_140056a00(&var_58, "code", 4, &var_30, &data_140062718);
            char var_29 = sub_14004cf30(var_30);
            int64_t* rax_8 = sub_140056a00(rax_6, "kind", 4, &var_29, &data_140062740);
            sub_14004c2d0(&var_48, var_30);
            int32_t result = sub_140056bb0(sub_140056a00(rax_8, "messageKindError", 7, &var_48, &data_140062768));
            void* rdx_1 = var_48;
            
            if (rdx_1 == 0)
                return result;
            
            void* var_40;
            j_sub_140049af0(var_40, rdx_1, 1);
            return result;
            break;
        }
        case 3:
        {
            uint64_t rsi_4 = (rsi >> 0x20);
            void* rax_3;
            
            if (rsi_4 > 0x28)
                rax_3 = 0x29;
            else
                switch (rsi_4)
                {
                    case 0:
                    {
                        rax_3 = nullptr;
                        break;
                    }
                    case 1:
                    {
                        rax_3 = 1;
                        break;
                    }
                    case 2:
                    {
                        rax_3 = 2;
                        break;
                    }
                    case 3:
                    {
                        rax_3 = 3;
                        break;
                    }
                    case 4:
                    {
                        rax_3 = 4;
                        break;
                    }
                    case 5:
                    {
                        rax_3 = 5;
                        break;
                    }
                    case 6:
                    {
                        rax_3 = 6;
                        break;
                    }
                    case 7:
                    {
                        rax_3 = 7;
                        break;
                    }
                    case 8:
                    {
                        rax_3 = 8;
                        break;
                    }
                    case 9:
                    {
                        rax_3 = 9;
                        break;
                    }
                    case 0xa:
                    {
                        rax_3 = 0xa;
                        break;
                    }
                    case 0xb:
                    {
                        rax_3 = 0xb;
                        break;
                    }
                    case 0xc:
                    {
                        rax_3 = 0xc;
                        break;
                    }
                    case 0xd:
                    {
                        rax_3 = 0xd;
                        break;
                    }
                    case 0xe:
                    {
                        rax_3 = 0xe;
                        break;
                    }
                    case 0xf:
                    {
                        rax_3 = 0xf;
                        break;
                    }
                    case 0x10:
                    {
                        rax_3 = 0x10;
                        break;
                    }
                    case 0x11:
                    {
                        rax_3 = 0x11;
                        break;
                    }
                    case 0x12:
                    {
                        rax_3 = 0x12;
                        break;
                    }
                    case 0x13:
                    {
                        rax_3 = 0x13;
                        break;
                    }
                    case 0x14:
                    {
                        rax_3 = 0x14;
                        break;
                    }
                    case 0x15:
                    {
                        rax_3 = 0x15;
                        break;
                    }
                    case 0x16:
                    {
                        rax_3 = 0x16;
                        break;
                    }
                    case 0x17:
                    {
                        rax_3 = 0x17;
                        break;
                    }
                    case 0x18:
                    {
                        rax_3 = 0x18;
                        break;
                    }
                    case 0x19:
                    {
                        rax_3 = 0x19;
                        break;
                    }
                    case 0x1a:
                    {
                        rax_3 = 0x1a;
                        break;
                    }
                    case 0x1b:
                    {
                        rax_3 = 0x1b;
                        break;
                    }
                    case 0x1c:
                    {
                        rax_3 = 0x1c;
                        break;
                    }
                    case 0x1d:
                    {
                        rax_3 = 0x1d;
                        break;
                    }
                    case 0x1e:
                    {
                        rax_3 = 0x1e;
                        break;
                    }
                    case 0x1f:
                    {
                        rax_3 = 0x1f;
                        break;
                    }
                    case 0x20:
                    {
                        rax_3 = 0x20;
                        break;
                    }
                    case 0x21:
                    {
                        rax_3 = 0x21;
                        break;
                    }
                    case 0x22:
                    {
                        rax_3 = 0x22;
                        break;
                    }
                    case 0x23:
                    {
                        rax_3 = 0x23;
                        break;
                    }
                    case 0x24:
                    {
                        rax_3 = 0x24;
                        break;
                    }
                    case 0x25:
                    {
                        rax_3 = 0x25;
                        break;
                    }
                    case 0x26:
                    {
                        rax_3 = 0x26;
                        break;
                    }
                    case 0x27:
                    {
                        rax_3 = 0x27;
                        break;
                    }
                    case 0x28:
                    {
                        rax_3 = 0x28;
                        break;
                    }
                }
            
            var_58 = rax_3;
            sub_1400579c0(&var_48, arg2, "KindError", 4);
            return sub_140056d70(sub_140056c20(&var_48, &var_58, &data_140062740));
            break;
        }
    }
}

void sub_140045f30(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x70);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x78), rdx, 1);
}

int64_t sub_140045f70(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t rbx = arg1[2];
    
    if ((*arg1 - rbx) < arg3)
    {
        sub_14005b440(arg1, rbx, arg3);
        rbx = arg1[2];
    }
    
    memcpy((arg1[1] + rbx), arg2, arg3);
    arg1[2] = (rbx + arg3);
    return 0;
}

int64_t sub_140045fe0(int64_t* arg1, void* arg2, int64_t arg3)
{
    if (arg3 != 0)
    {
        uint64_t rax_2 = (arg3 & 3);
        int64_t i;
        int64_t r14;
        
        if (arg3 >= 4)
        {
            void* r8 = (arg2 + 0x30);
            r14 = 0;
            i = 0;
            
            do
            {
                r14 = (*r8 + ((*(r8 - 0x10) + *(r8 - 0x20)) + (*(r8 - 0x30) + r14)));
                i += 4;
                r8 += 0x40;
            } while ((arg3 & 0xfffffffffffffffc) != i);
        }
        else
        {
            r14 = 0;
            i = 0;
        }
        
        if (rax_2 != 0)
        {
            int64_t i_1 = 0;
            
            do
            {
                r14 += *(((i << 4) + arg2) + i_1);
                i_1 += 0x10;
            } while ((rax_2 << 4) != i_1);
        }
        
        int64_t rdx_3 = arg1[2];
        
        if (r14 > (*arg1 - rdx_3))
            sub_14005b440(arg1, rdx_3, r14);
        
        int64_t r15_1 = arg1[2];
        int64_t i_2 = 0;
        
        do
        {
            int64_t rdx_4 = *((arg2 + i_2) + 8);
            uint64_t r12_1 = *(arg2 + i_2);
            
            if ((*arg1 - r15_1) < r12_1)
            {
                sub_14005b440(arg1, r15_1, r12_1);
                r15_1 = arg1[2];
            }
            
            memcpy((arg1[1] + r15_1), rdx_4, r12_1);
            r15_1 += r12_1;
            arg1[2] = r15_1;
            i_2 += 0x10;
        } while ((arg3 << 4) != i_2);
    }
    
    return 0;
}

int64_t sub_140046110() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_140046120(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t rbx = arg1[2];
    
    if ((*arg1 - rbx) < arg3)
    {
        sub_14005b440(arg1, rbx, arg3);
        rbx = arg1[2];
    }
    
    memcpy((arg1[1] + rbx), arg2, arg3);
    arg1[2] = (rbx + arg3);
    return 0;
}

int64_t sub_140046190() __pure
{
    return 0;
}

int64_t sub_1400461a0(int64_t* arg1, int64_t* arg2, int64_t arg3, int64_t arg4)
{
    uint64_t r12 = *arg2;
    int64_t rsi = arg2[2];
    int64_t* var_50 = arg2;
    int64_t rdi_1;
    int64_t r13_1;
    uint64_t r14_1;
    
    if (arg3 != 0)
    {
        if (arg4 > -0x401)
            rdi_1 = 0x2000;
        else
        {
            rdi_1 = (arg4 + 0x400);
            int64_t rax_2 = (rdi_1 & 0x1fff);
            
            if (rax_2 != 0)
            {
                int64_t temp0_1 = rdi_1;
                rdi_1 += (0x2000 - rax_2);
                rax_2 = (temp0_1 + (0x2000 - rax_2)) < temp0_1;
                
                if ((rax_2 & 1) != 0)
                    rdi_1 = 0x2000;
            }
        }
        
        r14_1 = r12;
        r13_1 = rsi;
        
        if (arg4 != 0)
            goto label_14004624d;
        
        if ((r12 - rsi) >= 0x20)
            goto label_140046247;
        
        goto label_14004621e;
    }
    
    rdi_1 = 0x2000;
    
    if ((r12 - rsi) < 0x20)
    {
    label_14004621e:
        int64_t rax_5;
        int64_t rdx;
        rax_5 = sub_1400465b0(arg1, arg2);
        
        if (rax_5 != 0)
            return 1;
        
        if (rdx != 0)
        {
            arg2 = var_50;
            r14_1 = *arg2;
            r13_1 = arg2[2];
            goto label_14004624d;
        }
    }
    else
    {
    label_140046247:
        r14_1 = r12;
        r13_1 = rsi;
    label_14004624d:
        int64_t var_48_1 = rdi_1;
        int64_t rsi_1 = 0;
        uint64_t var_58_1 = r12;
        
        if (r13_1 != r14_1)
            goto label_140046291;
        
        while (true)
        {
            if (r14_1 == r12)
            {
                int64_t rax_8;
                int64_t rdx_1;
                rax_8 = sub_1400465b0(arg1, arg2);
                
                if (rax_8 != 0)
                    return 1;
                
                if (rdx_1 == 0)
                {
                    var_50[2];
                    break;
                }
                
                arg2 = var_50;
                r14_1 = *arg2;
                r13_1 = arg2[2];
            }
            
        label_140046291:
            void* var_a0;
            int64_t var_80;
            int64_t rax_12;
            int64_t result;
            
            if (r13_1 != r14_1)
                rax_12 = arg2[1];
            else
            {
                uint64_t r12_1;
                
                if (r14_1 <= -0x21)
                {
                    r12_1 = (r14_1 + 0x20);
                    uint64_t rax_9 = (r14_1 * 2);
                    
                    if (rax_9 > r12_1)
                        r12_1 = rax_9;
                    
                    int64_t rax_11;
                    
                    if (r14_1 == 0)
                        rax_11 = 0;
                    else
                    {
                        var_80 = arg2[1];
                        uint64_t var_70_1 = r14_1;
                        rax_11 = 1;
                    }
                    
                    int64_t var_78_1 = rax_11;
                    sub_140043700(&var_a0, (!(r12_1) >> 0x3f), r12_1, &var_80);
                }
                
                if ((r14_1 > -0x21 || var_a0 != 0))
                {
                    result = 1;
                    goto label_1400465a9;
                }
                
                int64_t var_98;
                rax_12 = var_98;
                var_50[1] = rax_12;
                *var_50 = r12_1;
                r14_1 = r12_1;
            }
            
            int64_t r12_3 = (r14_1 - r13_1);
            
            if (r12_3 >= var_48_1)
                r12_3 = var_48_1;
            
            var_80 = (rax_12 + r13_1);
            int64_t var_78_2 = r12_3;
            int64_t var_70_2 = 0;
            void* rax_14 = sub_14004bef0(arg1, &var_80);
            void* rdx_6 = rax_14;
            
            if (rax_14 != 0)
            {
            label_140046365:
                result = 1;
                uint64_t rcx_11;
                
                switch ((rdx_6 & 3))
                {
                    case 0:
                    {
                        rcx_11 = *(rdx_6 + 0x10);
                        break;
                    }
                    case 1:
                    {
                        rcx_11 = *(rdx_6 + 0xf);
                        break;
                    }
                    case 2:
                    {
                        return result;
                        break;
                    }
                    case 3:
                    {
                        rcx_11 = (rdx_6 >> 0x20);
                        
                        if (rcx_11 > 0x28)
                            rcx_11 = 0x29;
                        else
                            switch (rcx_11)
                            {
                                case 0:
                                {
                                    rcx_11 = 0;
                                    break;
                                }
                                case 1:
                                {
                                    rcx_11 = 1;
                                    break;
                                }
                                case 2:
                                {
                                    rcx_11 = 2;
                                    break;
                                }
                                case 3:
                                {
                                    rcx_11 = 3;
                                    break;
                                }
                                case 4:
                                {
                                    rcx_11 = 4;
                                    break;
                                }
                                case 5:
                                {
                                    rcx_11 = 5;
                                    break;
                                }
                                case 6:
                                {
                                    rcx_11 = 6;
                                    break;
                                }
                                case 7:
                                {
                                    rcx_11 = 7;
                                    break;
                                }
                                case 8:
                                {
                                    rcx_11 = 8;
                                    break;
                                }
                                case 9:
                                {
                                    rcx_11 = 9;
                                    break;
                                }
                                case 0xa:
                                {
                                    rcx_11 = 0xa;
                                    break;
                                }
                                case 0xb:
                                {
                                    rcx_11 = 0xb;
                                    break;
                                }
                                case 0xc:
                                {
                                    rcx_11 = 0xc;
                                    break;
                                }
                                case 0xd:
                                {
                                    rcx_11 = 0xd;
                                    break;
                                }
                                case 0xe:
                                {
                                    rcx_11 = 0xe;
                                    break;
                                }
                                case 0xf:
                                {
                                    rcx_11 = 0xf;
                                    break;
                                }
                                case 0x10:
                                {
                                    rcx_11 = 0x10;
                                    break;
                                }
                                case 0x11:
                                {
                                    rcx_11 = 0x11;
                                    break;
                                }
                                case 0x12:
                                {
                                    rcx_11 = 0x12;
                                    break;
                                }
                                case 0x13:
                                {
                                    rcx_11 = 0x13;
                                    break;
                                }
                                case 0x14:
                                {
                                    rcx_11 = 0x14;
                                    break;
                                }
                                case 0x15:
                                {
                                    rcx_11 = 0x15;
                                    break;
                                }
                                case 0x16:
                                {
                                    rcx_11 = 0x16;
                                    break;
                                }
                                case 0x17:
                                {
                                    rcx_11 = 0x17;
                                    break;
                                }
                                case 0x18:
                                {
                                    rcx_11 = 0x18;
                                    break;
                                }
                                case 0x19:
                                {
                                    rcx_11 = 0x19;
                                    break;
                                }
                                case 0x1a:
                                {
                                    rcx_11 = 0x1a;
                                    break;
                                }
                                case 0x1b:
                                {
                                    rcx_11 = 0x1b;
                                    break;
                                }
                                case 0x1c:
                                {
                                    rcx_11 = 0x1c;
                                    break;
                                }
                                case 0x1d:
                                {
                                    rcx_11 = 0x1d;
                                    break;
                                }
                                case 0x1e:
                                {
                                    rcx_11 = 0x1e;
                                    break;
                                }
                                case 0x1f:
                                {
                                    rcx_11 = 0x1f;
                                    break;
                                }
                                case 0x20:
                                {
                                    rcx_11 = 0x20;
                                    break;
                                }
                                case 0x21:
                                {
                                    rcx_11 = 0x21;
                                    break;
                                }
                                case 0x22:
                                {
                                    rcx_11 = 0x22;
                                    break;
                                }
                                case 0x23:
                                {
                                    rcx_11 = 0x23;
                                    break;
                                }
                                case 0x24:
                                {
                                    rcx_11 = 0x24;
                                    break;
                                }
                                case 0x25:
                                {
                                    rcx_11 = 0x25;
                                    break;
                                }
                                case 0x26:
                                {
                                    rcx_11 = 0x26;
                                    break;
                                }
                                case 0x27:
                                {
                                    rcx_11 = 0x27;
                                    break;
                                }
                                case 0x28:
                                {
                                    rcx_11 = 0x28;
                                    break;
                                }
                            }
                        break;
                    }
                }
                
                if (rcx_11 != 0x23)
                    return result;
                
                var_a0 = rdx_6;
                sub_140042850(&var_a0);
                void* rax_15 = sub_14004bef0(arg1, &var_80);
                rdx_6 = rax_15;
                
                if (rax_15 != 0)
                    goto label_140046365;
            }
            
            if (var_70_2 == 0)
            {
                result = 0;
            label_1400465a9:
                return result;
            }
            
            r13_1 += var_70_2;
            arg2 = var_50;
            arg2[2] = r13_1;
            
            if (arg3 != 1)
            {
                int64_t rcx_16 = var_48_1;
                
                if (rsi_1 != r12_3)
                    rcx_16 = -1;
                
                if ((var_70_2 == r12_3 && r12_3 >= rcx_16))
                {
                    bool cond:3_1 = rcx_16 < 0;
                    rcx_16 *= 2;
                    
                    if (cond:3_1)
                        rcx_16 = -1;
                }
                
                var_48_1 = rcx_16;
            }
            
            r12 = var_58_1;
            rsi_1 -= var_70_2;
            
            if (r13_1 != r14_1)
                goto label_140046291;
        }
    }
    
    return 0;
}

int64_t sub_1400465b0(int64_t* arg1, int64_t* arg2)
{
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    int64_t i;
    void* rdx_1;
    i = sub_14004bd80(arg1, &s, 0x20);
    int64_t i_1 = i;
    void* var_40 = rdx_1;
    
    while (i != 0)
    {
        uint64_t rcx_4;
        
        switch ((rdx_1 & 3))
        {
            case 0:
            {
                rcx_4 = *(rdx_1 + 0x10);
                break;
            }
            case 1:
            {
                rcx_4 = *(rdx_1 + 0xf);
                break;
            }
            case 2:
            {
                return i;
                break;
            }
            case 3:
            {
                rcx_4 = (rdx_1 >> 0x20);
                
                if (rcx_4 > 0x28)
                    rcx_4 = 0x29;
                else
                    switch (rcx_4)
                    {
                        case 0:
                        {
                            rcx_4 = 0;
                            break;
                        }
                        case 1:
                        {
                            rcx_4 = 1;
                            break;
                        }
                        case 2:
                        {
                            rcx_4 = 2;
                            break;
                        }
                        case 3:
                        {
                            rcx_4 = 3;
                            break;
                        }
                        case 4:
                        {
                            rcx_4 = 4;
                            break;
                        }
                        case 5:
                        {
                            rcx_4 = 5;
                            break;
                        }
                        case 6:
                        {
                            rcx_4 = 6;
                            break;
                        }
                        case 7:
                        {
                            rcx_4 = 7;
                            break;
                        }
                        case 8:
                        {
                            rcx_4 = 8;
                            break;
                        }
                        case 9:
                        {
                            rcx_4 = 9;
                            break;
                        }
                        case 0xa:
                        {
                            rcx_4 = 0xa;
                            break;
                        }
                        case 0xb:
                        {
                            rcx_4 = 0xb;
                            break;
                        }
                        case 0xc:
                        {
                            rcx_4 = 0xc;
                            break;
                        }
                        case 0xd:
                        {
                            rcx_4 = 0xd;
                            break;
                        }
                        case 0xe:
                        {
                            rcx_4 = 0xe;
                            break;
                        }
                        case 0xf:
                        {
                            rcx_4 = 0xf;
                            break;
                        }
                        case 0x10:
                        {
                            rcx_4 = 0x10;
                            break;
                        }
                        case 0x11:
                        {
                            rcx_4 = 0x11;
                            break;
                        }
                        case 0x12:
                        {
                            rcx_4 = 0x12;
                            break;
                        }
                        case 0x13:
                        {
                            rcx_4 = 0x13;
                            break;
                        }
                        case 0x14:
                        {
                            rcx_4 = 0x14;
                            break;
                        }
                        case 0x15:
                        {
                            rcx_4 = 0x15;
                            break;
                        }
                        case 0x16:
                        {
                            rcx_4 = 0x16;
                            break;
                        }
                        case 0x17:
                        {
                            rcx_4 = 0x17;
                            break;
                        }
                        case 0x18:
                        {
                            rcx_4 = 0x18;
                            break;
                        }
                        case 0x19:
                        {
                            rcx_4 = 0x19;
                            break;
                        }
                        case 0x1a:
                        {
                            rcx_4 = 0x1a;
                            break;
                        }
                        case 0x1b:
                        {
                            rcx_4 = 0x1b;
                            break;
                        }
                        case 0x1c:
                        {
                            rcx_4 = 0x1c;
                            break;
                        }
                        case 0x1d:
                        {
                            rcx_4 = 0x1d;
                            break;
                        }
                        case 0x1e:
                        {
                            rcx_4 = 0x1e;
                            break;
                        }
                        case 0x1f:
                        {
                            rcx_4 = 0x1f;
                            break;
                        }
                        case 0x20:
                        {
                            rcx_4 = 0x20;
                            break;
                        }
                        case 0x21:
                        {
                            rcx_4 = 0x21;
                            break;
                        }
                        case 0x22:
                        {
                            rcx_4 = 0x22;
                            break;
                        }
                        case 0x23:
                        {
                            rcx_4 = 0x23;
                            break;
                        }
                        case 0x24:
                        {
                            rcx_4 = 0x24;
                            break;
                        }
                        case 0x25:
                        {
                            rcx_4 = 0x25;
                            break;
                        }
                        case 0x26:
                        {
                            rcx_4 = 0x26;
                            break;
                        }
                        case 0x27:
                        {
                            rcx_4 = 0x27;
                            break;
                        }
                        case 0x28:
                        {
                            rcx_4 = 0x28;
                            break;
                        }
                    }
                break;
            }
        }
        
        if (rcx_4 != 0x23)
            return i;
        
        sub_140042850(&var_40);
        i = sub_14004bd80(arg1, &s, 0x20);
        int64_t i_2 = i;
        var_40 = rdx_1;
    }
    
    if (rdx_1 >= 0x21)
    {
        sub_14005cb50(rdx_1, 0x20);
        /* no return */
    }
    
    void* rdi_1 = arg2[2];
    
    if ((*arg2 - rdi_1) < rdx_1)
    {
        sub_14005b440(arg2, rdi_1, rdx_1);
        rdi_1 = arg2[2];
    }
    
    memcpy((arg2[1] + rdi_1), &s, rdx_1);
    arg2[2] = (rdi_1 + rdx_1);
    return i;
}

int64_t sub_140046810(char* arg1, void* arg2, int64_t arg3)
{
    int64_t rcx = 0;
    uint64_t rax_1;
    char* rdx;
    
    while (true)
    {
        if ((arg3 << 4) == rcx)
        {
            rdx = 1;
            rax_1 = 0;
            break;
        }
        
        rax_1 = *(arg2 + rcx);
        rcx += 0x10;
        
        if (rax_1 != 0)
        {
            rdx = *((arg2 + rcx) - 8);
            break;
        }
    }
    
    /* tailcall */
    return sub_14004c930(STD_ERROR_HANDLE, rdx, rax_1, arg1);
}

int64_t sub_140046850() __pure
{
    return 0;
}

char const (** const )[0x1d] sub_140046860(char* arg1, void* arg2, void* arg3)
{
    if (arg3 != 0)
    {
        void* i_1 = arg3;
        void* rdi_1 = arg2;
        void* i;
        
        do
        {
            int64_t rax_1;
            char const (** const result)[0x1d];
            rax_1 = sub_14004c930(STD_ERROR_HANDLE, rdi_1, i_1, arg1);
            int64_t var_50_1 = rax_1;
            char const (** const result_1)[0x1d] = result;
            
            if (rax_1 == 0)
            {
                if (result == 0)
                    return &data_140062950;
                
                i = (i_1 - result);
                
                if (i_1 < result)
                {
                    sub_14005cae0(result, i_1);
                    /* no return */
                }
                
                rdi_1 += result;
                i_1 = i;
            }
            else
            {
                uint64_t rax_6;
                
                switch ((result & 3))
                {
                    case 0:
                    {
                        rax_6 = result[2];
                        break;
                    }
                    case 1:
                    {
                        rax_6 = *(result + 0xf);
                        break;
                    }
                    case 2:
                    {
                        return result;
                        break;
                    }
                    case 3:
                    {
                        rax_6 = (result >> 0x20);
                        
                        if (rax_6 > 0x28)
                            rax_6 = 0x29;
                        else
                            switch (rax_6)
                            {
                                case 0:
                                {
                                    rax_6 = 0;
                                    break;
                                }
                                case 1:
                                {
                                    rax_6 = 1;
                                    break;
                                }
                                case 2:
                                {
                                    rax_6 = 2;
                                    break;
                                }
                                case 3:
                                {
                                    rax_6 = 3;
                                    break;
                                }
                                case 4:
                                {
                                    rax_6 = 4;
                                    break;
                                }
                                case 5:
                                {
                                    rax_6 = 5;
                                    break;
                                }
                                case 6:
                                {
                                    rax_6 = 6;
                                    break;
                                }
                                case 7:
                                {
                                    rax_6 = 7;
                                    break;
                                }
                                case 8:
                                {
                                    rax_6 = 8;
                                    break;
                                }
                                case 9:
                                {
                                    rax_6 = 9;
                                    break;
                                }
                                case 0xa:
                                {
                                    rax_6 = 0xa;
                                    break;
                                }
                                case 0xb:
                                {
                                    rax_6 = 0xb;
                                    break;
                                }
                                case 0xc:
                                {
                                    rax_6 = 0xc;
                                    break;
                                }
                                case 0xd:
                                {
                                    rax_6 = 0xd;
                                    break;
                                }
                                case 0xe:
                                {
                                    rax_6 = 0xe;
                                    break;
                                }
                                case 0xf:
                                {
                                    rax_6 = 0xf;
                                    break;
                                }
                                case 0x10:
                                {
                                    rax_6 = 0x10;
                                    break;
                                }
                                case 0x11:
                                {
                                    rax_6 = 0x11;
                                    break;
                                }
                                case 0x12:
                                {
                                    rax_6 = 0x12;
                                    break;
                                }
                                case 0x13:
                                {
                                    rax_6 = 0x13;
                                    break;
                                }
                                case 0x14:
                                {
                                    rax_6 = 0x14;
                                    break;
                                }
                                case 0x15:
                                {
                                    rax_6 = 0x15;
                                    break;
                                }
                                case 0x16:
                                {
                                    rax_6 = 0x16;
                                    break;
                                }
                                case 0x17:
                                {
                                    rax_6 = 0x17;
                                    break;
                                }
                                case 0x18:
                                {
                                    rax_6 = 0x18;
                                    break;
                                }
                                case 0x19:
                                {
                                    rax_6 = 0x19;
                                    break;
                                }
                                case 0x1a:
                                {
                                    rax_6 = 0x1a;
                                    break;
                                }
                                case 0x1b:
                                {
                                    rax_6 = 0x1b;
                                    break;
                                }
                                case 0x1c:
                                {
                                    rax_6 = 0x1c;
                                    break;
                                }
                                case 0x1d:
                                {
                                    rax_6 = 0x1d;
                                    break;
                                }
                                case 0x1e:
                                {
                                    rax_6 = 0x1e;
                                    break;
                                }
                                case 0x1f:
                                {
                                    rax_6 = 0x1f;
                                    break;
                                }
                                case 0x20:
                                {
                                    rax_6 = 0x20;
                                    break;
                                }
                                case 0x21:
                                {
                                    rax_6 = 0x21;
                                    break;
                                }
                                case 0x22:
                                {
                                    rax_6 = 0x22;
                                    break;
                                }
                                case 0x23:
                                {
                                    rax_6 = 0x23;
                                    break;
                                }
                                case 0x24:
                                {
                                    rax_6 = 0x24;
                                    break;
                                }
                                case 0x25:
                                {
                                    rax_6 = 0x25;
                                    break;
                                }
                                case 0x26:
                                {
                                    rax_6 = 0x26;
                                    break;
                                }
                                case 0x27:
                                {
                                    rax_6 = 0x27;
                                    break;
                                }
                                case 0x28:
                                {
                                    rax_6 = 0x28;
                                    break;
                                }
                            }
                        break;
                    }
                }
                
                if (rax_6 != 0x23)
                    return result;
                
                sub_140042850(&result_1);
                i = i_1;
            }
        } while (i != 0);
    }
    
    return nullptr;
}

char const (** const )[0x1d] sub_140046a70(int64_t* arg1, void* arg2, int64_t arg3)
{
    if (arg3 != 0)
    {
        int64_t rsi_1 = arg3;
        int64_t* r11_1 = arg1;
        int64_t i = 0;
        int64_t rcx = 0;
        int64_t r9_1 = 0;
        int64_t rax_1 = 0;
        
        do
        {
            uint64_t r10_1 = *(arg2 + i);
            int64_t temp0_1 = rax_1;
            rax_1 -= r10_1;
            
            if (temp0_1 < r10_1)
            {
                rax_1 = r9_1;
                break;
            }
            
            rcx += 1;
            i += 0x10;
            r9_1 = rax_1;
        } while ((arg3 << 4) != i);
        
        if (rsi_1 < rcx)
        {
        label_140046cd2:
            sub_14005cae0(rcx, rsi_1);
            /* no return */
        }
        
        void* r13_2 = (arg2 + (rcx << 4));
        int64_t rsi_2 = (rsi_1 - rcx);
        char const (** const var_78)[0x24];
        
        if (rsi_1 != rcx)
        {
            uint64_t rcx_1 = *r13_2;
            
            if (rax_1 > rcx_1)
            {
            label_140046d10:
                var_78 = &data_1400628e0;
                int64_t var_70_1 = 1;
                int64_t var_68_1 = 8;
                int128_t var_60_1 = {0};
                sub_14005c700(&var_78);
                /* no return */
            }
            
            *r13_2 = (rcx_1 - rax_1);
            *(r13_2 + 8) += rax_1;
            
            if (rsi_2 != 0)
            {
            label_140046b19:
                int64_t* var_48_1 = r11_1;
                
                while (true)
                {
                    int64_t i_1;
                    int64_t r15_1;
                    
                    if (rsi_2 >= 4)
                    {
                        void* rdx_4 = (r13_2 + 0x30);
                        r15_1 = 0;
                        i_1 = 0;
                        
                        do
                        {
                            r15_1 = (*rdx_4 + ((*(rdx_4 - 0x10) + *(rdx_4 - 0x20)) + (*(rdx_4 - 0x30) + r15_1)));
                            i_1 += 4;
                            rdx_4 += 0x40;
                        } while ((rsi_2 & 0xfffffffffffffffc) != i_1);
                    }
                    else
                    {
                        r15_1 = 0;
                        i_1 = 0;
                    }
                    
                    int32_t rcx_6 = (rsi_2 & 3);
                    
                    if (rcx_6 != 0)
                    {
                        int64_t i_2 = 0;
                        
                        do
                        {
                            r15_1 += *(((i_1 << 4) + r13_2) + i_2);
                            i_2 += 0x10;
                        } while ((rcx_6 << 4) != i_2);
                    }
                    
                    int64_t r12_1 = r11_1[2];
                    
                    if (r15_1 > (*r11_1 - r12_1))
                    {
                        sub_14005b440(r11_1, r12_1, r15_1);
                        r11_1 = var_48_1;
                        r12_1 = r11_1[2];
                    }
                    
                    int64_t rsi_3 = (rsi_2 << 4);
                    int64_t rdi_1 = 0;
                    
                    do
                    {
                        int64_t r14_1 = *((r13_2 + rdi_1) + 8);
                        uint64_t r13_3 = *(r13_2 + rdi_1);
                        
                        if ((*r11_1 - r12_1) < r13_3)
                        {
                            sub_14005b440(r11_1, r12_1, r13_3);
                            r11_1 = var_48_1;
                            r12_1 = r11_1[2];
                        }
                        
                        memcpy((r11_1[1] + r12_1), r14_1, r13_3);
                        r11_1 = var_48_1;
                        r12_1 += r13_3;
                        r11_1[2] = r12_1;
                        rdi_1 += 0x10;
                    } while (rsi_3 != rdi_1);
                    
                    if (r15_1 == 0)
                        return &data_140062950;
                    
                    int64_t rdx_7 = 0;
                    rcx = 0;
                    int64_t rax_8 = r15_1;
                    
                    do
                    {
                        uint64_t r8_5 = *(r13_2 + rdx_7);
                        int64_t temp2_1 = rax_8;
                        rax_8 -= r8_5;
                        
                        if (temp2_1 < r8_5)
                        {
                            rax_8 = r15_1;
                            break;
                        }
                        
                        rcx += 1;
                        rdx_7 += 0x10;
                        r15_1 = rax_8;
                    } while (rsi_3 != rdx_7);
                    
                    rsi_1 = rsi_2;
                    
                    if (rsi_1 < rcx)
                        goto label_140046cd2;
                    
                    r13_2 += (rcx << 4);
                    rsi_2 = (rsi_1 - rcx);
                    
                    if (rsi_1 == rcx)
                    {
                        if (rax_8 != 0)
                            break;
                        
                        if (rsi_2 == 0)
                            return nullptr;
                    }
                    else
                    {
                        uint64_t rcx_11 = *r13_2;
                        
                        if (rax_8 > rcx_11)
                            goto label_140046d10;
                        
                        *r13_2 = (rcx_11 - rax_8);
                        *(r13_2 + 8) += rax_8;
                        
                        if (rsi_2 == 0)
                            return nullptr;
                    }
                }
                
                goto label_140046cde;
            }
        }
        else
        {
            if (rax_1 != 0)
            {
            label_140046cde:
                var_78 = &data_140062890;
                int64_t var_70 = 1;
                int64_t var_68 = 8;
                int128_t var_60 = {0};
                sub_14005c700(&var_78);
                /* no return */
            }
            
            if (rsi_2 != 0)
                goto label_140046b19;
        }
    }
    
    return nullptr;
}

void* sub_140046d40(char* arg1, void* arg2, int64_t arg3)
{
    if (arg3 != 0)
    {
        int64_t r15_1 = arg3;
        int64_t i = 0;
        int64_t rcx = 0;
        int64_t r9_1 = 0;
        int64_t rax_1 = 0;
        
        do
        {
            uint64_t r10_1 = *(arg2 + i);
            int64_t temp0_1 = rax_1;
            rax_1 -= r10_1;
            
            if (temp0_1 < r10_1)
            {
                rax_1 = r9_1;
                break;
            }
            
            rcx += 1;
            i += 0x10;
            r9_1 = rax_1;
        } while ((arg3 << 4) != i);
        
        if (r15_1 < rcx)
        {
        label_14004708e:
            sub_14005cae0(rcx, r15_1);
            /* no return */
        }
        
        void* rdi_2 = (arg2 + (rcx << 4));
        int64_t temp1_1 = r15_1;
        r15_1 -= rcx;
        char const (** const var_70)[0x24];
        
        if (temp1_1 != rcx)
        {
            uint64_t rcx_1 = *rdi_2;
            
            if (rax_1 > rcx_1)
            {
            label_14004709a:
                var_70 = &data_1400628e0;
                int64_t var_68 = 1;
                int64_t var_60 = 8;
                int128_t var_58 = {0};
                sub_14005c700(&var_70);
                /* no return */
            }
            
            *rdi_2 = (rcx_1 - rax_1);
            *(rdi_2 + 8) += rax_1;
            
            if (r15_1 != 0)
            {
            label_140046e1c:
                
                while (true)
                {
                    int64_t rsi_2 = (r15_1 << 4);
                    int64_t rax_2 = 0;
                    char* rdx_4;
                    uint64_t r8;
                    
                    while (true)
                    {
                        if (rsi_2 == rax_2)
                        {
                            rdx_4 = 1;
                            r8 = 0;
                            break;
                        }
                        
                        r8 = *(rdi_2 + rax_2);
                        rax_2 += 0x10;
                        
                        if (r8 != 0)
                        {
                            rdx_4 = *((rdi_2 + rax_2) - 8);
                            break;
                        }
                    }
                    
                    int64_t rax_3;
                    void* result;
                    rax_3 = sub_14004c930(STD_ERROR_HANDLE, rdx_4, r8, arg1);
                    void* result_1 = result;
                    
                    if (rax_3 == 0)
                    {
                        if (result == 0)
                            return &data_140062950;
                        
                        int64_t r8_1 = 0;
                        rcx = 0;
                        void* result_2 = result;
                        
                        do
                        {
                            uint64_t r9_3 = *(rdi_2 + r8_1);
                            void* result_3 = result_2;
                            result_2 -= r9_3;
                            
                            if (result_3 < r9_3)
                            {
                                result_2 = result;
                                break;
                            }
                            
                            rcx += 1;
                            r8_1 += 0x10;
                            result = result_2;
                        } while (rsi_2 != r8_1);
                        
                        if (r15_1 < rcx)
                            goto label_14004708e;
                        
                        rdi_2 += (rcx << 4);
                        int64_t temp3_1 = r15_1;
                        r15_1 -= rcx;
                        
                        if (temp3_1 != rcx)
                        {
                            uint64_t rcx_4 = *rdi_2;
                            
                            if (result_2 > rcx_4)
                                goto label_14004709a;
                            
                            *rdi_2 = (rcx_4 - result_2);
                            *(rdi_2 + 8) += result_2;
                            
                            if (rax_3 != 0)
                                sub_140042850(&result_1);
                        }
                        else if (result_2 != 0)
                            break;
                    }
                    else
                    {
                        uint64_t rax_8;
                        
                        switch ((result & 3))
                        {
                            case 0:
                            {
                                rax_8 = *(result + 0x10);
                                break;
                            }
                            case 1:
                            {
                                rax_8 = *(result + 0xf);
                                break;
                            }
                            case 2:
                            {
                                return result;
                                break;
                            }
                            case 3:
                            {
                                rax_8 = (result >> 0x20);
                                
                                if (rax_8 > 0x28)
                                    rax_8 = 0x29;
                                else
                                    switch (rax_8)
                                    {
                                        case 0:
                                        {
                                            rax_8 = 0;
                                            break;
                                        }
                                        case 1:
                                        {
                                            rax_8 = 1;
                                            break;
                                        }
                                        case 2:
                                        {
                                            rax_8 = 2;
                                            break;
                                        }
                                        case 3:
                                        {
                                            rax_8 = 3;
                                            break;
                                        }
                                        case 4:
                                        {
                                            rax_8 = 4;
                                            break;
                                        }
                                        case 5:
                                        {
                                            rax_8 = 5;
                                            break;
                                        }
                                        case 6:
                                        {
                                            rax_8 = 6;
                                            break;
                                        }
                                        case 7:
                                        {
                                            rax_8 = 7;
                                            break;
                                        }
                                        case 8:
                                        {
                                            rax_8 = 8;
                                            break;
                                        }
                                        case 9:
                                        {
                                            rax_8 = 9;
                                            break;
                                        }
                                        case 0xa:
                                        {
                                            rax_8 = 0xa;
                                            break;
                                        }
                                        case 0xb:
                                        {
                                            rax_8 = 0xb;
                                            break;
                                        }
                                        case 0xc:
                                        {
                                            rax_8 = 0xc;
                                            break;
                                        }
                                        case 0xd:
                                        {
                                            rax_8 = 0xd;
                                            break;
                                        }
                                        case 0xe:
                                        {
                                            rax_8 = 0xe;
                                            break;
                                        }
                                        case 0xf:
                                        {
                                            rax_8 = 0xf;
                                            break;
                                        }
                                        case 0x10:
                                        {
                                            rax_8 = 0x10;
                                            break;
                                        }
                                        case 0x11:
                                        {
                                            rax_8 = 0x11;
                                            break;
                                        }
                                        case 0x12:
                                        {
                                            rax_8 = 0x12;
                                            break;
                                        }
                                        case 0x13:
                                        {
                                            rax_8 = 0x13;
                                            break;
                                        }
                                        case 0x14:
                                        {
                                            rax_8 = 0x14;
                                            break;
                                        }
                                        case 0x15:
                                        {
                                            rax_8 = 0x15;
                                            break;
                                        }
                                        case 0x16:
                                        {
                                            rax_8 = 0x16;
                                            break;
                                        }
                                        case 0x17:
                                        {
                                            rax_8 = 0x17;
                                            break;
                                        }
                                        case 0x18:
                                        {
                                            rax_8 = 0x18;
                                            break;
                                        }
                                        case 0x19:
                                        {
                                            rax_8 = 0x19;
                                            break;
                                        }
                                        case 0x1a:
                                        {
                                            rax_8 = 0x1a;
                                            break;
                                        }
                                        case 0x1b:
                                        {
                                            rax_8 = 0x1b;
                                            break;
                                        }
                                        case 0x1c:
                                        {
                                            rax_8 = 0x1c;
                                            break;
                                        }
                                        case 0x1d:
                                        {
                                            rax_8 = 0x1d;
                                            break;
                                        }
                                        case 0x1e:
                                        {
                                            rax_8 = 0x1e;
                                            break;
                                        }
                                        case 0x1f:
                                        {
                                            rax_8 = 0x1f;
                                            break;
                                        }
                                        case 0x20:
                                        {
                                            rax_8 = 0x20;
                                            break;
                                        }
                                        case 0x21:
                                        {
                                            rax_8 = 0x21;
                                            break;
                                        }
                                        case 0x22:
                                        {
                                            rax_8 = 0x22;
                                            break;
                                        }
                                        case 0x23:
                                        {
                                            rax_8 = 0x23;
                                            break;
                                        }
                                        case 0x24:
                                        {
                                            rax_8 = 0x24;
                                            break;
                                        }
                                        case 0x25:
                                        {
                                            rax_8 = 0x25;
                                            break;
                                        }
                                        case 0x26:
                                        {
                                            rax_8 = 0x26;
                                            break;
                                        }
                                        case 0x27:
                                        {
                                            rax_8 = 0x27;
                                            break;
                                        }
                                        case 0x28:
                                        {
                                            rax_8 = 0x28;
                                            break;
                                        }
                                    }
                                break;
                            }
                        }
                        
                        if (rax_8 != 0x23)
                            return result;
                        
                        sub_140042850(&result_1);
                    }
                    
                    if (r15_1 == 0)
                        return nullptr;
                }
                
                goto label_1400470cc;
            }
        }
        else
        {
            if (rax_1 != 0)
            {
            label_1400470cc:
                var_70 = &data_140062890;
                int64_t var_68_1 = 1;
                int64_t var_60_1 = 8;
                int128_t var_58_1 = {0};
                sub_14005c700(&var_70);
                /* no return */
            }
            
            if (r15_1 != 0)
                goto label_140046e1c;
        }
    }
    
    return nullptr;
}

int64_t sub_140047100(int64_t arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t var_20 = arg1;
    int64_t result_1 = 0;
    char rax = sub_140056fc0(&var_20, &data_140062330, arg2);
    int64_t result = result_1;
    
    if (rax == 0)
    {
        if (result != 0)
            sub_140042850(&result_1);
        
        return 0;
    }
    
    if (result != 0)
        return result;
    
    char const (** const var_50)[0x57] = &data_1400629d8;
    int64_t var_48 = 1;
    int64_t var_40 = 8;
    int128_t var_38 = {0};
    sub_14005c700(&var_50);
    /* no return */
}

void sub_140047190(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x60) != 0)
        sub_140042850((arg2 + 0x60));
}

int64_t sub_1400471c0(int64_t arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t var_20 = arg1;
    int64_t result_1 = 0;
    char rax = sub_140056fc0(&var_20, &data_140062360, arg2);
    int64_t result = result_1;
    
    if (rax == 0)
    {
        if (result != 0)
            sub_140042850(&result_1);
        
        return 0;
    }
    
    if (result != 0)
        return result;
    
    char const (** const var_50)[0x57] = &data_1400629d8;
    int64_t var_48 = 1;
    int64_t var_40 = 8;
    int128_t var_38 = {0};
    sub_14005c700(&var_50);
    /* no return */
}

void sub_140047250(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x60) != 0)
        sub_140042850((arg2 + 0x60));
}

char const (**)[0x1d] sub_140047280(int64_t* arg1, void* arg2, void* arg3)
{
    int64_t var_18 = -2;
    char const (** result)[0x1d] = sub_140046860(*arg1, arg2, arg3);
    
    if (result != 0)
    {
        if (arg1[1] != 0)
            sub_140042850(&arg1[1]);
        
        arg1[1] = result;
    }
    
    result = result != 0;
    return result;
}

int64_t sub_1400472e0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t result = *(arg2 + 0x20);
    **(arg2 + 0x28) = result;
    return result;
}

int64_t sub_140047310(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t* rdi = *arg1;
    int64_t rbx = rdi[2];
    
    if ((*rdi - rbx) < arg3)
    {
        sub_14005b440(rdi, rbx, arg3);
        rbx = rdi[2];
    }
    
    memcpy((rdi[1] + rbx), arg2, arg3);
    rdi[2] = (rbx + arg3);
    return 0;
}

int128_t* sub_140047380(int128_t* arg1, int16_t* arg2, uint64_t arg3, uint64_t arg4 @ r13)
{
    uint64_t var_20 = arg4;
    int64_t var_48 = -2;
    int16_t* rdi = arg2;
    char* rax_2;
    
    if (arg3 == 0)
        rax_2 = 1;
    else
    {
        if (arg3 < 0)
        {
            sub_14005c5d0(0);
            /* no return */
        }
        
        data_140071141;
        rax_2 = j_sub_140049a90(arg3, 1);
        
        if (rax_2 == 0)
        {
            sub_14005c5d0(1);
            /* no return */
        }
    }
    
    uint64_t var_68 = arg3;
    int64_t var_58 = 0;
    char var_50 = 1;
    void* r15 = &rdi[arg3];
    
    while (rdi != r15)
    {
        uint32_t r14_3 = *rdi;
        rdi = &rdi[1];
        uint64_t r14_6;
        
        if ((r14_3 & 0xf800) != 0xd800)
        {
        label_140047410:
            r14_6 = (r14_3 << 0x10);
        label_140047420:
            sub_140049160(&var_68, (r14_6 >> 0x10));
        }
        else
        {
            while (true)
            {
                int16_t rsi_1;
                
                if (r14_3 > 0xdbff)
                    rsi_1 = 0;
                else if (rdi == r15)
                {
                    rsi_1 = 0;
                    rdi = r15;
                }
                else
                {
                    uint32_t rax_8 = *rdi;
                    rdi = &rdi[1];
                    
                    if ((rax_8 + 0x2000) >= 0xfc00)
                    {
                        r14_6 = ((((rax_8 & 0x3ff) << 0x10) | ((r14_3 & 0x3ff) << 0x1a)) + 0x100000000);
                        goto label_140047420;
                    }
                    
                    rsi_1 = 1;
                    arg4 = rax_8;
                }
                
                char var_50_1 = 0;
                int64_t rdx_1 = var_58;
                
                if ((var_68 - rdx_1) <= 2)
                {
                    sub_14005b440(&var_68, rdx_1, 3);
                    rdx_1 = var_58;
                }
                
                uint8_t rax_17 = (((r14_3 >> 6) & 0x3f) | 0x80);
                r14_3 &= 0x3f;
                r14_3 |= 0x80;
                rax_2[rdx_1] = 0xed;
                rax_2[(rdx_1 + 1)] = rax_17;
                rax_2[(rdx_1 + 2)] = r14_3;
                var_58 = (rdx_1 + 3);
                
                if (rsi_1 == 0)
                    break;
                
                r14_3 = arg4;
                
                if ((r14_3 & 0xf800) != 0xd800)
                    goto label_140047410;
            }
        }
    }
    
    int128_t zmm0 = var_68;
    arg1[1] = var_58;
    *arg1 = zmm0;
    return arg1;
}

void sub_140047560(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x30);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x38), rdx, 1);
}

uint64_t sub_1400475b0()
{
    char rax = data_140071190;
    
    if (rax > 3)
    {
        sub_14005c7a0("internal error: entered unreacha…");
        /* no return */
    }
    
    int64_t rsi;
    
    switch (rax)
    {
        case 0:
        {
            int64_t var_30;
            sub_1400445f0(&var_30);
            int64_t rdx_2 = var_30;
            
            if (rdx_2 != -0x8000000000000000)
            {
                char* var_28;
                int64_t var_20;
                
                if (var_20 == 4)
                {
                    int32_t temp0_1 = _bswap(*var_28);
                    int32_t r8_2;
                    r8_2 = temp0_1 >= 0x66756c6d;
                    rsi = (r8_2 - 0) == 0;
                }
                else if (var_20 != 1)
                    rsi = 0;
                else
                {
                    rsi = *var_28 == 0x30;
                    rsi *= 2;
                }
                
                if (rdx_2 != 0)
                    j_sub_140049af0(var_28, rdx_2, 1);
                
                data_140071190 = (rsi + 1);
            }
            else
            {
                rsi = 2;
                data_140071190 = 3;
            }
            break;
        }
        case 1:
        {
            rsi = 0;
            break;
        }
        case 2:
        {
            rsi = 1;
            break;
        }
        case 3:
        {
            rsi = 2;
            break;
        }
    }
    
    return rsi;
}

int64_t sub_1400476a0(int64_t* arg1)
{
    char r8 = arg1[7];
    char rdx = *(arg1 + 0x3a);
    bool rax = rdx != 0;
    int64_t rcx_1;
    uint64_t rdx_3;
    
    if (r8 > 1)
    {
        rax = false;
        rdx_3 = 0;
        rcx_1 = 0;
    }
    else
    {
        if (rdx != 0)
            rdx_3 = 0;
        else
        {
            char r11_1 = arg1[2];
            
            if ((r11_1 - 5) > 1)
                rdx_3 = 0;
            else
            {
                char* r9_1 = *arg1;
                int64_t rdx_2 = arg1[1];
                int64_t r10_1 = 0;
                
                if ((r8 == 0 && r11_1 != 6))
                {
                    r10_1 = 2;
                    
                    if (rdx_2 <= 1)
                    {
                        sub_14005cae0(2, rdx_2);
                        /* no return */
                    }
                }
                
                if (r10_1 != rdx_2)
                {
                    rdx_3 = &r9_1[(r10_1 + 1)] == &r9_1[rdx_2];
                    bool r9_2 = r9_1[r10_1];
                    
                    if (((rdx_3 & 1) != 0 || r9_2 != 0x2e))
                        rdx_3 &= r9_2 == 0x2e;
                    else
                    {
                        rdx_3 = r9_1[(r10_1 + 1)];
                        r9_2 = rdx_3 == 0x5c;
                        rdx_3 = rdx_3 == 0x2f;
                        rdx_3 |= r9_2;
                    }
                }
                else
                    rdx_3 = 0;
            }
        }
        
        if (r8 != 0)
            rcx_1 = 0;
        else
            switch (arg1[2])
            {
                case 0:
                case 3:
                {
                    rcx_1 = (arg1[4] + 4);
                    break;
                }
                case 1:
                {
                    int64_t rcx_4 = arg1[6];
                    int64_t r9_4 = (rcx_4 + 1);
                    
                    if (rcx_4 == 0)
                        r9_4 = rcx_4;
                    
                    rcx_1 = ((arg1[4] + r9_4) + 8);
                    break;
                }
                case 2:
                {
                    rcx_1 = 6;
                    break;
                }
                case 4:
                {
                    int64_t rcx_2 = arg1[6];
                    int64_t r9_3 = (rcx_2 + 1);
                    
                    if (rcx_2 == 0)
                        r9_3 = rcx_2;
                    
                    rcx_1 = ((arg1[4] + r9_3) + 2);
                    break;
                }
                case 5:
                {
                    rcx_1 = 2;
                    break;
                }
                case 6:
                {
                    rcx_1 = 0;
                    break;
                }
            }
    }
    
    return ((rax + rdx_3) + rcx_1);
}

char* sub_1400477f0(int64_t* arg1)
{
    char* result = *arg1;
    void* i = arg1[1];
    uint32_t rax = arg1[2];
    int128_t var_e8;
    int128_t var_d8;
    
    if (rax != 6)
    {
        *var_d8[0xf] = arg1[6];
        var_d8 = *(arg1 + 0x21);
        var_e8 = *(arg1 + 0x11);
    }
    
    char rdx_2 = *(arg1 + 0x3a);
    char r12 = arg1[7];
    char r8 = *(arg1 + 0x39);
    char* result_1 = result;
    void* i_2 = i;
    char var_70 = rax;
    int128_t zmm0 = var_e8;
    int128_t var_5f = var_d8;
    *var_5f[0xf] = *var_d8[0xf];
    char var_46 = rdx_2;
    char var_48 = r12;
    char var_47 = r8;
    char* rcx;
    
    if (r12 != 2)
    {
    label_140047934:
        
        if (r8 == 2)
        {
            rcx = rdx_2 != 0;
            uint64_t r8_1;
            int64_t r9_6;
            
            if (r12 > 1)
            {
                rcx = nullptr;
                r8_1 = 0;
                r9_6 = 0;
            }
            else
            {
                r8_1 = 0;
                
                if ((rax >= 5 && rdx_2 == 0))
                {
                    int64_t r9_4 = 0;
                    
                    if ((rax != 6 && r12 == 0))
                    {
                        r9_4 = 2;
                        
                        if (i <= 1)
                        {
                            sub_14005cae0(2, i);
                            /* no return */
                        }
                    }
                    
                    if (r9_4 != i)
                    {
                        r8_1 = &result[(r9_4 + 1)] == (result + i);
                        bool r9_5 = result[r9_4];
                        
                        if (((r8_1 & 1) != 0 || r9_5 != 0x2e))
                            r8_1 &= r9_5 == 0x2e;
                        else
                        {
                            r8_1 = result[(r9_4 + 1)];
                            r9_5 = r8_1 == 0x5c;
                            r8_1 = r8_1 == 0x2f;
                            r8_1 |= r9_5;
                        }
                    }
                    else
                        r8_1 = 0;
                }
                
                if (r12 == 0)
                    switch (rax)
                    {
                        case 0:
                        case 3:
                        {
                            r9_6 = (*zmm0[0xf] + 4);
                            break;
                        }
                        case 1:
                        {
                            int64_t r10_5 = *var_5f[0xf];
                            int64_t r11_2 = (r10_5 + 1);
                            
                            if (r10_5 == 0)
                                r11_2 = r10_5;
                            
                            r9_6 = ((*zmm0[0xf] + r11_2) + 8);
                            break;
                        }
                        case 2:
                        {
                            r9_6 = 6;
                            break;
                        }
                        case 4:
                        {
                            int64_t r10_4 = *var_5f[0xf];
                            int64_t r11_1 = (r10_4 + 1);
                            
                            if (r10_4 == 0)
                                r11_1 = r10_4;
                            
                            r9_6 = ((*zmm0[0xf] + r11_1) + 2);
                            break;
                        }
                        case 5:
                        {
                            r9_6 = 2;
                            break;
                        }
                        case 6:
                        {
                            r9_6 = 0;
                            break;
                        }
                    }
                else
                    r9_6 = 0;
            }
            
            if (i > ((rcx + r8_1) + r9_6))
            {
                int64_t rcx_3;
                rcx_3 = rdx_2 != 0;
                int64_t r13;
                r13 = rax == 6;
                int64_t rbx;
                rbx = rax < 5;
                r9_6 = r12 != 0;
                int64_t r10_3 = *var_5f[0xf];
                int64_t r8_3 = (r10_3 + 1);
                
                if (r10_3 == 0)
                    r8_3 = r10_3;
                
                if (r12 >= 2)
                {
                    bool cond:0_1;
                    
                    do
                    {
                        sub_140047c80(&var_e8, &result_1);
                        
                        if (*var_e8[8] != 0xa)
                            break;
                        
                        int64_t temp3_1 = var_e8;
                        void* i_5 = (i - var_e8);
                        cond:0_1 = i != temp3_1;
                        
                        if (i < temp3_1)
                        {
                            sub_14005cb50(i_5, i);
                            /* no return */
                        }
                        
                        void* i_8 = i_5;
                        i = i_5;
                    } while (cond:0_1);
                }
                else
                {
                    rbx |= rcx_3;
                    r13 |= r9_6;
                    int64_t rcx_4 = *zmm0[0xf];
                    uint64_t rax_2;
                    int64_t rcx_6;
                    
                    do
                    {
                        void* i_6 = i;
                        sub_140047c80(&var_e8, &result_1);
                        
                        if (*var_e8[8] != 0xa)
                            break;
                        
                        i = (i_6 - var_e8);
                        
                        if (i_6 < var_e8)
                        {
                            sub_14005cb50(i, i_6);
                            /* no return */
                        }
                        
                        void* i_4 = i;
                        int64_t rcx_8;
                        
                        if (rbx == 0)
                        {
                            if (r13 == 0)
                            {
                                rcx_8 = 2;
                                
                                if (i < 2)
                                {
                                    sub_14005cae0(2, i);
                                    /* no return */
                                }
                            }
                            else
                                rcx_8 = 0;
                        }
                        
                        if ((rbx != 0 || rcx_8 == i))
                        {
                            rax_2 = 0;
                            
                            if (r12 == 0)
                            {
                            label_140047a44:
                                
                                switch (rax)
                                {
                                    case 0:
                                    case 3:
                                    {
                                        rcx_6 = (rcx_4 + 4);
                                        break;
                                    }
                                    case 1:
                                    {
                                        rcx_6 = ((rcx_4 + r8_3) + 8);
                                        break;
                                    }
                                    case 2:
                                    {
                                        rcx_6 = 6;
                                        break;
                                    }
                                    case 4:
                                    {
                                        rcx_6 = ((rcx_4 + r8_3) + 2);
                                        break;
                                    }
                                    case 5:
                                    {
                                        rcx_6 = 2;
                                        break;
                                    }
                                    case 6:
                                    {
                                        rcx_6 = 0;
                                        break;
                                    }
                                }
                            }
                            else
                                rcx_6 = 0;
                        }
                        else
                        {
                            rax_2 = &result[(rcx_8 + 1)] == (result + i);
                            bool rcx_9 = result[rcx_8];
                            
                            if (((rax_2 & 1) != 0 || rcx_9 != 0x2e))
                            {
                                rax_2 &= rcx_9 == 0x2e;
                                
                                if (r12 == 0)
                                    goto label_140047a44;
                                
                                rcx_6 = 0;
                            }
                            else
                            {
                                rax_2 = result[(rcx_8 + 1)];
                                rcx_9 = rax_2 == 0x5c;
                                rax_2 = rax_2 == 0x2f;
                                rax_2 |= rcx_9;
                                
                                if (r12 == 0)
                                    goto label_140047a44;
                                
                                rcx_6 = 0;
                            }
                        }
                    } while (i > ((rax_2 + rdx_2) + rcx_6));
                }
            }
        }
    }
    else if (i != 0)
    {
        if (rax >= 3)
        {
            while (true)
            {
                rcx = nullptr;
                int64_t r9_3;
                
                while (true)
                {
                    uint32_t r9_2 = *(result + rcx);
                    
                    if ((r9_2 == 0x2f || r9_2 == 0x5c))
                    {
                        r9_3 = 1;
                        
                        if (rcx == 0)
                            goto label_140047916;
                        
                        goto label_14004790b;
                    }
                    
                    rcx = &rcx[1];
                    
                    if (i == rcx)
                        break;
                    
                    continue;
                }
                
                r9_3 = 0;
                rcx = i;
                
                if (rcx != 0)
                {
                label_14004790b:
                    
                    if (rcx != 1)
                        break;
                    
                    if (*result != 0x2e)
                        break;
                }
                
            label_140047916:
                rcx = &rcx[r9_3];
                
                if (i < rcx)
                {
                    sub_14005cae0(rcx, i);
                    /* no return */
                }
                
                result += rcx;
                void* i_7 = i;
                i -= rcx;
                
                if (i_7 == rcx)
                {
                    i = nullptr;
                    break;
                }
            }
            
        label_14004792c:
            result_1 = result;
        }
        else
        {
            rcx = (result + i);
            void* i_1;
            
            do
            {
                int64_t r9_1 = 0;
                
                while (result[r9_1] != 0x5c)
                {
                    r9_1 += 1;
                    
                    if (i == r9_1)
                        goto label_14004792c;
                }
                
                if (r9_1 != 0)
                    goto label_14004792c;
                
                result = &result[1];
                i_1 = i;
                i -= 1;
            } while (i_1 != 1);
            i = nullptr;
            result = rcx;
            result_1 = rcx;
        }
        
        void* i_3 = i;
        goto label_140047934;
    }
    return result;
}

uint64_t sub_140047c80(int64_t* arg1, int64_t* arg2)
{
    uint64_t result = sub_1400476a0(arg2);
    int64_t rdx = arg2[1];
    
    if (result > rdx)
    {
        sub_14005cae0(result, rdx);
        /* no return */
    }
    
    int64_t r10 = *arg2;
    char* rcx_1 = (r10 + result);
    char r8 = arg2[2];
    int64_t r9;
    
    if (result != rdx)
    {
        int64_t r11_2 = ((result - rdx) + 1);
        char* rdi_2 = ((rdx + r10) - 1);
        r9 = 0;
        
        if (r8 >= 3)
        {
            while (true)
            {
                uint32_t rbx_1 = *rdi_2;
                
                if (rbx_1 == 0x2f)
                    break;
                
                if (rbx_1 == 0x5c)
                    break;
                
                r11_2 += 1;
                rdi_2 -= 1;
                
                if (r11_2 == 1)
                    goto label_140047d35;
            }
        }
        else
        {
            while (*rdi_2 != 0x5c)
            {
                r11_2 += 1;
                rdi_2 -= 1;
                
                if (r11_2 == 1)
                    goto label_140047d35;
            }
        }
        
        result = ((result + -(r11_2)) + 1);
        
        if (result > rdx)
        {
            sub_14005cae0(result, rdx);
            /* no return */
        }
        
        r9 = 1;
        rcx_1 = (r10 + result);
    }
    else
        r9 = 0;
    
label_140047d35:
    int64_t rdx_1 = (rdx - result);
    
    if (rdx == result)
        result = 0xa;
    else
    {
        result = 9;
        
        if (rdx_1 == 2)
        {
            if (*rcx_1 == 0x2e)
            {
                result = rcx_1[1] == 0x2e;
                result ^= 9;
            }
        }
        else if ((rdx_1 == 1 && *rcx_1 == 0x2e))
        {
            int64_t rax_1;
            rax_1 = r8 >= 3;
            result = ((rax_1 * 3) + 7);
        }
    }
    
    *arg1 = (r9 + rdx_1);
    arg1[1] = result;
    arg1[2] = rcx_1;
    arg1[3] = rdx_1;
    return result;
}

char* sub_140047db0(char* arg1, int64_t* arg2)
{
    char rbx = arg2[7];
    
    if (rbx != 3)
    {
        char r15_1 = *(arg2 + 0x39);
        uint32_t r8_1 = arg2[2];
        int64_t r10_1 = arg2[6];
        int64_t rax_2 = (r10_1 + 1);
        
        if (r10_1 == 0)
            rax_2 = r10_1;
        
        if ((r15_1 != 3 && rbx <= r15_1))
        {
            void* r10_2 = arg2[4];
            int64_t rdx;
            rdx = r8_1 >= 3;
            char r13_1 = *(arg2 + 0x3a);
            char* rsi_1 = *arg2;
            void* rdx_4 = arg2[1];
            uint64_t r14_1 = r8_1;
            void* r9_1 = rdx_4;
            
            do
            {
                void* r10_3;
                
                if (rbx == 0)
                {
                    void* r11_1 = (r10_2 + 4);
                    void* rax_4 = (r10_2 + 4);
                    
                    switch (r14_1)
                    {
                        case 0:
                        case 3:
                        {
                            goto label_140047e59;
                        }
                        case 1:
                        {
                            rax_4 = ((r10_2 + rax_2) + 8);
                        label_140047e59:
                            
                            if (rax_4 != 0)
                                goto label_140048013;
                            
                            arg2[7] = 1;
                            rbx = 1;
                            break;
                        }
                        case 2:
                        case 5:
                        {
                        label_140048013:
                            arg2[7] = 1;
                            void* r10_8;
                            
                            switch (r14_1)
                            {
                                case 0:
                                case 3:
                                {
                                    r10_8 = r11_1;
                                    break;
                                }
                                case 1:
                                {
                                    r10_8 = ((r10_2 + rax_2) + 8);
                                    break;
                                }
                                case 2:
                                {
                                    r10_8 = 6;
                                    break;
                                }
                                case 4:
                                {
                                    r10_8 = ((r10_2 + rax_2) + 2);
                                    break;
                                }
                                case 5:
                                {
                                    r10_8 = 2;
                                    break;
                                }
                            }
                            
                            if (r10_8 > r9_1)
                            {
                                sub_14005cb50(r10_8, r9_1);
                                /* no return */
                            }
                            
                            switch (r14_1)
                            {
                                case 1:
                                {
                                    r11_1 = ((r10_2 + rax_2) + 8);
                                    break;
                                }
                                case 2:
                                {
                                    r11_1 = 6;
                                    break;
                                }
                                case 4:
                                {
                                    r11_1 = ((r10_2 + rax_2) + 2);
                                    break;
                                }
                                case 5:
                                {
                                    r11_1 = 2;
                                    break;
                                }
                            }
                            
                            if (r9_1 < r11_1)
                            {
                                sub_14005cae0(r11_1, r9_1);
                                /* no return */
                            }
                            
                            *arg2 = (r11_1 + rsi_1);
                            arg2[1] = (r9_1 - r11_1);
                            *(arg1 + 0x20) = arg2[6];
                            int128_t zmm0 = *(arg2 + 0x11);
                            *(arg1 + 0x11) = *(arg2 + 0x21);
                            *(arg1 + 1) = zmm0;
                            *arg1 = r8_1;
                            *(arg1 + 0x28) = rsi_1;
                            *(arg1 + 0x30) = r10_8;
                            return arg1;
                            break;
                        }
                        case 4:
                        {
                            rax_4 = ((r10_2 + rax_2) + 2);
                            goto label_140047e59;
                        }
                        case 6:
                        {
                            arg2[7] = 1;
                            rbx = 1;
                            break;
                        }
                    }
                    
                    r10_3 = rsi_1;
                }
                else if (rbx != 1)
                {
                    if (rdx_4 == 0)
                    {
                        arg2[7] = 3;
                        break;
                    }
                    
                    void* r11_2 = nullptr;
                    uint32_t rax_5;
                    void* const r10_6;
                    
                    if (r8_1 >= 3)
                    {
                        do
                        {
                            rax_5 = *(rsi_1 + r11_2);
                            
                            if (rax_5 == 0x2f)
                                goto label_140047f76;
                            
                            if (rax_5 == 0x5c)
                                goto label_140047f76;
                            
                            r11_2 += 1;
                        } while (rdx_4 != r11_2);
                    }
                    else
                    {
                        do
                        {
                            if (*(rsi_1 + r11_2) == 0x5c)
                            {
                            label_140047f76:
                                r10_6 = 1;
                                
                                if (r11_2 == 0)
                                    goto label_140047f72;
                                
                                goto label_140047f81;
                            }
                            
                            r11_2 += 1;
                        } while (rdx_4 != r11_2);
                    }
                    
                    r10_6 = nullptr;
                    r11_2 = rdx_4;
                    
                    if (r11_2 != 0)
                    {
                    label_140047f81:
                        rax_5 = 9;
                        
                        if (r11_2 == 2)
                        {
                            if (*rsi_1 == 0x2e)
                            {
                                rax_5 = rsi_1[1] == 0x2e;
                                rax_5 ^= 9;
                            }
                        }
                        else if (r11_2 == 1)
                        {
                            rax_5 = ((rdx * 3) + 7);
                            
                            if (*rsi_1 != 0x2e)
                                rax_5 = 9;
                        }
                    }
                    else
                    {
                    label_140047f72:
                        rax_5 = 0xa;
                    }
                    
                    void* r10_7 = (r10_6 + r11_2);
                    r9_1 = (rdx_4 - r10_7);
                    
                    if (rdx_4 < r10_7)
                    {
                        sub_14005cae0(r10_7, rdx_4);
                        /* no return */
                    }
                    
                    r10_3 = (r10_7 + rsi_1);
                    *arg2 = r10_3;
                    arg2[1] = r9_1;
                    rbx = 2;
                    rdx_4 = r9_1;
                    
                    if (rax_5 != 0xa)
                    {
                        *arg1 = rax_5;
                        *(arg1 + 8) = rsi_1;
                        *(arg1 + 0x10) = r11_2;
                        return arg1;
                    }
                }
                else
                {
                    arg2[7] = 2;
                    
                    if (r13_1 != 0)
                    {
                        if (r9_1 == 0)
                        {
                            sub_14005cae0(1, 0);
                            /* no return */
                        }
                        
                        *arg2 = &rsi_1[1];
                        arg2[1] = (r9_1 - 1);
                        *arg1 = 6;
                        return arg1;
                    }
                    
                    rbx = 2;
                    
                    if ((r8_1 >= 3 && r8_1 != 5))
                    {
                        if (r8_1 != 6)
                        {
                            *arg1 = 6;
                            return arg1;
                        }
                        
                        if (rdx_4 == 0)
                            rdx_4 = nullptr;
                        else
                        {
                            char rax_6 = *rsi_1;
                            
                            if ((rdx_4 != 1 && rax_6 == 0x2e))
                            {
                                uint32_t rax_7 = rsi_1[1];
                                
                                if ((rax_7 == 0x2f || rax_7 == 0x5c))
                                {
                                label_140047ff3:
                                    
                                    if (r9_1 == 0)
                                    {
                                        sub_14005cae0(1, 0);
                                        /* no return */
                                    }
                                    
                                    *arg2 = &rsi_1[1];
                                    arg2[1] = (r9_1 - 1);
                                    *arg1 = 7;
                                    return arg1;
                                }
                            }
                            else if ((rdx_4 == 1 && rax_6 == 0x2e))
                                goto label_140047ff3;
                        }
                    }
                    
                    r10_3 = rsi_1;
                }
                
                rsi_1 = r10_3;
            } while (rbx <= r15_1);
        }
    }
    
    *arg1 = 0xa;
    return arg1;
}

int64_t sub_140048160(void* arg1, void* arg2)
{
    /* tailcall */
    return sub_140049250(*(arg1 + 8), *(arg1 + 0x10), arg2);
}

bool sub_140048180(char* arg1, void* arg2)
{
    bool var_40;
    sub_14004d600(&var_40, arg1, arg2);
    bool rax = var_40;
    void* r8_2 = arg2;
    char* r9 = arg1;
    void* var_30;
    int64_t var_20;
    void* rcx_2;
    
    switch (rax)
    {
        case false:
        case true:
        {
            rcx_2 = (var_30 + 4);
        label_140048205:
            r8_2 = (arg2 - rcx_2);
            
            if (arg2 >= rcx_2)
            {
                r9 = (rcx_2 + arg1);
            label_140048217:
                
                if (r8_2 != 0)
                {
                    uint32_t rcx_6 = *r9;
                    
                    if (((rcx_6 != 0x2f && rcx_6 != 0x5c) && (rax - 5) < 2))
                        return false;
                }
                else if ((rax - 5) < 2)
                    return false;
                
                sub_14004d600(&var_40, arg1, arg2);
                bool rax_1 = var_40;
                
                switch (rax_1)
                {
                    case false:
                    case true:
                    {
                        rcx_2 = (var_30 + 4);
                        break;
                    }
                    case true:
                    {
                        int64_t r8_10 = (var_20 + 1);
                        
                        if (var_20 == 0)
                            r8_10 = var_20;
                        
                        rcx_2 = ((var_30 + r8_10) + 8);
                        break;
                    }
                    case true:
                    {
                        rcx_2 = 6;
                        break;
                    }
                    case true:
                    {
                        int64_t r8_11 = (var_20 + 1);
                        
                        if (var_20 == 0)
                            r8_11 = var_20;
                        
                        rcx_2 = ((var_30 + r8_11) + 2);
                        break;
                    }
                    case true:
                    {
                        rcx_2 = 2;
                        break;
                    }
                    case true:
                    {
                        return rax_1 != 6;
                        break;
                    }
                }
                
                if (rcx_2 <= arg2)
                    return rax_1 != 6;
            }
            break;
        }
        case true:
        {
            int64_t r8_3 = (var_20 + 1);
            
            if (var_20 == 0)
                r8_3 = var_20;
            
            rcx_2 = ((var_30 + r8_3) + 8);
            goto label_140048205;
        }
        case true:
        {
            rcx_2 = 6;
            goto label_140048205;
        }
        case true:
        {
            int64_t r8_4 = (var_20 + 1);
            
            if (var_20 == 0)
                r8_4 = var_20;
            
            rcx_2 = ((var_30 + r8_4) + 2);
            goto label_140048205;
        }
        case true:
        {
            rcx_2 = 2;
            goto label_140048205;
        }
        case true:
        {
            goto label_140048217;
        }
    }
    
    sub_14005cae0(rcx_2, arg2);
    /* no return */
}

char* sub_1400482c0(char* arg1, void* arg2, char* arg3, void* arg4)
{
    char* rdi = arg1;
    char var_e8;
    sub_14004d600(&var_e8, rdi, arg2);
    char r14 = var_e8;
    void* r10 = arg2;
    char* r8_1 = rdi;
    char* var_d8;
    uint64_t var_c8;
    void* rcx_2;
    
    switch (r14)
    {
        case 0:
        case 3:
        {
            rcx_2 = &var_d8[4];
        label_140048367:
            r10 = (arg2 - rcx_2);
            
            if (arg2 < rcx_2)
            {
                sub_14005cae0(rcx_2, arg2);
                /* no return */
            }
            
            r8_1 = (rcx_2 + rdi);
            break;
        }
        case 1:
        {
            uint64_t r8_2 = (var_c8 + 1);
            
            if (var_c8 == 0)
                r8_2 = var_c8;
            
            rcx_2 = &var_d8[(r8_2 + 8)];
            goto label_140048367;
        }
        case 2:
        {
            rcx_2 = 6;
            goto label_140048367;
        }
        case 4:
        {
            uint64_t r8_3 = (var_c8 + 1);
            
            if (var_c8 == 0)
                r8_3 = var_c8;
            
            rcx_2 = &var_d8[(r8_3 + 2)];
            goto label_140048367;
        }
        case 5:
        {
            rcx_2 = 2;
            goto label_140048367;
        }
    }
    
    int64_t r15;
    
    if (r10 == 0)
        r15 = 0;
    else
    {
        char rax_1 = *r8_1;
        char* rcx_1;
        rcx_1 = rax_1 == 0x2f;
        r15 = rax_1 == 0x5c;
        r15 |= rcx_1;
    }
    
    uint64_t var_59 = var_c8;
    int128_t var_68 = *var_d8[1];
    int128_t var_e7;
    int128_t var_78 = var_e7;
    sub_14004d600(&var_e8, arg3, arg4);
    void* rdx_3 = arg4;
    char* r8_5 = arg3;
    void* rcx_7;
    
    switch (var_e8)
    {
        case 0:
        case 3:
        {
            rcx_7 = &var_d8[4];
        label_140048437:
            rdx_3 = (arg4 - rcx_7);
            
            if (arg4 < rcx_7)
            {
                sub_14005cae0(rcx_7, arg4);
                /* no return */
            }
            
            r8_5 = (rcx_7 + arg3);
            break;
        }
        case 1:
        {
            uint64_t rdx_4 = (var_c8 + 1);
            
            if (var_c8 == 0)
                rdx_4 = var_c8;
            
            rcx_7 = &var_d8[(rdx_4 + 8)];
            goto label_140048437;
        }
        case 2:
        {
            rcx_7 = 6;
            goto label_140048437;
        }
        case 4:
        {
            uint64_t rdx_5 = (var_c8 + 1);
            
            if (var_c8 == 0)
                rdx_5 = var_c8;
            
            rcx_7 = &var_d8[(rdx_5 + 2)];
            goto label_140048437;
        }
        case 5:
        {
            rcx_7 = 2;
            goto label_140048437;
        }
    }
    
    bool rax_4;
    
    if (rdx_3 == 0)
        rax_4 = false;
    else
    {
        rax_4 = *r8_5;
        char* rcx_6;
        rcx_6 = rax_4 == 0x2f;
        rax_4 = (rax_4 == 0x5c | rcx_6);
    }
    
    char r8_6 = r15;
    char* var_198 = arg3;
    void* var_190 = arg4;
    int128_t var_188 = var_e8;
    int128_t var_178 = var_d8;
    uint64_t var_168 = var_c8;
    bool var_15e = rax_4;
    int16_t var_160 = 0x200;
    uint64_t rcx_10;
    rcx_10 = 2;
    
    if (r14 == 6)
        goto label_1400484dd;
    
    while (true)
    {
        uint64_t var_c9 = var_59;
        var_d8 = var_68;
        var_e8 = var_78;
    label_1400484dd:
        char* var_158 = rdi;
        int128_t zmm0 = var_e8;
        int128_t var_137_1 = var_d8;
        char var_11f_1 = rcx_10;
        int128_t var_1d0;
        sub_140047db0(&var_1d0, &var_158);
        int128_t var_208;
        sub_140047db0(&var_208, &var_198);
        int64_t var_1a0;
        int64_t var_b8_1 = var_1a0;
        int128_t var_1b0;
        var_c8 = var_1b0;
        int128_t var_1c0;
        var_d8 = var_1c0;
        var_e8 = var_1d0;
        int64_t var_1d8;
        int64_t var_80_1 = var_1d8;
        int128_t var_1e8;
        int128_t var_90_1 = var_1e8;
        int128_t var_1f8;
        int128_t var_a0_1 = var_1f8;
        int128_t var_b0 = var_208;
        char rax_9 = var_208;
        
        if (var_1d0 == 0xa)
        {
            if (rax_9 != 0xa)
                goto label_14004867c;
            
            break;
        }
        
        int32_t var_50;
        char var_4c;
        
        if (rax_9 == 0xa)
        {
        label_140048676:
            
            if (r8_6 == 2)
            {
            label_14004867c:
                return nullptr;
            }
            
            uint64_t var_b8_2 = var_59;
            *var_c8[1] = var_68;
            *var_d8[1] = var_78;
            *var_b0[3] = var_50;
            *var_b0[7] = var_4c;
            var_e8 = rdi;
            *var_e7[7] = arg2;
            var_d8 = r14;
            var_b0 = 0;
            *var_b0[1] = rcx_10;
            *var_b0[2] = r8_6;
            return sub_1400477f0(&var_e8);
        }
        
        if (sub_14004b8b0(&var_e8, &var_b0) == 0)
            return nullptr;
        
        rdi = var_158;
        var_78 = zmm0;
        var_68 = var_137_1;
        var_59 = var_c9;
        rcx_10 = var_11f_1;
        char var_119;
        var_4c = var_119;
        int32_t var_11d;
        var_50 = var_11d;
        
        if (r14 == 6)
            goto label_1400484dd;
    }
    
    goto label_140048676;
}

int64_t sub_140048730(char* arg1, void* arg2)
{
    int64_t var_48 = -2;
    char r13 = *arg1;
    char var_4a = r13;
    int64_t ContextRecord;
    sub_140044370(&ContextRecord);
    int64_t ContextRecord_1 = ContextRecord;
    int128_t var_108;
    int64_t var_f8;
    int128_t var_640;
    
    if (ContextRecord_1 != -0x8000000000000000)
    {
        int64_t var_630;
        var_f8 = var_630;
        var_108 = var_640;
    }
    else
        sub_140042850(&var_640);
    char var_78 = r13;
    int64_t ContextRecord_2 = ContextRecord_1;
    void* var_90 = var_108;
    int64_t var_80 = var_f8;
    
    if (*(*(arg2 + 0x28) + 0x18)(*(arg2 + 0x20), "stack backtrace:\n", 0x11) == 0)
    {
        void* var_e8 = arg2;
        int64_t var_d0_1 = 0;
        char var_c8_1 = r13;
        int64_t* var_e0_1 = &ContextRecord_2;
        void** const var_d8_1 = &data_140062be8;
        char var_49 = 0;
        int64_t var_a0 = 0;
        char var_4d = 1;
        bool var_4b = r13 != 0;
        memset(&ContextRecord, 0, 0x4d0);
        RtlCaptureContext(&ContextRecord);
        uint64_t ControlPc;
        uint64_t ControlPc_1 = ControlPc;
        uint64_t ImageBase = 0;
        IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry_1 = RtlLookupFunctionEntry(ControlPc_1, &ImageBase, nullptr);
        
        if (FunctionEntry_1 != 0)
        {
            IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry = FunctionEntry_1;
            int64_t rsi = 0;
            IMAGE_RUNTIME_FUNCTION_ENTRY* i;
            
            do
            {
                uint64_t ImageBase_1 = ImageBase;
                int32_t var_c0 = 0;
                uint64_t ImageBase_2 = ImageBase_1;
                int64_t var_5b0;
                int64_t var_a8_1 = var_5b0;
                
                if ((var_4a == 0 && rsi > 0x64))
                    break;
                
                char var_4c = 0;
                char* EstablisherFrame = &var_4c;
                char* var_168_1 = &var_4a;
                bool* var_160_1 = &var_4b;
                int64_t* var_158_1 = &var_a0;
                char* var_150_1 = &var_4d;
                void** var_148_1 = &var_e8;
                char* var_140_1 = &var_49;
                int32_t* var_138_1 = &var_c0;
                sub_14004e550(1, &var_c0, &EstablisherFrame, &data_140063270);
                void** HandlerData;
                int32_t var_650;
                int64_t var_120;
                
                if ((var_4c == 0 && var_4b != 0))
                {
                    void** var_70 = &var_e8;
                    int64_t var_68_1 = 0;
                    EstablisherFrame = 3;
                    var_120 = 2;
                    char rax_6 = sub_14004b0a0(&var_70, ControlPc_1, &EstablisherFrame, &var_120, 0, HandlerData, 0, var_650);
                    var_49 = rax_6;
                    void** rcx_9 = var_70;
                    rcx_9[3] += 1;
                    
                    if (rax_6 != 0)
                        break;
                }
                else if (var_49 != 0)
                    break;
                
                var_120 = 0;
                EstablisherFrame = nullptr;
                HandlerData = &var_120;
                var_650 = 0;
                RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, ControlPc_1, FunctionEntry, &ContextRecord, HandlerData, &EstablisherFrame, nullptr);
                
                if (ControlPc == 0)
                    break;
                
                if ((ControlPc == ControlPc_1 && var_5b0 == var_5b0))
                    break;
                
                rsi += 1;
                ImageBase = 0;
                i = RtlLookupFunctionEntry(ControlPc, &ImageBase, nullptr);
                FunctionEntry = i;
                ControlPc_1 = ControlPc;
            } while (i != 0);
        }
        
        if (var_49 == 0)
        {
            char rax_10;
            
            if (r13 == 0)
                rax_10 = *(*(arg2 + 0x28) + 0x18)(*(arg2 + 0x20), "note: Some details are omitted, …", 0x58);
            
            if ((r13 != 0 || rax_10 == 0))
            {
                int64_t ContextRecord_4 = ContextRecord_2;
                
                if ((ContextRecord_4 << 1) != 0)
                    j_sub_140049af0(var_90, ContextRecord_4, 1);
                
                return 0;
            }
        }
    }
    
    int64_t ContextRecord_3 = ContextRecord_2;
    
    if ((ContextRecord_3 << 1) != 0)
        j_sub_140049af0(var_90, ContextRecord_3, 1);
    
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_140048b60(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x5f0);
    int64_t result = (rdx << 1);
    
    if (result == 0)
        return result;
    
    return j_sub_140049af0(*(arg2 + 0x5f8), rdx, 1);
}

void* sub_140048bc0(int64_t, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0x618);
    *(result + 0x18) += 1;
    return result;
}

int64_t sub_140048c00(int64_t* arg1, int64_t* arg2, void* arg3)
{
    int64_t* r9 = nullptr;
    
    if (*arg1 != -0x8000000000000000)
        r9 = arg1;
    
    /* tailcall */
    return sub_140048f60(arg2, arg3, arg1[4], r9);
}

uint64_t sub_140048c30(int64_t* arg1, int64_t* arg2)
{
    int64_t var_40 = -2;
    **arg1 = 1;
    uint64_t result;
    char const (** const var_a0)[0x20];
    int16_t* var_98;
    void* var_90;
    int128_t var_78;
    
    if (*arg1[1] != 0)
    {
    label_140048cb9:
        result = arg1[2];
        
        if (*result != 0)
        {
            uint64_t* rbx_2 = arg1[3];
            uint64_t result_3 = *rbx_2;
            int128_t var_d8;
            int128_t var_c8;
            int128_t var_88;
            uint64_t result_1;
            
            if (result_3 != 0)
            {
                char* r14_2 = arg1[4];
                
                if (*r14_2 == 0)
                {
                    void* rdx_3 = *arg1[5];
                    int64_t rcx_4;
                    rcx_4 = result_3 != 1;
                    uint64_t result_2 = "s      [... omitted  frame ...]\n";
                    
                    if (result_3 == 1)
                        result_2 = result_3;
                    
                    result_1 = result_2;
                    int64_t var_48_1 = rcx_4;
                    var_d8 = rbx_2;
                    *var_d8[8] = sub_14005a2a0;
                    var_c8 = &result_1;
                    *var_c8[8] = sub_140042340;
                    var_a0 = &data_140062cc0;
                    var_98 = 3;
                    int64_t var_80_1 = 0;
                    var_90 = &var_d8;
                    var_88 = 2;
                    sub_140056fc0(*(rdx_3 + 0x20), *(rdx_3 + 0x28), &var_a0);
                }
                
                *r14_2 = 0;
                *rbx_2 = 0;
            }
            
            result_1 = arg1[5];
            int64_t var_48_2 = 0;
            int64_t rbx_3 = *(arg1[7] + 0x10);
            char* r14_3 = arg2[4];
            int64_t r15_1 = arg2[5];
            sub_140058240(&var_a0, r14_3, r15_1);
            int64_t r12_1 = 2;
            char const (** const rax_4)[0x20] = 2;
            int128_t var_b8;
            int64_t var_a8;
            
            if (var_a0 == 0)
            {
                sub_140055900(&var_a0, var_98, var_90);
                rax_4 = var_a0;
                
                if (rax_4 != 2)
                {
                    int64_t var_68;
                    var_a8 = var_68;
                    var_b8 = var_78;
                    var_c8 = var_88;
                    var_d8 = var_98;
                }
            }
            
            var_a0 = rax_4;
            var_98 = var_d8;
            int128_t var_88_1 = var_c8;
            int128_t var_78_1 = var_b8;
            int64_t var_68_1 = var_a8;
            char* var_60_1 = r14_3;
            int64_t var_58_1 = r15_1;
            
            if (*arg2 != 0)
            {
                var_d8 = *(arg2 + 8);
                r12_1 = 1;
            }
            
            var_d8 = r12_1;
            *arg1[6] = sub_14004b0a0(&result_1, rbx_3, &var_a0, &var_d8, arg2[3], *(arg2 + 0x1c), 0);
            result = result_1;
            *(result + 0x18) += 1;
        }
    }
    else
    {
        char* rbx_1 = arg2[4];
        int64_t r14_1 = arg2[5];
        sub_140058240(&var_a0, rbx_1, r14_1);
        int16_t* rbx_4;
        void* r14_4;
        char* r15_2;
        
        if (var_a0 == 0)
        {
            sub_140055900(&var_a0, var_98, var_90);
            
            if (var_a0 == 2)
                goto label_140048ca9;
            
            int16_t* var_80;
            rbx_4 = var_80;
            
            if (rbx_4 == 0)
                goto label_140048cb9;
            
            r14_4 = var_78;
            r15_2 = arg1[2];
            
            if (*r15_2 == 0)
                goto label_140048edc;
            
            goto label_140048ebb;
        }
        
    label_140048ca9:
        sub_140058240(&var_a0, rbx_1, r14_1);
        
        if (var_a0 != 0)
            goto label_140048cb9;
        
        rbx_4 = var_98;
        r14_4 = var_90;
        r15_2 = arg1[2];
        
        if (*r15_2 != 0)
        {
        label_140048ebb:
            result = sub_140042c50("__rust_begin_short_backtrace__ru…", 0x1c, rbx_4, r14_4);
            
            if (result == 0)
                goto label_140048edc;
            
            *r15_2 = 0;
        }
        else
        {
        label_140048edc:
            result = sub_140042c50("__rust_end_short_backtraces     …", 0x1a, rbx_4, r14_4);
            
            if (result == 0)
            {
                if (*r15_2 == 0)
                {
                    int64_t* rax_8 = arg1[3];
                    *rax_8 += 1;
                }
                
                goto label_140048cb9;
            }
            
            *r15_2 = 1;
        }
    }
    return result;
}

void* sub_140048f10(int64_t, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0xc8);
    *(result + 0x18) += 1;
    return result;
}

void sub_140048f50(int64_t* arg1) __noreturn
{
    sub_14004aaf0(arg1);
    /* no return */
}

int64_t sub_140048f60(int64_t* arg1, void* arg2, char arg3, void* arg4)
{
    int64_t var_40 = -2;
    int16_t* rdx = *(arg2 + 8);
    uint64_t r8 = *(arg2 + 0x10);
    void** const var_80;
    int64_t* rcx = &var_80;
    char* var_78;
    void* var_70;
    char* rsi;
    void** const rdi;
    void* r14;
    
    if (*arg2 == 0)
    {
        sub_140058240(rcx, rdx, r8);
        void** const temp0_1 = var_80;
        r14 = 9;
        
        if (temp0_1 == 0)
            r14 = var_70;
        
        rsi = "<unknown>";
        
        if (temp0_1 == 0)
            rsi = var_78;
        
        rdi = -0x8000000000000000;
        
        if (arg3 != 0)
            goto label_140049048;
        
        goto label_140048feb;
    }
    
    uint64_t r13;
    sub_140047380(rcx, rdx, r8, r13);
    rdi = var_80;
    rsi = var_78;
    r14 = var_70;
    int32_t result;
    
    if (arg3 != 0)
    {
    label_140049048:
        void** const var_48_4 = rdi;
        char* var_50_4 = rsi;
        result = sub_140049750(rsi, r14, arg1);
    }
    else
    {
    label_140048feb:
        void** const var_48_1 = rdi;
        char* var_50_1 = rsi;
        
        if (((sub_140048180(rsi, r14) ^ 1) | arg4 == 0) != 0)
            goto label_140049048;
        
        void** const var_48_2 = rdi;
        char* var_50_2 = rsi;
        char* rax_2;
        int64_t rdx_3;
        rax_2 = sub_1400482c0(rsi, r14, *(arg4 + 8), *(arg4 + 0x10));
        
        if (rax_2 == 0)
            goto label_140049048;
        
        void** const var_48_3 = rdi;
        char* var_50_3 = rsi;
        sub_140058240(&var_80, rax_2, rdx_3);
        
        if (var_80 != 0)
            goto label_140049048;
        
        int128_t var_b0 = var_78;
        void* const var_a0 = &data_140062cfc;
        int64_t (* var_98_1)(int32_t* arg1, int64_t* arg2) = sub_140057f80;
        int128_t* var_90_1 = &var_b0;
        int64_t (* var_88_1)(int64_t* arg1, int64_t* arg2) = sub_140042340;
        var_80 = &data_140062d00;
        int64_t var_78_1 = 2;
        int64_t var_60_1 = 0;
        void* const* var_70_1 = &var_a0;
        int64_t var_68_1 = 2;
        void** const var_48_5 = rdi;
        char* var_50_5 = rsi;
        result = sub_140056fc0(arg1[4], arg1[5], &var_80);
    }
    
    if ((rdi << 1) == 0)
        return result;
    
    j_sub_140049af0(rsi, rdi, 1);
    return result;
}

int64_t sub_140049110(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x90);
    int64_t result = (rdx << 1);
    
    if (result == 0)
        return result;
    
    return j_sub_140049af0(*(arg2 + 0x88), rdx, 1);
}

int64_t sub_140049160(int64_t* arg1, int32_t arg2)
{
    int32_t var_24 = 0;
    int64_t rdi;
    
    if (arg2 < 0x80)
    {
        var_24 = arg2;
        rdi = 1;
    }
    else if (arg2 < 0x800)
    {
        var_24 = ((arg2 >> 6) | 0xc0);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[1] = arg2;
        rdi = 2;
    }
    else if (arg2 >= 0x10000)
    {
        var_24 = (((arg2 >> 0x12) & 7) | 0xf0);
        *var_24[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
        *var_24[2] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[3] = arg2;
        rdi = 4;
    }
    else
    {
        var_24 = ((arg2 >> 0xc) | 0xe0);
        *var_24[1] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_24[2] = arg2;
        rdi = 3;
    }
    
    int64_t rbx = arg1[2];
    
    if ((*arg1 - rbx) < rdi)
    {
        sub_14005b440(arg1, rbx, rdi);
        rbx = arg1[2];
    }
    
    int64_t result = memcpy((arg1[1] + rbx), &var_24, rdi);
    arg1[2] = (rbx + rdi);
    return result;
}

uint64_t sub_140049250(void* arg1, int64_t arg2, void* arg3)
{
    uint64_t rbx;
    rbx = 1;
    
    if (sub_1400577c0(arg3, ""RUST_BACKTRACElibrary\std\src\e…", 1) == 0)
    {
        void* r13_1 = (arg1 + arg2);
        void* rdx = nullptr;
        
        while (arg2 != rdx)
        {
            void* rcx_1 = (arg1 + rdx);
            void* r12_1 = rdx;
            
            while (true)
            {
                void* rax_1 = (rcx_1 + 1);
                char r10_1 = *rcx_1;
                int64_t r9_1 = 1;
                
                if (r10_1 < 0)
                {
                    if (r10_1 < 0xe0)
                    {
                        if (rax_1 != r13_1)
                            rax_1 = (rcx_1 + 2);
                        
                        r9_1 = 2;
                    }
                    else if (r10_1 != 0xed)
                    {
                        void* rcx_4 = (rcx_1 + 2);
                        
                        if (rax_1 == r13_1)
                            rcx_4 = rax_1;
                        
                        void* const rax_4;
                        rax_4 = rcx_4 != r13_1;
                        rax_1 = (rax_4 + rcx_4);
                        r9_1 = 3;
                        
                        if (r10_1 >= 0xf0)
                        {
                            int64_t rcx_5;
                            rcx_5 = rax_1 != r13_1;
                            rax_1 += rcx_5;
                            r9_1 = 4;
                        }
                    }
                    else
                    {
                        if (rax_1 == r13_1)
                            goto label_140049417;
                        
                        if ((rcx_1 + 2) == r13_1)
                            goto label_140049417;
                        
                        uint32_t rax_3 = *(rcx_1 + 1);
                        
                        if (rax_3 > 0x9f)
                        {
                            int16_t var_42 = ((((rax_3 & 0x1f) << 6) + (*(rcx_1 + 2) & 0x3f)) - 0x2800);
                            
                            if (r12_1 < rdx)
                            {
                                sub_14005cbc0(rdx, r12_1);
                                /* no return */
                            }
                            
                            if (r12_1 > arg2)
                            {
                                sub_14005cb50(r12_1, arg2);
                                /* no return */
                            }
                            
                            if (sub_140049470(arg3, (rdx + arg1), (r12_1 - rdx)) != 0)
                                return rbx;
                            
                            int16_t* var_58 = &var_42;
                            uint64_t (* var_50_1)(int16_t* arg1, int64_t* arg2) = sub_140059a00;
                            char const (** const var_88)[0x5] = &data_140062d68;
                            int64_t var_80_1 = 2;
                            int64_t var_68_1 = 0;
                            int16_t** var_78_1 = &var_58;
                            int64_t var_70_1 = 1;
                            
                            if (sub_140056fc0(*(arg3 + 0x20), *(arg3 + 0x28), &var_88) != 0)
                                return rbx;
                            
                            rdx = (r12_1 + 3);
                            
                            if ((r12_1 + 3) <= arg2)
                                break;
                            
                            sub_14005cae0((r12_1 + 3), arg2);
                            /* no return */
                        }
                        
                        r9_1 = 3;
                        rax_1 = (rcx_1 + 3);
                    }
                }
                
                r12_1 += r9_1;
                rcx_1 = rax_1;
                
                if (rax_1 == r13_1)
                    goto label_140049417;
            }
        }
        
    label_140049417:
        
        if (sub_140049470(arg3, (arg1 + rdx), (arg2 - rdx)) == 0)
            rbx = sub_1400577c0(arg3, ""RUST_BACKTRACElibrary\std\src\e…", 1);
    }
    
    return rbx;
}

int64_t sub_140049470(void* arg1, char* arg2, void* arg3)
{
    char* rdi = arg2;
    void* rsi_1 = (arg3 + arg2);
    char* var_78 = arg2;
    void* var_70 = rsi_1;
    char var_68 = 0x81;
    char var_5c = 0x81;
    char var_5e;
    char r15 = var_5e;
    char var_5d;
    char r13 = var_5d;
    char var_67;
    char r12 = var_67;
    uint64_t rbx;
    rbx = 0x81;
    uint64_t var_66;
    uint64_t r14 = var_66;
    
    while (true)
    {
        if (rbx != 0x81)
        {
            uint64_t rdx_1;
            
            if (rbx == 0x80)
            {
                rdx_1 = (r14 >> 0x10);
                *var_66[6] = 0;
                var_68 = 0;
                r14 = 0;
                r12 = 0;
                r13 = 0;
                r15 = 0;
                rbx = 0;
            label_140049726:
                
                if (sub_140057b20(arg1, rdx_1) != 0)
                    break;
                
                continue;
            }
            else if (r15 < r13)
            {
                var_68 = rbx;
                char var_67_1 = r12;
                var_66 = r14;
                uint64_t rax_19 = r15;
                r15 += 1;
                rdx_1 = &var_68[rax_19];
                goto label_140049726;
            }
        }
        
        if ((rdi != 0 && rdi != rsi_1))
        {
            char rdx = *rdi;
            uint32_t r14_1 = rdx;
            
            if (r14_1 < 0)
            {
                int32_t rax_6 = (r14_1 & 0x1f);
                int32_t r8_1 = (rdi[1] & 0x3f);
                
                if (r14_1 <= 0xdf)
                {
                    rdi = &rdi[2];
                    r14_1 = ((rax_6 << 6) | r8_1);
                    
                    if (r14_1 <= 0x27)
                        goto label_140049527;
                    
                    goto label_1400495b4;
                }
                
                int32_t rcx_2 = ((rdi[2] & 0x3f) | (r8_1 << 6));
                
                if (rdx < 0xf0)
                {
                    rdi = &rdi[3];
                    r14_1 = (rcx_2 | (rax_6 << 0xc));
                    
                    if (r14_1 <= 0x27)
                        goto label_140049527;
                    
                    goto label_1400495b4;
                }
                
                r14_1 = (((rdi[3] & 0x3f) | (rcx_2 << 6)) | ((rax_6 & 7) << 0x12));
                
                if (r14_1 != 0x110000)
                {
                    rdi = &rdi[4];
                    
                    if (r14_1 <= 0x27)
                        goto label_140049527;
                    
                    goto label_1400495b4;
                }
            }
            else
            {
                rdi = &rdi[1];
                
                if (r14_1 > 0x27)
                {
                label_1400495b4:
                    
                    if (r14_1 != 0x5c)
                    {
                    label_1400495ce:
                        char rax_11;
                        
                        if (r14_1 > 0x2ff)
                            rax_11 = sub_14005a450(r14_1);
                        
                        char rax_12;
                        
                        if ((r14_1 <= 0x2ff || rax_11 == 0))
                        {
                            rax_12 = sub_1400594b0(r14_1);
                            rbx = 0x80;
                        }
                        
                        if (((r14_1 <= 0x2ff || rax_11 == 0) && rax_12 != 0))
                            goto label_1400494d6;
                        
                        uint64_t rflags_1;
                        int32_t temp0_1;
                        temp0_1 = _bit_scan_reverse((r14_1 | 1));
                        uint64_t rax_18 = ((temp0_1 ^ 0x1c) >> 2);
                        r15 = (rax_18 - 2);
                        char var_48_1 = 0;
                        int16_t var_4a = 0;
                        char var_47_1 = *"0123456789abcdef"[(r14_1 >> 0x14)];
                        char var_46_1 = *"0123456789abcdef"[((r14_1 >> 0x10) & 0xf)];
                        char var_45_1 = *"0123456789abcdef"[((r14_1 >> 0xc) & 0xf)];
                        char var_44_1 = *"0123456789abcdef"[((r14_1 >> 8) & 0xf)];
                        char var_43_1 = *"0123456789abcdef"[((r14_1 >> 4) & 0xf)];
                        char var_42_1 = *"0123456789abcdef"[(r14_1 & 0xf)];
                        char var_41_1 = 0x7d;
                        void var_4c;
                        *(&var_4c + rax_18) = 0x755c;
                        *(&var_4a + rax_18) = 0x7b;
                        rbx = var_4a;
                        r12 = *var_4a[1];
                        r14 = var_48_1;
                        r13 = 0xa;
                        
                        if (rbx != 0x81)
                            continue;
                    }
                    else
                    {
                        r12 = 0x5c;
                        r14_1 = 0;
                        rbx = 0x5c;
                    label_1400494d6:
                        r14 = (r14_1 << 0x10);
                        r13 = 2;
                        r15 = 0;
                        continue;
                    }
                }
                else
                {
                label_140049527:
                    rbx = 0x5c;
                    
                    switch (r14_1)
                    {
                        case 0:
                        {
                            r12 = 0x30;
                            goto label_1400494d6;
                        }
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 0xb:
                        case 0xc:
                        case 0xe:
                        case 0xf:
                        case 0x10:
                        case 0x11:
                        case 0x12:
                        case 0x13:
                        case 0x14:
                        case 0x15:
                        case 0x16:
                        case 0x17:
                        case 0x18:
                        case 0x19:
                        case 0x1a:
                        case 0x1b:
                        case 0x1c:
                        case 0x1d:
                        case 0x1e:
                        case 0x1f:
                        case 0x20:
                        case 0x21:
                        case 0x23:
                        case 0x24:
                        case 0x25:
                        case 0x26:
                        {
                            goto label_1400495ce;
                        }
                        case 9:
                        {
                            r12 = 0x74;
                            r14_1 = 0;
                            goto label_1400494d6;
                        }
                        case 0xa:
                        {
                            r12 = 0x6e;
                            r14_1 = 0;
                            goto label_1400494d6;
                        }
                        case 0xd:
                        {
                            r12 = 0x72;
                            r14_1 = 0;
                            goto label_1400494d6;
                        }
                        case 0x22:
                        {
                            r12 = 0x22;
                            r14_1 = 0;
                            goto label_1400494d6;
                        }
                        case 0x27:
                        {
                            r12 = 0x27;
                            r14_1 = 0;
                            goto label_1400494d6;
                        }
                    }
                }
            }
        }
        
        return 0;
    }
    
    return 1;
}

int64_t sub_140049750(void* arg1, int64_t arg2, int64_t* arg3)
{
    void* r12 = (arg1 + arg2);
    int64_t rcx = 0;
    
    while (rcx != arg2)
    {
        int64_t rbx_1 = rcx;
        char* r9_1 = (arg1 + rcx);
        
        while (true)
        {
            void* rax_1 = &r9_1[1];
            char r11_1 = *r9_1;
            int64_t r10_1 = 1;
            
            if (r11_1 < 0)
            {
                if (r11_1 < 0xe0)
                {
                    if (rax_1 != r12)
                        rax_1 = &r9_1[2];
                    
                    r10_1 = 2;
                }
                else if (r11_1 != 0xed)
                {
                    void* r9_4 = &r9_1[2];
                    
                    if (rax_1 == r12)
                        r9_4 = rax_1;
                    
                    void* const rax_3;
                    rax_3 = r9_4 != r12;
                    rax_1 = (rax_3 + r9_4);
                    r10_1 = 3;
                    
                    if (r11_1 >= 0xf0)
                    {
                        int64_t r9_5;
                        r9_5 = rax_1 != r12;
                        rax_1 += r9_5;
                        r10_1 = 4;
                    }
                }
                else
                {
                    if (rax_1 == r12)
                        goto label_140049898;
                    
                    if (&r9_1[2] == r12)
                        goto label_140049898;
                    
                    if (r9_1[1] > 0x9f)
                    {
                        if (rbx_1 < rcx)
                        {
                            sub_14005cbc0(rcx, rbx_1);
                            /* no return */
                        }
                        
                        if (rbx_1 > arg2)
                        {
                            sub_14005cb50(rbx_1, arg2);
                            /* no return */
                        }
                        
                        if (sub_1400577c0(arg3) != 0)
                            return 1;
                        
                        if (sub_1400577c0(arg3, &data_140062da0, 3) != 0)
                            return 1;
                        
                        rcx = (rbx_1 + 3);
                        
                        if ((rbx_1 + 3) <= arg2)
                            break;
                        
                        sub_14005cae0((rbx_1 + 3), arg2);
                        /* no return */
                    }
                    
                    r10_1 = 3;
                    rax_1 = &r9_1[3];
                }
            }
            
            rbx_1 += r10_1;
            r9_1 = rax_1;
            
            if (rax_1 == r12)
                goto label_140049898;
        }
    }
    
    rcx = arg2;
label_140049898:
    int64_t rsi_1 = (arg2 - rcx);
    void* rdi_1 = (arg1 + rcx);
    
    if (rcx == 0)
        /* tailcall */
        return sub_140057ed0(rdi_1, rsi_1, arg3);
    
    /* tailcall */
    return sub_1400577c0(arg3, rdi_1, rsi_1);
}

int64_t sub_140049910(int64_t arg1, int32_t* arg2)
{
    int64_t var_10 = -2;
    char const (** const var_90)[0x24];
    char const (** const var_58)[0x57];
    int32_t* var_28;
    
    if (data_140071140 != 0)
    {
        var_28 = arg2;
        var_90 = &var_28;
        uint64_t (* var_88_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
        var_58 = &data_140062e18;
        int64_t var_50 = 2;
        int64_t var_38 = 0;
        char const (** const* var_48)[0x24] = &var_90;
        int64_t var_40_1 = 1;
        sub_14005c700(&var_58);
        /* no return */
    }
    
    int32_t var_18 = 0;
    char var_14 = 0;
    int32_t* var_60 = arg2;
    int64_t* var_a0 = &var_60;
    uint64_t (* var_98)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    var_90 = &data_140062de8;
    int64_t var_88 = 2;
    int64_t var_70 = 0;
    int64_t** var_80 = &var_a0;
    int64_t var_78 = 1;
    var_28 = &var_18;
    char const (** var_20)[0x57] = nullptr;
    char result = sub_140056fc0(&var_28, &data_140062360, &var_90);
    char const (** rcx_1)[0x57] = var_20;
    int64_t* rcx_2;
    
    if (result == 0)
    {
        if (rcx_1 == 0)
            return result;
        
        rcx_2 = &var_20;
    }
    else
    {
        if (rcx_1 == 0)
        {
            var_58 = &data_1400629d8;
            int64_t var_50_1 = 1;
            int64_t var_48_1 = 8;
            int64_t var_40;
            var_40 = {0};
            sub_14005c700(&var_58);
            /* no return */
        }
        
        var_58 = rcx_1;
        rcx_2 = &var_58;
    }
    
    return sub_140042850(rcx_2);
}

void sub_140049a60(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0xa8) != 0)
        sub_140042850((arg2 + 0xa8));
}

int64_t sub_140049a90(uint64_t arg1, int64_t arg2)
{
    if (arg2 < 0x11)
        /* tailcall */
        return sub_14004b9a0(arg1, HEAP_NONE, arg1);
    
    uint64_t rcx_1 = (arg1 + arg2);
    int64_t result = 0;
    int64_t rax_1 = sub_14004b9a0(rcx_1, HEAP_NONE, rcx_1);
    
    if (rax_1 != 0)
    {
        int64_t rsi_1 = (arg2 - ((arg2 - 1) & rax_1));
        result = (rax_1 + rsi_1);
        *((rax_1 + rsi_1) - 8) = rax_1;
    }
    
    return result;
}

int64_t sub_140049af0(void* arg1, int64_t arg2, int64_t arg3)
{
    void* rax = arg1;
    
    if (arg3 >= 0x11)
        rax = *(rax - 8);
    
    /* tailcall */
    return HeapFree(data_1400711e0, HEAP_NONE, rax);
}

int64_t sub_140049b20(void* arg1, int64_t arg2, int64_t arg3, uint64_t arg4)
{
    if (arg3 < 0x11)
        /* tailcall */
        return HeapReAlloc(data_1400711e0, HEAP_NONE, arg1, arg4);
    
    int64_t result = 0;
    int64_t rax_1 = sub_14004b9a0(arg1, HEAP_NONE, (arg3 + arg4));
    
    if (rax_1 != 0)
    {
        int64_t r14_1 = (arg3 - ((arg3 - 1) & rax_1));
        result = (rax_1 + r14_1);
        *((rax_1 + r14_1) - 8) = rax_1;
        uint32_t count = arg4;
        
        if (arg2 < arg4)
            count = arg2;
        
        memcpy(result, arg1, count);
        HeapFree(data_1400711e0, HEAP_NONE, *(arg1 - 8));
    }
    
    return result;
}

int64_t sub_140049bc0(uint64_t arg1, int64_t arg2)
{
    if (arg2 < 0x11)
        /* tailcall */
        return sub_14004b9a0(arg1, HEAP_ZERO_MEMORY, arg1);
    
    uint64_t rcx_1 = (arg1 + arg2);
    int64_t rax_1 = sub_14004b9a0(rcx_1, HEAP_ZERO_MEMORY, rcx_1);
    
    if (rax_1 == 0)
        return 0;
    
    int64_t rsi_1 = (arg2 - ((arg2 - 1) & rax_1));
    *((rax_1 + rsi_1) - 8) = rax_1;
    return (rax_1 + rsi_1);
}

void sub_140049c20() __noreturn
{
    int64_t var_10 = -2;
    int32_t var_20 = 0;
    char var_1c = 0;
    char const (** const var_90)[0x33] = &data_140062ea0;
    int64_t var_88 = 1;
    void var_18;
    void* var_80 = &var_18;
    int128_t var_78 = {0};
    int32_t* var_30 = &var_20;
    char const (** var_28)[0x57] = nullptr;
    char rax = sub_140056fc0(&var_30, &data_140062360, &var_90);
    char const (** rcx_1)[0x57] = var_28;
    char const (** const var_60)[0x57];
    
    if (rax == 0)
    {
        if (rcx_1 != 0)
            sub_140042850(&var_28);
        
        rcx_1 = nullptr;
    }
    else if (rcx_1 == 0)
    {
        var_60 = &data_1400629d8;
        int64_t var_58 = 1;
        int64_t var_50 = 8;
        int128_t var_48 = {0};
        sub_14005c700(&var_60);
        /* no return */
    }
    
    var_60 = rcx_1;
    sub_140042ab0(&var_60);
    trap(0xd);
}

void sub_140049cf0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x90) != 0)
        sub_140042850((arg2 + 0x90));
}

void sub_140049d20(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_140049d40() __noreturn
{
    int64_t var_10 = -2;
    int32_t var_20 = 0;
    char var_1c = 0;
    char const (** const var_90)[0x3b] = &data_140062ef0;
    int64_t var_88 = 1;
    void var_18;
    void* var_80 = &var_18;
    int128_t var_78 = {0};
    int32_t* var_30 = &var_20;
    char const (** var_28)[0x57] = nullptr;
    char rax = sub_140056fc0(&var_30, &data_140062360, &var_90);
    char const (** rcx_1)[0x57] = var_28;
    char const (** const var_60)[0x57];
    
    if (rax == 0)
    {
        if (rcx_1 != 0)
            sub_140042850(&var_28);
        
        rcx_1 = nullptr;
    }
    else if (rcx_1 == 0)
    {
        var_60 = &data_1400629d8;
        int64_t var_58 = 1;
        int64_t var_50 = 8;
        int128_t var_48 = {0};
        sub_14005c700(&var_60);
        /* no return */
    }
    
    var_60 = rcx_1;
    sub_140042ab0(&var_60);
    trap(0xd);
}

void sub_140049e10(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x90) != 0)
        sub_140042850((arg2 + 0x90));
}

void sub_140049e40(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t* sub_140049e60(int64_t* arg1)
{
    int64_t var_28 = -2;
    char var_29;
    TEB* gsbase;
    
    if (*(arg1 + 0x19) != 0)
        var_29 = 3;
    else if (*(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x38) <= 1)
        var_29 = sub_1400475b0();
    else
        var_29 = 1;
    
    int64_t var_80 = arg1[2];
    int64_t* rsi_2 = *arg1;
    int64_t rdi = *(arg1[1] + 0x18);
    int64_t rax_6;
    int64_t rdx_2;
    rax_6 = rdi(rsi_2);
    int64_t rax_7;
    void** rcx_1;
    
    if (rax_6 == -0x4674e48ea859be88)
    {
        rax_7 = 8;
        rcx_1 = rsi_2;
    }
    
    void* const rcx_3;
    int64_t r8_1;
    
    if ((rax_6 == -0x4674e48ea859be88 && rdx_2 == 0x63eb502cd6cb5d6d))
    {
        rcx_3 = *rcx_1;
        r8_1 = *(rsi_2 + rax_7);
    }
    else
    {
        int64_t rax_8;
        int64_t rdx_3;
        rax_8 = rdi(rsi_2);
        rcx_3 = "Box<dyn Any>aborting due to pani…";
        r8_1 = 0xc;
        
        if ((rax_8 == 0xe555424bca868a8 && rdx_3 == 0x703f6eb3ff2ad391))
        {
            rcx_3 = rsi_2[1];
            r8_1 = rsi_2[2];
        }
    }
    
    void* const var_90 = rcx_3;
    int64_t var_88 = r8_1;
    uint32_t rax_11 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68);
    int64_t* var_48;
    int64_t rax_16;
    char const* const rcx_8;
    int64_t* rbx_1;
    
    if (rax_11 == 0)
    {
        void* rsi_3 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
        sub_14004e210((rsi_3 + 0x60), sub_14004e1a0);
        *(rsi_3 + 0x68) = 1;
    label_140049fa6:
        rbx_1 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60);
        
        if (rbx_1 == 0)
        {
            void* rsi_4 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
            sub_14005b290((rsi_4 + 0x60));
            rbx_1 = *(rsi_4 + 0x60);
            int64_t temp1_1 = *rbx_1;
            *rbx_1 += 1;
            
            if (temp1_1 <= -1)
                trap(6);
        }
        else
        {
            int64_t temp2_1 = *rbx_1;
            *rbx_1 += 1;
            
            if (temp2_1 <= -1)
                trap(6);
        }
        
        if (rbx_1 == 0)
            goto label_140049fed;
        
        var_48 = rbx_1;
        int64_t rax_15 = rbx_1[2];
        
        if (rax_15 == 0)
        {
            rax_16 = 4;
            rcx_8 = "main";
        }
        else if (rax_15 != 2)
        {
            rcx_8 = rbx_1[3];
            rax_16 = (rbx_1[4] - 1);
        }
        else
        {
            rax_16 = 9;
            rcx_8 = "<unnamed>";
        }
    }
    else
    {
        if (rax_11 == 1)
            goto label_140049fa6;
        
    label_140049fed:
        var_48 = nullptr;
        rax_16 = 9;
        rcx_8 = "<unnamed>";
        rbx_1 = nullptr;
    }
    
    char const* const var_a0 = rcx_8;
    int64_t var_98 = rax_16;
    char const* const* var_c0 = &var_a0;
    int64_t* var_b8 = &var_80;
    void* const* var_b0 = &var_90;
    char* var_a8 = &var_29;
    int64_t var_58;
    int64_t* result_1;
    void* rcx_13;
    int64_t* rdx_5;
    int64_t* result_2;
    int32_t var_68;
    int64_t rax_35;
    
    if (data_140071148 == 0)
    {
        rax_35 = 0;
    label_14004a1cd:
        var_58 = rax_35;
        result_1 = nullptr;
    label_14004a1e3:
        var_68 = 0;
        char var_64_1 = 0;
        char var_2a_1 = 1;
        int64_t** var_78_1 = &result_1;
        rcx_13 = sub_14004a480(&var_c0, &var_68, &data_140062f60);
        result_2 = nullptr;
        
        if (rbx_1 != 0)
        {
        label_14004a251:
            int64_t temp3_1 = *rbx_1;
            *rbx_1 -= 1;
            
            if (temp3_1 == 1)
                rcx_13 = sub_140043560(&var_48);
        }
    }
    else
    {
        data_140071148 = 1;
        int64_t rax_20 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x48);
        
        if (rax_20 == 2)
        {
            rax_35 = 1;
            goto label_14004a1cd;
        }
        
        if (rax_20 != 1)
            sub_14005bff0(nullptr);
        
        void* rax_22 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
        result_2 = *(rax_22 + 0x50);
        *(rax_22 + 0x50) = 0;
        var_58 = 0;
        result_1 = result_2;
        
        if (result_2 == 0)
            goto label_14004a1e3;
        
        bool z_1;
        
        if (0 == result_2[2])
        {
            result_2[2] = 1;
            z_1 = true;
        }
        else
        {
            int64_t rax_23;
            rax_23 = result_2[2];
            z_1 = false;
        }
        
        if (!(z_1))
            sub_14005b640(&result_2[2]);
        
        char var_3c_1;
        
        if ((data_1400711c0 << 1) != 0)
            var_3c_1 = (sub_14005b570() ^ 1);
        else
            var_3c_1 = 0;
        
        *(result_2 + 0x11);
        sub_14004a480(&var_c0, &result_2[3], &data_140062f10);
        
        if (((var_3c_1 == 0 && (data_1400711c0 << 1) != 0) && sub_14005b570() == 0))
            *(result_2 + 0x11) = 1;
        
        result_2[2] = 0;
        
        if (result_2[2] == 2)
            WakeByAddressSingle(&result_2[2]);
        
        data_140071148 = 1;
        var_68 = result_2;
        int64_t rax_32 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x48);
        
        if (rax_32 == 2)
        {
            int64_t temp5_1 = *result_2;
            *result_2 -= 1;
            
            if (temp5_1 == 1)
                rcx_13 = sub_140043500(&var_68);
        }
        else
        {
            if (rax_32 != 1)
                sub_14005bff0(nullptr);
            
            rcx_13 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
            int64_t* rax_34 = *(rcx_13 + 0x50);
            *(rcx_13 + 0x50) = result_2;
            int64_t* var_60 = rax_34;
            var_68 = 1;
            
            if (rax_34 != 0)
            {
                int64_t temp6_1 = *rax_34;
                *rax_34 -= 1;
                
                if (temp6_1 == 1)
                    rcx_13 = sub_140043500(&var_60);
            }
        }
        
        result_2 = 1;
        rbx_1 = var_48;
        
        if (rbx_1 != 0)
            goto label_14004a251;
    }
    rcx_13 = var_58 != 0;
    int64_t* result = result_1;
    rdx_5 = result == 0;
    rdx_5 |= rcx_13;
    rdx_5 |= result_2;
    
    if (rdx_5 != 1)
    {
        int64_t temp4_1 = *result;
        *result -= 1;
        
        if (temp4_1 == 1)
            return sub_140043500(&result_1);
    }
    
    return result;
}

void sub_14004a300(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0xb0) != 0)
    {
        int64_t* rax = *(arg2 + 0xb0);
        int64_t temp0_1 = *rax;
        *rax -= 1;
        
        if (temp0_1 == 1)
            sub_140043560((arg2 + 0xa0));
    }
}

int64_t* sub_14004a340(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* result = *(arg2 + 0xb0);
    int64_t temp0 = *result;
    *result -= 1;
    
    if (temp0 == 1)
        result = sub_140043500((arg2 + 0x80));
    
    *(arg2 + 0xbd) = 0;
    return result;
}

int64_t* sub_14004a380(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* rsi = *(arg2 + 0x70);
    char rbx = *(arg2 + 0xbe);
    int64_t* result = *(arg2 + 0xa0);
    
    if (result != 0)
    {
        int64_t temp0_1 = *result;
        *result -= 1;
        
        if (temp0_1 == 1)
            result = sub_140043560((arg2 + 0xa0));
    }
    
    if (*(arg2 + 0x90) == 0)
    {
        result = *(arg2 + 0x98);
        
        if ((result != 0 && (rbx & 1) != 0))
        {
            int64_t temp1_1 = *result;
            *result -= 1;
            
            if (temp1_1 == 1)
                return sub_140043500(rsi);
        }
    }
    
    return result;
}

void* sub_14004a3f0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0xbd) == 0)
    {
        *(arg2 + 0xbe) = 0;
        *(arg2 + 0x70) = (arg2 + 0x98);
        return (arg2 + 0x98);
    }
    
    int64_t* rax = *(arg2 + 0x78);
    int64_t temp0 = *rax;
    *rax -= 1;
    
    if (temp0 == 1)
        sub_140043500((arg2 + 0x78));
    
    *(arg2 + 0xbe) = 0;
    *(arg2 + 0x70) = (arg2 + 0x98);
    return (arg2 + 0x98);
}

int64_t sub_14004a450(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t result = sub_140042980(*(arg2 + 0xb0), *(arg2 + 0xac));
    *(arg2 + 0xbd) = 1;
    return result;
}

int64_t sub_14004a480(int64_t* arg1, int64_t arg2, void* arg3)
{
    int64_t var_30 = -2;
    bool z;
    
    if (0 == data_140071191)
    {
        data_140071191 = 1;
        z = true;
    }
    else
    {
        int64_t rax;
        rax = data_140071191;
        z = false;
    }
    
    char var_34;
    
    if (!(z))
    {
        sub_14005b640(&data_140071191);
        
        if ((data_1400711c0 << 1) == 0)
            var_34 = 0;
        else
            var_34 = (sub_14005b570() ^ 1);
    }
    else if ((data_1400711c0 << 1) != 0)
        var_34 = (sub_14005b570() ^ 1);
    else
        var_34 = 0;
    
    int64_t rcx = arg1[1];
    int64_t rdx = arg1[2];
    char const (** const var_70)[0x4f] = *arg1;
    int64_t (* var_68)(int64_t* arg1, int64_t* arg2) = sub_140042340;
    int64_t var_60 = rcx;
    int64_t (* var_58)(int64_t* arg1, void* arg2) = sub_140042330;
    int64_t var_50 = rdx;
    int64_t (* var_48)(int64_t* arg1, int64_t* arg2) = sub_140042340;
    char const (** const var_a0)[0x18] = &data_140062fc8;
    int64_t var_98 = 4;
    int64_t var_80 = 0;
    int64_t* var_90 = &var_70;
    int64_t var_88 = 3;
    int64_t r14 = *(arg3 + 0x48);
    char const (* rax_4)[0x18] = r14(arg2, &var_a0);
    char const (* var_40)[0x18] = rax_4;
    
    if (rax_4 != 0)
        sub_140042850(&var_40);
    
    switch (*arg1[3])
    {
        case 0:
        {
            var_40 = 0;
            var_a0 = &var_40;
            int64_t (* var_98_1)(char* arg1, void* arg2) = sub_140048730;
            var_70 = &data_140062700;
            int64_t var_68_1 = 1;
            int64_t var_50_1 = 0;
            char const (** const* var_60_1)[0x18] = &var_a0;
            int64_t var_58_1 = 1;
            char const (** rax_9)[0x4f] = r14(arg2, &var_70);
            var_70 = rax_9;
            
            if (rax_9 != 0)
                sub_140042850(&var_70);
            break;
        }
        case 1:
        {
            var_40 = 1;
            var_a0 = &var_40;
            int64_t (* var_98_2)(char* arg1, void* arg2) = sub_140048730;
            var_70 = &data_140062700;
            int64_t var_68_2 = 1;
            int64_t var_50_2 = 0;
            char const (** const* var_60_2)[0x18] = &var_a0;
            int64_t var_58_2 = 1;
            char const (** rax_10)[0x4f] = r14(arg2, &var_70);
            var_70 = rax_10;
            
            if (rax_10 != 0)
                sub_140042850(&var_70);
            break;
        }
        case 2:
        {
            char temp0_1 = data_140071020;
            data_140071020 = 0;
            
            if (temp0_1 != 0)
            {
                var_70 = &data_140063058;
                int64_t var_68_3 = 1;
                int64_t var_60_3 = 8;
                var_58 = {0};
                char const (** rax_12)[0x18] = r14(arg2, &var_70);
                var_a0 = rax_12;
                
                if (rax_12 != 0)
                    sub_140042850(&var_a0);
            }
            break;
        }
    }
    
    if (((var_34 == 0 && (data_1400711c0 << 1) != 0) && sub_14005b570() == 0))
        data_140071192 = 1;
    
    char result = data_140071191;
    data_140071191 = 0;
    
    if (result != 2)
        return result;
    
    return WakeByAddressSingle(&data_140071191);
}

int64_t sub_14004a700(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042980(&data_140071191, *(arg2 + 0x94));
}

void sub_14004a740(int128_t* arg1) __noreturn
{
    int64_t rax = arg1[3];
    int128_t var_28 = arg1[2];
    int128_t var_38 = arg1[1];
    int128_t var_48 = *arg1;
    int64_t var_18 = rax;
    int128_t* var_10 = arg1;
    sub_140048f50(&var_48);
    /* no return */
}

int64_t* sub_14004a780(int64_t* arg1)
{
    int64_t var_30 = -2;
    int64_t rbx = *arg1;
    
    if (rbx == -0x8000000000000000)
    {
        int128_t* rax_1 = arg1[3];
        int64_t var_50 = 0;
        int64_t var_48_1 = 1;
        int64_t var_40_1 = 0;
        int128_t var_68_1 = rax_1[2];
        int128_t var_78_1 = rax_1[1];
        int128_t var_88 = *rax_1;
        sub_140056fc0(&var_50, &data_140062390, &var_88);
        int128_t zmm0 = var_50;
        var_88 = zmm0;
        var_78_1 = var_40_1;
        arg1[2] = var_40_1;
        *arg1 = zmm0;
        rbx = *arg1;
    }
    
    int64_t r14 = arg1[1];
    int64_t rdi = arg1[2];
    *arg1 = 0;
    arg1[1] = 1;
    arg1[2] = 0;
    data_140071141;
    int64_t* result = j_sub_140049a90(0x18, 8);
    
    if (result != 0)
    {
        *result = rbx;
        result[1] = r14;
        result[2] = rdi;
        return result;
    }
    
    int64_t var_58 = r14;
    int64_t var_38 = rbx;
    sub_14005c5f0();
    /* no return */
}

void sub_14004a890(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x58);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x60), rdx, 1);
}

void sub_14004a8d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x70) != 0)
        j_sub_140049af0(*(arg2 + 0x50), *(arg2 + 0x70), 1);
}

int128_t* sub_14004a910(int64_t* arg1)
{
    int64_t var_18 = -2;
    int128_t* result = arg1;
    
    if (*arg1 == -0x8000000000000000)
    {
        int128_t* rax_1 = *(result + 0x18);
        int64_t var_30 = 0;
        int64_t var_28_1 = 1;
        int64_t var_20_1 = 0;
        int128_t var_48_1 = rax_1[2];
        int128_t var_58_1 = rax_1[1];
        int128_t var_68 = *rax_1;
        sub_140056fc0(&var_30, &data_140062390, &var_68);
        int128_t zmm0 = var_30;
        var_68 = zmm0;
        var_58_1 = var_20_1;
        result[1] = var_20_1;
        *result = zmm0;
    }
    
    return result;
}

void sub_14004a9b0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x58);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x60), rdx, 1);
}

int64_t sub_14004a9e0(int64_t* arg1, void* arg2)
{
    if (*arg1 != -0x8000000000000000)
        /* tailcall */
        return sub_1400577c0(arg2, arg1[1], arg1[2]);
    
    int128_t* rax = arg1[3];
    int128_t var_18 = rax[2];
    int128_t var_28 = rax[1];
    int128_t var_38 = *rax;
    return sub_140056fc0(*(arg2 + 0x20), *(arg2 + 0x28), &var_38);
}

int64_t* sub_14004aa50(int64_t* arg1)
{
    int64_t rsi = *arg1;
    int64_t rdi = arg1[1];
    data_140071141;
    int64_t* result = j_sub_140049a90(0x10, 8);
    
    if (result == 0)
    {
        sub_14005c5f0();
        /* no return */
    }
    
    *result = rsi;
    result[1] = rdi;
    return result;
}

int64_t sub_14004aab0(int64_t arg1) __pure
{
    return arg1;
}

int64_t sub_14004aac0(int64_t* arg1)
{
    arg1[1];
    return *arg1;
}

int64_t sub_14004aad0(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_1400577c0(arg2, *arg1, arg1[1]);
}

void sub_14004aaf0(int64_t* arg1) __noreturn
{
    int64_t var_10 = -2;
    int64_t rdx = arg1[1];
    int64_t rax = arg1[3];
    int64_t var_30;
    int64_t rax_1;
    int64_t rdx_1;
    
    if (rdx == 1)
    {
        if (rax == 0)
        {
            int64_t* rdx_2 = *arg1;
            rax_1 = *rdx_2;
            rdx_1 = rdx_2[1];
        label_14004ab32:
            var_30 = rax_1;
            int64_t var_28 = rdx_1;
            void* rax_2 = arg1[7];
            sub_14004abe0(&var_30, &data_1400630a8, arg1[6], *(rax_2 + 0x38), *(rax_2 + 0x39));
            /* no return */
        }
    }
    else if ((rdx == 0 && rax == 0))
    {
        rax_1 = 1;
        rdx_1 = 0;
        goto label_14004ab32;
    }
    int64_t* var_18 = arg1;
    var_30 = -0x8000000000000000;
    void* rax_4 = arg1[7];
    sub_14004abe0(&var_30, &data_1400630e0, arg1[6], *(rax_4 + 0x38), *(rax_4 + 0x39));
    /* no return */
}

int64_t sub_14004aba0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x28);
    int64_t result = (rdx << 1);
    
    if (result != 0)
        return j_sub_140049af0(*(arg2 + 0x30), rdx, 1);
    
    return result;
}

void sub_14004abe0(int64_t arg1, int64_t arg2, int64_t arg3, char arg4, char arg5) __noreturn
{
    int64_t var_28 = -2;
    int64_t var_80 = arg1;
    int64_t var_30 = arg3;
    int64_t temp1 = data_1400711c0;
    data_1400711c0 += 1;
    int64_t* var_b0;
    int64_t var_90;
    char const (** const var_68)[0x2e];
    int32_t var_38;
    
    if (temp1 <= -1)
    {
        var_38 = 0;
        char var_34_1 = 0;
        var_b0 = &var_30;
        int64_t (* var_a8)(int64_t* arg1, void* arg2) = sub_140042330;
        int64_t* var_a0 = &var_80;
        int64_t (* var_98)(int64_t* arg1) = sub_140042c30;
        var_68 = &data_140063140;
        int64_t var_60_2 = 3;
        int64_t var_48 = 0;
        int64_t** var_58_2 = &var_b0;
        int64_t var_50_1 = 2;
        int64_t rax_16 = sub_1400471c0(&var_38, &var_68);
        var_90 = rax_16;
        
        if (rax_16 != 0)
            sub_140042850(&var_90);
    }
    else
    {
        TEB* gsbase;
        
        if (*(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x40) == 0)
        {
            void* rax_3 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
            *(rax_3 + 0x38) += 1;
            *(rax_3 + 0x40) = 1;
            int32_t rax_4 = data_1400711a0;
            bool z_1;
            
            if (rax_4 <= 0x3ffffffd)
            {
                if (rax_4 == data_1400711a0)
                {
                    data_1400711a0 = (rax_4 + 1);
                    z_1 = true;
                }
                else
                {
                    data_1400711a0;
                    z_1 = false;
                }
            }
            
            if ((rax_4 > 0x3ffffffd || !(z_1)))
                sub_14005be00(&data_1400711a0);
            
            data_1400711a8;
            int64_t var_50;
            
            if (data_1400711b0 != 0)
            {
                int64_t rdi_1 = var_30;
                char const (** rax_10)[0x2e];
                int64_t rdx_1;
                rax_10 = *(arg2 + 0x28)(var_80);
                var_68 = rax_10;
                int64_t var_60_1 = rdx_1;
                int64_t var_58_1 = rdi_1;
                var_50 = arg4;
                *var_50[1] = arg5;
                *(data_1400711b8 + 0x28)(data_1400711b0, &var_68);
            }
            else
            {
                int64_t rdi = var_30;
                char const (** rax_8)[0x2e];
                int64_t rdx;
                rax_8 = *(arg2 + 0x28)(var_80);
                var_68 = rax_8;
                int64_t var_60 = rdx;
                int64_t var_58 = rdi;
                var_50 = arg4;
                *var_50[1] = arg5;
                sub_140049e60(&var_68);
            }
            
            int32_t rdx_3 = data_1400711a0;
            data_1400711a0 -= 1;
            
            if (((rdx_3 - 1) & 0xbfffffff) == 0x80000000)
                sub_14005bf20(&data_1400711a0, (rdx_3 - 1));
            
            *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x40) = 0;
            
            if (arg4 != 0)
            {
                sub_14004af20();
                /* no return */
            }
            
            var_90 = 0;
            *var_90[4] = 0;
            var_68 = &data_140063208;
            int64_t var_60_4 = 1;
            int64_t var_58_4 = 8;
            var_50 = {0};
            var_b0 = sub_1400471c0(&var_90, &var_68);
            sub_140042ab0(&var_b0);
            trap(0xd);
        }
        
        int64_t rax_17;
        int64_t rdx_7;
        rax_17 = *(arg2 + 0x30)();
        int64_t rcx_10 = 1;
        
        if (rax_17 != 0)
            rcx_10 = rax_17;
        
        if (rax_17 == 0)
            rdx_7 = rax_17;
        
        var_90 = rcx_10;
        int64_t var_88_1 = rdx_7;
        int32_t var_70 = 0;
        char var_6c_1 = 0;
        var_b0 = &var_30;
        int64_t (* var_a8_1)(int64_t* arg1, void* arg2) = sub_140042330;
        int64_t* var_a0_1 = &var_90;
        int64_t (* var_98_1)(int64_t* arg1, int64_t* arg2) = sub_140042340;
        var_68 = &data_1400631a8;
        int64_t var_60_3 = 3;
        int64_t var_48_1 = 0;
        int64_t** var_58_3 = &var_b0;
        int64_t var_50_2 = 2;
        int64_t rax_18 = sub_1400471c0(&var_70, &var_68);
        var_38 = rax_18;
        
        if (rax_18 != 0)
            sub_140042850(&var_38);
    }
    trap(0xd);
}

int64_t sub_14004aed0(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    int32_t rdx = data_1400711a0;
    data_1400711a0 -= 1;
    int32_t result = ((rdx - 1) & 0xbfffffff);
    
    if (result == 0x80000000)
        return sub_14005bf20(&data_1400711a0, (rdx - 1));
    
    return result;
}

void sub_14004af20() __noreturn
{
    sub_14004f090();
    /* no return */
}

int64_t sub_14004afb0(int32_t* arg1, int64_t* arg2)
{
    if (*arg1 != 2)
        /* tailcall */
        return sub_140055980(arg1, arg2);
    
    void* rdi = *(arg1 + 0x48);
    
    if (rdi != 0)
    {
        char* rbx_1 = *(arg1 + 0x40);
        
        while (true)
        {
            int64_t var_58;
            sub_140058240(&var_58, rbx_1, rdi);
            void* var_50;
            int64_t var_48;
            
            if (var_58 == 0)
            {
                if (sub_140057ed0(var_50, var_48, arg2) == 0)
                    break;
            }
            else if (sub_140057ed0(&data_140062da0, 3, arg2) == 0)
            {
                if ((var_48 & 1) == 0)
                    break;
                
                void* r12_2 = (var_50 + *var_48[1]);
                
                if (rdi < r12_2)
                {
                    sub_14005cae0(r12_2, rdi);
                    /* no return */
                }
                
                rbx_1 += r12_2;
                void* temp0_1 = rdi;
                rdi -= r12_2;
                
                if (temp0_1 == r12_2)
                    break;
                
                continue;
            }
            return 1;
        }
    }
    
    return 0;
}

int64_t sub_14004b0a0(int64_t* arg1, int64_t arg2, int32_t* arg3, int64_t* arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)
{
    int64_t* rbx = *arg1;
    int64_t rsi = arg1[1];
    int64_t var_110 = arg2;
    
    if ((arg2 != 0 || rbx[4] != 0))
    {
        int64_t* rdi_1 = arg1;
        void* rax_2 = *rbx;
        void* var_f8;
        char const (** const var_c8)[0x2];
        int64_t var_b8;
        int64_t var_a8;
        char var_98;
        void** var_78;
        void* rax_4;
        
        if (rsi == 0)
        {
            var_f8 = &rbx[3];
            uint64_t (* var_f0_2)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
            var_c8 = 2;
            var_b8 = 0;
            int64_t var_b0_2 = 4;
            var_a8 = 0;
            int64_t var_a0_2 = 0x20;
            var_98 = 3;
            var_78 = &data_1400632e8;
            int64_t var_70_2 = 2;
            char const (** const* var_58_2)[0x2] = &var_c8;
            int64_t var_50_2 = 1;
            void** var_68_2 = &var_f8;
            int64_t var_60_1 = 1;
            
            if (sub_140056fc0(*(rax_2 + 0x20), *(rax_2 + 0x28), &var_78) != 0)
                return 1;
            
            if (rbx[4] == 1)
            {
                rax_4 = *rbx;
                var_f8 = &var_110;
                int64_t (* var_f0_3)(int64_t* arg1, int128_t* arg2) = sub_140042c20;
                int64_t var_e8_2 = 0x12;
                int64_t var_e0_2 = 0;
                var_c8 = 2;
                var_b8 = 1;
                int64_t var_b0_3 = 1;
                var_a8 = 0;
                int64_t var_a0_3 = 0x20;
                var_98 = 3;
                var_78 = &data_140063310;
                int64_t var_70_3 = 2;
                char const (** const* var_58_3)[0x2] = &var_c8;
                int64_t var_50_3 = 1;
                void** var_68_3 = &var_f8;
            label_14004b2a6:
                int64_t var_60_2 = 2;
                
                if (sub_140056fc0(*(rax_4 + 0x20), *(rax_4 + 0x28), &var_78) != 0)
                    return 1;
            }
        }
        else
        {
            if (*(*(rax_2 + 0x28) + 0x18)(*(rax_2 + 0x20), "                   at :", 6) != 0)
                return 1;
            
            if (rbx[4] == 1)
            {
                rax_4 = *rbx;
                var_f8 = &data_140062700;
                int64_t (* var_f0_1)(int64_t* arg1, int64_t* arg2) = sub_140042340;
                int64_t var_e8_1 = 0x15;
                int64_t var_e0_1 = 0;
                var_c8 = 2;
                var_b8 = 1;
                int64_t var_b0_1 = 1;
                var_a8 = 0;
                int64_t var_a0_1 = 0x20;
                var_98 = 3;
                var_78 = &data_140062700;
                int64_t var_70_1 = 1;
                int64_t* var_58_1 = &var_c8;
                int64_t var_50_1 = 1;
                void** var_68_1 = &var_f8;
                goto label_14004b2a6;
            }
        }
        uint32_t rax_5;
        
        if (*arg3 != 3)
            rax_5 = rbx[4];
        
        void* var_108;
        int128_t zmm3;
        
        if ((*arg3 == 3 || rax_5 == 2))
        {
            void* rax_7 = *rbx;
            
            if (*(*(rax_7 + 0x28) + 0x18)(*(rax_7 + 0x20), "<unknown>", 9) != 0)
                return 1;
        }
        else
        {
            int64_t rcx_4;
            int64_t rdx_2;
            void*** r8_2;
            
            if (rax_5 != 1)
            {
                int128_t var_88_2 = *(arg3 + 0x40);
                zmm3 = *(arg3 + 0x30);
                var_98 = zmm3;
                var_a8 = *(arg3 + 0x20);
                var_b8 = *(arg3 + 0x10);
                var_c8 = *arg3;
                void* rax_9 = *rbx;
                var_108 = &var_c8;
                int64_t (* var_100_1)(int32_t* arg1, int64_t* arg2) = sub_14004afb0;
                var_78 = 2;
                int64_t var_68_5 = 2;
                int64_t var_58_5 = 0;
                int64_t var_50_4 = 0x400000020;
                char var_48_1 = 3;
                var_f8 = &data_140062700;
                int64_t var_f0_5 = 1;
                void*** var_d8_1 = &var_78;
                int64_t var_d0_1 = 1;
                void** var_e8_3 = &var_108;
                int64_t var_e0_3 = 1;
                rcx_4 = *(rax_9 + 0x20);
                rdx_2 = *(rax_9 + 0x28);
                r8_2 = &var_f8;
            }
            else
            {
                int128_t var_88_1 = *(arg3 + 0x40);
                zmm3 = *(arg3 + 0x30);
                var_98 = zmm3;
                var_a8 = *(arg3 + 0x20);
                var_b8 = *(arg3 + 0x10);
                var_c8 = *arg3;
                void* rax_6 = *rbx;
                var_f8 = &var_c8;
                int64_t (* var_f0_4)(int32_t* arg1, int64_t* arg2) = sub_14004afb0;
                var_78 = &data_140062700;
                int64_t var_70_4 = 1;
                int64_t var_58_4 = 0;
                void** var_68_4 = &var_f8;
                int64_t var_60_3 = 1;
                rcx_4 = *(rax_6 + 0x20);
                rdx_2 = *(rax_6 + 0x28);
                r8_2 = &var_78;
            }
            
            if (sub_140056fc0(rcx_4, rdx_2, r8_2) != 0)
                return 1;
        }
        
        char rax_1 = sub_1400577c0(*rbx, "\n", 1, zmm3);
        
        if (rax_1 != 0)
            return 1;
        
        arg1 = rdi_1;
        
        if ((arg5 == 1 && *arg4 != 2))
        {
            var_108 = arg6;
            
            if (rbx[4] == 1)
            {
                void* rax_12 = *rbx;
                var_f8 = &data_140062700;
                int64_t (* var_f0_6)(int64_t* arg1, int64_t* arg2) = sub_140042340;
                int64_t var_e8_4 = 0x12;
                int64_t var_e0_4 = 0;
                var_c8 = 2;
                int64_t var_b8_1 = 1;
                int64_t var_b0_4 = 1;
                int64_t var_a8_1 = 0;
                int64_t var_a0_4 = 0x20;
                char var_98_1 = 3;
                var_78 = &data_140062700;
                int64_t var_70_5 = 1;
                int64_t* var_58_6 = &var_c8;
                int64_t var_50_5 = 1;
                void** var_68_6 = &var_f8;
                int64_t var_60_4 = 2;
                rax_1 = sub_140056fc0(*(rax_12 + 0x20), *(rax_12 + 0x28), &var_78);
            }
            
            if ((rbx[4] == 1 && rax_1 != 0))
                return 1;
            
            void* rax_13 = *rbx;
            
            if (*(*(rax_13 + 0x28) + 0x18)(*(rax_13 + 0x20), "             at :", 0x10) != 0)
                return 1;
            
            int64_t rcx_9 = rbx[1];
            int64_t rax_15 = rbx[2];
            var_c8 = *rbx;
            int128_t var_c0 = *arg4;
            int64_t var_b0_5 = arg4[2];
            
            if (*(rax_15 + 0x20)(rcx_9) != 0)
                return 1;
            
            void* rax_16 = *rbx;
            var_78 = &var_108;
            uint64_t (* var_70_6)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
            var_c8 = &data_140063348;
            var_c0 = 1;
            int64_t var_a8_2 = 0;
            void*** var_b8_2 = &var_78;
            int64_t var_b0_6 = 1;
            
            if (sub_140056fc0(*(rax_16 + 0x20), *(rax_16 + 0x28), &var_c8) != 0)
                return 1;
            
            if (arg7 == 1)
            {
                var_f8 = arg8;
                void* rax_18 = *rbx;
                var_78 = &var_f8;
                uint64_t (* var_70_7)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
                var_c8 = &data_140063348;
                var_c0 = 1;
                int64_t var_a8_3 = 0;
                void*** var_b8_3 = &var_78;
                int64_t var_b0_7 = 1;
                
                if (sub_140056fc0(*(rax_18 + 0x20), *(rax_18 + 0x28), &var_c8) != 0)
                    return 1;
            }
            
            void* rax_19 = *rbx;
            arg1 = rdi_1;
            
            if (*(*(rax_19 + 0x28) + 0x18)(*(rax_19 + 0x20), "\n", 1) != 0)
                return 1;
        }
    }
    
    arg1[1] = (rsi + 1);
    return 0;
}

int64_t sub_14004b670(PWSTR arg1, int64_t arg2, int64_t arg3, int64_t* arg4)
{
    int64_t var_48 = -2;
    int32_t rax = lstrlenW(arg1);
    
    if (rax < 0)
    {
        char const (** const var_78)[0x2f] = &data_1400633f8;
        void var_49;
        sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_49, &data_1400620c0);
        /* no return */
    }
    
    if (rax != 0)
    {
        uint64_t rbx_1 = rax;
        int64_t i = -((rbx_1 * 2));
        
        while (i != 0)
        {
            uint32_t rax_1 = arg1[(rbx_1 - 1)];
            rbx_1 -= 1;
            i += 2;
            
            if ((rax_1 != 0x5c && rax_1 != 0x2f))
                continue;
            
            int64_t buffer1_1 = arg4[1];
            int64_t r15_1 = arg4[2];
            int64_t count = -(i);
            int64_t var_68_1 = r15_1;
            int64_t buffer1;
            
            if (r15_1 == 0)
            {
                r15_1 = 0;
                buffer1 = buffer1_1;
            }
            else
            {
                int64_t rax_3 = (buffer1_1 + (r15_1 << 1));
                buffer1 = buffer1_1;
                int64_t buffer1_2;
                int64_t rcx_1;
                int64_t r13_1;
                
                do
                {
                    r13_1 = 0;
                    buffer1_2 = buffer1;
                    
                    while (*(buffer1 + (r13_1 << 1)) != 0x3b)
                    {
                        buffer1_2 += 2;
                        r13_1 += 1;
                        
                        if (buffer1_2 == rax_3)
                            goto label_14004b77d;
                    }
                    
                    if ((rbx_1 == r13_1 && memcmp(buffer1, arg1, count) == 0))
                        return 1;
                    
                    rcx_1 = (r15_1 - 1);
                    rax_3 = (buffer1 + (r15_1 << 1));
                    r15_1 = (rcx_1 - r13_1);
                    buffer1 = (buffer1_2 + 2);
                } while (rcx_1 != r13_1);
                r15_1 = 0;
                buffer1 = (buffer1_2 + 2);
            }
            
        label_14004b77d:
            int32_t rax_5;
            
            if (r15_1 == rbx_1)
                rax_5 = memcmp(buffer1, arg1, count);
            
            if ((r15_1 != rbx_1 || rax_5 != 0))
            {
                int64_t r15_3 = var_68_1;
                int64_t* rsi_2;
                
                if ((r15_3 == 0 || *((buffer1_1 + (r15_3 << 1)) - 2) != 0x3b))
                {
                    rsi_2 = arg4;
                    
                    if (r15_3 == *rsi_2)
                    {
                        sub_140043840(rsi_2);
                        buffer1_1 = rsi_2[1];
                    }
                    
                    *(buffer1_1 + (r15_3 << 1)) = 0x3b;
                    r15_3 += 1;
                    rsi_2[2] = r15_3;
                    
                    if ((*rsi_2 - r15_3) < rbx_1)
                        goto label_14004b7f4;
                }
                else
                {
                    rsi_2 = arg4;
                    
                    if ((*rsi_2 - r15_3) < rbx_1)
                    {
                    label_14004b7f4:
                        sub_14005b3a0(rsi_2, r15_3, rbx_1);
                        buffer1_1 = rsi_2[1];
                        r15_3 = rsi_2[2];
                    }
                }
                
                memcpy((buffer1_1 + (r15_3 << 1)), arg1, count);
                rsi_2[2] = (rbx_1 + r15_3);
            }
            
            break;
        }
    }
    
    return 1;
}

void sub_14004b860(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

int64_t sub_14004b880(char* arg1, void* arg2)
{
    uint64_t rcx = *arg1;
    /* tailcall */
    return sub_1400577c0(arg2, (*(&data_140064068 + (rcx << 2)) + &data_140064068), *(&data_140063f20 + (rcx << 3)), &data_140064068);
}

int32_t sub_14004b8b0(char* arg1, char* arg2)
{
    uint32_t r8 = *arg1;
    uint64_t r10 = (r8 - 6);
    int64_t r9 = (r10 + 1);
    int32_t result = 0;
    
    if (r10 >= 4)
        r9 = 0;
    
    char r10_1 = *arg2;
    uint64_t rsi = (r10_1 - 6);
    int64_t rdi = (rsi + 1);
    
    if (rsi >= 4)
        rdi = 0;
    
    if (r9 == rdi)
    {
        result = 1;
        uint64_t count_1;
        
        if (r9 == 0)
        {
            if ((r10_1 - 6) > 3)
            {
                if (r8 != r10_1)
                    return 0;
                
                switch (r8)
                {
                    case 0:
                    case 3:
                    {
                        goto label_14004b90e;
                    }
                    case 1:
                    case 4:
                    {
                        uint64_t count = *(arg1 + 0x10);
                        
                        if (count != *(arg2 + 0x10))
                            return 0;
                        
                        if (memcmp(*(arg1 + 8), *(arg2 + 8), count) != 0)
                            return 0;
                        
                        count_1 = *(arg1 + 0x20);
                        
                        if (count_1 != *(arg2 + 0x20))
                            return 0;
                        
                        result = memcmp(*(arg1 + 0x18), *(arg2 + 0x18), count_1) == 0;
                        break;
                    }
                    case 2:
                    case 5:
                    {
                        result = arg1[1] == arg2[1];
                        break;
                    }
                }
            }
        }
        else if ((r9 == 4 && r9 == 4))
        {
        label_14004b90e:
            count_1 = *(arg1 + 0x10);
            
            if (count_1 != *(arg2 + 0x10))
                return 0;
            
            result = memcmp(*(arg1 + 8), *(arg2 + 8), count_1) == 0;
        }
    }
    
    return result;
}

int64_t sub_14004b9a0(int64_t arg1, enum HEAP_FLAGS arg2, uint64_t arg3)
{
    HANDLE rcx = data_1400711e0;
    
    if (rcx == 0)
        /* tailcall */
        return sub_14005b5f0(arg2, arg3);
    
    /* tailcall */
    return HeapAlloc(rcx, arg2, arg3);
}

int64_t sub_14004b9d0(int64_t arg1, int64_t arg2, int32_t* arg3)
{
    int64_t lpFileInformation_2;
    sub_14004d0f0(&lpFileInformation_2, arg1, arg2);
    int64_t lpFileInformation_1 = lpFileInformation_2;
    
    if (lpFileInformation_1 == -0x8000000000000000)
        return 1;
    
    int64_t lpFileInformation = lpFileInformation_1;
    int64_t var_58;
    int64_t var_40_1 = var_58;
    int64_t var_50;
    int64_t var_38_1 = var_50;
    int64_t var_78;
    sub_14004da90(&var_78, &lpFileInformation, 1);
    int64_t rsi_1 = var_78;
    int64_t result = 1;
    
    if (rsi_1 != -0x8000000000000000)
    {
        char r8_2 = *(arg3 + 0x21);
        char rdx_4 = *(arg3 + 0x22);
        PWSTR lpFileName;
        char rcx_3;
        
        if (r8_2 == 0)
        {
            if (rdx_4 != 0)
            {
            label_14004ba74:
                rcx_3 = *(arg3 + 0x25);
                
                if ((*(arg3 + 0x23) == 0 || rcx_3 != 0))
                    goto label_14004bac9;
                
                goto label_14004ba88;
            }
            
            if (((*(arg3 + 0x23) == 0 && arg3[9] == 0) && *(arg3 + 0x25) == 0))
            {
                rcx_3 = 0;
                goto label_14004bac9;
            }
            
        label_14004ba88:
            
            if (rsi_1 != 0)
            {
                j_sub_140049af0(lpFileName, (rsi_1 * 2), 2);
                return 1;
            }
        }
        else
        {
            if (rdx_4 != 0)
                goto label_14004ba74;
            
            rcx_3 = *(arg3 + 0x25);
        label_14004bac9:
            enum FILE_CREATION_DISPOSITION dwCreationDisposition;
            
            if (arg3[9] != 0)
            {
                if (rcx_3 != 0)
                    goto label_14004bb0a;
                
                dwCreationDisposition = OPEN_ALWAYS;
                
                if (*arg3 != 0)
                    goto label_14004bb15;
                
                goto label_14004bade;
            }
            
            if (rcx_3 != 0)
            {
            label_14004bb0a:
                dwCreationDisposition = CREATE_NEW;
                
                if (*arg3 == 0)
                    goto label_14004bade;
                
                goto label_14004bb15;
            }
            
            dwCreationDisposition = ((*(arg3 + 0x23) << 1) + 3);
            int32_t dwDesiredAccess;
            
            if (*arg3 == 0)
            {
            label_14004bade:
                
                if (arg3[8] != 0)
                {
                    int32_t rax;
                    rax = r8_2 != 0;
                    dwDesiredAccess = -0x7fedfeec;
                    
                    if (rdx_4 == 0)
                        dwDesiredAccess = ((rax | 0xfffffffe) << 0x1e);
                    
                    goto label_14004bb2e;
                }
                
                if (r8_2 != 0)
                {
                    if (rdx_4 != 0)
                        goto label_14004bc62;
                    
                    dwDesiredAccess = 0x40000000;
                    goto label_14004bb2e;
                }
                
                if (rdx_4 == 0)
                    goto label_14004ba88;
                
            label_14004bc62:
                dwDesiredAccess = 0x120114;
                goto label_14004bb2e;
            }
            
        label_14004bb15:
            dwDesiredAccess = arg3[1];
        label_14004bb2e:
            int32_t r10_1;
            r10_1 = rcx_3 != 0;
            HANDLE rax_6 = CreateFileW(lpFileName, dwDesiredAccess, arg3[6], *(arg3 + 8), dwCreationDisposition, ((r10_1 << 0x15) | ((arg3[5] | arg3[4]) | arg3[7])), nullptr);
            
            if (rax_6 == -1)
            {
                GetLastError();
                result = 1;
                
                if (rsi_1 != 0)
                    j_sub_140049af0(lpFileName, (rsi_1 * 2), 2);
            }
            else if ((dwCreationDisposition != OPEN_ALWAYS || *(arg3 + 0x23) == 0))
            {
            label_14004bb9b:
                result = 0;
                
                if (rsi_1 != 0)
                    j_sub_140049af0(lpFileName, (rsi_1 * 2), 2);
            }
            else
            {
                if (GetLastError() != ERROR_ALREADY_EXISTS)
                    goto label_14004bb9b;
                
                lpFileInformation = 0;
                
                if (SetFileInformationByHandle(rax_6, FileEndOfFileInfo, &lpFileInformation, 8) != 0)
                    goto label_14004bb9b;
                
                GetLastError();
                CloseHandle(rax_6);
                
                if (rsi_1 != 0)
                    j_sub_140049af0(lpFileName, (rsi_1 * 2), 2);
                
                result = 1;
            }
        }
    }
    
    return result;
}

uint64_t sub_14004bc70(int64_t* arg1, HANDLE arg2)
{
    int128_t var_58;
    __builtin_memset(&var_58, 0, 0x34);
    uint64_t result;
    
    if (GetFileInformationByHandle(arg2, &var_58) == 0)
    {
    label_14004bd5e:
        result = ((GetLastError() << 0x20) | 2);
        arg1[1] = result;
        *arg1 = 2;
    }
    else
    {
        int32_t rcx_1 = var_58;
        result = 0;
        
        if ((rcx_1 & 0x400) != 0)
        {
            int64_t lpFileInformation = 0;
            
            if (GetFileInformationByHandleEx(arg2, FileAttributeTagInfo, &lpFileInformation, 8) == 0)
                goto label_14004bd5e;
            
            result = (((lpFileInformation << 0x15) >> 0x1f) & *lpFileInformation[4]);
            rcx_1 = var_58;
        }
        
        *arg1 = 1;
        int128_t var_38;
        int32_t var_28;
        arg1[1] = ((*var_38[0xc] << 0x20) | var_28);
        arg1[2] = 1;
        int128_t var_48;
        *(arg1 + 0x14) = *var_48[0xc];
        arg1[3] = 1;
        *(arg1 + 0x1c) = *var_38[8];
        *(arg1 + 0x20) = var_58;
        arg1[6] = *var_48[4];
        arg1[7] = ((var_38 << 0x20) | *var_38[4]);
        arg1[8] = 0;
        *(arg1 + 0x4c) = rcx_1;
        arg1[0xa] = result;
    }
    
    return result;
}

int64_t sub_14004bd80(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t result = 0;
    int64_t rax;
    void* rdx;
    rax = sub_14004c090(*arg1, arg2, arg3, nullptr);
    int64_t var_20 = rax;
    void* var_18 = rdx;
    
    if (rax != 0)
    {
        void* rax_4;
        
        switch ((rdx & 3))
        {
            case 0:
            {
                rax_4 = *(rdx + 0x10);
                break;
            }
            case 1:
            {
                rax_4 = *(rdx + 0xf);
                break;
            }
            case 2:
            {
                rax_4 = sub_14004cf30((rdx >> 0x20));
                break;
            }
            case 3:
            {
                uint64_t rcx_3 = (rdx >> 0x20);
                
                if (rcx_3 > 0x28)
                    rax_4 = 0x29;
                else
                    switch (rcx_3)
                    {
                        case 0:
                        {
                            rax_4 = nullptr;
                            break;
                        }
                        case 1:
                        {
                            rax_4 = 1;
                            break;
                        }
                        case 2:
                        {
                            rax_4 = 2;
                            break;
                        }
                        case 3:
                        {
                            rax_4 = 3;
                            break;
                        }
                        case 4:
                        {
                            rax_4 = 4;
                            break;
                        }
                        case 5:
                        {
                            rax_4 = 5;
                            break;
                        }
                        case 6:
                        {
                            rax_4 = 6;
                            break;
                        }
                        case 7:
                        {
                            rax_4 = 7;
                            break;
                        }
                        case 8:
                        {
                            rax_4 = 8;
                            break;
                        }
                        case 9:
                        {
                            rax_4 = 9;
                            break;
                        }
                        case 0xa:
                        {
                            rax_4 = 0xa;
                            break;
                        }
                        case 0xb:
                        {
                            rax_4 = 0xb;
                            break;
                        }
                        case 0xc:
                        {
                            rax_4 = 0xc;
                            break;
                        }
                        case 0xd:
                        {
                            rax_4 = 0xd;
                            break;
                        }
                        case 0xe:
                        {
                            rax_4 = 0xe;
                            break;
                        }
                        case 0xf:
                        {
                            rax_4 = 0xf;
                            break;
                        }
                        case 0x10:
                        {
                            rax_4 = 0x10;
                            break;
                        }
                        case 0x11:
                        {
                            rax_4 = 0x11;
                            break;
                        }
                        case 0x12:
                        {
                            rax_4 = 0x12;
                            break;
                        }
                        case 0x13:
                        {
                            rax_4 = 0x13;
                            break;
                        }
                        case 0x14:
                        {
                            rax_4 = 0x14;
                            break;
                        }
                        case 0x15:
                        {
                            rax_4 = 0x15;
                            break;
                        }
                        case 0x16:
                        {
                            rax_4 = 0x16;
                            break;
                        }
                        case 0x17:
                        {
                            rax_4 = 0x17;
                            break;
                        }
                        case 0x18:
                        {
                            rax_4 = 0x18;
                            break;
                        }
                        case 0x19:
                        {
                            rax_4 = 0x19;
                            break;
                        }
                        case 0x1a:
                        {
                            rax_4 = 0x1a;
                            break;
                        }
                        case 0x1b:
                        {
                            rax_4 = 0x1b;
                            break;
                        }
                        case 0x1c:
                        {
                            rax_4 = 0x1c;
                            break;
                        }
                        case 0x1d:
                        {
                            rax_4 = 0x1d;
                            break;
                        }
                        case 0x1e:
                        {
                            rax_4 = 0x1e;
                            break;
                        }
                        case 0x1f:
                        {
                            rax_4 = 0x1f;
                            break;
                        }
                        case 0x20:
                        {
                            rax_4 = 0x20;
                            break;
                        }
                        case 0x21:
                        {
                            rax_4 = 0x21;
                            break;
                        }
                        case 0x22:
                        {
                            rax_4 = 0x22;
                            break;
                        }
                        case 0x23:
                        {
                            rax_4 = 0x23;
                            break;
                        }
                        case 0x24:
                        {
                            rax_4 = 0x24;
                            break;
                        }
                        case 0x25:
                        {
                            rax_4 = 0x25;
                            break;
                        }
                        case 0x26:
                        {
                            rax_4 = 0x26;
                            break;
                        }
                        case 0x27:
                        {
                            rax_4 = 0x27;
                            break;
                        }
                        case 0x28:
                        {
                            rax_4 = 0x28;
                            break;
                        }
                    }
                break;
            }
        }
        
        result = 1;
        
        if (rax_4 == 0xb)
        {
            sub_140042850(&var_18);
            return 0;
        }
    }
    
    return result;
}

void* const sub_14004bef0(int64_t* arg1, int64_t* arg2)
{
    void* rdi = arg2[2];
    int64_t rax;
    void* result;
    rax = sub_14004c090(*arg1, (*arg2 + rdi), (arg2[1] - rdi), nullptr);
    int64_t var_28 = rax;
    void* result_1 = result;
    
    if (rax == 0)
    {
        void* rdi_1 = (rdi + result);
        arg2[2] = rdi_1;
        void* rax_2 = arg2[3];
        
        if (rax_2 > rdi_1)
            rdi_1 = rax_2;
        
        arg2[3] = rdi_1;
    }
    else
    {
        uint64_t rcx_6;
        
        switch ((result & 3))
        {
            case 0:
            {
                rcx_6 = *(result + 0x10);
                break;
            }
            case 1:
            {
                rcx_6 = *(result + 0xf);
                break;
            }
            case 2:
            {
                rcx_6 = sub_14004cf30((result >> 0x20));
                break;
            }
            case 3:
            {
                rcx_6 = (result >> 0x20);
                
                if (rcx_6 > 0x28)
                    rcx_6 = 0x29;
                else
                    switch (rcx_6)
                    {
                        case 0:
                        {
                            rcx_6 = 0;
                            break;
                        }
                        case 1:
                        {
                            rcx_6 = 1;
                            break;
                        }
                        case 2:
                        {
                            rcx_6 = 2;
                            break;
                        }
                        case 3:
                        {
                            rcx_6 = 3;
                            break;
                        }
                        case 4:
                        {
                            rcx_6 = 4;
                            break;
                        }
                        case 5:
                        {
                            rcx_6 = 5;
                            break;
                        }
                        case 6:
                        {
                            rcx_6 = 6;
                            break;
                        }
                        case 7:
                        {
                            rcx_6 = 7;
                            break;
                        }
                        case 8:
                        {
                            rcx_6 = 8;
                            break;
                        }
                        case 9:
                        {
                            rcx_6 = 9;
                            break;
                        }
                        case 0xa:
                        {
                            rcx_6 = 0xa;
                            break;
                        }
                        case 0xb:
                        {
                            rcx_6 = 0xb;
                            break;
                        }
                        case 0xc:
                        {
                            rcx_6 = 0xc;
                            break;
                        }
                        case 0xd:
                        {
                            rcx_6 = 0xd;
                            break;
                        }
                        case 0xe:
                        {
                            rcx_6 = 0xe;
                            break;
                        }
                        case 0xf:
                        {
                            rcx_6 = 0xf;
                            break;
                        }
                        case 0x10:
                        {
                            rcx_6 = 0x10;
                            break;
                        }
                        case 0x11:
                        {
                            rcx_6 = 0x11;
                            break;
                        }
                        case 0x12:
                        {
                            rcx_6 = 0x12;
                            break;
                        }
                        case 0x13:
                        {
                            rcx_6 = 0x13;
                            break;
                        }
                        case 0x14:
                        {
                            rcx_6 = 0x14;
                            break;
                        }
                        case 0x15:
                        {
                            rcx_6 = 0x15;
                            break;
                        }
                        case 0x16:
                        {
                            rcx_6 = 0x16;
                            break;
                        }
                        case 0x17:
                        {
                            rcx_6 = 0x17;
                            break;
                        }
                        case 0x18:
                        {
                            rcx_6 = 0x18;
                            break;
                        }
                        case 0x19:
                        {
                            rcx_6 = 0x19;
                            break;
                        }
                        case 0x1a:
                        {
                            rcx_6 = 0x1a;
                            break;
                        }
                        case 0x1b:
                        {
                            rcx_6 = 0x1b;
                            break;
                        }
                        case 0x1c:
                        {
                            rcx_6 = 0x1c;
                            break;
                        }
                        case 0x1d:
                        {
                            rcx_6 = 0x1d;
                            break;
                        }
                        case 0x1e:
                        {
                            rcx_6 = 0x1e;
                            break;
                        }
                        case 0x1f:
                        {
                            rcx_6 = 0x1f;
                            break;
                        }
                        case 0x20:
                        {
                            rcx_6 = 0x20;
                            break;
                        }
                        case 0x21:
                        {
                            rcx_6 = 0x21;
                            break;
                        }
                        case 0x22:
                        {
                            rcx_6 = 0x22;
                            break;
                        }
                        case 0x23:
                        {
                            rcx_6 = 0x23;
                            break;
                        }
                        case 0x24:
                        {
                            rcx_6 = 0x24;
                            break;
                        }
                        case 0x25:
                        {
                            rcx_6 = 0x25;
                            break;
                        }
                        case 0x26:
                        {
                            rcx_6 = 0x26;
                            break;
                        }
                        case 0x27:
                        {
                            rcx_6 = 0x27;
                            break;
                        }
                        case 0x28:
                        {
                            rcx_6 = 0x28;
                            break;
                        }
                    }
                break;
            }
        }
        
        if (rcx_6 != 0xb)
            return result;
        
        sub_140042850(&result_1);
    }
    
    return nullptr;
}

int64_t sub_14004c090(HANDLE arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t arg5)
{
    int128_t var_38 = data_140063630;
    int32_t rax = -1;
    
    if (arg3 < 0xffffffff)
        rax = arg3;
    
    int64_t var_68;
    
    if (arg4 != 0)
        var_68 = arg5;
    
    int64_t* var_70 = arg4;
    int64_t* rcx_1 = &var_68;
    
    if (arg4 == 0)
        rcx_1 = arg4;
    
    NTSTATUS Status = NtReadFile(arg1, 0, 0, 0, &var_38, arg2, rax, rcx_1, 0);
    
    if (Status == STATUS_PENDING)
    {
        WaitForSingleObject(arg1, 0xffffffff);
        Status = var_38;
    }
    
    if (Status == STATUS_END_OF_FILE)
        return 0;
    
    if (Status != STATUS_PENDING)
    {
        if (Status < STATUS_SUCCESS)
        {
            RtlNtStatusToDosError(Status);
            return 1;
        }
        
        return 0;
    }
    
    int32_t var_20 = 0;
    char var_1c = 0;
    var_70 = &data_140063690;
    var_68 = 1;
    void var_18;
    void* var_60 = &var_18;
    int128_t var_58 = {0};
    int64_t var_40 = sub_1400471c0(&var_20, &var_70);
    sub_140042ab0(&var_40);
    trap(0xd);
}

int64_t sub_14004c1b0(HANDLE arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t arg5)
{
    int128_t var_38 = data_140063630;
    int32_t rax = -1;
    
    if (arg3 < 0xffffffff)
        rax = arg3;
    
    int64_t var_68;
    
    if (arg4 != 0)
        var_68 = arg5;
    
    int64_t* var_70 = arg4;
    int64_t* rcx_1 = &var_68;
    
    if (arg4 == 0)
        rcx_1 = arg4;
    
    NTSTATUS Status = NtWriteFile(arg1, 0, 0, 0, &var_38, arg2, rax, rcx_1, 0);
    
    if (Status == STATUS_PENDING)
    {
        WaitForSingleObject(arg1, 0xffffffff);
        Status = var_38;
        
        if (Status == STATUS_PENDING)
        {
            int32_t var_20 = 0;
            char var_1c = 0;
            var_70 = &data_140063690;
            var_68 = 1;
            void var_18;
            void* var_60 = &var_18;
            int128_t var_58 = {0};
            int64_t var_40 = sub_1400471c0(&var_20, &var_70);
            sub_140042ab0(&var_40);
            trap(0xd);
        }
    }
    
    if (Status >= STATUS_SUCCESS)
        return 0;
    
    RtlNtStatusToDosError(Status);
    return 1;
}

int128_t* sub_14004c2d0(uint32_t** arg1, uint32_t arg2)
{
    __chkstk(0x10c0);
    int64_t var_30 = -2;
    uint32_t dwMessageId = arg2;
    uint32_t dwMessageId_1 = arg2;
    HMODULE lpSource = nullptr;
    void lpBuffer;
    memset(&lpBuffer, 0, 0x1000);
    enum FORMAT_MESSAGE_OPTIONS dwFlags = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    
    if ((dwMessageId & 0x10000000) != 0)
    {
        HMODULE lpSource_1 = GetModuleHandleW(u"NTDLL.DLL");
        
        if (lpSource_1 == 0)
        {
            lpSource = nullptr;
            dwFlags = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        }
        else
        {
            lpSource = lpSource_1;
            dwMessageId &= 0xefffffff;
            dwMessageId_1 = dwMessageId;
            dwFlags = FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        }
    }
    
    uint32_t rax_1 = FormatMessageW(dwFlags, lpSource, dwMessageId, 0, &lpBuffer, 0x800, nullptr);
    char const (** const var_a8)[0x2c];
    uint32_t* var_70;
    enum WIN32_ERROR var_50;
    
    if (rax_1 == 0)
    {
        var_50 = GetLastError();
        var_70 = &dwMessageId_1;
        uint64_t (* var_68_1)(int32_t* arg1) = sub_14005a040;
        enum WIN32_ERROR* var_60 = &var_50;
        uint64_t (* var_58_1)(int32_t* arg1) = sub_14005a040;
        var_a8 = &data_1400636e0;
        int64_t var_a0_2 = 3;
        int64_t var_88_2 = 0;
        uint32_t** var_98_2 = &var_70;
        int64_t var_90_2 = 2;
    }
    else
    {
        uint64_t r8_1 = rax_1;
        
        if (rax_1 >= 0x801)
        {
            sub_14005cb50(r8_1, 0x800);
            /* no return */
        }
        
        sub_140055f90(&var_70, &lpBuffer, r8_1);
        uint32_t* rbx_1 = var_70;
        
        if (rbx_1 != -0x8000000000000000)
        {
            char* var_68;
            int128_t* result_1;
            int128_t* result;
            
            if (result_1 == 0)
            {
            label_14004c626:
                result = nullptr;
            }
            else
            {
                void* r8_2 = (var_68 + result_1);
                void* rdx_3 = data_140071080;
                void* rax_3;
                
                while (true)
                {
                    rax_3 = r8_2;
                    char r9_3 = *(r8_2 - 1);
                    uint32_t r9_2;
                    
                    if (r9_3 < 0)
                    {
                        uint32_t r10_2 = *(rax_3 - 2);
                        int32_t r10_3;
                        
                        if (r10_2 >= 0xc0)
                        {
                            r8_2 = (rax_3 - 2);
                            r10_3 = (r10_2 & 0x1f);
                        }
                        else
                        {
                            uint32_t r11_1 = *(rax_3 - 3);
                            int32_t r11_3;
                            
                            if (r11_1 >= 0xc0)
                            {
                                r8_2 = (rax_3 - 3);
                                r11_3 = (r11_1 & 0xf);
                            }
                            else
                            {
                                r8_2 = (rax_3 - 4);
                                r11_3 = ((r11_1 & 0x3f) | ((*(rax_3 - 4) & 7) << 6));
                            }
                            
                            r10_3 = ((r10_2 & 0x3f) | (r11_3 << 6));
                        }
                        
                        r9_2 = ((r9_3 & 0x3f) | (r10_3 << 6));
                        
                        if ((r9_2 - 9) >= 5)
                            goto label_14004c577;
                    }
                    else
                    {
                        r8_2 = (rax_3 - 1);
                        r9_2 = r9_3;
                        
                        if ((r9_2 - 9) >= 5)
                        {
                        label_14004c577:
                            
                            if (r9_2 != 0x20)
                            {
                                if (r9_2 < 0x80)
                                    break;
                                
                                uint32_t r10_8 = (r9_2 >> 8);
                                
                                if (r10_8 > 0x1f)
                                {
                                    if (r10_8 == 0x20)
                                    {
                                        r9_2 = (*(rdx_3 + r9_2) >> 1);
                                        r9_2 &= 1;
                                    }
                                    else
                                    {
                                        if (r10_8 != 0x30)
                                            break;
                                        
                                        r9_2 = r9_2 == 0x3000;
                                    }
                                }
                                else if (r10_8 == 0)
                                    r9_2 = (*(rdx_3 + r9_2) & 1);
                                else
                                {
                                    if (r10_8 != 0x16)
                                        break;
                                    
                                    r9_2 = r9_2 == 0x1680;
                                }
                                
                                if (r9_2 == 0)
                                    break;
                            }
                        }
                    }
                    
                    if (r8_2 == var_68)
                        goto label_14004c626_1;
                }
                
                result = (rax_3 - var_68);
                
                if (result_1 < result)
                    result = result_1;
                else if (result == 0)
                {
                label_14004c626_1:
                    result = nullptr;
                }
                else if ((result_1 > result && *(var_68 + result) <= 0xbf))
                {
                    char* var_78 = var_68;
                    uint32_t* var_40 = rbx_1;
                    sub_14005c7a0("assertion failed: self.is_char_b…");
                    /* no return */
                }
            }
            
            *arg1 = rbx_1;
            arg1[1] = var_68;
            arg1[2] = result;
            return result;
        }
        
        var_50 = &dwMessageId_1;
        uint64_t (* var_48_1)(int32_t* arg1) = sub_14005a040;
        var_a8 = &data_140063780;
        int64_t var_a0_1 = 2;
        int64_t var_88_1 = 0;
        int32_t* var_98_1 = &var_50;
        int64_t var_90_1 = 1;
    }
    return sub_140055de0(arg1, &var_a8);
}

void sub_14004c660(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0x10a8) != 0)
        j_sub_140049af0(*(arg2 + 0x1070), *(arg2 + 0x10a8), 1);
}

int128_t* sub_14004c6b0(int64_t* arg1)
{
    int64_t var_48 = -2;
    uint64_t var_60 = 0;
    void* lpFilename_2 = 2;
    int64_t var_50 = 0;
    uint64_t r8 = 0x200;
    void* lpFilename_1 = 2;
    uint64_t rsi = 0;
    uint64_t rdi = 0;
    uint64_t rbx = 0;
    
    while (true)
    {
        uint64_t r14_1 = 0x200;
        void var_490;
        void* lpFilename = &var_490;
        uint64_t r12_1 = r8;
        
        while (true)
        {
            SetLastError(NO_ERROR);
            uint32_t rax_2 = GetModuleFileNameW(nullptr, lpFilename, r12_1);
            uint64_t r13_1 = rax_2;
            enum WIN32_ERROR rax_3;
            
            if (rax_2 == 0)
                rax_3 = GetLastError();
            
            uint64_t rdx_4;
            int128_t* result;
            
            if ((rax_2 == 0 && rax_3 != NO_ERROR))
            {
                result = ((GetLastError() << 0x20) | 2);
                arg1[1] = result;
                *arg1 = -0x8000000000000000;
                rdx_4 = var_60;
                
                if (rdx_4 == 0)
                    return result;
            }
            else
            {
                r8 = r13_1;
                
                if (r12_1 == r8)
                {
                    if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
                    {
                        sub_14005c7a0("internal error: entered unreacha…");
                        /* no return */
                    }
                    
                    uint64_t r12_2 = (r12_1 * 2);
                    
                    if (r12_2 >= 0xffffffff)
                        r12_2 = 0xffffffff;
                    
                    r8 = r12_2;
                    
                    if (r8 < 0x201)
                        break;
                    
                    goto label_14004c750;
                }
                
                if (r12_1 >= r8)
                {
                    if (r14_1 < r8)
                    {
                        sub_14005cb50(r8, r14_1);
                        /* no return */
                    }
                    
                    int128_t var_90;
                    sub_140047380(&var_90, lpFilename, r8, r13_1);
                    int128_t zmm0_1 = var_90;
                    result = arg1;
                    int128_t var_80;
                    result[1] = var_80;
                    *result = zmm0_1;
                    rdx_4 = var_60;
                    
                    if (rdx_4 == 0)
                        return result;
                }
                else
                {
                    if (r8 < 0x201)
                        break;
                    
                label_14004c750:
                    uint64_t r8_1 = (r8 - rbx);
                    
                    if (r8_1 > (rdi - rbx))
                    {
                        sub_14005b3a0(&var_60, rbx, r8_1);
                        rsi = var_60;
                        lpFilename_1 = lpFilename_2;
                    }
                    
                    rbx = 0xffffffff;
                    
                    if (rsi < 0xffffffff)
                        rbx = rsi;
                    
                    uint64_t var_50_1 = rbx;
                    rdi = rsi;
                    r14_1 = rbx;
                    lpFilename = lpFilename_1;
                    r12_1 = rbx;
                    continue;
                }
            }
            return j_sub_140049af0(lpFilename_2, (rdx_4 * 2), 2);
        }
    }
}

void sub_14004c8e0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x458);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x460), (rdx * 2), 2);
}

int64_t sub_14004c930(enum STD_HANDLE arg1, char* arg2, int64_t arg3, char* arg4)
{
    int64_t var_30 = -2;
    
    if (arg3 == 0)
        return 0;
    
    HANDLE hConsoleHandle = GetStdHandle(arg1);
    int64_t result = 1;
    
    if (hConsoleHandle != 0)
    {
        if (hConsoleHandle == -1)
        {
            GetLastError();
            return 1;
        }
        
        int32_t lpMode = 0;
        
        if (GetConsoleMode(hConsoleHandle, &lpMode) == 0)
        {
            HANDLE hConsoleHandle_1 = hConsoleHandle;
            int64_t var_b8;
            return sub_14004c1b0(hConsoleHandle, arg2, arg3, nullptr, var_b8);
        }
        
        uint64_t rcx_1 = arg4[4];
        int128_t var_88;
        int64_t var_48;
        uint8_t* var_40;
        void* var_38;
        
        if (rcx_1 == 0)
        {
            int64_t r8_3 = 0x1000;
            
            if (arg3 < 0x1000)
                r8_3 = arg3;
            
            sub_140058240(&var_48, arg2, r8_3);
            
            if (var_48 == 0)
                return sub_14004cc50(hConsoleHandle, var_40, var_38);
            
            if (var_40 != 0)
            {
                if (var_40 > arg3)
                {
                    sub_14005cb50(var_40, arg3);
                    /* no return */
                }
                
                sub_140058240(&lpMode, arg2, var_40);
                uint8_t* var_70;
                void* var_68;
                
                if (lpMode == 0)
                    return sub_14004cc50(hConsoleHandle, var_70, var_68);
                var_88 = var_70;
                char const (** const var_b8_1)[0x28] = &data_140063948;
                sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_88, &data_140062110);
                /* no return */
            }
            
            uint64_t rax_5 = *arg2;
            
            if (data_1400637c8[rax_5] > arg3)
            {
                *arg4 = rax_5;
                arg4[4] = 1;
                return 0;
            }
            
            result = 1;
        }
        else
        {
            if (rcx_1 >= 4)
            {
                lpMode = &data_1400639a0;
                int64_t var_70_1 = 1;
                int64_t var_68_1 = 8;
                int128_t var_60 = {0};
                sub_14005c700(&lpMode);
                /* no return */
            }
            
            char rdx_6 = *arg2;
            result = 1;
            
            if ((rdx_6 & 0xc0) != 0x80)
                arg4[4] = 0;
            else
            {
                arg4[rcx_1] = rdx_6;
                char rax_3 = (arg4[4] + 1);
                arg4[4] = rax_3;
                void* rdi_2 = data_1400637c8[*arg4];
                void* var_98 = rdi_2;
                
                if (rax_3 < rdi_2)
                    return 0;
                
                uint64_t r8 = rax_3;
                
                if (rax_3 >= 5)
                {
                    sub_14005cb50(r8, 4);
                    /* no return */
                }
                
                sub_140058240(&var_48, arg4, r8);
                arg4[4] = 0;
                
                if (var_48 != 0)
                    result = 1;
                else
                {
                    void* var_a0 = var_38;
                    
                    if (var_38 != rdi_2)
                    {
                        lpMode = 0;
                        sub_14005b360(&var_98, &var_a0, &lpMode, &data_1400639e0);
                        /* no return */
                    }
                    
                    int64_t rdx_9;
                    result = sub_14004cc50(hConsoleHandle, var_40, rdi_2);
                    
                    if (result == 0)
                    {
                        int64_t var_a8 = rdx_9;
                        var_88 = rdi_2;
                        
                        if (rdi_2 != rdx_9)
                        {
                            lpMode = 0;
                            sub_14005b360(&var_a8, &var_88, &lpMode, &data_1400639f8);
                            /* no return */
                        }
                    }
                }
            }
        }
    }
    
    return result;
}

int64_t sub_14004cc20(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return CloseHandle(*(arg2 + 0x48));
}

int64_t sub_14004cc50(HANDLE arg1, uint8_t* arg2, void* arg3)
{
    __chkstk(0x2070);
    void* rsi;
    
    if (arg3 >= 0x1001)
    {
        rsi = 0x1000;
        
        if (arg2[0x1000] <= 0xbf)
        {
            rsi = 0xfff;
            
            if (arg2[0xfff] <= 0xbf)
            {
                void* const rcx;
                rcx = arg2[0xffe] >= 0xc0;
                rsi = (rcx + 0xffd);
                
                if (*((arg2 + rcx) + 0xffd) <= 0xbf)
                {
                    sub_14005cd20(arg2, arg3, nullptr, rsi, &data_140063a10);
                    /* no return */
                }
            }
        }
    }
    else
        rsi = arg3;
    
    void var_2060;
    int32_t nNumberOfCharsToWrite = MultiByteToWideChar(0xfde9, MB_ERR_INVALID_CHARS, arg2, rsi, &var_2060, 0x1000);
    char const (** const lpNumberOfCharsWritten)[0x28];
    int64_t var_58;
    
    if (nNumberOfCharsToWrite == 0)
    {
        lpNumberOfCharsWritten = &data_140063a50;
        var_58 = 1;
        int64_t var_50 = 8;
        int128_t var_48 = {0};
        sub_14005c700(&lpNumberOfCharsWritten);
        /* no return */
    }
    
    int64_t nNumberOfCharsToWrite_1 = nNumberOfCharsToWrite;
    
    if (nNumberOfCharsToWrite >= 0x1001)
    {
        sub_14005cb50(nNumberOfCharsToWrite_1, 0x1000);
        /* no return */
    }
    
    lpNumberOfCharsWritten = 0;
    
    if (WriteConsoleW(arg1, &var_2060, nNumberOfCharsToWrite, &lpNumberOfCharsWritten, nullptr) == 0)
    {
        GetLastError();
        return 1;
    }
    
    uint64_t rdi_1 = lpNumberOfCharsWritten;
    
    if (nNumberOfCharsToWrite_1 != rdi_1)
    {
        if (nNumberOfCharsToWrite_1 <= rdi_1)
        {
            sub_14005c830(rdi_1, nNumberOfCharsToWrite_1);
            /* no return */
        }
        
        if ((*(&var_2060 + (rdi_1 << 1)) + 0x2312) < 0x312)
        {
            void var_2018;
            void* lpBuffer = (((rdi_1 << 1) + -0xffffffffffffffb8) + &var_2018);
            rdi_1 += 1;
            uint32_t lpNumberOfCharsWritten_1 = 0;
            
            if (WriteConsoleW(arg1, lpBuffer, 1, &lpNumberOfCharsWritten_1, nullptr) == 0)
            {
                int64_t rax_8 = ((GetLastError() << 0x20) | 2);
                lpNumberOfCharsWritten = 1;
                var_58 = rax_8;
                sub_140042850(&var_58);
            }
        }
        
        if (rdi_1 > nNumberOfCharsToWrite_1)
        {
            sub_14005cb50(rdi_1, nNumberOfCharsToWrite_1);
            /* no return */
        }
        
        if (rdi_1 != 0)
        {
            int64_t i = 0;
            rsi = nullptr;
            
            do
            {
                uint32_t rcx_4 = *(&var_2060 + i);
                void* rdx_2 = 1;
                
                if (rcx_4 >= 0x80)
                {
                    rdx_2 = 2;
                    
                    if (rcx_4 >= 0x800)
                    {
                        int64_t rdx_3;
                        rdx_3 = (rcx_4 + 0x2312) >= 0x312;
                        rdx_2 = ((rdx_3 << 1) + 1);
                    }
                }
                
                rsi += rdx_2;
                i += 2;
            } while ((rdi_1 * 2) != i);
        }
    }
    
    return 0;
}

int64_t sub_14004cf00(char* arg1, char* arg2, int64_t arg3)
{
    /* tailcall */
    return sub_14004c930(STD_ERROR_HANDLE, arg2, arg3, arg1);
}

int64_t sub_14004cf20() __pure
{
    return 0;
}

int64_t sub_14004cf30(int32_t arg1)
{
    int32_t result;
    result = 1;
    
    if (arg1 <= 0x3e2)
    {
        uint64_t rdx_4 = (arg1 - 2);
        
        if (rdx_4 > 0x109)
        {
            if (arg1 == 0x150)
            {
                result = 0xf;
                return result;
            }
            
            if (arg1 != 0x252)
            {
                result = 0x28;
                return result;
            }
            
            result = 0x16;
            return result;
        }
        
        switch (rdx_4)
        {
            case 0:
            case 1:
            case 0xd:
            case 0x33:
            case 0x41:
            {
                return 0;
                break;
            }
            case 2:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xa:
            case 0xb:
            case 0xe:
            case 0x10:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1a:
            case 0x1b:
            case 0x1c:
            case 0x1d:
            case 0x1e:
            case 0x1f:
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2a:
            case 0x2b:
            case 0x2c:
            case 0x2d:
            case 0x2e:
            case 0x2f:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3a:
            case 0x3b:
            case 0x3c:
            case 0x3d:
            case 0x3e:
            case 0x3f:
            case 0x40:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4a:
            case 0x4b:
            case 0x4c:
            case 0x4d:
            case 0x4f:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x56:
            case 0x57:
            case 0x58:
            case 0x59:
            case 0x5a:
            case 0x5b:
            case 0x5c:
            case 0x5d:
            case 0x5e:
            case 0x5f:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6a:
            case 0x6c:
            case 0x6d:
            case 0x6f:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x78:
            case 0x7a:
            case 0x7b:
            case 0x7c:
            case 0x7d:
            case 0x7e:
            case 0x7f:
            case 0x80:
            case 0x81:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8a:
            case 0x8b:
            case 0x8c:
            case 0x8d:
            case 0x8e:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9a:
            case 0x9b:
            case 0x9c:
            case 0x9d:
            case 0x9e:
            case 0xa0:
            case 0xa1:
            case 0xa2:
            case 0xa3:
            case 0xa4:
            case 0xa5:
            case 0xa6:
            case 0xa7:
            case 0xa9:
            case 0xaa:
            case 0xab:
            case 0xac:
            case 0xad:
            case 0xae:
            case 0xaf:
            case 0xb0:
            case 0xb1:
            case 0xb2:
            case 0xb3:
            case 0xb4:
            case 0xb6:
            case 0xb7:
            case 0xb8:
            case 0xb9:
            case 0xba:
            case 0xbb:
            case 0xbc:
            case 0xbd:
            case 0xbe:
            case 0xbf:
            case 0xc0:
            case 0xc1:
            case 0xc2:
            case 0xc3:
            case 0xc4:
            case 0xc5:
            case 0xc6:
            case 0xc7:
            case 0xc8:
            case 0xc9:
            case 0xca:
            case 0xcb:
            case 0xcd:
            case 0xce:
            case 0xcf:
            case 0xd0:
            case 0xd1:
            case 0xd2:
            case 0xd3:
            case 0xd4:
            case 0xd5:
            case 0xd6:
            case 0xd7:
            case 0xd8:
            case 0xd9:
            case 0xda:
            case 0xdb:
            case 0xdc:
            case 0xde:
            case 0xdf:
            case 0xe0:
            case 0xe1:
            case 0xe2:
            case 0xe3:
            case 0xe4:
            case 0xe5:
            case 0xe7:
            case 0xe8:
            case 0xe9:
            case 0xea:
            case 0xeb:
            case 0xec:
            case 0xed:
            case 0xee:
            case 0xef:
            case 0xf0:
            case 0xf1:
            case 0xf2:
            case 0xf3:
            case 0xf4:
            case 0xf5:
            case 0xf6:
            case 0xf7:
            case 0xf8:
            case 0xf9:
            case 0xfa:
            case 0xfb:
            case 0xfc:
            case 0xfd:
            case 0xfe:
            case 0xff:
            case 0x101:
            case 0x102:
            case 0x103:
            case 0x104:
            case 0x105:
            case 0x106:
            case 0x107:
            case 0x108:
            {
                result = 0x28;
                return result;
                break;
            }
            case 3:
            {
                return result;
                break;
            }
            case 6:
            case 0xc:
            {
                result = 0x26;
                return result;
                break;
            }
            case 0xf:
            {
                result = 0x1f;
                return result;
                break;
            }
            case 0x11:
            {
                result = 0x11;
                return result;
                break;
            }
            case 0x25:
            case 0x6e:
            {
                result = 0x18;
                return result;
                break;
            }
            case 0x4e:
            case 0xb5:
            {
                result = 0xc;
                return result;
                break;
            }
            case 0x55:
            {
                result = 0x14;
                return result;
                break;
            }
            case 0x6b:
            case 0xe6:
            {
                result = 0xb;
                return result;
                break;
            }
            case 0x76:
            {
                result = 0x24;
                return result;
                break;
            }
            case 0x77:
            case 0x100:
            {
                result = 0x16;
                return result;
                break;
            }
            case 0x79:
            case 0x9f:
            case 0xcc:
            {
                result = 0x21;
                return result;
                break;
            }
            case 0x82:
            {
                result = 0x19;
                return result;
                break;
            }
            case 0x8f:
            {
                result = 0x10;
                return result;
                break;
            }
            case 0xa8:
            {
                result = 0x1c;
                return result;
                break;
            }
            case 0xdd:
            {
                result = 0x1b;
                return result;
                break;
            }
            case 0x109:
            {
                result = 0xe;
                return result;
                break;
            }
        }
        
        return;
    }
    
    if (arg1 <= 0x271c)
    {
        if (arg1 <= 0x50e)
        {
            if (arg1 <= 0x46a)
            {
                if (((arg1 != 0x3e3 && arg1 != 0x41d) && arg1 != 0x461))
                {
                    result = 0x28;
                    return result;
                }
                
                result = 0x16;
                return result;
            }
            
            if (arg1 <= 0x4ce)
            {
                if (arg1 == 0x46b)
                {
                    result = 0x1e;
                    return result;
                }
                
                if (arg1 == 0x476)
                {
                    result = 0x20;
                    return result;
                }
                
                result = 0x28;
                return result;
            }
            
            if (arg1 == 0x4cf)
            {
                result = 5;
                return result;
            }
            
            if (arg1 != 0x4d0)
            {
                result = 0x28;
                return result;
            }
            
            result = 4;
            return result;
        }
        
        if (arg1 > 0x1b7f)
        {
            if (arg1 <= 0x2021)
            {
                if ((arg1 == 0x1b80 || arg1 == 0x1f4e))
                {
                    result = 0x16;
                    return result;
                }
                
                result = 0x28;
                return result;
            }
            
            if ((arg1 == 0x2022 || arg1 == 0x25e9))
            {
                result = 0x16;
                return result;
            }
            
            result = 0x28;
            return result;
        }
        
        if (arg1 > 0x1715)
        {
            if ((arg1 != 0x1716 && arg1 != 0x1b64))
            {
                result = 0x28;
                return result;
            }
            
            result = 0x16;
            return result;
        }
        
        if (arg1 == 0x50f)
        {
            result = 0x1a;
            return result;
        }
        
        if (arg1 != 0x5b4)
        {
            result = 0x28;
            return result;
        }
        
        result = 0x16;
        return result;
    }
    
    uint64_t rdx_1 = (arg1 - 0x271d);
    
    if (rdx_1 > 0x34)
    {
        if (((arg1 - 0x3c2a) >= 2 && arg1 != 0x35ed))
        {
            result = 0x28;
            return result;
        }
        
        result = 0x16;
        return result;
    }
    
    switch (rdx_1)
    {
        case 0:
        {
            return result;
            break;
        }
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 0xa:
        case 0xb:
        case 0xc:
        case 0xd:
        case 0xe:
        case 0xf:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1a:
        case 0x1b:
        case 0x1c:
        case 0x1d:
        case 0x1e:
        case 0x1f:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x27:
        case 0x2a:
        case 0x2b:
        case 0x2d:
        case 0x2e:
        case 0x31:
        case 0x32:
        case 0x33:
        {
            result = 0x28;
            return result;
            break;
        }
        case 9:
        {
            result = 0x14;
            return result;
            break;
        }
        case 0x16:
        {
            result = 0xd;
            return result;
            break;
        }
        case 0x23:
        {
            result = 8;
            return result;
            break;
        }
        case 0x24:
        {
            result = 9;
            return result;
            break;
        }
        case 0x25:
        {
            result = 0xa;
            return result;
            break;
        }
        case 0x26:
        {
            result = 5;
            return result;
            break;
        }
        case 0x28:
        {
            result = 6;
            return result;
            break;
        }
        case 0x29:
        {
            result = 3;
            return result;
            break;
        }
        case 0x2c:
        {
            result = 7;
            return result;
            break;
        }
        case 0x2f:
        {
            result = 0x16;
            return result;
            break;
        }
        case 0x30:
        {
            result = 2;
            return result;
            break;
        }
        case 0x34:
        {
            result = 4;
            return result;
            break;
        }
    }
}

int64_t sub_14004d0f0(int128_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t var_40 = -2;
    int16_t* rax = 2;
    
    if (arg3 != -1)
    {
        if (((arg3 + 1) >> 0x3e) != 0)
        {
            sub_14005c5d0(0);
            /* no return */
        }
        
        data_140071141;
        rax = j_sub_140049a90(((arg3 + 1) * 2), 2);
        
        if (rax == 0)
        {
            sub_14005c5d0(2);
            /* no return */
        }
    }
    
    int64_t var_58 = (arg3 + 1);
    int64_t result_1 = 0;
    int64_t var_70 = arg2;
    int64_t var_68 = (arg3 + arg2);
    int16_t var_60 = 0;
    sub_140043b00(&var_58, &var_70);
    int16_t* rcx_2 = rax;
    int64_t result = result_1;
    int16_t* rdx_1 = rcx_2;
    
    if (result_1 < 8)
    {
    label_14004d1e5:
        result *= 2;
        int64_t r8 = 0;
        
        while (result != r8)
        {
            bool cond:0_1 = *(rdx_1 + r8) != 0;
            r8 += 2;
            
            if (!(cond:0_1))
                goto label_14004d208;
        }
        
        if (result_1 == var_58)
        {
            result = sub_140043840(&var_58);
            rcx_2 = rax;
        }
        
        rcx_2[result_1] = 0;
        int64_t var_48 = (result_1 + 1);
        arg1[1] = (result_1 + 1);
        *arg1 = var_58;
    }
    else
    {
        rdx_1 = rcx_2;
        result = result_1;
        
        while (true)
        {
            if ((*rdx_1 != 0 && (rdx_1[1] != 0 && (rdx_1[2] != 0 && (rdx_1[3] != 0 && (rdx_1[4] != 0 && (rdx_1[5] != 0 && (rdx_1[6] != 0 && rdx_1[7] != 0))))))))
            {
                result -= 8;
                rdx_1 = &rdx_1[8];
                
                if (result <= 7)
                    goto label_14004d1e5;
                
                continue;
            }
            
        label_14004d208:
            *(arg1 + 8) = &data_140063b20;
            *arg1 = -0x8000000000000000;
            int64_t rdx_2 = var_58;
            
            if (rdx_2 != 0)
                return j_sub_140049af0(rcx_2, (rdx_2 * 2), 2);
            
            break;
        }
    }
    
    return result;
}

void sub_14004d280(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x40);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x48), (rdx * 2), 2);
}

int64_t sub_14004d2d0()
{
    HMODULE hModule = GetModuleHandleA("kernel32");
    int64_t (* r8)();
    
    if (hModule == 0)
        r8 = sub_14004d340;
    else
    {
        int64_t (* rax)() = GetProcAddress(hModule, "SetThreadDescription");
        r8 = sub_14004d340;
        
        if (rax != 0)
            r8 = rax;
    }
    
    data_140071028 = r8;
    /* jump -> r8 */
}

int64_t sub_14004d340()
{
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
    return 0x80004001;
}

int64_t sub_14004d360(int64_t* arg1)
{
    int64_t var_18 = -2;
    
    if (**arg1 == 0xc00000fd)
    {
        int32_t var_20 = 0;
        char var_1c_1 = 0;
        TEB* gsbase;
        uint32_t rax_3 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68);
        
        if (rax_3 == 0)
        {
            sub_14004e210((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60), sub_14004e1a0);
            *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68) = 1;
        }
        else if (rax_3 != 1)
        {
            sub_14005c6a0("use of std::thread::current() is…");
            /* no return */
        }
        
        int64_t* rsi_1 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60);
        
        if (rsi_1 == 0)
        {
            sub_14005b290((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60));
            rsi_1 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60);
        }
        
        int64_t temp0_1 = *rsi_1;
        *rsi_1 += 1;
        
        if (temp0_1 <= -1)
            trap(6);
        
        if (rsi_1 == 0)
        {
            sub_14005c6a0("use of std::thread::current() is…");
            /* no return */
        }
        
        int64_t* var_38 = rsi_1;
        int64_t rax_14 = rsi_1[2];
        int64_t rax_15;
        char const* const rcx_8;
        
        if (rax_14 == 0)
        {
            rax_15 = 4;
            rcx_8 = "main";
        }
        else if (rax_14 != 2)
        {
            rcx_8 = rsi_1[3];
            rax_15 = (rsi_1[4] - 1);
        }
        else
        {
            rax_15 = 9;
            rcx_8 = "<unknown>";
        }
        
        char const* const var_58 = rcx_8;
        int64_t var_50_1 = rax_15;
        char const* const* var_48 = &var_58;
        int64_t (* var_40_1)(int64_t* arg1, int64_t* arg2) = sub_140042340;
        char const (** const var_b8)[0x25] = &data_140063bb0;
        int64_t var_b0_1 = 2;
        int64_t var_98_1 = 0;
        char const* const** var_a8_1 = &var_48;
        int64_t var_a0_1 = 1;
        int32_t* var_30 = &var_20;
        char const (** var_28)[0x57] = nullptr;
        char rax_17 = sub_140056fc0(&var_30, &data_140062360, &var_b8);
        char const (** rcx_10)[0x57] = var_28;
        char const (** const var_88)[0x57];
        
        if (rax_17 == 0)
        {
            if (rcx_10 != 0)
                sub_140042850(&var_28);
            
            var_88 = nullptr;
            int64_t temp1_1 = *rsi_1;
            *rsi_1 -= 1;
            
            if (temp1_1 == 1)
                sub_140043560(&var_38);
        }
        else
        {
            if (rcx_10 == 0)
            {
                var_88 = &data_1400629d8;
                int64_t var_80 = 1;
                int64_t var_78 = 8;
                int128_t var_70 = {0};
                sub_14005c700(&var_88);
                /* no return */
            }
            
            var_88 = rcx_10;
            sub_140042850(&var_88);
            int64_t temp2_1 = *rsi_1;
            *rsi_1 -= 1;
            
            if (temp2_1 == 1)
                sub_140043560(&var_38);
        }
    }
    
    return 0;
}

void sub_14004d5b0(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_14004d5d0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0xb0) != 0)
        sub_140042850((arg2 + 0xb0));
}

char* sub_14004d600(char* arg1, char* arg2, int64_t arg3)
{
    char rax;
    char rbx;
    char rsi;
    char rdi;
    uint64_t r9;
    char r10;
    char r11;
    char r14;
    
    if (arg3 == 0)
    {
        r9 = 0;
        rbx = 0;
        r11 = 0;
        rax = 0;
        r14 = 0;
        rdi = 0;
        rsi = 0;
        r10 = 0;
    }
    else
    {
        r10 = *arg2;
        rsi = 0x5c;
        
        if (r10 == 0x2f)
            r10 = 0x5c;
        
        if (arg3 != 1)
        {
            char rax_1 = arg2[1];
            
            if (rax_1 != 0x2f)
                rsi = rax_1;
            
            if (arg3 != 2)
            {
                rdi = arg2[2];
                r14 = 0x5c;
                
                if (rdi == 0x2f)
                    rdi = 0x5c;
                
                if (arg3 != 3)
                {
                    char rax_2 = arg2[3];
                    
                    if (rax_2 != 0x2f)
                        r14 = rax_2;
                    
                    if (arg3 != 4)
                    {
                        rax = arg2[4];
                        r11 = 0x5c;
                        
                        if (rax == 0x2f)
                            rax = 0x5c;
                        
                        if (arg3 != 5)
                        {
                            char r9_1 = arg2[5];
                            
                            if (r9_1 != 0x2f)
                                r11 = r9_1;
                            
                            if (arg3 != 6)
                            {
                                rbx = arg2[6];
                                uint64_t r9_2 = 0x5c;
                                
                                if (rbx == 0x2f)
                                    rbx = 0x5c;
                                
                                if (arg3 != 7)
                                {
                                    uint32_t r15_1 = arg2[7];
                                    
                                    if (r15_1 != 0x2f)
                                        r9_2 = r15_1;
                                    
                                    r9 = (r9_2 << 0x38);
                                }
                                else
                                    r9 = 0;
                            }
                            else
                            {
                                r9 = 0;
                                rbx = 0;
                            }
                        }
                        else
                        {
                            r9 = 0;
                            rbx = 0;
                            r11 = 0;
                        }
                    }
                    else
                    {
                        r9 = 0;
                        rbx = 0;
                        r11 = 0;
                        rax = 0;
                    }
                }
                else
                {
                    r9 = 0;
                    rbx = 0;
                    r11 = 0;
                    rax = 0;
                    r14 = 0;
                }
            }
            else
            {
                r9 = 0;
                rbx = 0;
                r11 = 0;
                rax = 0;
                r14 = 0;
                rdi = 0;
            }
        }
        else
        {
            r9 = 0;
            rbx = 0;
            r11 = 0;
            rax = 0;
            r14 = 0;
            rdi = 0;
            rsi = 0;
        }
    }
    
    int32_t r15_2 = 8;
    
    if (arg3 < 8)
        r15_2 = arg3;
    
    if ((arg3 < 2 || (r10 | (rsi << 8)) != 0x5c5c))
    {
        if ((arg3 < 2 || arg2[1] != 0x3a))
        {
        labelid_1:
            *arg1 = 6;
        }
        else
        {
            bool rax_3 = *arg2;
            
            if (((rax_3 & 0xdf) - 0x41) >= 0x1a)
            {
            labelid_1:
                *arg1 = 6;
            }
            else
            {
                *arg1 = 5;
                arg1[1] = ((rax_3 >= 0x61 << 5) ^ rax_3);
            }
        }
    }
    else
    {
        int64_t r10_8;
        
        if ((r15_2 & 0xe) == 2)
        {
        label_14004d7ed:
            r10_8 = (arg3 - 2);
            
            if (arg3 != 2)
                goto label_14004d7fd;
            
        label_14004d82a:
            *arg1 = 6;
        }
        else
        {
            uint32_t r10_7 = (rdi | (r14 << 8));
            
            if (r10_7 == 0x5c2e)
            {
                if (arg3 <= 3)
                {
                    sub_14005cae0(4, arg3);
                    /* no return */
                }
                
                int64_t rax_6 = 0;
                
                if (arg3 != 4)
                {
                    while (true)
                    {
                        uint32_t r9_4 = arg2[(4 + rax_6)];
                        
                        if (r9_4 == 0x2f)
                            break;
                        
                        if (r9_4 == 0x5c)
                            break;
                        
                        rax_6 += 1;
                        
                        if ((arg3 - 4) == rax_6)
                        {
                            rax_6 = (arg3 - 4);
                            break;
                        }
                    }
                }
                
                *arg1 = 3;
                *(arg1 + 8) = &arg2[4];
                *(arg1 + 0x10) = rax_6;
            }
            else
            {
                if (r10_7 != 0x5c3f)
                    goto label_14004d7ed;
                
                if (arg3 <= 3)
                {
                    sub_14005cb50(4, arg3);
                    /* no return */
                }
                
                if ((((*arg2 == 0x2f || arg2[1] == 0x2f) || arg2[2] == 0x2f) || arg2[3] == 0x2f))
                {
                    r10_8 = (arg3 - 2);
                label_14004d7fd:
                    int64_t r9_3 = 0;
                    
                    while (true)
                    {
                        uint32_t rsi_5 = arg2[(r9_3 + 2)];
                        
                        if (rsi_5 == 0x2f)
                            break;
                        
                        if (rsi_5 == 0x5c)
                            break;
                        
                        int64_t rsi_7 = ((-(arg3) + r9_3) + 1);
                        r9_3 += 1;
                        
                        if (rsi_7 == -2)
                            goto label_14004d82a_2;
                    }
                    
                    if ((r10_8 - 1) != r9_3)
                    {
                        int64_t r8 = 0;
                        
                        while (true)
                        {
                            uint32_t rdi_2 = arg2[((r8 + r9_3) + 3)];
                            
                            if (rdi_2 == 0x2f)
                                break;
                            
                            if (rdi_2 == 0x5c)
                                break;
                            
                            int64_t rdi_3 = ((r9_3 - arg3) + r8);
                            r8 += 1;
                            
                            if (rdi_3 == -4)
                            {
                                r8 = ((r10_8 - 1) - r9_3);
                                break;
                            }
                        }
                        
                        if ((r9_3 == 0 || r8 == 0))
                        {
                        label_14004d82a_1:
                            *arg1 = 6;
                        }
                        else
                        {
                            *arg1 = 4;
                            *(arg1 + 8) = &arg2[2];
                            *(arg1 + 0x10) = r9_3;
                            *(arg1 + 0x18) = &arg2[(r9_3 + 3)];
                            *(arg1 + 0x20) = r8;
                        }
                    }
                    else
                    {
                    label_14004d82a_2:
                        *arg1 = 6;
                    }
                }
                else if (((r15_2 & 0xc) == 4 || (((rax << 0x20) | (r11 << 0x28)) | ((rbx << 0x30) | r9)) != 0x5c434e5500000000))
                {
                    int64_t i_2 = (arg3 - 4);
                    
                    if (i_2 < 3)
                    {
                        if (arg3 != 4)
                        {
                            if ((arg3 != 6 || arg2[5] != 0x3a))
                                goto label_14004d9c2;
                            
                            goto label_14004d994;
                        }
                        
                    label_14004d9df:
                        *arg1 = 0;
                        *(arg1 + 8) = &arg2[4];
                        *(arg1 + 0x10) = i_2;
                    }
                    else
                    {
                        uint32_t r10_16 = arg2[6];
                        
                        if (((r10_16 != 0x2f && r10_16 != 0x5c) || arg2[5] != 0x3a))
                        {
                        label_14004d9c2:
                            int64_t i = 0;
                            
                            do
                            {
                                if (arg2[(4 + i)] == 0x5c)
                                {
                                    i_2 = i;
                                    break;
                                }
                                
                                i += 1;
                            } while ((arg3 - 4) != i);
                            
                            goto label_14004d9df;
                        }
                        
                    label_14004d994:
                        char rdx_2 = arg2[4];
                        
                        if (((rdx_2 & 0xdf) - 0x41) > 0x19)
                            goto label_14004d9c2;
                        
                        void* rax_12;
                        rax_12 = rdx_2 >= 0x61;
                        rax_12 <<= 5;
                        rax_12 ^= rdx_2;
                        *arg1 = 2;
                        arg1[1] = rax_12;
                    }
                }
                else
                {
                    if (arg3 <= 7)
                    {
                        sub_14005cae0(8, arg3);
                        /* no return */
                    }
                    
                    void* r9_7 = 1;
                    int64_t r11_6 = (arg3 - 8);
                    int64_t r10_15;
                    
                    if (arg3 == 8)
                    {
                        r11_6 = 0;
                        r10_15 = 0;
                    }
                    else
                    {
                        r10_15 = 0;
                        int64_t rsi_10 = 0;
                        int64_t i_1;
                        
                        do
                        {
                            if (arg2[(rsi_10 + 8)] == 0x5c)
                            {
                                r9_7 = &arg2[(rsi_10 + 9)];
                                
                                if ((arg3 - 9) != rsi_10)
                                {
                                    r10_15 = 0;
                                    int64_t j;
                                    
                                    do
                                    {
                                        if (arg2[((r10_15 + rsi_10) + 9)] == 0x5c)
                                            goto label_14004da03;
                                        
                                        j = ((rsi_10 - arg3) + r10_15);
                                        r10_15 += 1;
                                    } while (j != -0xa);
                                    r11_6 = rsi_10;
                                    r10_15 = ((arg3 - 9) - rsi_10);
                                }
                                else
                                {
                                    r10_15 = 0;
                                label_14004da03:
                                    r11_6 = rsi_10;
                                }
                                
                                break;
                            }
                            
                            i_1 = ((-(arg3) + rsi_10) + 1);
                            rsi_10 += 1;
                        } while (i_1 != -8);
                    }
                    
                    *arg1 = 1;
                    *(arg1 + 8) = &arg2[8];
                    *(arg1 + 0x10) = r11_6;
                    *(arg1 + 0x18) = r9_7;
                    *(arg1 + 0x20) = r10_15;
                }
            }
        }
    }
    
    return arg1;
}

int128_t* sub_14004da90(int128_t* arg1, int128_t* arg2, char arg3)
{
    int64_t var_48 = -2;
    int64_t* lpFileName = *(arg2 + 8);
    int64_t rax = arg2[1];
    int128_t* rax_10;
    
    if (rax > 3)
    {
        if ((*lpFileName == 0x5c003f005c005c || *lpFileName == 0x5c003f003f005c))
        {
        label_14004db57:
            rax_10 = arg2[1];
            arg1[1] = rax_10;
            *arg1 = *arg2;
            return rax_10;
        }
        
        if (rax >= 0xf8)
            goto label_14004db86;
        
        if (*(lpFileName + 2) == 0x3a)
            goto label_14004db19;
        
        goto label_14004db38;
    }
    
    if (rax == 3)
    {
        uint32_t rax_2;
        
        if (*(lpFileName + 2) != 0x3a)
        {
        label_14004db38:
            rax_2 = *lpFileName;
        }
        else
        {
            if (*(lpFileName + 4) == 0)
            {
                uint32_t rax_20 = *lpFileName;
                
                if ((rax_20 == 0x2f || rax_20 == 0x5c))
                    goto label_14004db19;
                
                goto label_14004db57;
            }
            
        label_14004db19:
            uint32_t rax_1 = *(lpFileName + 4);
            
            if ((rax_1 != 0x2f && rax_1 != 0x5c))
                goto label_14004db38;
            
            rax_2 = *lpFileName;
            
            if ((rax_2 != 0x2f && rax_2 != 0x5c))
                goto label_14004db57;
        }
        
        if ((rax_2 != 0x5c && rax_2 != 0x2f))
            goto label_14004db86;
        
        uint32_t rax_4 = *(lpFileName + 2);
        
        if ((rax_4 == 0x5c || rax_4 == 0x2f))
            goto label_14004db57;
        
        goto label_14004db86;
    }
    
    if (rax == 1)
    {
        if (*lpFileName != 0)
            goto label_14004db86;
        
        goto label_14004db57;
    }
    
    if (rax > 1)
        goto label_14004db38;
    
label_14004db86:
    uint64_t var_78 = 0;
    void* lpBuffer_3 = 2;
    int64_t var_68_1 = 0;
    uint64_t r8 = 0x200;
    void* lpBuffer_1 = 2;
    uint64_t rdi_1 = 0;
    uint64_t r14_1 = 0;
    uint64_t r15_1 = 0;
    
    while (true)
    {
        uint64_t r12_1 = 0x200;
        void var_4c0;
        void* lpBuffer = &var_4c0;
        uint64_t r13_1 = r8;
        
        while (true)
        {
            SetLastError(NO_ERROR);
            void* lpBuffer_2 = lpBuffer;
            uint32_t rax_6 = GetFullPathNameW(lpFileName, r13_1, lpBuffer, nullptr);
            
            if ((rax_6 == 0 && GetLastError() != NO_ERROR))
            {
                int64_t rsi_4 = ((GetLastError() << 0x20) | 2);
                uint64_t rdx_3 = var_78;
                
                if (rdx_3 != 0)
                    j_sub_140049af0(lpBuffer_3, (rdx_3 * 2), 2);
                
                *(arg1 + 8) = rsi_4;
                *arg1 = -0x8000000000000000;
                int64_t rdx_5 = *arg2;
                
                if (rdx_5 != 0)
                    return j_sub_140049af0(*(arg2 + 8), (rdx_5 * 2), 2);
                
                return arg2;
            }
            
            r8 = rax_6;
            
            if (r13_1 != r8)
            {
                if (r13_1 >= r8)
                {
                    if (r12_1 < r8)
                    {
                        sub_14005cb50(r8, r12_1);
                        /* no return */
                    }
                    
                    int128_t* r12_2 = arg2;
                    r12_2[1] = 0;
                    int64_t* lpFileName_1 = lpFileName;
                    int64_t rsi_6;
                    int64_t r14_3;
                    int64_t* lpFileName_2;
                    int64_t var_90;
                    int64_t* lpFileName_3;
                    uint32_t rax_11;
                    int64_t rdx_7;
                    void* lpBuffer_5;
                    wchar16 const* const r15_2;
                    
                    if (arg3 == 0)
                    {
                        if (rax_6 > 0xf6)
                        {
                        label_14004dda5:
                            int16_t* lpBuffer_4 = lpBuffer_2;
                            rax_11 = lpBuffer_4[1];
                            
                            if ((rax_11 == 0x3a && lpBuffer_4[2] == 0x5c))
                                goto label_14004ddbc;
                            
                            int16_t rdx_8 = *lpBuffer_4;
                            
                            if (rax_6 == 3)
                            {
                                lpBuffer_5 = lpBuffer_2;
                                
                                if (rdx_8 != 0x5c)
                                    goto label_14004de36;
                                
                                goto label_14004ddf4;
                            }
                            
                            r15_2 = 2;
                            
                            if ((rdx_8 != 0x5c || rax_11 == 0x3f))
                                goto label_14004de3c;
                            
                            lpBuffer_5 = lpBuffer_2;
                            
                            if (rax_11 != 0x5c)
                                goto label_14004ddf9;
                            
                            uint32_t rax_15 = *(lpBuffer_5 + 4);
                            
                            if (rax_15 == 0x3f)
                            {
                                if (*(lpBuffer_5 + 6) != 0x5c)
                                    goto label_14004ddff;
                                
                                goto label_14004de3c;
                            }
                            
                            if ((rax_15 != 0x2e || *(lpBuffer_5 + 6) != 0x5c))
                                goto label_14004ddff;
                            
                            r8 -= 4;
                            lpBuffer_2 = (lpBuffer_5 + 8);
                        label_14004ddbc:
                            r15_2 = u"\\?\…";
                            r14_3 = 4;
                            rsi_6 = (r8 + 5);
                            rdx_7 = *r12_2;
                            
                            if (rdx_7 >= rsi_6)
                                goto label_14004de2b;
                            
                            goto label_14004de53;
                        }
                        
                        rsi_6 = *r12_2;
                        
                        if (rsi_6 <= r8)
                        {
                            int64_t rcx_11;
                            
                            if (rsi_6 == 0)
                                rcx_11 = 0;
                            else
                            {
                                lpFileName_2 = lpFileName_1;
                                int64_t var_b0_2 = (rsi_6 * 2);
                                rcx_11 = 2;
                            }
                            
                            int64_t var_b8_2 = rcx_11;
                            sub_140043700(&var_90, 2, ((r8 + 1) * 2), &lpFileName_2);
                            
                            if (var_90 != 0)
                            {
                                sub_14005c5d0(lpFileName_3);
                                /* no return */
                            }
                            
                            *(r12_2 + 8) = lpFileName_3;
                            *r12_2 = (r8 + 1);
                            r14_3 = 0;
                            rsi_6 = (r8 + 1);
                            
                            if (rsi_6 < r8)
                                goto label_14004df5d;
                        }
                        else
                        {
                            r14_3 = 0;
                            
                            if (rsi_6 < r8)
                            {
                            label_14004df5d:
                                sub_14005b3a0(r12_2, r14_3, r8);
                                r12_2 = arg2;
                                rsi_6 = *r12_2;
                                r14_3 = r12_2[1];
                            }
                        }
                    }
                    else
                    {
                        if (rax_6 > 2)
                            goto label_14004dda5;
                        
                        if (rax_6 == 2)
                        {
                            lpBuffer_5 = lpBuffer_2;
                            
                            if (*lpBuffer_5 != 0x5c)
                                goto label_14004de36;
                            
                        label_14004ddf4:
                            rax_11 = *(lpBuffer_5 + 2);
                        label_14004ddf9:
                            
                            if (rax_11 != 0x5c)
                                goto label_14004de36;
                            
                        label_14004ddff:
                            r8 -= 2;
                            lpBuffer_2 = (lpBuffer_5 + 4);
                            r15_2 = u"\\?\UNC\…";
                            r14_3 = 8;
                            rsi_6 = (r8 + 9);
                            rdx_7 = *r12_2;
                            
                            if (rdx_7 < rsi_6)
                                goto label_14004de53;
                            
                            goto label_14004de2b;
                        }
                        
                    label_14004de36:
                        r15_2 = 2;
                    label_14004de3c:
                        r14_3 = 0;
                        rsi_6 = (r8 + 1);
                        rdx_7 = *r12_2;
                        uint64_t rdi_2;
                        
                        if (rdx_7 < rsi_6)
                        {
                        label_14004de53:
                            rdi_2 = r8;
                            int64_t rcx_5;
                            
                            if (rdx_7 == 0)
                                rcx_5 = 0;
                            else
                            {
                                lpFileName_2 = lpFileName_1;
                                int64_t var_b0_1 = (rdx_7 * 2);
                                rcx_5 = 2;
                            }
                            
                            int64_t var_b8_1 = rcx_5;
                            sub_140043700(&var_90, 2, (rsi_6 * 2), &lpFileName_2);
                            
                            if (var_90 != 0)
                            {
                                sub_14005c5d0(lpFileName_3);
                                /* no return */
                            }
                            
                            lpFileName_1 = lpFileName_3;
                            *(r12_2 + 8) = lpFileName_1;
                            *r12_2 = rsi_6;
                            goto label_14004df3c;
                        }
                        
                    label_14004de2b:
                        rdi_2 = r8;
                        rsi_6 = rdx_7;
                    label_14004df3c:
                        memcpy(lpFileName_1, r15_2, (r14_3 * 2));
                        r12_2[1] = r14_3;
                        r8 = rdi_2;
                        
                        if ((rsi_6 - r14_3) < r8)
                            goto label_14004df5d;
                    }
                    int64_t rdi_4 = *(r12_2 + 8);
                    memcpy((rdi_4 + (r14_3 << 1)), lpBuffer_2, (r8 * 2));
                    int64_t r14_4 = (r14_3 + r8);
                    r12_2[1] = r14_4;
                    
                    if (r14_4 == rsi_6)
                    {
                        sub_140043840(r12_2);
                        r12_2 = arg2;
                        rdi_4 = *(r12_2 + 8);
                    }
                    
                    *(rdi_4 + (r14_4 << 1)) = 0;
                    r12_2[1] = (r14_4 + 1);
                    uint64_t rdx_13 = var_78;
                    
                    if (rdx_13 != 0)
                        j_sub_140049af0(lpBuffer_3, (rdx_13 * 2), 2);
                    
                    rax_10 = r12_2[1];
                    arg1[1] = rax_10;
                    *arg1 = *r12_2;
                    return rax_10;
                }
                
                if (r8 < 0x201)
                    break;
            }
            else
            {
                if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
                {
                    sub_14005c7a0("internal error: entered unreacha…");
                    /* no return */
                }
                
                uint64_t r13_2 = (r13_1 * 2);
                
                if (r13_2 >= 0xffffffff)
                    r13_2 = 0xffffffff;
                
                r8 = r13_2;
                
                if (r8 < 0x201)
                    break;
            }
            
            uint64_t r8_1 = (r8 - r15_1);
            
            if (r8_1 > (r14_1 - r15_1))
            {
                sub_14005b3a0(&var_78, r15_1, r8_1);
                rdi_1 = var_78;
                lpBuffer_1 = lpBuffer_3;
            }
            
            r15_1 = 0xffffffff;
            
            if (rdi_1 < 0xffffffff)
                r15_1 = rdi_1;
            
            uint64_t var_68_2 = r15_1;
            r14_1 = rdi_1;
            r12_1 = r15_1;
            lpBuffer = lpBuffer_1;
            r13_1 = r15_1;
        }
    }
}

int64_t* sub_14004e120(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x470);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x478), (rdx * 2), 2);
    
    int64_t* result = *(arg2 + 0x488);
    int64_t rdx_2 = *result;
    
    if (rdx_2 == 0)
        return result;
    
    return j_sub_140049af0(*(*(arg2 + 0x488) + 8), (rdx_2 * 2), 2);
}

int64_t* sub_14004e1a0(int64_t* arg1)
{
    arg1[1] = 2;
    int64_t* result = *arg1;
    
    if (result != 0)
    {
        int64_t temp0_1 = *result;
        *result -= 1;
        
        if (temp0_1 == 1)
            /* tailcall */
            return sub_140043560(arg1);
    }
    
    return result;
}

int64_t* sub_14004e1c0(int64_t* arg1)
{
    int64_t rdx = *arg1;
    int64_t* result = arg1[1];
    *arg1 = 2;
    int64_t var_18 = rdx;
    int64_t* result_1 = result;
    
    if ((rdx == 1 && result != 0))
    {
        int64_t temp0_1 = *result;
        *result -= 1;
        
        if (temp0_1 == 1)
            return sub_140043500(&result_1);
    }
    
    return result;
}

void* sub_14004e210(int64_t arg1, int64_t arg2)
{
    int64_t var_28 = -2;
    TEB* gsbase;
    
    if (*(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x18) != 0)
    {
        int32_t var_38 = 0;
        char var_34 = 0;
        char const (** const var_70)[0x4c] = &data_140063de8;
        int64_t var_68 = 1;
        void var_30;
        void* var_60 = &var_30;
        int128_t var_58 = {0};
        int64_t var_40 = sub_1400471c0(&var_38, &var_70);
        sub_140042ab0(&var_40);
        trap(0xd);
    }
    
    void* rax_3 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
    *(rax_3 + 0x18) = -1;
    int64_t rbx = *(rax_3 + 0x30);
    
    if (rbx == *(rax_3 + 0x20))
        sub_140043990((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x20));
    
    void* result = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
    int64_t* rcx_6 = *(result + 0x28);
    rcx_6[(rbx * 2)] = arg1;
    rcx_6[((rbx * 2) + 1)] = arg2;
    *(result + 0x30) = (rbx + 1);
    *(result + 0x18) += 1;
    return result;
}

void* sub_14004e340()
{
    int64_t rdx;
    arg_10 = rdx;
    TEB* gsbase;
    void* result = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
    *(result + 0x18) += 1;
    return result;
}

void _TLS_Entry_0(int64_t arg1, int32_t arg2)
{
    int64_t var_18 = -2;
    
    if ((arg2 == 3 || arg2 == 0))
    {
        TEB* gsbase;
        
        if (*(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x18) != 0)
        {
        label_14004e439:
            sub_14005c620();
            /* no return */
        }
        
        while (true)
        {
            void* rax_4 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
            *(rax_4 + 0x18) = -1;
            int64_t rax_5 = *(rax_4 + 0x30);
            
            if (rax_5 == 0)
            {
                int64_t rdx_2 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x20);
                int64_t rax;
                
                if (rdx_2 == 0)
                    rax = 0;
                else
                {
                    void* rsi_2 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
                    j_sub_140049af0(*(rsi_2 + 0x28), (rdx_2 << 4), 8);
                    rax = (*(rsi_2 + 0x18) + 1);
                }
                
                void* rcx_9 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
                *(rcx_9 + 0x20) = 0;
                *(rcx_9 + 0x28) = 8;
                *(rcx_9 + 0x30) = 0;
                *(rcx_9 + 0x18) = rax;
                break;
            }
            
            void* rsi_1 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
            *(rsi_1 + 0x30) = (rax_5 - 1);
            int64_t* rdx_1 = *(rsi_1 + 0x28);
            int64_t rax_7 = ((rax_5 - 1) << 4);
            int64_t rcx_3 = *(rdx_1 + rax_7);
            int64_t rax_8 = *((rdx_1 + rax_7) + 8);
            *(rsi_1 + 0x18) = 0;
            rax_8(rcx_3);
            
            if (*(rsi_1 + 0x18) != 0)
                goto label_14004e439;
        }
    }
}

void sub_14004e4e0(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_14004e500() __noreturn
{
    int64_t (* rax)(int64_t arg1, int32_t* arg2) = data_140071198;
    int64_t (* r8)(int64_t arg1, int32_t* arg2) = sub_140049910;
    
    if (rax != 0)
        r8 = rax;
    
    r8();
    trap(0xd);
}

void sub_14004e530() __noreturn
{
    sub_14004e500();
    /* no return */
}

HANDLE sub_14004e550(int64_t arg1, int32_t* arg2, int64_t arg3, void* arg4)
{
    int64_t var_48 = -2;
    HANDLE result_1 = data_1400711c8;
    int128_t lpName;
    uint64_t var_b8;
    int128_t lpName_1;
    
    if (result_1 == 0)
    {
        __builtin_strncpy(&lpName_1, "Local\\RustBacktraceMutex", 0x18);
        char var_78_1 = 0;
        uint32_t rax_11 = GetCurrentProcessId();
        
        if (rax_11 != 0)
        {
            int64_t rcx_12 = 0x1f;
            bool cond:2_1;
            
            do
            {
                if (rcx_12 > 0x20)
                {
                    sub_14005c830(-1, 0x21);
                    /* no return */
                }
                
                char rdx_1 = (rax_11 & 0xf);
                char r8_3 = (rdx_1 + 0x37);
                
                if (rdx_1 < 0xa)
                    r8_3 = (rdx_1 + 0x30);
                
                *(&lpName_1 + rcx_12) = r8_3;
                
                if (rax_11 < 0x10)
                    break;
                
                uint8_t rdx_4 = ((rax_11 >> 4) & 0xf);
                char r8_5 = (rdx_4 + 0x37);
                
                if (rdx_4 < 0xa)
                    r8_5 = (rdx_4 + 0x30);
                
                void var_99;
                *(&var_99 + rcx_12) = r8_5;
                rcx_12 -= 2;
                cond:2_1 = rax_11 >= 0x100;
                rax_11 u>>= 8;
            } while (cond:2_1);
        }
        
        char var_a8_1 = var_78_1;
        int128_t lpName_2 = lpName_1;
        __builtin_strncpy(&var_b8, "aceMutex", 8);
        lpName = lpName_2;
        HANDLE result = CreateMutexA(nullptr, 0, &lpName);
        
        if (result == 0)
            return result;
        
        result_1 = result;
        HANDLE result_2 = nullptr;
        bool z_1;
        
        if (0 == data_1400711c8)
        {
            data_1400711c8 = result_1;
            z_1 = true;
        }
        else
        {
            result_2 = data_1400711c8;
            z_1 = false;
        }
        
        if (!(z_1))
        {
            CloseHandle(result_1);
            result_1 = result_2;
        }
    }
    
    int32_t r8 = WaitForSingleObjectEx(result_1, 0xffffffff, 0);
    HMODULE hModule = data_1400711f8;
    
    if (hModule != 0)
    {
    label_14004e5d1:
        
        if (data_1400711d0 == 0)
        {
            int64_t rcx = data_140071200;
            
            if (rcx != 0)
                goto label_14004e608;
            
            int64_t rax_1;
            rax_1 = GetProcAddress(hModule, "SymGetOptions");
            
            if (rax_1 != 0)
            {
                rcx = rax_1;
                data_140071200 = rax_1;
            label_14004e608:
                int32_t rcx_2 = rcx();
                int64_t rax_3 = data_140071208;
                
                if (rax_3 != 0)
                    goto label_14004e643;
                
                rax_3 = GetProcAddress(data_1400711f8, "SymSetOptions");
                
                if (rax_3 != 0)
                {
                    data_140071208 = rax_3;
                label_14004e643:
                    rax_3((rcx_2 | 4));
                    int64_t r15_2 = data_140071210;
                    
                    if (r15_2 != 0)
                        goto label_14004e689;
                    
                    int64_t rax_4;
                    rax_4 = GetProcAddress(data_1400711f8, "SymInitializeW");
                    
                    if (rax_4 != 0)
                    {
                        r15_2 = rax_4;
                        data_140071210 = rax_4;
                    label_14004e689:
                        r15_2(GetCurrentProcess(), 0, 1);
                        int64_t var_68 = 0;
                        PWSTR lpString_1 = 2;
                        int64_t var_58_1 = 0;
                        char var_49_1 = 1;
                        sub_14005b3a0(&var_68, 0, 0x400);
                        PWSTR lpString = lpString_1;
                        memset(&lpString[var_58_1], 0, 0x7fe);
                        lpString[(var_58_1 + 0x3ff)] = 0;
                        uint64_t var_58_2 = (var_58_1 + 0x400);
                        int64_t r13_1 = data_140071218;
                        
                        if (r13_1 != 0)
                            goto label_14004e72a;
                        
                        int64_t rax_6;
                        rax_6 = GetProcAddress(data_1400711f8, "SymGetSearchPathW");
                        
                        if (rax_6 == 0)
                        {
                            int64_t rdx_11 = var_68;
                            
                            if (rdx_11 != 0)
                                r8 = j_sub_140049af0(lpString, (rdx_11 * 2), 2);
                        }
                        else
                        {
                            r13_1 = rax_6;
                            data_140071218 = rax_6;
                        label_14004e72a:
                            
                            if (r13_1(GetCurrentProcess(), lpString, (var_58_1 + 0x400)) != 1)
                            {
                                int64_t var_58_3 = 0;
                                int64_t rax_13 = var_68;
                                
                                if (rax_13 == 0)
                                {
                                    char var_49_2 = 1;
                                    sub_140043840(&var_68);
                                    int64_t rax_14 = var_68;
                                    lpString = lpString_1;
                                    *lpString = 0x2e;
                                    int64_t var_58_5 = 1;
                                    
                                    if (rax_14 == 1)
                                    {
                                    label_14004e889:
                                        char var_49_3 = 1;
                                        sub_140043840(&var_68);
                                        lpString = lpString_1;
                                    }
                                }
                                else
                                {
                                    *lpString = 0x2e;
                                    int64_t var_58_4 = 1;
                                    
                                    if (rax_13 == 1)
                                        goto label_14004e889;
                                }
                                
                                lpString[1] = 0x3b;
                                var_58_2 = 2;
                            }
                            else
                            {
                                int32_t rax_9 = lstrlenW(lpString);
                                
                                if (rax_9 < 0)
                                {
                                    char var_49_4 = 1;
                                    sub_14005c7a0("assertion failed: len >= 0");
                                    /* no return */
                                }
                                
                                uint64_t rax_10 = rax_9;
                                
                                if ((var_58_1 + 0x400) >= rax_10)
                                    var_58_2 = rax_10;
                            }
                            
                            var_b8 = var_58_2;
                            lpName = var_68;
                            int64_t r15_4 = data_140071228;
                            
                            if (r15_4 != 0)
                                goto label_14004e901;
                            
                            int64_t rax_16;
                            rax_16 = GetProcAddress(data_1400711f8, "EnumerateLoadedModulesW64");
                            PWSTR r12_3;
                            int64_t r15_5;
                            
                            if (rax_16 == 0)
                            {
                                r15_5 = lpName;
                                
                                if (r15_5 != 0)
                                {
                                    r12_3 = *lpName[8];
                                label_14004e981:
                                    r8 = j_sub_140049af0(r12_3, (r15_5 * 2), 2);
                                }
                            }
                            else
                            {
                                r15_4 = rax_16;
                                data_140071228 = rax_16;
                            label_14004e901:
                                r15_4(GetCurrentProcess(), sub_14004b670, &lpName);
                                lpName_1 = lpName;
                                uint64_t r13_2 = var_b8;
                                uint64_t var_88 = r13_2;
                                r15_5 = lpName_1;
                                
                                if (r13_2 == r15_5)
                                {
                                    sub_140043840(&lpName_1);
                                    r15_5 = lpName_1;
                                }
                                
                                r12_3 = *lpName_1[8];
                                r12_3[r13_2] = 0;
                                int64_t r13_3 = data_140071220;
                                
                                if (r13_3 != 0)
                                    r8 = r13_3(GetCurrentProcess(), r12_3);
                                else
                                {
                                    int64_t rax_18;
                                    rax_18 = GetProcAddress(data_1400711f8, "SymSetSearchPathW");
                                    
                                    if (rax_18 != 0)
                                    {
                                        data_140071220 = rax_18;
                                        r8 = rax_18(GetCurrentProcess(), r12_3);
                                    }
                                }
                                
                                if (r15_5 != 0)
                                    goto label_14004e981;
                            }
                        }
                    }
                }
            }
            
            data_1400711d0 = 1;
        }
        
        if (arg1 == 0)
        {
            int32_t* rcx_22 = (arg2 - 1);
            
            if (arg2 == 0)
                rcx_22 = arg2;
            
            sub_14004eb50(rcx_22, 0, r8, arg3, *(arg4 + 0x20));
        }
        else
            sub_14004eb50(*(arg2 + 0x10), *arg2, arg2[1], arg3, *(arg4 + 0x20));
    }
    else
    {
        hModule = LoadLibraryA("dbghelp.dll");
        data_1400711f8 = hModule;
        
        if (hModule != 0)
            goto label_14004e5d1;
    }
    
    return ReleaseMutex(result_1);
}

void sub_14004ea60(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x60);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x68), (rdx * 2), 2);
    
    *(arg2 + 0xaf) = 0;
}

int64_t sub_14004eab0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    
    if (*(arg2 + 0xaf) != 0)
    {
        int64_t rdx = *(arg2 + 0x90);
        
        if (rdx != 0)
            j_sub_140049af0(*(arg2 + 0x98), (rdx * 2), 2);
    }
    
    return ReleaseMutex(*(arg2 + 0x88));
}

int64_t sub_14004eb10(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return ReleaseMutex(*(arg2 + 0x88));
}

int64_t sub_14004eb50(int64_t arg1, int32_t arg2, int32_t arg3, int64_t arg4, int64_t arg5)
{
    __chkstk(0x11d8);
    int128_t zmm6;
    int128_t var_58 = zmm6;
    int32_t r12 = arg3;
    HANDLE rax = GetCurrentProcess();
    int64_t result_2 = data_140071230;
    int64_t result;
    int64_t result_1;
    
    if (result_2 == 0)
    {
        result = GetProcAddress(data_1400711f8, "SymFromInlineContextW");
        
        if (result != 0)
        {
            result_2 = result;
            data_140071230 = result;
            result = data_140071238;
            result_1 = result;
            
            if (result != 0)
                goto label_14004ec1e;
            
            goto label_14004ebfa;
        }
    }
    else
    {
        result = data_140071238;
        result_1 = result;
        
        if (result != 0)
            goto label_14004ec1e;
        
    label_14004ebfa:
        result = GetProcAddress(data_1400711f8, "SymGetLineFromInlineContextW");
        result_1 = result;
        
        if (result != 0)
        {
            result = result_1;
            data_140071238 = result;
        label_14004ec1e:
            int64_t r15_1 = (arg1 - 1);
            
            if (arg1 == 0)
                r15_1 = arg1;
            
            int32_t rsi_1 = 1;
            int32_t rsi_2;
            
            if (arg2 == 1)
            {
            label_14004ed13:
                rsi_2 = (rsi_1 + r12);
                
                if (r12 < rsi_2)
                    goto label_14004ed2d;
            }
            else
            {
                int64_t result_3 = data_140071240;
                int64_t result_4;
                
                if (result_3 == 0)
                {
                    result = GetProcAddress(data_1400711f8, "SymAddrIncludeInlineTrace");
                    
                    if (result != 0)
                    {
                        result_3 = result;
                        data_140071240 = result;
                        result_4 = data_140071248;
                        
                        if (result_4 != 0)
                            goto label_14004ecb2;
                        
                        goto label_14004ec93;
                    }
                }
                else
                {
                    result_4 = data_140071248;
                    
                    if (result_4 != 0)
                        goto label_14004ecb2;
                    
                label_14004ec93:
                    result = GetProcAddress(data_1400711f8, "SymQueryInlineTrace");
                    
                    if (result != 0)
                    {
                        result_4 = result;
                        data_140071248 = result;
                    label_14004ecb2:
                        result = result_3(rax, r15_1);
                        int64_t var_1d8;
                        var_1d8 = 0;
                        rsi_1 = 1;
                        int64_t* var_11f0;
                        int32_t* lpDefaultChar;
                        int32_t var_11d0;
                        
                        if (result != 0)
                        {
                            int32_t r13_1 = result;
                            var_11d0 = 0;
                            lpDefaultChar = &var_11d0;
                            var_11f0 = &var_1d8;
                            r12 = 0;
                            result = result_4(rax, r15_1, 0, r15_1, r15_1, var_11f0, lpDefaultChar);
                            
                            if (result == 1)
                            {
                                r12 = var_1d8;
                                rsi_1 = (r13_1 + 1);
                            }
                            
                            goto label_14004ed13;
                        }
                        
                        r12 = 0;
                        rsi_2 = 1;
                    label_14004ed2d:
                        int64_t result_5 = result_2;
                        
                        do
                        {
                            void var_11cc;
                            memset(&var_11cc, 0, 0xff4);
                            int32_t var_1180_1 = 0x7d0;
                            var_11d0 = 0x58;
                            var_1d8 = 0;
                            result = result_2(rax, r15_1, r12, &var_1d8, &var_11d0, var_11f0, lpDefaultChar);
                            
                            if (result == 1)
                            {
                                int32_t cchWideChar_2;
                                uint64_t cchWideChar_1 = cchWideChar_2;
                                uint64_t cchWideChar = (var_1180_1 - 1);
                                
                                if (cchWideChar_1 < cchWideChar)
                                    cchWideChar = cchWideChar_1;
                                
                                __builtin_memset(&var_1d8, 0, 0x100);
                                lpDefaultChar = {0};
                                var_11f0 = 0x100;
                                void lpWideCharStr;
                                result = WideCharToMultiByte(0xfde9, 0, &lpWideCharStr, cchWideChar, &var_1d8, 0x100, lpDefaultChar);
                                uint64_t r13_3;
                                
                                if (result == 0)
                                {
                                    r13_3 = 0x100;
                                label_14004eea8:
                                    int128_t s;
                                    __builtin_memset(&s, 0, 0x28);
                                    s = 0x28;
                                    int32_t var_a8 = 0;
                                    var_11f0 = &s;
                                    int32_t rbx = 0;
                                    int32_t rax_2;
                                    int32_t rcx_6;
                                    int64_t rdx_2;
                                    int64_t r8;
                                    rax_2 = result_1(rax, r15_1, r12, 0, &var_a8, var_11f0);
                                    int64_t r9_1 = 0;
                                    
                                    if (rax_2 == 1)
                                    {
                                        int128_t var_c8;
                                        rcx_6 = var_c8;
                                        r8 = -1;
                                        rdx_2 = *var_c8[8];
                                        bool cond:0_1;
                                        
                                        do
                                        {
                                            cond:0_1 = *((rdx_2 + (r8 << 1)) + 2) != 0;
                                            r8 += 1;
                                        } while (cond:0_1);
                                        r9_1 = 1;
                                        rbx = 1;
                                    }
                                    
                                    var_a8 = r9_1;
                                    int64_t var_a0_1 = rdx_2;
                                    int64_t var_98_1 = r8;
                                    int32_t var_90_1 = rbx;
                                    int32_t var_8c_1 = rcx_6;
                                    int64_t* var_88_1 = &var_1d8;
                                    uint64_t var_80_1 = r13_3;
                                    int64_t var_1198;
                                    int64_t var_78_1 = var_1198;
                                    result = arg5(arg4, &var_a8);
                                    result_2 = result_5;
                                }
                                else if (result <= 0x100)
                                {
                                    r13_3 = result;
                                    goto label_14004eea8;
                                }
                            }
                            
                            r12 += 1;
                        } while (r12 != rsi_2);
                    }
                }
            }
        }
    }
    return result;
}

int64_t* sub_14004ef80(void* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    int64_t rax = *arg2;
    
    if (rax != 0)
        rax(arg1);
    
    int64_t rdx = arg2[1];
    
    if (rdx == 0)
        return arg2;
    
    /* tailcall */
    return j_sub_140049af0(arg1, rdx, arg2[2]);
}

void* sub_14004efd0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    void* result = *(arg2 + 0x30);
    int64_t rdx = *(result + 8);
    
    if (rdx == 0)
        return result;
    
    return j_sub_140049af0(*(arg2 + 0x28), rdx, *(*(arg2 + 0x30) + 0x10));
}

int64_t* sub_14004f010(int64_t* arg1, int64_t* arg2)
{
    int64_t var_10 = -2;
    
    if ((arg2 == 0 || *arg2 != &data_140071058))
    {
        sub_140049d40();
        /* no return */
    }
    
    int64_t rax = arg2[1];
    int64_t r8 = arg2[2];
    arg2[1] = 0;
    
    if (rax == 0)
    {
        sub_14005c680();
        /* no return */
    }
    
    *arg1 = rax;
    arg1[1] = r8;
    return arg1;
}

void sub_14004f070(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_14004f090() __noreturn
{
    int64_t rax;
    int64_t rdx;
    int64_t rdx_1;
    rax = *(rdx + 0x20)();
    void** pExceptionObject = &data_140071058;
    int64_t var_18 = rax;
    int64_t var_10 = rdx_1;
    data_140071254 = 0x4f120;
    data_14007125c = 0x71030;
    data_140071034 = 0x71038;
    data_14007103c = 0x71058;
    data_140071050;
    data_140071050 = 0x4f180;
    _CxxThrowException(&pExceptionObject, &data_140071250);
    /* no return */
}

void* sub_14004f120(void* arg1)
{
    int64_t var_10 = -2;
    void* rcx = *(arg1 + 8);
    
    if (rcx == 0)
        return arg1;
    
    sub_14004ef80(rcx, *(arg1 + 0x10));
    sub_140049c20();
    /* no return */
}

void sub_14004f160(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_14004f180() __noreturn
{
    char const (** const var_38)[0x1d] = &data_140064eb8;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

uint32_t sub_14004f1c0(int64_t* arg1, int32_t arg2[0x4] @ zmm0)
{
    int64_t rdx = arg1[1];
    int64_t r8 = arg1[4];
    uint32_t result = 0x110001;
    int64_t rdx_1 = (rdx - r8);
    
    if (rdx >= r8)
    {
        char* rax = *arg1;
        void* r9_1 = &rax[r8];
        *arg1 = r9_1;
        arg1[1] = rdx_1;
        
        if (r8 != 2)
        {
            sub_14005c7a0("internal error: entered unreacha…");
            /* no return */
        }
        
        uint32_t r10_1 = *rax;
        uint32_t r8_1 = rax[1];
        int32_t rax_1 = (r10_1 - 0x30);
        
        if (rax_1 >= 0xa)
        {
            rax_1 = -1;
            
            if (((r10_1 | 0x20) - 0x61) < 0xfffffff6)
                rax_1 = ((r10_1 | 0x20) - 0x57);
            
            if (rax_1 >= 0x10)
            {
                sub_14005c680();
                /* no return */
            }
        }
        
        int32_t r10_5 = (r8_1 - 0x30);
        
        if (r10_5 >= 0xa)
        {
            r10_5 = -1;
            
            if (((r8_1 | 0x20) - 0x61) < 0xfffffff6)
                r10_5 = ((r8_1 | 0x20) - 0x57);
            
            if (r10_5 >= 0x10)
            {
                sub_14005c680();
                /* no return */
            }
        }
        
        rax_1 <<= 4;
        r10_5 |= rax_1;
        char* var_38;
        char var_24;
        int64_t r8_5;
        
        if (r10_5 < 0)
        {
            result = 0x110000;
            
            if (r10_5 >= 0xc0)
            {
                if (r10_5 < 0xe0)
                {
                    r8_5 = 2;
                label_14004f2c7:
                    result = 0;
                    goto label_14004f367;
                }
                
                if (r10_5 < 0xf0)
                {
                    r8_5 = 3;
                    result = 1;
                label_14004f367:
                    var_24 = r10_5;
                    int16_t var_23_2 = 0;
                    char var_21_2 = 0;
                    var_38 = &var_24;
                    int64_t var_30_2 = r8_5;
                    
                    if (rdx_1 < 2)
                        return 0x110000;
                    
                    *arg1 = (r9_1 + 2);
                    arg1[1] = (rdx_1 - 2);
                    uint32_t rbx_1 = *r9_1;
                    uint32_t rdi_1 = *(r9_1 + 1);
                    int32_t rsi_2 = (rbx_1 - 0x30);
                    
                    if (rsi_2 >= 0xa)
                    {
                        rsi_2 = -1;
                        
                        if (((rbx_1 | 0x20) - 0x61) < 0xfffffff6)
                            rsi_2 = ((rbx_1 | 0x20) - 0x57);
                        
                        if (rsi_2 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    int32_t rbx_5 = (rdi_1 - 0x30);
                    
                    if (rbx_5 >= 0xa)
                    {
                        rbx_5 = -1;
                        
                        if (((rdi_1 | 0x20) - 0x61) < 0xfffffff6)
                            rbx_5 = ((rdi_1 | 0x20) - 0x57);
                        
                        if (rbx_5 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    rsi_2 <<= 4;
                    rbx_5 |= rsi_2;
                    var_23_2 = rbx_5;
                    
                    if (r10_5 < 0xe0)
                        goto label_14004f292;
                    
                    if ((rdx_1 - 2) < 2)
                        return 0x110000;
                    
                    *arg1 = (r9_1 + 4);
                    arg1[1] = (rdx_1 - 4);
                    uint32_t rdi_5 = *(r9_1 + 2);
                    uint32_t rsi_3 = *(r9_1 + 3);
                    int32_t r11_6 = (rdi_5 - 0x30);
                    
                    if (r11_6 >= 0xa)
                    {
                        r11_6 = -1;
                        
                        if (((rdi_5 | 0x20) - 0x61) < 0xfffffff6)
                            r11_6 = ((rdi_5 | 0x20) - 0x57);
                        
                        if (r11_6 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    int32_t rdi_9 = (rsi_3 - 0x30);
                    
                    if (rdi_9 >= 0xa)
                    {
                        rdi_9 = -1;
                        
                        if (((rsi_3 | 0x20) - 0x61) < 0xfffffff6)
                            rdi_9 = ((rsi_3 | 0x20) - 0x57);
                        
                        if (rdi_9 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    r11_6 <<= 4;
                    rdi_9 |= r11_6;
                    *var_23_2[1] = rdi_9;
                    
                    if (result != 0)
                        goto label_14004f292;
                    
                    if ((rdx_1 - 4) < 2)
                        return 0x110000;
                    
                    *arg1 = (r9_1 + 6);
                    arg1[1] = (rdx_1 - 6);
                    uint32_t rdx_5 = *(r9_1 + 4);
                    uint32_t rcx_2 = *(r9_1 + 5);
                    int32_t rax_8 = (rdx_5 - 0x30);
                    
                    if (rax_8 >= 0xa)
                    {
                        rax_8 = -1;
                        
                        if (((rdx_5 | 0x20) - 0x61) < 0xfffffff6)
                            rax_8 = ((rdx_5 | 0x20) - 0x57);
                        
                        if (rax_8 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    int32_t rdx_9 = (rcx_2 - 0x30);
                    
                    if (rdx_9 >= 0xa)
                    {
                        rdx_9 = -1;
                        
                        if (((rcx_2 | 0x20) - 0x61) < 0xfffffff6)
                            rdx_9 = ((rcx_2 | 0x20) - 0x57);
                        
                        if (rdx_9 > 0xf)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                    }
                    
                    rax_8 <<= 4;
                    rdx_9 |= rax_8;
                    char var_21_3 = rdx_9;
                    goto label_14004f292;
                }
                
                if (r10_5 < 0xf8)
                {
                    r8_5 = 4;
                    goto label_14004f2c7;
                }
            }
        }
        else
        {
            var_24 = r10_5;
            int16_t var_23_1 = 0;
            char var_21_1 = 0;
            var_38 = &var_24;
            int64_t var_30_1 = 1;
            r8_5 = 1;
        label_14004f292:
            char** var_70;
            sub_140058240(&var_70, &var_24, r8_5);
            
            if (var_70 != 0)
                return 0x110000;
            
            char* var_68;
            char* var_80 = var_68;
            int64_t var_60;
            int64_t var_78_1 = var_60;
            void* rdx_3 = &var_68[var_60];
            void* r8_6;
            
            if (var_60 != 0)
            {
                uint32_t result_1 = *var_68;
                
                if (result_1 < 0)
                {
                    int32_t rax_4 = (result_1 & 0x1f);
                    int32_t r11_2 = (var_68[1] & 0x3f);
                    
                    if (result_1 <= 0xdf)
                    {
                        r8_6 = &var_68[2];
                        result = ((rax_4 << 6) | r11_2);
                    }
                    else
                    {
                        int32_t r10_8 = ((var_68[2] & 0x3f) | (r11_2 << 6));
                        
                        if (result_1 < 0xf0)
                        {
                            r8_6 = &var_68[3];
                            result = ((rax_4 << 0xc) | r10_8);
                        }
                        else
                        {
                            r8_6 = &var_68[4];
                            result = (((rax_4 & 7) << 0x12) | ((var_68[3] & 0x3f) | (r10_8 << 6)));
                        }
                    }
                }
                else
                {
                    r8_6 = &var_68[1];
                    result = result_1;
                }
            }
            
            if (((var_60 == 0 || r8_6 != rdx_3) || result == 0x110000))
            {
                int64_t var_40 = sub_14004fe10(var_68, rdx_3, arg2);
                var_70 = &var_38;
                int64_t (* var_68_1)(int64_t* arg1) = sub_14004f940;
                int64_t* var_60_1 = &var_80;
                int64_t (* var_58)(int64_t* arg1, void* arg2) = sub_14004f600;
                int64_t* var_50 = &var_40;
                uint64_t (* var_48)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
                char const (** const var_b0)[0x70] = &data_140065618;
                int64_t var_a8 = 4;
                int64_t var_90 = 0;
                char*** var_a0 = &var_70;
                int64_t var_98 = 3;
                sub_14005c700(&var_b0);
                /* no return */
            }
        }
    }
    
    return result;
}

int64_t sub_14004f5d0(int64_t* arg1, int64_t* arg2)
{
    char* rcx = *arg1;
    char rax = *(arg2 + 0x34);
    
    if ((rax & 0x10) != 0)
        /* tailcall */
        return sub_1400598a0(rcx, arg2);
    
    if ((rax & 0x20) != 0)
        /* tailcall */
        return sub_140059950(rcx, arg2);
    
    /* tailcall */
    return sub_140059fa0(rcx, arg2);
}

int64_t sub_14004f600(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_140057b40(*arg1, arg1[1], arg2);
}

int64_t sub_14004f620(int64_t* arg1, void* arg2)
{
    uint64_t rcx_1 = **arg1;
    /* tailcall */
    return sub_1400577c0(arg2, (*(&data_140065908 + (rcx_1 << 2)) + &data_140065908), *(&data_1400658e0 + (rcx_1 << 3)), &data_140065908);
}

uint64_t sub_14004f650(int64_t* arg1, int64_t* arg2)
{
    int64_t* rcx = *arg1;
    
    if (*rcx != 0)
        /* tailcall */
        return sub_140050000(rcx, arg2);
    
    int512_t zmm0;
    zmm0 = *(rcx + 8);
    int128_t var_38 = zmm0;
    int64_t var_28 = 0;
    int32_t var_20 = 0;
    int64_t* var_18 = arg2;
    int32_t var_10 = 0;
    arg2 = 1;
    return sub_140052ae0(&var_38, arg2, zmm0);
}

int64_t sub_14004f6b0(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140057550(arg2, &data_140064ee0, 2);
}

bool sub_14004f6d0(int64_t* arg1, int32_t arg2)
{
    int32_t var_c = 0;
    int64_t r8;
    
    if (arg2 < 0x80)
    {
        var_c = arg2;
        r8 = 1;
    }
    else if (arg2 < 0x800)
    {
        var_c = ((arg2 >> 6) | 0xc0);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_c[1] = arg2;
        r8 = 2;
    }
    else if (arg2 >= 0x10000)
    {
        var_c = (((arg2 >> 0x12) & 7) | 0xf0);
        *var_c[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
        *var_c[2] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_c[3] = arg2;
        r8 = 4;
    }
    else
    {
        var_c = ((arg2 >> 0xc) | 0xe0);
        *var_c[1] = (((arg2 >> 6) & 0x3f) | 0x80);
        arg2 &= 0x3f;
        arg2 |= 0x80;
        *var_c[2] = arg2;
        r8 = 3;
    }
    
    bool rax = *arg1 != 0;
    int64_t temp0 = arg1[1];
    arg1[1] -= r8;
    arg2 = temp0 < r8;
    arg2 |= rax;
    uint64_t rdx = arg2;
    *arg1 = rdx;
    
    if (rdx != 0)
        return true;
    
    return sub_1400577c0(arg1[2], &var_c);
}

int64_t sub_14004f7b0(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_140065198, arg2);
}

void sub_14004f7d0(int16_t* arg1, int32_t arg2)
{
    if (arg2 <= 0x27)
        switch (arg2)
        {
            case 0:
            {
                *arg1 = 0x305c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 0xb:
            case 0xc:
            case 0xe:
            case 0xf:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1a:
            case 0x1b:
            case 0x1c:
            case 0x1d:
            case 0x1e:
            case 0x1f:
            case 0x20:
            case 0x21:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            {
                goto label_14004f808;
            }
            case 9:
            {
                *arg1 = 0x745c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
            case 0xa:
            {
                *arg1 = 0x6e5c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
            case 0xd:
            {
                *arg1 = 0x725c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
            case 0x22:
            {
                *arg1 = 0x225c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
            case 0x27:
            {
                *arg1 = 0x275c;
                *(arg1 + 2) = 0;
                arg1[5] = 0x200;
                break;
            }
        }
    else if (arg2 != 0x5c)
    {
    label_14004f808:
        void** rdi_1 = arg1;
        char rax_3;
        
        if (arg2 > 0x2ff)
            rax_3 = sub_14005a450(arg2);
        
        void* rax;
        
        if ((arg2 <= 0x2ff || rax_3 == 0))
            rax = sub_1400594b0(arg2);
        
        if (((arg2 > 0x2ff && rax_3 != 0) || rax == 0))
        {
            uint64_t rflags_1;
            int32_t temp0_1;
            temp0_1 = _bit_scan_reverse((arg2 | 1));
            uint64_t rax_8 = ((temp0_1 ^ 0x1c) >> 2);
            char var_20_1 = 0;
            int16_t var_22 = 0;
            char var_1f_1 = *"0123456789abcdef/rustc/eeb90cda1…"[((arg2 >> 0x14) & 0xf)];
            char var_1e_1 = *"0123456789abcdef/rustc/eeb90cda1…"[((arg2 >> 0x10) & 0xf)];
            char var_1d_1 = *"0123456789abcdef/rustc/eeb90cda1…"[((arg2 >> 0xc) & 0xf)];
            char var_1c_1 = *"0123456789abcdef/rustc/eeb90cda1…"[((arg2 >> 8) & 0xf)];
            char var_1b_1 = *"0123456789abcdef/rustc/eeb90cda1…"[((arg2 >> 4) & 0xf)];
            char rdx = *"0123456789abcdef/rustc/eeb90cda1…"[(arg2 & 0xf)];
            char var_19_1 = 0x7d;
            
            if ((rax_8 - 2) >= 0xa)
            {
                sub_14005c830((rax_8 - 2), 0xa);
                /* no return */
            }
            
            void var_24;
            *(&var_24 + rax_8) = 0x755c;
            *(&var_22 + rax_8) = 0x7b;
            rdi_1[1] = rdx;
            *rdi_1 = var_22;
            *(rdi_1 + 0xa) = (rax_8 - 2);
            *(rdi_1 + 0xb) = 0xa;
        }
        else
        {
            *rdi_1 = 0x80;
            *(rdi_1 + 4) = arg2;
        }
    }
    else
    {
        *arg1 = 0x5c5c;
        *(arg1 + 2) = 0;
        arg1[5] = 0x200;
    }
}

int64_t sub_14004f940(int64_t* arg1)
{
    int64_t r14 = *arg1;
    int64_t i_1 = arg1[1];
    void var_48;
    void* rdx;
    sub_140057ae0(&var_48, rdx);
    
    if (i_1 != 0)
    {
        int64_t i;
        
        do
        {
            int64_t var_38 = r14;
            r14 += 1;
            sub_140056e10(&var_48, &var_38, &data_140064ee8);
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    return sub_140056f50(&var_48);
}

int64_t sub_14004f9c0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1400577c0(arg2, "ErrorEmptyInvalidDigitPosOverflo…", 5);
}

int64_t* sub_14004f9e0(int64_t arg1, void* arg2)
{
    int64_t var_10 = arg1;
    return sub_140057820(arg2, "ParseIntErrorkind", 0xd, "kind", 4, &var_10, &data_140065130[0x30]);
}

void sub_14004fa40(int64_t* arg1, int64_t* arg2)
{
    int64_t* rax;
    void* r8_1;
    
    if (*arg2 != 0)
    {
        r8_1 = arg2[5];
        rax = arg2[0xa];
        
        if (r8_1 == rax)
            *arg1 = 2;
        else
        {
            char* rsi_1 = arg2[9];
            void* r11_1 = arg2[0xc];
            void* r9_2 = ((r8_1 + r11_1) - 1);
            int64_t* r10_1 = rax;
            
            if (r9_2 < rax)
            {
                void* rcx = arg2[7];
                char* r14_1 = arg2[0xb];
                int64_t rdi_1 = arg2[4];
                void* r13_1 = arg2[1];
                void* r10_3 = arg2[3];
                int64_t* var_48_1 = (r8_1 + r11_1);
                void* r12_1 = rcx;
                r10_1 = r8_1;
                int64_t var_50_1 = rdi_1;
                
                while (r8_1 == r10_1)
                {
                    void* r9_4;
                    
                    if ((TEST_BITQ(rdi_1, *(rsi_1 + r9_2))))
                    {
                        void* r9_7 = r12_1;
                        
                        if (r13_1 > r12_1)
                            r9_7 = r13_1;
                        
                        if (rcx == -1)
                            r9_7 = r13_1;
                        
                        void* rdi_2 = r9_7;
                        
                        while (true)
                        {
                            if (rdi_2 >= r11_1)
                            {
                                void* rdi_3 = r12_1;
                                
                                if (rcx == -1)
                                    rdi_3 = nullptr;
                                
                                void* r9_8 = r13_1;
                                
                                while (rdi_3 < r9_8)
                                {
                                    r9_8 -= 1;
                                    
                                    if (r9_8 >= r11_1)
                                    {
                                        sub_14005c830(r9_8, r11_1);
                                        /* no return */
                                    }
                                    
                                    void* r10_11 = (r9_8 + r8_1);
                                    
                                    if (r10_11 >= rax)
                                    {
                                        sub_14005c830(r10_11, rax);
                                        /* no return */
                                    }
                                    
                                    if (*(r14_1 + r9_8) != *(rsi_1 + r10_11))
                                    {
                                        r10_1 = (r10_3 + r8_1);
                                        arg2[5] = r10_1;
                                        r9_4 = (r11_1 - r10_3);
                                        rdi_1 = var_50_1;
                                        
                                        if (rcx != -1)
                                            goto label_14004fb3c;
                                        
                                        goto label_14004fb47;
                                    }
                                }
                                
                                arg2[5] = var_48_1;
                                
                                if (rcx != -1)
                                    arg2[7] = 0;
                                
                                *arg1 = 0;
                                arg1[1] = r8_1;
                                arg1[2] = var_48_1;
                                break;
                            }
                            
                            if ((r8_1 + rdi_2) >= rax)
                            {
                                int64_t* r9_15 = (r9_7 + r8_1);
                                
                                if (rax > r9_15)
                                    r9_15 = rax;
                                
                                sub_14005c830(r9_15, rax);
                                /* no return */
                            }
                            
                            void* r10_10 = (rdi_2 + 1);
                            bool cond:4_1 = *(r14_1 + rdi_2) == *((rsi_1 + r8_1) + rdi_2);
                            rdi_2 = r10_10;
                            
                            if (!(cond:4_1))
                            {
                                r10_1 = (r10_10 + (r8_1 - r13_1));
                                arg2[5] = r10_1;
                                
                                if (rcx == -1)
                                {
                                    rdi_1 = var_50_1;
                                    goto label_14004fb47;
                                }
                                
                                r9_4 = nullptr;
                                rdi_1 = var_50_1;
                                goto label_14004fb3c;
                            }
                        }
                        
                        goto label_14004fdc5;
                    }
                    
                    r10_1 = var_48_1;
                    arg2[5] = r10_1;
                    
                    if (rcx != -1)
                    {
                        r9_4 = nullptr;
                        r10_1 = var_48_1;
                    label_14004fb3c:
                        arg2[7] = r9_4;
                        r12_1 = r9_4;
                    }
                    
                label_14004fb47:
                    r9_2 = ((r11_1 - 1) + r10_1);
                    
                    if (r9_2 >= rax)
                    {
                        r10_1 = rax;
                        break;
                    }
                }
            }
            
            if (r10_1 == 0)
            {
                rax = nullptr;
                arg2[5] = 0;
            }
            else
            {
                int64_t* r9_14 = r10_1;
                
                while (true)
                {
                    if (r9_14 < rax)
                    {
                        if (*(rsi_1 + r9_14) <= 0xbf)
                            goto label_14004fd12;
                        
                        rax = r9_14;
                    label_14004fd29:
                        
                        if (rax > r10_1)
                            r10_1 = rax;
                        
                        arg2[5] = r10_1;
                        break;
                    }
                    
                    if (r9_14 == rax)
                        goto label_14004fd29;
                    
                label_14004fd12:
                    int64_t* temp0_1 = r9_14;
                    r9_14 += 1;
                    
                    if (temp0_1 == -1)
                    {
                        rax = nullptr;
                        arg2[5] = r10_1;
                        break;
                    }
                }
            }
            
        label_14004fda6:
            arg1[1] = r8_1;
            arg1[2] = rax;
            *arg1 = 1;
        }
    }
    else if (*(arg2 + 0x1a) == 0)
    {
        char r10_8 = arg2[3];
        arg2[3] = (r10_8 ^ 1);
        r8_1 = arg2[1];
        rax = arg2[9];
        void* r9_3 = arg2[0xa];
        
        if (r8_1 != 0)
        {
            if (r8_1 >= r9_3)
            {
                if (r8_1 != r9_3)
                {
                    sub_14005cd20(rax, r9_3, r8_1, r9_3, &data_1400651c8);
                    /* no return */
                }
            }
            else if (*(rax + r8_1) <= 0xbf)
            {
                sub_14005cd20(rax, r9_3, r8_1, r9_3, &data_1400651c8);
                /* no return */
            }
        }
        
        if (r8_1 != r9_3)
        {
            char rbx_5 = *(rax + r8_1);
            uint32_t r9_9 = rbx_5;
            
            if (r9_9 < 0)
            {
                int32_t r11_3 = (r9_9 & 0x1f);
                int32_t rsi_3 = (*((rax + r8_1) + 1) & 0x3f);
                
                if (r9_9 <= 0xdf)
                    r9_9 = ((r11_3 << 6) | rsi_3);
                else
                {
                    int32_t r9_12 = ((*((rax + r8_1) + 2) & 0x3f) | (rsi_3 << 6));
                    
                    if (rbx_5 < 0xf0)
                        r9_9 = (r9_12 | (r11_3 << 0xc));
                    else
                        r9_9 = (((*((rax + r8_1) + 3) & 0x3f) | (r9_12 << 6)) | ((r11_3 & 7) << 0x12));
                }
            }
            
            if (r10_8 != 0)
                goto label_14004fd62;
            
            void* const rax_6 = 1;
            
            if (r9_9 >= 0x80)
            {
                rax_6 = 2;
                
                if (r9_9 >= 0x800)
                    rax_6 = (4 - 0);
            }
            
            rax = (rax_6 + r8_1);
            arg2[1] = rax;
            goto label_14004fda6;
        }
        
        if (r10_8 != 0)
        {
        label_14004fd62:
            arg1[1] = r8_1;
            arg1[2] = r8_1;
            *arg1 = 0;
        }
        else
        {
            *(arg2 + 0x1a) = 1;
            *arg1 = 2;
        }
    }
    else
        *arg1 = 2;
label_14004fdc5:
}

int64_t sub_14004fe10(char* arg1, int64_t arg2, int32_t arg3[0x4] @ zmm0)
{
    void* rdx = (arg2 - arg1);
    
    if (rdx >= 0x20)
        /* tailcall */
        return sub_140058450(arg1, rdx, arg3);
    
    /* tailcall */
    return sub_140058970(arg1, rdx);
}

void sub_14004fe30(void** arg1, int64_t* arg2)
{
    void** rsi = arg1;
    int64_t r12 = arg2[3];
    int64_t r15 = arg2[2];
    void* const r13 = nullptr;
    
    if (r12 >= r15)
    {
        void* rax = arg2[1];
        void* var_50_1 = rax;
        
        if (r12 <= rax)
        {
            rax = *arg2;
            uint64_t count = arg2[5];
            char i = *((arg2 + count) + 0x1f);
            void* var_48_1 = rax;
            
            if (count <= 4)
            {
                r13 = nullptr;
                
                while (true)
                {
                    void* r8_5 = (r12 - r15);
                    void* rdx_2 = (rax + r15);
                    int64_t rcx_4;
                    void** r13_1;
                    
                    if (r8_5 > 0xf)
                    {
                        int64_t rdx_3;
                        rax = sub_140058150(i, rdx_2, r8_5);
                        
                        if (rax != 1)
                            goto label_14004ffda;
                        
                        rcx_4 = rdx_3;
                        r13_1 = rsi;
                        rax = var_48_1;
                    }
                    else
                    {
                        if (r12 == r15)
                            break;
                        
                        rcx_4 = 0;
                        
                        while (*(rdx_2 + rcx_4) != i)
                        {
                            rcx_4 += 1;
                            
                            if (r8_5 == rcx_4)
                                goto label_14004ffdd;
                        }
                        
                        r13_1 = rsi;
                    }
                    
                    r15 = ((r15 + rcx_4) + 1);
                    arg2[2] = r15;
                    int64_t rsi_2 = (r15 - count);
                    
                    if ((r15 >= count && r15 <= var_50_1))
                    {
                        bool cond:2_1 = memcmp((rax + rsi_2), &arg2[4], count) != 0;
                        rax = var_48_1;
                        
                        if (!(cond:2_1))
                        {
                            r13_1[1] = rsi_2;
                            rsi = r13_1;
                            r13_1[2] = r15;
                            r13 = 1;
                            goto label_14004ffe1;
                        }
                    }
                    
                    rsi = r13_1;
                    r13 = nullptr;
                    
                    if (r12 < r15)
                        goto label_14004ffe1;
                }
            }
            else
            {
                r13 = nullptr;
                
                while (true)
                {
                    void* r8_2 = (r12 - r15);
                    char* rdx = (rax + r15);
                    int64_t rcx;
                    
                    if (r8_2 >= 0x10)
                    {
                        int64_t rdx_1;
                        rax = sub_140058150(i, rdx, r8_2);
                        
                        if (rax != 1)
                        {
                        label_14004ffda:
                            r13 = rax;
                            break;
                        }
                        
                        rcx = rdx_1;
                        rax = var_48_1;
                    }
                    else
                    {
                        if (r12 == r15)
                            break;
                        
                        rcx = 0;
                        
                        while (rdx[rcx] != i)
                        {
                            rcx += 1;
                            
                            if (r8_2 == rcx)
                                goto label_14004ffdd;
                        }
                    }
                    
                    r15 = ((r15 + rcx) + 1);
                    arg2[2] = r15;
                    
                    if ((r15 >= count && r15 <= var_50_1))
                    {
                        sub_14005cb50(count, 4);
                        /* no return */
                    }
                    
                    if (r12 < r15)
                        goto label_14004ffe1;
                }
            }
            
        label_14004ffdd:
            arg2[2] = r12;
        }
    }
    
label_14004ffe1:
    *rsi = r13;
}

uint64_t sub_140050000(int64_t* arg1, int64_t* arg2)
{
    void* rdi = *arg1;
    void* rbx = arg1[1];
    int64_t rax = arg1[2];
    int64_t var_60 = 0;
    
    while (true)
    {
        char* r14_1 = rdi;
        int64_t rsi_1 = var_60;
        rdi = rsi_1 != rax;
        int32_t var_44_1;
        
        if (rsi_1 == rax)
        {
        label_14005097b:
            var_44_1 = 0;
        }
        else
        {
            if (rbx == 0)
            {
            label_1400509a7:
                sub_14005c680();
                /* no return */
            }
            
            var_60 = (rsi_1 + 1);
            char rcx_1 = *r14_1;
            char* r12_1 = nullptr;
            
            if (rcx_1 < 0)
            {
            label_1400500a5:
                uint32_t rdx_2 = (rcx_1 & 0x1f);
                int32_t r9_2 = (*((r14_1 + r12_1) + 1) & 0x3f);
                int32_t rcx_7;
                
                if (rcx_1 <= 0xdf)
                {
                    rcx_7 = ((rdx_2 << 6) | r9_2);
                label_140050113:
                    
                    if ((rcx_7 - 0x30) <= 9)
                        break;
                }
                else
                {
                    int32_t r8_4 = ((*((r14_1 + r12_1) + 2) & 0x3f) | (r9_2 << 6));
                    
                    if (rcx_1 >= 0xf0)
                    {
                        rcx_7 = (((*((r14_1 + r12_1) + 3) & 0x3f) | (r8_4 << 6)) | ((rdx_2 & 7) << 0x12));
                        
                        if (rcx_7 != 0x110000)
                            goto label_140050113;
                        
                        goto label_1400509a7;
                    }
                    
                    if (((r8_4 | (rdx_2 << 0xc)) - 0x30) <= 9)
                        goto label_140050118;
                }
            }
            else
            {
                while ((rcx_1 - 0x30) <= 9)
                {
                label_140050118:
                    
                    if ((rbx - 1) == r12_1)
                        goto label_1400509a7;
                    
                    rcx_1 = *((r14_1 + r12_1) + 1);
                    
                    if (rcx_1 <= 0xbf)
                    {
                        void* rbx_3 = (rbx - r12_1);
                        sub_14005cd20((r14_1 + r12_1), rbx_3, 1, rbx_3, &data_1400652a0);
                        /* no return */
                    }
                    
                    r12_1 = &r12_1[1];
                    
                    if (rcx_1 < 0)
                        goto label_1400500a5;
                }
            }
            
            if ((r12_1 != 0 && *(r14_1 + r12_1) <= 0xbf))
            {
                sub_14005cd20(r14_1, rbx, nullptr, r12_1, &data_1400652b8);
                /* no return */
            }
            
            char var_a8;
            sub_1400595f0(&var_a8, r14_1, r12_1);
            char var_c0;
            
            if (var_a8 != 0)
            {
                char var_a7;
                var_c0 = var_a7;
                char const (** const var_c8)[0x2f] = &data_1400652d0;
                sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_c0, &data_140065110);
                /* no return */
            }
            
            void* var_a0;
            void* r11_1 = var_a0;
            void* r15_2 = (rbx - r11_1);
            
            if (r11_1 != 0)
            {
                void* rbx_1 = (rbx - r12_1);
                
                if (r11_1 < rbx_1)
                {
                    int64_t rax_4 = (r14_1 + r11_1);
                    
                    if (r12_1[rax_4] <= 0xbf)
                    {
                        sub_14005cd20((r14_1 + r12_1), rbx_1, r11_1, rbx_1, &data_1400652e8);
                        /* no return */
                    }
                    
                    if (r12_1[rax_4] <= 0xbf)
                    {
                        sub_14005cd20((r14_1 + r12_1), rbx_1, nullptr, r11_1, &data_140065300);
                        /* no return */
                    }
                }
                else if (r15_2 != r12_1)
                {
                    sub_14005cd20((r14_1 + r12_1), rbx_1, r11_1, rbx_1, &data_1400652e8);
                    /* no return */
                }
            }
            
            var_44_1 = rdi;
            char* r13_1 = (r14_1 + r12_1);
            rdi = ((r14_1 + r11_1) + r12_1);
            
            if ((((r11_1 != 0 && var_60 == rax) && (*(arg2 + 0x34) & 4) != 0) && *r13_1 == 0x68))
            {
                if ((r11_1 != 1 && *((r14_1 + r12_1) + 1) <= 0xbf))
                {
                    sub_14005cd20((r14_1 + r12_1), r11_1, 1, r11_1, &data_140065270);
                    /* no return */
                }
                
                char* rax_10 = ((r14_1 + r12_1) + 1);
                
                while (true)
                {
                    if (rdi == rax_10)
                        goto label_14005097b;
                    
                    char r9_4 = *rax_10;
                    uint32_t rcx_12 = r9_4;
                    
                    if (rcx_12 < 0)
                    {
                        int32_t rdx_11 = (rcx_12 & 0x1f);
                        int32_t r10_2 = (rax_10[1] & 0x3f);
                        
                        if (rcx_12 <= 0xdf)
                        {
                            rax_10 = &rax_10[2];
                            rcx_12 = ((rdx_11 << 6) | r10_2);
                            
                            if ((rcx_12 - 0x30) < 0xa)
                                continue;
                        }
                        else
                        {
                            int32_t r8_10 = ((rax_10[2] & 0x3f) | (r10_2 << 6));
                            
                            if (r9_4 < 0xf0)
                            {
                                rax_10 = &rax_10[3];
                                rcx_12 = (r8_10 | (rdx_11 << 0xc));
                                
                                if ((rcx_12 - 0x30) < 0xa)
                                    continue;
                            }
                            else
                            {
                                rcx_12 = (((rax_10[3] & 0x3f) | (r8_10 << 6)) | ((rdx_11 & 7) << 0x12));
                                
                                if (rcx_12 == 0x110000)
                                    goto label_14005097b;
                                
                                rax_10 = &rax_10[4];
                                
                                if ((rcx_12 - 0x30) < 0xa)
                                    continue;
                            }
                        }
                    }
                    else
                    {
                        rax_10 = &rax_10[1];
                        
                        if ((rcx_12 - 0x30) < 0xa)
                            continue;
                    }
                    
                    if (((rcx_12 | 0x20) - 0x61) >= 6)
                        break;
                }
            }
            
            char rax_11;
            
            if (rsi_1 != 0)
                rax_11 = sub_1400577c0(arg2, &data_140065318, 2);
            
            if ((rsi_1 == 0 || rax_11 == 0))
            {
                if ((r11_1 >= 2 && *r13_1 == 0x245f))
                {
                    if (*((r14_1 + r12_1) + 1) <= 0xbf)
                    {
                        sub_14005cd20((r14_1 + r12_1), r11_1, 1, r11_1, &data_140065320);
                        /* no return */
                    }
                    
                    r13_1 = ((r14_1 + r12_1) + 1);
                    r11_1 -= 1;
                }
                
                void* var_78_1 = (r15_2 - r12_1);
                bool cond:1_1;
                
                while (true)
                {
                    char* r14_2 = r13_1;
                    void* r12_3;
                    char* r14_3;
                    
                    if (r11_1 == 0)
                    {
                    label_1400503c4:
                        void* r9_5 = nullptr;
                        char* rcx_20 = r14_2;
                        void* rsi_3;
                        uint32_t i;
                        
                        do
                        {
                            if (rcx_20 == (r14_2 + r11_1))
                                goto label_14005004f;
                            
                            rsi_3 = r9_5;
                            char i_1 = *rcx_20;
                            i = i_1;
                            void* r8_13;
                            
                            if (i < 0)
                            {
                                int32_t r9_7 = (i & 0x1f);
                                int32_t r10_5 = (rcx_20[1] & 0x3f);
                                
                                if (i <= 0xdf)
                                {
                                    r8_13 = &rcx_20[2];
                                    r9_5 = ((r9_7 << 6) | r10_5);
                                    i = r9_5;
                                    
                                    if (i == 0x24)
                                        break;
                                }
                                else
                                {
                                    int32_t rdx_22 = ((rcx_20[2] & 0x3f) | (r10_5 << 6));
                                    
                                    if (i_1 < 0xf0)
                                    {
                                        r8_13 = &rcx_20[3];
                                        r9_5 = (r9_7 << 0xc);
                                        i = (rdx_22 | r9_5);
                                        
                                        if (i == 0x24)
                                            break;
                                    }
                                    else
                                    {
                                        r8_13 = &rcx_20[4];
                                        r9_5 = ((r9_7 & 7) << 0x12);
                                        i = (((rcx_20[3] & 0x3f) | (rdx_22 << 6)) | r9_5);
                                        
                                        if (i == 0x24)
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                r8_13 = &rcx_20[1];
                                
                                if (i == 0x24)
                                    break;
                            }
                            
                            r9_5 = ((rsi_3 - rcx_20) + r8_13);
                            rcx_20 = r8_13;
                        } while (i != 0x2e);
                        void* rax_17;
                        
                        if (rsi_3 == 0)
                        {
                            if (sub_1400577c0(arg2, r14_2, rsi_3, r9_5) != 0)
                                goto label_140050984;
                            
                            rax_17 = nullptr;
                        }
                        else
                        {
                            if (rsi_3 >= r11_1)
                            {
                                if ((rsi_3 != r11_1 || r14_2 == 0))
                                {
                                    sub_14005cd20(r14_2, r11_1, nullptr, rsi_3, &data_140065338);
                                    /* no return */
                                }
                            }
                            else if (*(r14_2 + rsi_3) <= 0xbf)
                            {
                                sub_14005cd20(r14_2, r11_1, nullptr, rsi_3, &data_140065338);
                                /* no return */
                            }
                            
                            if (sub_1400577c0(arg2, r14_2, rsi_3) != 0)
                                goto label_140050984;
                            
                            if (rsi_3 >= r11_1)
                            {
                                rax_17 = r11_1;
                                
                                if (rsi_3 != r11_1)
                                {
                                    sub_14005cd20(r14_2, r11_1, rsi_3, r11_1, &data_140065350);
                                    /* no return */
                                }
                            }
                            else
                            {
                                if (*(r14_2 + rsi_3) <= 0xbf)
                                {
                                    sub_14005cd20(r14_2, r11_1, rsi_3, r11_1, &data_140065350);
                                    /* no return */
                                }
                                
                                rax_17 = rsi_3;
                            }
                        }
                        
                        r12_3 = (r11_1 - rax_17);
                        r14_3 = (r14_2 + rax_17);
                        goto label_140050970;
                    }
                    
                    uint32_t rax_13 = *r14_2;
                    
                    if (rax_13 == 0x24)
                    {
                        if ((r11_1 != 1 && r14_2[1] <= 0xbf))
                        {
                            sub_14005cd20(r14_2, r11_1, 1, r11_1, &data_140065368);
                            /* no return */
                        }
                        
                        var_a8 = &r14_2[1];
                        var_a0 = (r11_1 - 1);
                        int64_t var_98_1 = 0;
                        void* var_90_1 = (r11_1 - 1);
                        char var_80_1 = 1;
                        int64_t var_88_1 = 0x2400000024;
                        sub_14004fe30(&var_c0, &var_a8);
                        
                        if (var_c0 == 0)
                        {
                        label_14005004f:
                            cond:1_1 = sub_1400577c0(arg2, r14_2, r11_1) != 0;
                            rbx = var_78_1;
                            break;
                        }
                        
                        void* var_b8;
                        
                        if (var_b8 == -1)
                        {
                            sub_14005cce0();
                            /* no return */
                        }
                        
                        if ((r11_1 != 1 && r14_2[1] <= 0xbf))
                        {
                            sub_14005cd20(r14_2, r11_1, 1, (var_b8 + 1), &data_140065380);
                            /* no return */
                        }
                        
                        void* var_58_1;
                        char* rax_24;
                        void* r13_3;
                        
                        if ((var_b8 + 1) >= r11_1)
                        {
                            if ((var_b8 + 1) != r11_1)
                            {
                                sub_14005cd20(r14_2, r11_1, 1, (var_b8 + 1), &data_140065380);
                                /* no return */
                            }
                            
                            var_58_1 = r11_1;
                            rax_24 = r14_2;
                            r13_3 = (var_b8 + 2);
                            
                            if (var_b8 != -2)
                                goto label_14005064a;
                            
                            if (r14_2[1] != 0x75)
                                goto label_14005004f;
                            
                        label_140050690:
                            
                            if (var_b8 >= 2)
                                r13_1 = rax_24;
                            
                            if ((var_b8 < 2 || r14_2[2] <= 0xbf))
                            {
                                sub_14005cd20(&r14_2[1], var_b8, 1, var_b8, &data_1400653b8);
                                /* no return */
                            }
                            
                        label_140050780:
                            char* rax_28 = &r14_2[2];
                            void* r15_3;
                            
                            while (true)
                            {
                                r15_3 = 1;
                                
                                if (rax_28 == (&r14_2[1] + var_b8))
                                    break;
                                
                                char r11_2 = *rax_28;
                                uint32_t r8_19 = r11_2;
                                
                                if (r8_19 < 0)
                                {
                                    int32_t r9_15 = (r8_19 & 0x1f);
                                    int32_t rdi_3 = (rax_28[1] & 0x3f);
                                    
                                    if (r8_19 <= 0xdf)
                                    {
                                        rax_28 = &rax_28[2];
                                        r8_19 = ((r9_15 << 6) | rdi_3);
                                        
                                        if ((r8_19 - 0x30) < 0xa)
                                            continue;
                                    }
                                    else
                                    {
                                        int32_t r10_13 = ((rax_28[2] & 0x3f) | (rdi_3 << 6));
                                        
                                        if (r11_2 < 0xf0)
                                        {
                                            rax_28 = &rax_28[3];
                                            r8_19 = (r10_13 | (r9_15 << 0xc));
                                            
                                            if ((r8_19 - 0x30) < 0xa)
                                                continue;
                                        }
                                        else
                                        {
                                            r8_19 = (((rax_28[3] & 0x3f) | (r10_13 << 6)) | ((r9_15 & 7) << 0x12));
                                            
                                            if (r8_19 == 0x110000)
                                                break;
                                            
                                            rax_28 = &rax_28[4];
                                            
                                            if ((r8_19 - 0x30) < 0xa)
                                                continue;
                                        }
                                    }
                                }
                                else
                                {
                                    rax_28 = &rax_28[1];
                                    
                                    if ((r8_19 - 0x30) < 0xa)
                                        continue;
                                }
                                
                                if ((r8_19 - 0x61) >= 6)
                                {
                                    r15_3 = nullptr;
                                    break;
                                }
                            }
                            
                            int64_t rax_29 = sub_1400596d0(&r14_2[2], (var_b8 - 1), 0x10);
                            
                            if ((rax_29 & 1) != 0)
                                goto label_14005004f;
                            
                            uint32_t rax_30 = (rax_29 >> 0x20);
                            
                            if (((rax_30 ^ 0xd800) - 0x110000) < 0xffef0800)
                                rax_30 = 0x110000;
                            
                            r15_3 ^= 1;
                            r15_3 |= rax_30 == 0x110000;
                            
                            if (r15_3 != 0)
                                goto label_14005004f;
                            
                            uint32_t var_64 = rax_30;
                            
                            if (sub_14005a400(rax_30) != 0)
                                goto label_14005004f;
                            
                            r11_1 = var_58_1;
                            
                            if (sub_140057f80(&var_64, arg2) == 0)
                                continue;
                        }
                        else
                        {
                            if (*(r14_2 + (var_b8 + 1)) < 0xc0)
                            {
                                sub_14005cd20(r14_2, r11_1, 1, (var_b8 + 1), &data_140065380);
                                /* no return */
                            }
                            
                            r13_3 = (var_b8 + 2);
                        label_14005064a:
                            
                            if (r11_1 <= r13_3)
                            {
                                if (r11_1 != r13_3)
                                {
                                    sub_14005cd20(r14_2, r11_1, r13_3, r11_1, &data_140065398);
                                    /* no return */
                                }
                            }
                            else if (*(r14_2 + r13_3) <= 0xbf)
                            {
                                sub_14005cd20(r14_2, r11_1, r13_3, r11_1, &data_140065398);
                                /* no return */
                            }
                            
                            r13_1 = (r13_3 + r14_2);
                            var_58_1 = (r11_1 - r13_3);
                            char const* const rax_27;
                            
                            if (var_b8 != 1)
                            {
                                if (var_b8 != 2)
                                {
                                    rax_24 = r13_1;
                                    
                                    if ((var_b8 == 0 || r14_2[1] != 0x75))
                                        goto label_14005004f;
                                    
                                    goto label_140050690;
                                }
                                
                                rax_27 = &data_1400653d0[7];
                                
                                if (*(r14_2 + 1) == 0x5053)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[6];
                                
                                if (*(r14_2 + 1) == 0x5042)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[5];
                                
                                if (*(r14_2 + 1) == 0x4652)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[4];
                                
                                if (*(r14_2 + 1) == 0x544c)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[3];
                                
                                if (*(r14_2 + 1) == 0x5447)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[2];
                                
                                if (*(r14_2 + 1) == 0x504c)
                                    goto label_14005075c;
                                
                                rax_27 = &data_1400653d0[1];
                                
                                if (*(r14_2 + 1) == 0x5052)
                                    goto label_14005075c;
                                
                                rax_24 = r13_1;
                                
                                if (r14_2[1] == 0x75)
                                    goto label_140050690;
                                
                                goto label_14005004f;
                            }
                            
                            rax_27 = &data_1400653d0;
                            
                            if (r14_2[1] != 0x43)
                            {
                                if (r14_2[1] != 0x75)
                                    goto label_14005004f;
                                
                                goto label_140050780;
                            }
                            
                        label_14005075c:
                            r11_1 = var_58_1;
                            
                            if (sub_1400577c0(arg2, rax_27, 1) == 0)
                                continue;
                        }
                        goto label_140050984;
                    }
                    
                    if (rax_13 != 0x2e)
                        goto label_1400503c4;
                    
                    if (r11_1 != 1)
                    {
                        if (r14_2[1] <= 0xbf)
                        {
                            sub_14005cd20(r14_2, r11_1, 1, r11_1, &data_1400653d8);
                            /* no return */
                        }
                        
                        char rdx_28 = r14_2[1];
                        uint32_t rax_18 = rdx_28;
                        
                        if (rax_18 < 0)
                        {
                            int32_t rcx_25 = (rax_18 & 0x1f);
                            int32_t r8_17 = (r14_2[2] & 0x3f);
                            
                            if (rax_18 > 0xdf)
                            {
                                int32_t rax_21 = ((r14_2[3] & 0x3f) | (r8_17 << 6));
                                
                                if (rdx_28 >= 0xf0)
                                {
                                    if ((((r14_2[4] & 0x3f) | (rax_21 << 6)) | ((rcx_25 & 7) << 0x12)) == 0x2e)
                                        goto label_140050917;
                                    
                                    goto label_140050956;
                                }
                                
                                if ((rax_21 | (rcx_25 << 0xc)) == 0x2e)
                                    goto label_140050917;
                                
                                goto label_140050956;
                            }
                            
                            rax_18 = ((rcx_25 << 6) | r8_17);
                        }
                        
                        if (rax_18 != 0x2e)
                        {
                        label_140050956:
                            
                            if (sub_1400577c0(arg2, (&data_140065408), 1) != 0)
                                goto label_140050984;
                            
                            if (r14_2[1] >= 0xc0)
                                goto label_14005096a;
                            
                            sub_14005cd20(r14_2, r11_1, 1, r11_1, &data_140065410);
                            /* no return */
                        }
                        
                    label_140050917:
                        
                        if (sub_1400577c0(arg2, (&data_140065318), 2) != 0)
                            goto label_140050984;
                        
                        if ((r11_1 >= 3 && r14_2[2] < 0xc0))
                        {
                            sub_14005cd20(r14_2, r11_1, 2, r11_1, &data_1400653f0);
                            /* no return */
                        }
                        
                        r12_3 = (r11_1 - 2);
                        r14_3 = &r14_2[2];
                        goto label_140050970;
                    }
                    
                    if (sub_1400577c0(arg2, (&data_140065408), 1) != 0)
                    {
                    label_140050984:
                        int32_t rax_14;
                        rax_14 = 1;
                        return rax_14;
                    }
                    
                label_14005096a:
                    r12_3 = (r11_1 - 1);
                    r14_3 = &r14_2[1];
                label_140050970:
                    r11_1 = r12_3;
                    r13_1 = r14_3;
                }
                
                if (!(cond:1_1))
                    continue;
            }
        }
        
        return var_44_1;
    }
    
    goto label_140050118;
}

uint64_t sub_140050b80(int64_t* arg1, int64_t* arg2)
{
    void var_298;
    memset(&var_298, 0, 0x200);
    void* rcx_1 = arg1[3];
    char const* const rdx_4;
    int64_t r8_1;
    
    if (rcx_1 == 0)
    {
        rdx_4 = *arg1;
        r8_1 = arg1[1];
    }
    else
    {
        char* rax_1 = arg1[2];
        char r8 = *rax_1;
        char* rcx_2 = *arg1;
        void* rax_2 = arg1[1];
        char* var_90_1 = rcx_2;
        uint64_t r13_1;
        
        if (rax_2 == 0)
        {
            r13_1 = 0;
        label_140050d21:
            char* rsi_4 = rax_1;
            void* rax_6 = (rcx_1 + rsi_4);
            void* i_3 = ((r13_1 << 2) + 4);
            int64_t var_68_1 = !(r13_1);
            int64_t var_50_1 = (r13_1 + 1);
            void var_238;
            void* r12_1 = ((&var_238 + (r13_1 << 2)) - 0x6c);
            int64_t var_48_1 = 0x2bc;
            int64_t r14_1 = 0x48;
            int64_t rbx_1 = 0x80;
            int64_t r9_9 = 0;
            int32_t rax_64;
            
            while (true)
            {
                int64_t rax_11 = 0;
                
                if (0x24 >= r14_1)
                    rax_11 = (0x24 - r14_1);
                
                int64_t rax_12 = (rax_11 + 0);
                
                if (rax_12 >= 0x1a)
                    rax_12 = 0x1a;
                
                char rcx_6 = (r8 - 0x61);
                
                if (rcx_6 >= 0x1a)
                {
                    if ((r8 - 0x30) > 9)
                        goto label_1400510d3;
                    
                    rcx_6 = (r8 - 0x16);
                }
                
                rsi_4 = &rsi_4[1];
                uint64_t rcx_8 = rcx_6;
                
                if (rax_12 <= rcx_8)
                {
                    int64_t r8_3 = (0x24 - rax_12);
                    int64_t r15_2 = 0x48;
                    
                    while (true)
                    {
                        int64_t r11_3 = 0;
                        
                        if (r15_2 >= r14_1)
                            r11_3 = (r15_2 - r14_1);
                        
                        int64_t r11_4 = (r11_3 + 0);
                        
                        if (r11_4 >= 0x1a)
                            r11_4 = 0x1a;
                        
                        if (rsi_4 == rax_6)
                            goto label_1400510d3;
                        
                        char rax_20 = *rsi_4;
                        char rdx_8 = (rax_20 - 0x61);
                        
                        if (rdx_8 >= 0x1a)
                        {
                            if ((rax_20 - 0x30) > 9)
                                goto label_1400510d3;
                            
                            rdx_8 = (rax_20 - 0x16);
                        }
                        
                        uint64_t r10_8 = rdx_8;
                        int64_t rax_22;
                        int64_t rdx_10;
                        rdx_10 = HIGHQ((r10_8 * r8_3));
                        rax_22 = LOWQ((r10_8 * r8_3));
                        
                        if (((r10_8 * r8_3) >> 0x40) != {0})
                            goto label_1400510d3;
                        
                        uint64_t temp13_1 = rcx_8;
                        rcx_8 += rax_22;
                        
                        if ((temp13_1 + rax_22) < temp13_1)
                            goto label_1400510d3;
                        
                        rsi_4 = &rsi_4[1];
                        
                        if (r11_4 > r10_8)
                            break;
                        
                        r15_2 += 0x24;
                        int64_t rax_24;
                        int64_t rdx_12;
                        rdx_12 = HIGHQ((r8_3 * (0x24 - r11_4)));
                        rax_24 = LOWQ((r8_3 * (0x24 - r11_4)));
                        bool o_2 = ((r8_3 * (0x24 - r11_4)) >> 0x40) != {0};
                        r8_3 = rax_24;
                        
                        if (o_2)
                            goto label_1400510d3;
                    }
                }
                
                int64_t r9_10 = (r9_9 + rcx_8);
                
                if ((r9_9 + rcx_8) < r9_9)
                    goto label_1400510d3;
                
                uint64_t r10_7;
                
                if (((r9_10 | (r13_1 + 1)) >> 0x20) == 0)
                {
                    int32_t rax_25 = r9_10;
                    int32_t temp2_2 = (r13_1 + 1);
                    uint64_t rax_26 = (COMBINE(0, rax_25) / temp2_2);
                    r10_7 = (COMBINE(0, rax_25) % temp2_2);
                    int64_t temp10_1 = rbx_1;
                    rbx_1 += rax_26;
                    
                    if ((temp10_1 + rax_26) < temp10_1)
                        goto label_1400510d3;
                }
                else
                {
                    int64_t rdx_6 = 0;
                    int64_t rax_17 = (COMBINE(rdx_6, r9_10) / (r13_1 + 1));
                    r10_7 = (COMBINE(rdx_6, r9_10) % (r13_1 + 1));
                    int64_t temp11_1 = rbx_1;
                    rbx_1 += rax_17;
                    
                    if ((temp11_1 + rax_17) < temp11_1)
                        goto label_1400510d3;
                }
                
                if ((rbx_1 >> 0x20) != 0)
                    goto label_1400510d3;
                
                if (((rbx_1 ^ 0xd800) - 0x800) > 0x10f7ff)
                    goto label_1400510d3;
                
                if (r13_1 > 0x7f)
                    goto label_1400510d3;
                
                uint64_t r8_5 = (r13_1 - r10_7);
                
                if (r13_1 <= r10_7)
                {
                    if (r10_7 >= 0x80)
                    {
                        sub_14005c830(r10_7, 0x80);
                        /* no return */
                    }
                }
                else
                {
                    uint64_t rdx_14;
                    
                    if (r8_5 >= 8)
                    {
                        uint64_t rax_36;
                        
                        if (((r9_10 | var_50_1) >> 0x20) == 0)
                            rax_36 = (COMBINE(0, r9_10) / var_50_1);
                        else
                            rax_36 = (COMBINE(0, r9_10) / var_50_1);
                        
                        int64_t r11_7 = (r8_5 & 0xfffffffffffffff8);
                        rdx_14 = (r13_1 - r11_7);
                        int64_t i = 0;
                        
                        do
                        {
                            int128_t zmm0_1 = *((r12_1 + (i << 2)) - 0x14);
                            *(r12_1 + (i << 2)) = *((r12_1 + (i << 2)) - 4);
                            *((r12_1 + (i << 2)) - 0x10) = zmm0_1;
                            i -= 8;
                        } while (-(((r13_1 - (r9_10 + (rax_36 * var_68_1))) & 0xfffffffffffffff8)) != i);
                        
                        if (r8_5 != r11_7)
                            goto label_140050fb2;
                    }
                    else
                    {
                        rdx_14 = r13_1;
                    label_140050fb2:
                        uint64_t rax_40;
                        
                        do
                        {
                            void var_29c;
                            *(&var_298 + (rdx_14 << 2)) = *(&var_29c + (rdx_14 << 2));
                            rax_40 = (rdx_14 - 1);
                            rdx_14 = rax_40;
                        } while (rax_40 > r10_7);
                    }
                }
                
                *(&var_298 + (r10_7 << 2)) = rbx_1;
                
                if (rsi_4 == rax_6)
                {
                    void* rbx_2 = &var_298;
                    void* i_2 = i_3;
                    void* i_1;
                    
                    do
                    {
                        int32_t var_54 = *rbx_2;
                        rax_64 = sub_140057f80(&var_54, arg2);
                        
                        if (rax_64 != 0)
                            break;
                        
                        rbx_2 += 4;
                        i_1 = i_2;
                        i_2 -= 4;
                    } while (i_1 != 4);
                    break;
                }
                
                r8 = *rsi_4;
                uint64_t rcx_9;
                
                if ((rcx_8 >> 0x20) == 0)
                    rcx_9 = (COMBINE(0, rcx_8) / var_48_1);
                else
                    rcx_9 = (COMBINE(0, rcx_8) / var_48_1);
                
                uint64_t rdx_24;
                int64_t r9_12;
                
                if (((rcx_9 | (r13_1 + 1)) >> 0x20) == 0)
                {
                    rdx_24 = ((COMBINE(0, rcx_9) / (r13_1 + 1)) + rcx_9);
                    
                    if (rdx_24 >= 0x1c8)
                    {
                    label_140051024:
                        uint64_t rcx_10 = rdx_24;
                        r9_12 = 0;
                        bool cond:3_1;
                        
                        do
                        {
                            rdx_24 = (rcx_10 / 0x23);
                            r9_12 += 0x24;
                            cond:3_1 = rcx_10 > 0x3e57;
                            rcx_10 = rdx_24;
                        } while (cond:3_1);
                    }
                    else
                        r9_12 = 0;
                }
                else
                {
                    rdx_24 = ((COMBINE(0, rcx_9) / (r13_1 + 1)) + rcx_9);
                    
                    if (rdx_24 >= 0x1c8)
                        goto label_140051024;
                    
                    r9_12 = 0;
                }
                
                uint16_t rax_57 = ((rdx_24 << 2) * 9);
                int64_t rdx_28;
                rdx_28 = (COMBINE(0, rax_57) % (rdx_24 + 0x26));
                r14_1 = ((COMBINE(0, rax_57) / (rdx_24 + 0x26)) + r9_12);
                i_3 += 4;
                var_68_1 -= 1;
                var_50_1 += 1;
                r12_1 += 4;
                var_48_1 = 2;
                r13_1 += 1;
                r9_9 = (r10_7 + 1);
            }
            
            return rax_64;
        }
        
        void* rax_3 = (rax_2 + rcx_2);
        r13_1 = 0;
        
        while (true)
        {
            char r11_1 = *rcx_2;
            uint32_t rdx = r11_1;
            
            if (rdx < 0)
            {
                int32_t r9_2 = (rdx & 0x1f);
                int32_t rsi_2 = (rcx_2[1] & 0x3f);
                
                if (rdx <= 0xdf)
                {
                    rcx_2 = &rcx_2[2];
                    rdx = ((r9_2 << 6) | rsi_2);
                    
                    if (r13_1 != 0x80)
                        goto label_140050ce0;
                    
                    goto label_1400510d3;
                }
                
                int32_t r10_3 = ((rcx_2[2] & 0x3f) | (rsi_2 << 6));
                
                if (r11_1 < 0xf0)
                {
                    rcx_2 = &rcx_2[3];
                    rdx = (r10_3 | (r9_2 << 0xc));
                    
                    if (r13_1 == 0x80)
                        goto label_1400510d3;
                    
                    goto label_140050ce0;
                }
                
                rdx = (((rcx_2[3] & 0x3f) | (r10_3 << 6)) | ((r9_2 & 7) << 0x12));
                
                if (rdx == 0x110000)
                    goto label_140050d21;
                
                rcx_2 = &rcx_2[4];
                
                if (r13_1 != 0x80)
                    goto label_140050ce0;
                
                goto label_1400510d3;
            }
            
            rcx_2 = &rcx_2[1];
            
            if (r13_1 == 0x80)
            {
            label_1400510d3:
                r13_1 = 1;
                
                if (sub_1400577c0(arg2, "punycode{-}0", 9) != 0)
                    return r13_1;
                
                if (rax_2 != 0)
                {
                    if (sub_1400577c0(arg2, var_90_1, rax_2) != 0)
                        return r13_1;
                    
                    if (sub_1400577c0(arg2, "-}0", 1) != 0)
                        return r13_1;
                }
                
                if (sub_1400577c0(arg2, rax_1, rcx_1) != 0)
                    return r13_1;
                
                rdx_4 = "}0";
                r8_1 = 1;
                break;
            }
            
        label_140050ce0:
            *(&var_298 + (r13_1 << 2)) = rdx;
            r13_1 += 1;
            
            if (rcx_2 == rax_3)
                goto label_140050d21;
        }
    }
    
    /* tailcall */
    return sub_1400577c0(arg2, rdx_4, r8_1);
}

int64_t sub_1400511c0(int64_t arg1, void* arg2)
{
    void var_a8;
    sub_140058a40(&var_a8, arg1, arg2, "0", 1);
    int64_t i;
    
    do
    {
        int64_t i_2;
        sub_14004fa40(&i_2, &var_a8);
        i = i_2;
    } while (i == 0);
    
    void* rcx_2;
    
    if (i != 1)
    {
        rcx_2 = arg2;
        
        if ((arg2 - rcx_2) > 0x10)
            return 0;
    }
    else
    {
        void* var_38;
        rcx_2 = var_38;
        
        if ((arg2 - rcx_2) > 0x10)
            return 0;
    }
    
    if (arg2 != rcx_2)
    {
        char* i_1 = (rcx_2 + arg1);
        int64_t rdx_3 = 0;
        
        do
        {
            char r11_1 = *i_1;
            uint32_t r9_3 = r11_1;
            int32_t r10_1;
            
            if (r9_3 < 0)
            {
                int32_t r10_3 = (r9_3 & 0x1f);
                int32_t rdi_2 = (i_1[1] & 0x3f);
                
                if (r9_3 <= 0xdf)
                {
                    i_1 = &i_1[2];
                    r9_3 = ((r10_3 << 6) | rdi_2);
                    r10_1 = (r9_3 - 0x30);
                    
                    if (r10_1 >= 0xa)
                        goto label_140051368;
                }
                else
                {
                    int32_t r9_6 = ((i_1[2] & 0x3f) | (rdi_2 << 6));
                    
                    if (r11_1 < 0xf0)
                    {
                        i_1 = &i_1[3];
                        r9_3 = (r9_6 | (r10_3 << 0xc));
                        r10_1 = (r9_3 - 0x30);
                        
                        if (r10_1 >= 0xa)
                            goto label_140051368;
                    }
                    else
                    {
                        uint32_t r11_2 = i_1[3];
                        i_1 = &i_1[4];
                        r9_3 = (((r11_2 & 0x3f) | (r9_6 << 6)) | ((r10_3 & 7) << 0x12));
                        r10_1 = (r9_3 - 0x30);
                        
                        if (r10_1 >= 0xa)
                            goto label_140051368;
                    }
                }
            }
            else
            {
                i_1 = &i_1[1];
                r10_1 = (r9_3 - 0x30);
                
                if (r10_1 >= 0xa)
                {
                label_140051368:
                    int32_t r9_10 = ((r9_3 | 0x20) - 0x57);
                    
                    if (((r9_3 | 0x20) - 0x61) >= 0xfffffff6)
                        r9_10 = -1;
                    
                    r10_1 = r9_10;
                    
                    if (r9_10 >= 0x10)
                    {
                        sub_14005c680();
                        /* no return */
                    }
                }
            }
            
            rdx_3 = (r10_1 | (rdx_3 << 4));
        } while (i_1 != (arg2 + arg1));
    }
    
    return 1;
}

char* sub_140051390(char** arg1, int64_t* arg2)
{
    void* r8 = arg2[2];
    char* result = *arg2;
    void* rdx = arg2[1];
    int64_t r11 = -1;
    void* r9 = r8;
    
    while (true)
    {
        if (r9 < rdx)
        {
            char rsi_1 = *(result + r9);
            r9 += 1;
            arg2[2] = r9;
            r11 += 1;
            
            if ((rsi_1 - 0x30) < 0xa)
                continue;
            else if ((rsi_1 - 0x61) < 6)
                continue;
            else if (rsi_1 == 0x5f)
            {
                if (r8 > (r9 - 1))
                {
                    sub_14005cd20(result, rdx, r8, (r9 - 1), &data_1400656b0);
                    /* no return */
                }
                
                if (r8 != 0)
                {
                    if (r8 >= rdx)
                    {
                        if (r8 != rdx)
                        {
                            sub_14005cd20(result, rdx, r8, (r9 - 1), &data_1400656b0);
                            /* no return */
                        }
                    }
                    else if (*(result + r8) <= 0xbf)
                    {
                        sub_14005cd20(result, rdx, r8, (r9 - 1), &data_1400656b0);
                        /* no return */
                    }
                }
                
                result += r8;
                *arg1 = result;
                arg1[1] = r11;
                break;
            }
        }
        
        arg1[1] = 0;
        *arg1 = nullptr;
        break;
    }
    
    return result;
}

int64_t sub_140051440(char* arg1, int64_t* arg2)
{
    char* r10 = *arg2;
    int64_t r11 = arg2[1];
    int64_t r9 = arg2[2];
    int64_t result;
    
    if ((r9 >= r11 || r10[r9] != 0x5f))
    {
        result = 0;
        
        while (true)
        {
            if (r9 < r11)
            {
                if (r10[r9] == 0x5f)
                {
                    arg2[2] = (r9 + 1);
                    
                    if (result != -1)
                    {
                        *(arg1 + 8) = (result + 1);
                        result = 0;
                        break;
                    }
                }
                else
                {
                    char rdx = r10[r9];
                    char rdi_1 = (rdx - 0x30);
                    
                    if (rdi_1 < 0xa)
                        goto label_1400514be;
                    
                    if ((rdx - 0x61) < 0x1a)
                    {
                        rdx -= 0x57;
                    label_1400514bc:
                        rdi_1 = rdx;
                    label_1400514be:
                        r9 += 1;
                        arg2[2] = r9;
                        int64_t result_1 = result;
                        int64_t rdx_1;
                        rdx_1 = HIGHQ((result * 0x3e));
                        result = LOWQ((result * 0x3e));
                        
                        if (((result_1 * 0x3e) >> 0x40) == {0})
                        {
                            uint64_t rdx_2 = rdi_1;
                            int64_t result_2 = result;
                            result += rdx_2;
                            
                            if ((result_2 + rdx_2) >= result_2)
                                continue;
                        }
                    }
                    else if ((rdx - 0x41) < 0x1a)
                    {
                        rdx -= 0x1d;
                        goto label_1400514bc;
                    }
                }
            }
            
            arg1[1] = 0;
            result = 1;
            break;
        }
    }
    else
    {
        arg2[2] = (r9 + 1);
        *(arg1 + 8) = 0;
        result = 0;
    }
    
    *arg1 = result;
    return result;
}

int64_t sub_140051500(char* arg1, int64_t* arg2)
{
    int64_t r9 = arg2[1];
    int64_t rax = arg2[2];
    char* r10_1;
    
    if (rax < r9)
        r10_1 = *arg2;
    
    int64_t result;
    
    if ((rax >= r9 || r10_1[rax] != 0x73))
        *(arg1 + 8) = 0;
    else
    {
        int64_t r11_1 = (rax + 1);
        arg2[2] = r11_1;
        
        if ((r11_1 >= r9 || r10_1[r11_1] != 0x5f))
        {
            result = 0;
            
            while (true)
            {
                if (r11_1 >= r9)
                    goto label_1400515d7;
                
                char rdx = r10_1[r11_1];
                
                if (rdx == 0x5f)
                {
                    arg2[2] = (r11_1 + 1);
                    
                    if (result != -1)
                    {
                        result += 1;
                        
                        if (result != -1)
                            break;
                    }
                    
                label_1400515d7:
                    arg1[1] = 0;
                    result = 1;
                    goto label_14005154d;
                }
                
                char rdi_1 = (rdx - 0x30);
                
                if (rdi_1 >= 0xa)
                {
                    if ((rdx - 0x61) >= 0x1a)
                    {
                        if ((rdx - 0x41) >= 0x1a)
                            goto label_1400515d7;
                        
                        rdx -= 0x1d;
                    }
                    else
                        rdx -= 0x57;
                    
                    rdi_1 = rdx;
                }
                
                r11_1 += 1;
                arg2[2] = r11_1;
                int64_t result_1 = result;
                int64_t rdx_1;
                rdx_1 = HIGHQ((result * 0x3e));
                result = LOWQ((result * 0x3e));
                
                if (((result_1 * 0x3e) >> 0x40) != {0})
                    goto label_1400515d7;
                
                uint64_t rdx_2 = rdi_1;
                int64_t result_2 = result;
                result += rdx_2;
                
                if ((result_2 + rdx_2) < result_2)
                    goto label_1400515d7;
            }
        }
        else
        {
            arg2[2] = (rax + 2);
            result = 0;
        }
        
        *(arg1 + 8) = (result + 1);
    }
    
    result = 0;
label_14005154d:
    *arg1 = result;
    return result;
}

int64_t sub_1400515f0(int64_t* arg1)
{
    int64_t rax = arg1[2];
    
    if (rax >= arg1[1])
        return 1;
    
    uint64_t rdx_1 = *(*arg1 + rax);
    arg1[2] = (rax + 1);
    
    if ((rdx_1 - 0x41) < 0x1a)
        return (0 | (rdx_1 << 0x20));
    
    rdx_1 -= 0x7b;
    bool c = rdx_1 < 0xe6;
    int64_t rax_5;
    rax_5 = c;
    int64_t rdx_3 = 0x11000000000000;
    
    if (c)
        rdx_3 = 0;
    
    return (rax_5 | rdx_3);
}

void sub_140051650(int64_t* arg1, int64_t* arg2)
{
    void* r10 = arg2[1];
    void* r8 = arg2[2];
    int64_t rdi;
    
    if ((r8 < r10 && *(*arg2 + r8) == 0x75))
    {
        r8 += 1;
        arg2[2] = r8;
        rdi = 1;
        
        if (r8 < r10)
            goto label_140051692;
        
        goto label_14005170e;
    }
    
    rdi = 0;
    
    if (r8 >= r10)
    {
    label_14005170e:
        arg1[1] = 0;
        *arg1 = 0;
        return;
    }
    
label_140051692:
    char* rsi_1 = *arg2;
    char* rax;
    rax = (*(rsi_1 + r8) - 0x30);
    
    if (rax > 9)
        goto label_14005170e;
    
    void* r8_1 = (r8 + 1);
    arg2[2] = r8_1;
    
    if (rax == 0)
        rax = nullptr;
    else
    {
        rax = rax;
        
        while (r8_1 < r10)
        {
            char rbx_1 = (*(rsi_1 + r8_1) - 0x30);
            
            if (rbx_1 > 9)
                break;
            
            r8_1 += 1;
            arg2[2] = r8_1;
            char* temp1_1 = rax;
            int64_t rdx;
            rdx = HIGHQ((rax * 0xa));
            rax = LOWQ((rax * 0xa));
            
            if (((temp1_1 * 0xa) >> 0x40) != {0})
                goto label_14005170e;
            
            uint64_t rdx_1 = rbx_1;
            char* temp2_1 = rax;
            rax = &rax[rdx_1];
            
            if (&temp2_1[rdx_1] < temp2_1)
                goto label_14005170e;
        }
    }
    
    if ((r8_1 < r10 && *(rsi_1 + r8_1) == 0x5f))
    {
        r8_1 += 1;
        arg2[2] = r8_1;
    }
    
    void* r9_2 = (r8_1 + rax);
    
    if ((r8_1 + rax) < r8_1)
        goto label_14005170e;
    
    arg2[2] = r9_2;
    
    if (r9_2 > r10)
        goto label_14005170e;
    
    if ((r8_1 < r10 && *(rsi_1 + r8_1) <= 0xbf))
    {
        sub_14005cd20(rsi_1, r10, r8_1, r9_2, &data_1400656c8);
        /* no return */
    }
    
    if ((r9_2 != 0 && (r9_2 < r10 && *(rsi_1 + r9_2) <= 0xbf)))
    {
        sub_14005cd20(rsi_1, r10, r8_1, r9_2, &data_1400656c8);
        /* no return */
    }
    
    char* rsi_2 = (rsi_1 + r8_1);
    
    if (rdi == 0)
    {
        *arg1 = rsi_2;
        arg1[1] = rax;
        arg1[2] = 1;
        arg1[3] = 0;
        return;
    }
    
    char* rdx_2 = (rsi_2 + rax);
    void* r9_3 = nullptr;
    int64_t r8_2 = 0;
    char* rdx_3;
    
    while (true)
    {
        if (rax == -(r8_2))
        {
            rdx_3 = 1;
            break;
        }
        
        int64_t r10_3 = (r8_2 - 1);
        bool cond:0_1 = rdx_2[(r8_2 - 1)] != 0x5f;
        r8_2 = r10_3;
        
        if (!(cond:0_1))
        {
            r9_3 = &rax[r10_3];
            void* r11_1;
            
            if (rax == -(r10_3))
            {
            label_1400517c4:
                
                if (&rax[(r10_3 + 1)] >= rax)
                {
                    r11_1 = rax;
                    
                    if (r10_3 != -1)
                    {
                        sub_14005cd20(rsi_2, rax, &rax[(r10_3 + 1)], rax, &data_1400656f8);
                        /* no return */
                    }
                }
                else
                {
                    if (rdx_2[(r10_3 + 1)] <= 0xbf)
                    {
                        sub_14005cd20(rsi_2, rax, &rax[(r10_3 + 1)], rax, &data_1400656f8);
                        /* no return */
                    }
                    
                    r11_1 = &rax[(r10_3 + 1)];
                }
            }
            else
            {
                if (r9_3 < rax)
                {
                    if (rdx_2[r10_3] > 0xbf)
                        goto label_1400517c4;
                    
                    sub_14005cd20(rsi_2, rax, nullptr, r9_3, &data_1400656e0);
                    /* no return */
                }
                
                if (r10_3 != 0)
                {
                    sub_14005cd20(rsi_2, rax, nullptr, r9_3, &data_1400656e0);
                    /* no return */
                }
                
                if (&rax[r10_3] != -1)
                    goto label_1400517c4;
                
                r11_1 = nullptr;
            }
            
            rax -= r11_1;
            rdx_3 = rsi_2;
            rsi_2 += r11_1;
            break;
        }
    }
    
    if (rax == 0)
        goto label_14005170e;
    
    *arg1 = rdx_3;
    arg1[1] = r9_3;
    arg1[2] = rsi_2;
    arg1[3] = rax;
}

int64_t sub_140051860(int64_t* arg1, int512_t arg2 @ zmm0)
{
    int64_t rdi = arg1[4];
    arg1[4] = 0;
    char result = sub_140052ae0(arg1, 0, arg2);
    
    if (result == 0)
    {
        arg1[4] = rdi;
        return result;
    }
    
    char const (** const var_28)[0x2b] = &data_140065710;
    void var_19;
    sub_14005ca50("`fmt::Error`s should be impossib…", 0x3d, &var_19, &data_1400650a0);
    /* no return */
}

uint64_t sub_1400518c0(int64_t* arg1, char arg2)
{
    char* r10 = *arg1;
    
    if (r10 == 0)
    {
        int64_t* r8_2 = arg1[4];
        
        if (r8_2 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_2);
    }
    else
    {
        int64_t r11_1 = arg1[1];
        int64_t r8 = arg1[2];
        uint64_t result;
        
        if ((r8 >= r11_1 || r10[r8] != 0x5f))
        {
            int64_t rax_2 = 0;
            int64_t rsi_1 = r8;
            
            while (true)
            {
                if (rsi_1 >= r11_1)
                    goto label_1400519f7;
                
                char rdx = r10[rsi_1];
                
                if (rdx == 0x5f)
                {
                    arg1[2] = (rsi_1 + 1);
                    
                    if (rax_2 == -1)
                        goto label_1400519f7;
                    
                    result = (rax_2 + 1);
                    
                    if (result >= (r8 - 1))
                        goto label_1400519f7;
                    
                    break;
                }
                
                char rbx_1 = (rdx - 0x30);
                
                if (rbx_1 >= 0xa)
                {
                    if ((rdx - 0x61) >= 0x1a)
                    {
                        if ((rdx - 0x41) >= 0x1a)
                            goto label_1400519f7;
                        
                        rdx -= 0x1d;
                    }
                    else
                        rdx -= 0x57;
                    
                    rbx_1 = rdx;
                }
                
                rsi_1 += 1;
                arg1[2] = rsi_1;
                int64_t rax_3;
                int64_t rdx_1;
                rdx_1 = HIGHQ((rax_2 * 0x3e));
                rax_3 = LOWQ((rax_2 * 0x3e));
                
                if (((rax_2 * 0x3e) >> 0x40) != {0})
                    goto label_1400519f7;
                
                uint64_t rdx_2 = rbx_1;
                rax_2 = (rax_3 + rdx_2);
                
                if ((rax_3 + rdx_2) < rax_3)
                    goto label_1400519f7;
            }
            
            goto label_1400519bc;
        }
        
        arg1[2] = (r8 + 1);
        result = 0;
        
        if (0 >= (r8 - 1))
        {
        label_1400519f7:
            int64_t* r8_6 = arg1[4];
            char rdx_7;
            
            if (r8_6 != 0)
            {
                rdx_7 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6);
                result = 1;
            }
            
            if ((r8_6 != 0 && rdx_7 != 0))
                return result;
            
            *arg1 = 0;
            arg1[1] = 0;
        }
        else
        {
        label_1400519bc:
            int32_t rdx_5 = (arg1[3] + 1);
            int64_t* r8_5 = arg1[4];
            
            if (rdx_5 <= 0x1f4)
            {
                if (r8_5 != 0)
                {
                    int512_t zmm0;
                    zmm0 = *arg1;
                    int128_t zmm1 = *(arg1 + 0x10);
                    arg1[2] = result;
                    arg1[3] = rdx_5;
                    rdx_5 = arg2 != 0;
                    result = sub_140052ae0(arg1, rdx_5, zmm0);
                    *arg1 = zmm0;
                    *(arg1 + 0x10) = zmm1;
                    return result;
                }
            }
            else if (r8_5 == 0)
            {
                result = 1;
                *arg1 = 0;
                arg1[1] = result;
            }
            else
            {
                result = 1;
                
                if (sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_5) != 0)
                    return result;
                
                *arg1 = 0;
                arg1[1] = result;
            }
        }
    }
    
    return 0;
}

uint64_t sub_140051a80(int64_t* arg1, char arg2)
{
    char* r10 = *arg1;
    
    if (r10 == 0)
    {
        int64_t* r8_2 = arg1[4];
        
        if (r8_2 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_2);
    }
    else
    {
        int64_t r11_1 = arg1[1];
        int64_t r8 = arg1[2];
        uint64_t result;
        
        if ((r8 >= r11_1 || r10[r8] != 0x5f))
        {
            int64_t rax_2 = 0;
            int64_t rsi_1 = r8;
            
            while (true)
            {
                if (rsi_1 >= r11_1)
                    goto label_140051bb7;
                
                char rdx = r10[rsi_1];
                
                if (rdx == 0x5f)
                {
                    arg1[2] = (rsi_1 + 1);
                    
                    if (rax_2 == -1)
                        goto label_140051bb7;
                    
                    result = (rax_2 + 1);
                    
                    if (result >= (r8 - 1))
                        goto label_140051bb7;
                    
                    break;
                }
                
                char rbx_1 = (rdx - 0x30);
                
                if (rbx_1 >= 0xa)
                {
                    if ((rdx - 0x61) >= 0x1a)
                    {
                        if ((rdx - 0x41) >= 0x1a)
                            goto label_140051bb7;
                        
                        rdx -= 0x1d;
                    }
                    else
                        rdx -= 0x57;
                    
                    rbx_1 = rdx;
                }
                
                rsi_1 += 1;
                arg1[2] = rsi_1;
                int64_t rax_3;
                int64_t rdx_1;
                rdx_1 = HIGHQ((rax_2 * 0x3e));
                rax_3 = LOWQ((rax_2 * 0x3e));
                
                if (((rax_2 * 0x3e) >> 0x40) != {0})
                    goto label_140051bb7;
                
                uint64_t rdx_2 = rbx_1;
                rax_2 = (rax_3 + rdx_2);
                
                if ((rax_3 + rdx_2) < rax_3)
                    goto label_140051bb7;
            }
            
            goto label_140051b7c;
        }
        
        arg1[2] = (r8 + 1);
        result = 0;
        
        if (0 >= (r8 - 1))
        {
        label_140051bb7:
            int64_t* r8_6 = arg1[4];
            char rdx_7;
            
            if (r8_6 != 0)
            {
                rdx_7 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6);
                result = 1;
            }
            
            if ((r8_6 != 0 && rdx_7 != 0))
                return result;
            
            *arg1 = 0;
            arg1[1] = 0;
        }
        else
        {
        label_140051b7c:
            int32_t rdx_5 = (arg1[3] + 1);
            int64_t* r8_5 = arg1[4];
            
            if (rdx_5 <= 0x1f4)
            {
                if (r8_5 != 0)
                {
                    int512_t zmm0;
                    zmm0 = *arg1;
                    int128_t zmm1 = *(arg1 + 0x10);
                    arg1[2] = result;
                    arg1[3] = rdx_5;
                    rdx_5 = arg2 != 0;
                    result = sub_140054130(arg1, rdx_5, zmm0);
                    *arg1 = zmm0;
                    *(arg1 + 0x10) = zmm1;
                    return result;
                }
            }
            else if (r8_5 == 0)
            {
                result = 1;
                *arg1 = 0;
                arg1[1] = result;
            }
            else
            {
                result = 1;
                
                if (sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_5) != 0)
                    return result;
                
                *arg1 = 0;
                arg1[1] = result;
            }
        }
    }
    
    return 0;
}

uint64_t sub_140051c40(int64_t* arg1)
{
    char* r9 = *arg1;
    
    if (r9 == 0)
    {
        int64_t* r8_2 = arg1[4];
        
        if (r8_2 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_2);
    }
    else
    {
        int64_t r10_1 = arg1[1];
        int64_t r8 = arg1[2];
        uint64_t result;
        
        if ((r8 >= r10_1 || r9[r8] != 0x5f))
        {
            int64_t rax_2 = 0;
            int64_t r11_1 = r8;
            
            while (true)
            {
                if (r11_1 >= r10_1)
                    goto label_140051d78;
                
                char rdx_1 = r9[r11_1];
                
                if (rdx_1 == 0x5f)
                {
                    arg1[2] = (r11_1 + 1);
                    
                    if (rax_2 == -1)
                        goto label_140051d78;
                    
                    result = (rax_2 + 1);
                    
                    if (result >= (r8 - 1))
                        goto label_140051d78;
                    
                    break;
                }
                
                char rdi_1 = (rdx_1 - 0x30);
                
                if (rdi_1 >= 0xa)
                {
                    if ((rdx_1 - 0x61) >= 0x1a)
                    {
                        if ((rdx_1 - 0x41) >= 0x1a)
                            goto label_140051d78;
                        
                        rdx_1 -= 0x1d;
                    }
                    else
                        rdx_1 -= 0x57;
                    
                    rdi_1 = rdx_1;
                }
                
                r11_1 += 1;
                arg1[2] = r11_1;
                int64_t rax_3;
                int64_t rdx_2;
                rdx_2 = HIGHQ((rax_2 * 0x3e));
                rax_3 = LOWQ((rax_2 * 0x3e));
                
                if (((rax_2 * 0x3e) >> 0x40) != {0})
                    goto label_140051d78;
                
                uint64_t rdx_3 = rdi_1;
                rax_2 = (rax_3 + rdx_3);
                
                if ((rax_3 + rdx_3) < rax_3)
                    goto label_140051d78;
            }
            
            goto label_140051d3d;
        }
        
        arg1[2] = (r8 + 1);
        result = 0;
        
        if (0 >= (r8 - 1))
        {
        label_140051d78:
            int64_t* r8_6 = arg1[4];
            char rdx_8;
            
            if (r8_6 != 0)
            {
                rdx_8 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6);
                result = 1;
            }
            
            if ((r8_6 != 0 && rdx_8 != 0))
                return result;
            
            *arg1 = 0;
            arg1[1] = 0;
        }
        else
        {
        label_140051d3d:
            int32_t rdx_6 = (arg1[3] + 1);
            int64_t* r8_5 = arg1[4];
            
            if (rdx_6 <= 0x1f4)
            {
                if (r8_5 != 0)
                {
                    int128_t zmm0 = *arg1;
                    int128_t zmm1 = *(arg1 + 0x10);
                    arg1[2] = result;
                    arg1[3] = rdx_6;
                    result = sub_140053310(arg1);
                    *arg1 = zmm0;
                    *(arg1 + 0x10) = zmm1;
                    return result;
                }
            }
            else if (r8_5 == 0)
            {
                result = 1;
                *arg1 = 0;
                arg1[1] = result;
            }
            else
            {
                result = 1;
                
                if (sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_5) != 0)
                    return result;
                
                *arg1 = 0;
                arg1[1] = result;
            }
        }
    }
    
    return 0;
}

uint64_t sub_140051e00(void* arg1, int32_t arg2, int512_t arg3 @ zmm0)
{
    int64_t rsi;
    
    if (arg1 == 0)
        rsi = 0;
    else
    {
        rsi = 1;
        
        if (sub_140057b20(arg3, 0x27) == 0)
        {
            int32_t i = arg2;
            
            if (i != 0x22)
            {
            label_140051e66:
                
                for (; i != 0x110000; i = 0x110000)
                {
                    char var_40;
                    sub_14004f7d0(&var_40, i);
                    char j_1;
                    char var_35;
                    
                    if (var_40 != 0x80)
                    {
                        uint64_t j = j_1;
                        
                        while (j < var_35)
                        {
                            uint64_t rdx_2 = &var_40[j];
                            j += 1;
                            
                            if (sub_140057b20(arg1, rdx_2) != 0)
                                return rsi;
                        }
                    }
                    else
                    {
                        uint64_t r14_1;
                        r14_1 = 0x80;
                        
                        while (true)
                        {
                            if (r14_1 == 0x80)
                            {
                                int32_t var_38_1 = 0;
                                var_40 = 0;
                                r14_1 = 0;
                                int32_t var_3c;
                                
                                if (sub_140057b20(arg1, var_3c) != 0)
                                    return rsi;
                            }
                            else
                            {
                                if (j_1 >= var_35)
                                    break;
                                
                                uint64_t j_2 = j_1;
                                j_1 += 1;
                                
                                if (sub_140057b20(arg1, &var_40[j_2]) != 0)
                                    return rsi;
                            }
                        }
                    }
                }
                
                /* tailcall */
                return sub_140057b20(arg1, 0x27);
            }
            
            i = 0x110000;
            
            if (sub_140057b20(arg1, 0x22) == 0)
                goto label_140051e66;
        }
    }
    
    return rsi;
}

uint64_t sub_140051f40(int64_t* arg1, int64_t arg2)
{
    int64_t* rsi = arg1[4];
    uint64_t rdi;
    
    if (rsi == 0)
        rdi = 0;
    else
    {
        rdi = 1;
        
        if (sub_140057ed0("'for<> , []::{closureshim:# as  …", 1, rsi) == 0)
        {
            if (arg2 == 0)
                /* tailcall */
                return sub_140057ed0("_...", 1, rsi);
            
            uint64_t r15_1 = arg1[5];
            int64_t r15_2 = (r15_1 - arg2);
            
            if (r15_1 < arg2)
            {
                if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, rsi) == 0)
                {
                    *arg1 = 0;
                    arg1[1] = 0;
                    rdi = 0;
                }
            }
            else if (r15_2 >= 0x1a)
            {
                if (sub_140057ed0("_...", 1, rsi) == 0)
                {
                    int64_t var_40 = r15_2;
                    rdi = sub_14005a2a0(&var_40, rsi);
                }
            }
            else
            {
                int32_t var_34 = (r15_2 + 0x61);
                rdi = sub_140057f80(&var_34, rsi);
            }
        }
    }
    
    return rdi;
}

uint64_t sub_140052030(int64_t* arg1, char const* const arg2 @ r14)
{
    char* rcx = *arg1;
    int64_t rbx;
    
    if (rcx == 0)
    {
        int64_t* r8_4 = arg1[4];
        
        if (r8_4 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_4);
        
    label_140052212:
        rbx = 0;
    }
    else
    {
        int64_t r8 = arg1[1];
        int64_t rax_1 = arg1[2];
        int64_t rdi_1;
        int64_t* r8_1;
        
        if ((rax_1 >= r8 || rcx[rax_1] != 0x47))
        {
            rdi_1 = 0;
            r8_1 = arg1[4];
            
            if (r8_1 == 0)
            {
            label_1400520a4:
                /* tailcall */
                return sub_140053810(arg1, arg2);
            }
        }
        else
        {
            int64_t r9_1 = (rax_1 + 1);
            arg1[2] = r9_1;
            
            if ((r9_1 >= r8 || rcx[r9_1] != 0x5f))
            {
                int64_t rdi_2 = 0;
                
                while (true)
                {
                    if (r9_1 >= r8)
                        goto label_1400521e7;
                    
                    char rax_9 = rcx[r9_1];
                    
                    if (rax_9 == 0x5f)
                    {
                        arg1[2] = (r9_1 + 1);
                        
                        if (rdi_2 <= -3)
                        {
                            rdi_1 = (rdi_2 + 2);
                            r8_1 = arg1[4];
                            
                            if (r8_1 != 0)
                                break;
                            
                            goto label_1400520a4_1;
                        }
                        
                    label_1400521e7:
                        int64_t* r8_6 = arg1[4];
                        
                        if (r8_6 != 0)
                        {
                            rbx = 1;
                            
                            if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6) != 0)
                                return rbx;
                        }
                        
                        *arg1 = 0;
                        arg1[1] = 0;
                        goto label_140052212;
                    }
                    
                    char r11_3 = (rax_9 - 0x30);
                    
                    if (r11_3 >= 0xa)
                    {
                        if ((rax_9 - 0x61) >= 0x1a)
                        {
                            if ((rax_9 - 0x41) >= 0x1a)
                                goto label_1400521e7;
                            
                            rax_9 -= 0x1d;
                        }
                        else
                            rax_9 -= 0x57;
                        
                        r11_3 = rax_9;
                    }
                    
                    r9_1 += 1;
                    arg1[2] = r9_1;
                    int64_t rax_11;
                    int64_t rdx_5;
                    rdx_5 = HIGHQ((rdi_2 * 0x3e));
                    rax_11 = LOWQ((rdi_2 * 0x3e));
                    
                    if (((rdi_2 * 0x3e) >> 0x40) != {0})
                        goto label_1400521e7;
                    
                    uint64_t rax_12 = r11_3;
                    rdi_2 = (rax_11 + rax_12);
                    
                    if ((rax_11 + rax_12) < rax_11)
                        goto label_1400521e7;
                }
            }
            else
            {
                arg1[2] = (rax_1 + 2);
                rdi_1 = 1;
                r8_1 = arg1[4];
                
                if (r8_1 == 0)
                {
                label_1400520a4_1:
                    /* tailcall */
                    return sub_140053810(arg1, arg2);
                }
            }
        }
        
        if (rdi_1 == 0)
        {
        label_140052239:
            uint64_t result = sub_140053810(arg1, arg2);
            arg1[5] -= rdi_1;
            return result;
        }
        
        rbx = 1;
        
        if (sub_140057ed0("for<> , []::{closureshim:# as  m…", 4, r8_1) == 0)
        {
            arg1[5] += 1;
            int64_t r15_1 = 1;
            
            if (sub_140051f40(arg1, 1) == 0)
            {
                arg2 = ", []::{closureshim:# as  mut con…";
                
                while (rdi_1 != r15_1)
                {
                    if (r15_1 != 0)
                    {
                        int64_t* r8_3 = arg1[4];
                        
                        if ((r8_3 != 0 && sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_3) != 0))
                            return rbx;
                    }
                    
                    arg1[5] += 1;
                    r15_1 += 1;
                    
                    if (sub_140051f40(arg1, 1) != 0)
                        return rbx;
                }
                
                int64_t* r8_7 = arg1[4];
                
                if (r8_7 == 0)
                    goto label_140052239;
                
                if (sub_140057ed0("> , []::{closureshim:# as  mut c…", 2, r8_7) == 0)
                    goto label_140052239;
            }
        }
    }
    
    return rbx;
}

uint64_t sub_140052270(int64_t* arg1)
{
    char* rcx = *arg1;
    char const* const rbx;
    
    if (rcx == 0)
    {
        int64_t* r8_4 = arg1[4];
        
        if (r8_4 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_4);
        
        rbx = nullptr;
    }
    else
    {
        int64_t r8 = arg1[1];
        int64_t rax_1 = arg1[2];
        int64_t rdi_1;
        int64_t* r8_1;
        
        if ((rax_1 < r8 && rcx[rax_1] == 0x47))
        {
            int64_t r9_1 = (rax_1 + 1);
            arg1[2] = r9_1;
            
            if ((r9_1 < r8 && rcx[r9_1] == 0x5f))
            {
                arg1[2] = (rax_1 + 2);
                rdi_1 = 1;
                r8_1 = arg1[4];
                
                if (r8_1 != 0)
                    goto label_140052350;
                
                goto label_1400522dd;
            }
            
            int64_t rdi_2 = 0;
            
            while (true)
            {
                if (r9_1 >= r8)
                    goto label_1400524a0;
                
                char rax_11 = rcx[r9_1];
                
                if (rax_11 == 0x5f)
                {
                    arg1[2] = (r9_1 + 1);
                    
                    if (rdi_2 <= -3)
                    {
                        rdi_1 = (rdi_2 + 2);
                        r8_1 = arg1[4];
                        
                        if (r8_1 != 0)
                            break;
                        
                        goto label_1400522dd;
                    }
                    
                label_1400524a0:
                    int64_t* r8_6 = arg1[4];
                    char rax_16;
                    
                    if (r8_6 != 0)
                    {
                        rax_16 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6);
                        rbx = 1;
                    }
                    
                    if ((r8_6 == 0 || rax_16 == 0))
                    {
                        *arg1 = 0;
                        arg1[1] = 0;
                        rbx = nullptr;
                    }
                    
                    return rbx;
                }
                
                char r11_2 = (rax_11 - 0x30);
                
                if (r11_2 >= 0xa)
                {
                    if ((rax_11 - 0x61) >= 0x1a)
                    {
                        if ((rax_11 - 0x41) >= 0x1a)
                            goto label_1400524a0;
                        
                        rax_11 -= 0x1d;
                    }
                    else
                        rax_11 -= 0x57;
                    
                    r11_2 = rax_11;
                }
                
                r9_1 += 1;
                arg1[2] = r9_1;
                int64_t rax_13;
                int64_t rdx_4;
                rdx_4 = HIGHQ((rdi_2 * 0x3e));
                rax_13 = LOWQ((rdi_2 * 0x3e));
                
                if (((rdi_2 * 0x3e) >> 0x40) != {0})
                    goto label_1400524a0;
                
                uint64_t rax_14 = r11_2;
                rdi_2 = (rax_13 + rax_14);
                
                if ((rax_13 + rax_14) < rax_13)
                    goto label_1400524a0;
            }
            
            goto label_140052350;
        }
        
        rdi_1 = 0;
        r8_1 = arg1[4];
        
        if (r8_1 == 0)
        {
        label_1400522dd:
            rbx = nullptr;
            
            while (true)
            {
                int64_t rax_3 = arg1[2];
                
                if ((rax_3 < arg1[1] && rcx[rax_3] == 0x45))
                {
                    arg1[2] = (rax_3 + 1);
                    return nullptr;
                }
                
                char const* const temp0_1 = rbx;
                rbx -= 1;
                
                if (temp0_1 < 1)
                {
                label_14005232b:
                    
                    if (sub_140053f30(arg1) == 0)
                    {
                        rcx = *arg1;
                        
                        if (rcx == 0)
                            break;
                        
                        continue;
                    }
                }
                else
                {
                    int64_t* r8_2 = arg1[4];
                    
                    if (r8_2 == 0)
                        goto label_14005232b;
                    
                    if (sub_140057ed0(" + unsafe extern "", 3, r8_2) == 0)
                        goto label_14005232b;
                }
                
                rbx = 1;
                return rbx;
            }
            
            rbx = nullptr;
        }
        else
        {
        label_140052350:
            
            if (rdi_1 == 0)
            {
            label_1400524f4:
                char* rax_18 = *arg1;
                
                if (rax_18 != 0)
                {
                    int64_t r14_1 = 0;
                    
                    while (true)
                    {
                        int64_t rcx_5 = arg1[2];
                        
                        if ((rcx_5 < arg1[1] && rax_18[rcx_5] == 0x45))
                        {
                            arg1[2] = (rcx_5 + 1);
                            arg1[5] -= rdi_1;
                            return nullptr;
                        }
                        
                        int64_t temp1_1 = r14_1;
                        r14_1 -= 1;
                        
                        if (temp1_1 < 1)
                        {
                        label_140052543:
                            
                            if (sub_140053f30(arg1) == 0)
                            {
                                rax_18 = *arg1;
                                
                                if (rax_18 == 0)
                                    break;
                                
                                continue;
                            }
                        }
                        else
                        {
                            int64_t* r8_8 = arg1[4];
                            
                            if (r8_8 == 0)
                                goto label_140052543;
                            
                            if (sub_140057ed0(" + unsafe extern "", 3, r8_8) == 0)
                                goto label_140052543;
                        }
                        
                        rbx = 1;
                        arg1[5] -= rdi_1;
                        return rbx;
                    }
                }
                
                rbx = nullptr;
                arg1[5] -= rdi_1;
            }
            else
            {
                rbx = 1;
                
                if (sub_140057ed0("for<> , []::{closureshim:# as  m…", 4, r8_1) == 0)
                {
                    arg1[5] += 1;
                    int64_t r15_1 = 1;
                    
                    if (sub_140051f40(arg1, 1) == 0)
                    {
                        while (rdi_1 != r15_1)
                        {
                            if (r15_1 != 0)
                            {
                                int64_t* r8_3 = arg1[4];
                                
                                if ((r8_3 != 0 && sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_3) != 0))
                                    return rbx;
                            }
                            
                            arg1[5] += 1;
                            r15_1 += 1;
                            
                            if (sub_140051f40(arg1, 1) != 0)
                                return rbx;
                        }
                        
                        int64_t* r8_7 = arg1[4];
                        
                        if (r8_7 == 0)
                            goto label_1400524f4;
                        
                        if (sub_140057ed0("> , []::{closureshim:# as  mut c…", 2, r8_7) == 0)
                            goto label_1400524f4;
                    }
                }
            }
        }
    }
    
    return rbx;
}

int64_t sub_1400525a0(int64_t* arg1)
{
    char* i = *arg1;
    
    if (i == 0)
        return 0;
    
    int64_t rsi = 0;
    
    do
    {
        int64_t rcx = arg1[2];
        
        if ((rcx < arg1[1] && i[rcx] == 0x45))
        {
            arg1[2] = (rcx + 1);
            return 0;
        }
        
        if (rsi != 0)
        {
            int64_t* r8_1 = arg1[4];
            
            if ((r8_1 != 0 && sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1) != 0))
                return 1;
        }
        
        if (sub_140053310(arg1) != 0)
            return 1;
        
        rsi += 1;
        i = *arg1;
    } while (i != 0);
    
    return 0;
}

int64_t sub_140052640(int64_t* arg1)
{
    char* i = *arg1;
    
    if (i != 0)
    {
        int64_t r12_1 = 0;
        
        do
        {
            int64_t rax_1 = arg1[2];
            
            if ((rax_1 < arg1[1] && i[rax_1] == 0x45))
            {
                arg1[2] = (rax_1 + 1);
                break;
            }
            
            int512_t zmm0;
            
            if (r12_1 == 0)
            {
            label_1400526dd:
                int64_t r8_2 = arg1[1];
                int64_t rax_3 = arg1[2];
                
                if ((rax_3 < r8_2 && i[rax_3] == 0x73))
                {
                    int64_t r9_1 = (rax_3 + 1);
                    arg1[2] = r9_1;
                    
                    if ((r9_1 >= r8_2 || i[r9_1] != 0x5f))
                    {
                        int64_t rax_5 = 0;
                        
                        while (true)
                        {
                            if (r9_1 >= r8_2)
                                goto label_140052896;
                            
                            char rdx_1 = i[r9_1];
                            
                            if (rdx_1 == 0x5f)
                            {
                                arg1[2] = (r9_1 + 1);
                                
                                if (rax_5 <= -3)
                                    break;
                                
                            label_140052896:
                                int64_t* r8_6 = arg1[4];
                                
                                if ((r8_6 != 0 && sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6) != 0))
                                    return 1;
                                
                                *arg1 = 0;
                                arg1[1] = 0;
                                return 0;
                            }
                            
                            char r10_1 = (rdx_1 - 0x30);
                            
                            if (r10_1 >= 0xa)
                            {
                                if ((rdx_1 - 0x61) >= 0x1a)
                                {
                                    if ((rdx_1 - 0x41) >= 0x1a)
                                        goto label_140052896;
                                    
                                    rdx_1 -= 0x1d;
                                }
                                else
                                    rdx_1 -= 0x57;
                                
                                r10_1 = rdx_1;
                            }
                            
                            r9_1 += 1;
                            arg1[2] = r9_1;
                            int64_t rax_6;
                            int64_t rdx_2;
                            rdx_2 = HIGHQ((rax_5 * 0x3e));
                            rax_6 = LOWQ((rax_5 * 0x3e));
                            
                            if (((rax_5 * 0x3e) >> 0x40) != {0})
                                goto label_140052896;
                            
                            uint64_t rdx_3 = r10_1;
                            rax_5 = (rax_6 + rdx_3);
                            
                            if ((rax_6 + rdx_3) < rax_6)
                                goto label_140052896;
                        }
                    }
                    else
                        arg1[2] = (rax_3 + 2);
                }
                
                int64_t var_60;
                sub_140051650(&var_60, arg1);
                
                if (var_60 == 0)
                {
                    int64_t* r8_5 = arg1[4];
                    char var_58;
                    
                    if (var_58 == 0)
                    {
                        if (r8_5 != 0)
                        {
                            char rax_12;
                            rax_12 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_5);
                            
                            if (rax_12 != 0)
                                return 1;
                        }
                    }
                    else if (r8_5 != 0)
                    {
                        char rax_11;
                        rax_11 = sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_5);
                        
                        if (rax_11 != 0)
                            return 1;
                    }
                    
                    *arg1 = 0;
                    arg1[1] = var_58;
                }
                else
                {
                    zmm0 = var_60;
                    int128_t var_50;
                    int128_t var_78_1 = var_50;
                    int128_t var_88 = zmm0;
                    int64_t* r14_2 = arg1[4];
                    
                    if (r14_2 != 0)
                    {
                        if (sub_140050b80(&var_88, r14_2) != 0)
                            return 1;
                        
                        char rax_9;
                        rax_9 = sub_140057ed0(": 0x", 2, r14_2);
                        
                        if (rax_9 != 0)
                            return 1;
                    }
                    
                    char rax_10;
                    rax_10 = sub_140054130(arg1, 1, zmm0);
                    
                    if (rax_10 != 0)
                        return 1;
                }
            }
            else
            {
                int64_t* r8_1 = arg1[4];
                
                if (r8_1 == 0)
                    goto label_1400526dd;
                
                char rax_2;
                rax_2 = sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1);
                
                if (rax_2 != 0)
                    return 1;
                
                i = *arg1;
                
                if (i != 0)
                    goto label_1400526dd;
                
                int64_t* r8_3 = arg1[4];
                
                if (r8_3 == 0)
                    break;
                
                char rax_7;
                rax_7 = sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_3);
                
                if (rax_7 != 0)
                    return 1;
            }
            i = *arg1;
            r12_1 += 1;
        } while (i != 0);
    }
    
    return 0;
}

int64_t sub_1400528f0(int64_t* arg1)
{
    char* i = *arg1;
    
    if (i == 0)
        return 0;
    
    int64_t r14_1 = 0;
    
    do
    {
        int64_t rcx = arg1[2];
        
        if ((rcx < arg1[1] && i[rcx] == 0x45))
        {
            arg1[2] = (rcx + 1);
            return 0;
        }
        
        int64_t temp0_1 = r14_1;
        r14_1 -= 1;
        int512_t zmm0;
        
        if (temp0_1 >= 1)
        {
            int64_t* r8_1 = arg1[4];
            
            if (r8_1 != 0)
            {
                char rax;
                rax = sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1);
                
                if (rax != 0)
                    return 1;
            }
        }
        
        char rax_1;
        rax_1 = sub_140054130(arg1, 1, zmm0);
        
        if (rax_1 != 0)
            return 1;
        
        i = *arg1;
    } while (i != 0);
    
    return 0;
}

int64_t sub_140052990(int64_t* arg1)
{
    char* i = *arg1;
    
    if (i == 0)
        return 0;
    
    int64_t rsi = 0;
    
    do
    {
        int64_t rcx = arg1[2];
        
        if ((rcx < arg1[1] && i[rcx] == 0x45))
        {
            arg1[2] = (rcx + 1);
            return 0;
        }
        
        int512_t zmm0;
        
        if (rsi != 0)
        {
            int64_t* r8_1 = arg1[4];
            
            if (r8_1 != 0)
            {
                char rax;
                rax = sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1);
                
                if (rax != 0)
                    return 1;
            }
        }
        
        char rax_1;
        rax_1 = sub_140054130(arg1, 1, zmm0);
        
        if (rax_1 != 0)
            return 1;
        
        rsi += 1;
        i = *arg1;
    } while (i != 0);
    
    return 0;
}

int64_t sub_140052a40(int64_t* arg1)
{
    char* i = *arg1;
    
    if (i == 0)
        return 0;
    
    int64_t r14_1 = 0;
    
    do
    {
        int64_t rcx = arg1[2];
        
        if ((rcx < arg1[1] && i[rcx] == 0x45))
        {
            arg1[2] = (rcx + 1);
            return 0;
        }
        
        int64_t temp0_1 = r14_1;
        r14_1 -= 1;
        int512_t zmm0;
        
        if (temp0_1 >= 1)
        {
            int64_t* r8_1 = arg1[4];
            
            if (r8_1 != 0)
            {
                char rax;
                rax = sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1);
                
                if (rax != 0)
                    return 1;
            }
        }
        
        char rax_1;
        rax_1 = sub_1400531d0(arg1, zmm0);
        
        if (rax_1 != 0)
            return 1;
        
        i = *arg1;
    } while (i != 0);
    
    return 0;
}

uint64_t sub_140052ae0(int64_t* arg1, int32_t arg2, int512_t arg3 @ zmm0)
{
    uint64_t rdi;
    uint64_t var_20 = rdi;
    char* rcx = *arg1;
    
    if (rcx == 0)
    {
    label_140052f83:
        int64_t* r8_10 = arg1[4];
        
        if (r8_10 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_10);
        
        rdi = 0;
    }
    else
    {
        int32_t rax_2 = (arg1[3] + 1);
        arg1[3] = rax_2;
        
        if (rax_2 >= 0x1f5)
        {
            int64_t* r8_2 = arg1[4];
            char rax_5;
            
            if (r8_2 != 0)
            {
                rax_5 = sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_2);
                rdi = 1;
            }
            
            if ((r8_2 == 0 || rax_5 == 0))
            {
                *arg1 = 0;
                arg1[1] = 1;
                rdi = 0;
            }
        }
        else
        {
            int64_t r8_1 = arg1[1];
            int64_t rax_3 = arg1[2];
            
            if (rax_3 >= r8_1)
            {
            label_140052fb7:
                int64_t* r8_12 = arg1[4];
                char rax_29;
                
                if (r8_12 != 0)
                {
                    rax_29 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_12);
                    rdi = 1;
                }
                
                if ((r8_12 == 0 || rax_29 == 0))
                {
                    *arg1 = 0;
                    arg1[1] = 0;
                    rdi = 0;
                }
            }
            else
            {
                uint32_t rbx_1 = rcx[rax_3];
                arg1[2] = (rax_3 + 1);
                uint64_t r10_1 = (rbx_1 - 0x42);
                
                if (r10_1 > 0x17)
                    goto label_140052fb7;
                
                char var_48;
                int64_t var_40;
                int128_t var_38;
                char rax_6;
                char const* const rcx_21;
                int64_t* r8_15;
                
                switch (r10_1)
                {
                    case 0:
                    {
                        rax_6 = sub_1400518c0(arg1, arg2);
                        rdi = 1;
                    label_140053078:
                        
                        if (rax_6 == 0)
                        {
                        label_140053080:
                            
                            if (*arg1 == 0)
                                rdi = 0;
                            else
                            {
                                arg1[3] -= 1;
                                rdi = 0;
                            }
                        }
                        break;
                    }
                    case 1:
                    {
                        sub_140051500(&var_48, arg1);
                        char rbx_2;
                        int64_t* r8_3;
                        
                        if (var_48 == 0)
                        {
                            int64_t var_70 = var_40;
                            
                            if (*arg1 == 0)
                            {
                                int64_t* r8_8 = arg1[4];
                                
                                if (r8_8 == 0)
                                    rdi = 0;
                                else
                                    rdi = sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_8);
                            }
                            else
                            {
                                sub_140051650(&var_48, arg1);
                                
                                if (var_48 == 0)
                                {
                                label_140052f1b:
                                    rbx_2 = var_40;
                                    r8_3 = arg1[4];
                                    
                                    if (rbx_2 != 0)
                                        goto label_140052be7;
                                    
                                    goto label_140052f2b;
                                }
                                
                                arg3 = var_48;
                                int128_t var_88_1 = var_38;
                                int128_t var_98 = arg3;
                                int64_t* rdx_8 = arg1[4];
                                
                                if (rdx_8 == 0)
                                    goto label_140053080;
                                
                                rdi = 1;
                                
                                if (sub_140050b80(&var_98, rdx_8) == 0)
                                {
                                    void* rcx_14 = arg1[4];
                                    
                                    if (((rcx_14 == 0 || var_40 == 0) || (*(rcx_14 + 0x34) & 4) != 0))
                                        goto label_140053080;
                                    
                                    if (sub_1400577c0() != 0)
                                        rdi = 1;
                                    else if (sub_140059c10(&var_70, arg1[4]) != 0)
                                        rdi = 1;
                                    else
                                    {
                                        if (sub_1400577c0(arg1[4], "]::{closureshim:# as  mut const …", 1) == 0)
                                            goto label_140053080;
                                        
                                        rdi = 1;
                                    }
                                }
                            }
                        }
                        else
                        {
                        label_140052bd7:
                            char var_47;
                            rbx_2 = var_47;
                            r8_3 = arg1[4];
                            char const* const rcx_2;
                            int64_t rdx_1;
                            
                            if (rbx_2 != 0)
                            {
                            label_140052be7:
                                
                                if (r8_3 == 0)
                                    goto label_140052f4c;
                                
                                rcx_2 = "{recursion limit reached}?'for<>…";
                                rdx_1 = 0x19;
                                goto label_140052f3c;
                            }
                            
                        label_140052f2b:
                            
                            if (r8_3 == 0)
                            {
                            label_140052f4c:
                                *arg1 = 0;
                                arg1[1] = rbx_2;
                                rdi = 0;
                            }
                            else
                            {
                                rcx_2 = "{invalid syntax}{recursion limit…";
                                rdx_1 = 0x10;
                            label_140052f3c:
                                rdi = 1;
                                
                                if (sub_140057ed0(rcx_2, rdx_1, r8_3) == 0)
                                    goto label_140052f4c;
                            }
                        }
                        break;
                    }
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 0xa:
                    case 0xd:
                    case 0xe:
                    case 0xf:
                    case 0x10:
                    case 0x11:
                    case 0x12:
                    case 0x13:
                    case 0x14:
                    case 0x15:
                    {
                        goto label_140052fb7;
                    }
                    case 7:
                    {
                        rdi = 1;
                        
                        if (sub_140052ae0(arg1) == 0)
                        {
                            if (arg2 == 0)
                            {
                            label_140052d2b:
                                int64_t* r8_6 = arg1[4];
                                char rax_14;
                                
                                if (r8_6 != 0)
                                    rax_14 = sub_140057ed0(&data_1400653d0[4], 1, r8_6);
                                
                                if (((r8_6 == 0 || rax_14 == 0) && sub_140052a40(arg1) == 0))
                                    goto label_14005305e;
                            }
                            else
                            {
                                int64_t* r8_5 = arg1[4];
                                
                                if (r8_5 == 0)
                                    goto label_140052d2b;
                                
                                if (sub_140057ed0(&data_140065318, 2, r8_5) == 0)
                                    goto label_140052d2b;
                            }
                        }
                        break;
                    }
                    case 0xb:
                    case 0x16:
                    {
                        if (((rax_3 + 1) < r8_1 && rcx[(rax_3 + 1)] == 0x73))
                        {
                            int64_t r9_2 = (rax_3 + 2);
                            arg1[2] = r9_2;
                            
                            if ((r9_2 >= r8_1 || rcx[r9_2] != 0x5f))
                            {
                                int64_t rax_22 = 0;
                                
                                while (true)
                                {
                                    if (r9_2 >= r8_1)
                                        goto label_140052fb7;
                                    
                                    char rdx_10 = rcx[r9_2];
                                    
                                    if (rdx_10 == 0x5f)
                                    {
                                        arg1[2] = (r9_2 + 1);
                                        
                                        if (rax_22 <= -3)
                                            break;
                                        
                                        goto label_140052fb7;
                                    }
                                    
                                    char r11_1 = (rdx_10 - 0x30);
                                    
                                    if (r11_1 >= 0xa)
                                    {
                                        if ((rdx_10 - 0x61) >= 0x1a)
                                        {
                                            if ((rdx_10 - 0x41) >= 0x1a)
                                                goto label_140052fb7;
                                            
                                            rdx_10 -= 0x1d;
                                        }
                                        else
                                            rdx_10 -= 0x57;
                                        
                                        r11_1 = rdx_10;
                                    }
                                    
                                    r9_2 += 1;
                                    arg1[2] = r9_2;
                                    int64_t rax_23;
                                    int64_t rdx_11;
                                    rdx_11 = HIGHQ((rax_22 * 0x3e));
                                    rax_23 = LOWQ((rax_22 * 0x3e));
                                    
                                    if (((rax_22 * 0x3e) >> 0x40) != {0})
                                        goto label_140052fb7;
                                    
                                    uint64_t rdx_12 = r11_1;
                                    rax_22 = (rax_23 + rdx_12);
                                    
                                    if ((rax_23 + rdx_12) < rax_23)
                                        goto label_140052fb7;
                                }
                            }
                            else
                                arg1[2] = (rax_3 + 3);
                        }
                        
                        sub_140051860(arg1, arg3);
                        goto label_140052ffd;
                    }
                    case 0xc:
                    {
                        int64_t rax_7 = sub_1400515f0(arg1);
                        
                        if ((rax_7 & 1) != 0)
                        {
                            int64_t* r8_7 = arg1[4];
                            char const* const rcx_11;
                            int64_t rdx_6;
                            
                            if ((rax_7 & 0x100) == 0)
                            {
                                if (r8_7 == 0)
                                    goto label_140052ee7;
                                
                                rcx_11 = "{invalid syntax}{recursion limit…";
                                rdx_6 = 0x10;
                                goto label_140052ed1;
                            }
                            
                            if (r8_7 == 0)
                            {
                            label_140052ee7:
                                *arg1 = 0;
                                arg1[1] = ((rax_7 >> 8) & 1);
                                rdi = 0;
                            }
                            else
                            {
                                rcx_11 = "{recursion limit reached}?'for<>…";
                                rdx_6 = 0x19;
                            label_140052ed1:
                                rdi = 1;
                                
                                if (sub_140057ed0(rcx_11, rdx_6, r8_7) == 0)
                                    goto label_140052ee7;
                            }
                        }
                        else
                        {
                            rdi = 1;
                            
                            if (sub_140052ae0(arg1, arg2) == 0)
                            {
                                if (*arg1 == 0)
                                {
                                    int64_t* r8_9 = arg1[4];
                                    
                                    if (r8_9 == 0)
                                        rdi = 0;
                                    else if (sub_140057ed0(&data_140065318, 2, r8_9) == 0)
                                    {
                                        if (*arg1 != 0)
                                            goto label_140052c4d;
                                        
                                        goto label_140052f83;
                                    }
                                }
                                else
                                {
                                label_140052c4d:
                                    sub_140051500(&var_48, arg1);
                                    
                                    if (var_48 != 0)
                                        goto label_140052bd7;
                                    
                                    if (*arg1 == 0)
                                        goto label_140052f83;
                                    
                                    sub_140051650(&var_48, arg1);
                                    
                                    if (var_48 == 0)
                                        goto label_140052f1b;
                                    
                                    uint32_t rbx_4 = (rax_7 >> 0x20);
                                    int128_t var_68 = var_48;
                                    
                                    if (rbx_4 != 0x110000)
                                    {
                                        int64_t* r8_16 = arg1[4];
                                        int64_t* r8_17;
                                        
                                        if (r8_16 == 0)
                                        {
                                            r8_17 = nullptr;
                                        label_1400530bd:
                                            char rax_36;
                                            void* rcx_22;
                                            int64_t rdx_14;
                                            
                                            if (rbx_4 != 0x43)
                                            {
                                                if (rbx_4 == 0x53)
                                                {
                                                    if (r8_17 == 0)
                                                        goto label_140053112;
                                                    
                                                    rcx_22 = "shim:# as  mut const ; dyn  + un…";
                                                    rdx_14 = 4;
                                                    goto label_1400530eb;
                                                }
                                                
                                                var_48 = rbx_4;
                                                
                                                if (r8_17 == 0)
                                                    goto label_140053112;
                                                
                                                rax_36 = sub_140057f80(&var_48, r8_17);
                                                goto label_140053106;
                                            }
                                            
                                            if (r8_17 == 0)
                                            {
                                            label_140053112:
                                                int64_t* r8_18 = arg1[4];
                                                
                                                if ((*var_68[8] | *var_38[8]) != 0)
                                                {
                                                    if (r8_18 == 0)
                                                        goto label_140053080;
                                                    
                                                    if (sub_140057ed0(":# as  mut const ; dyn  + unsafe…", 1, r8_18) == 0)
                                                    {
                                                        int64_t* rdx_17 = arg1[4];
                                                        
                                                        if (rdx_17 == 0)
                                                            goto label_140053080;
                                                        
                                                        if (sub_140050b80(&var_68, rdx_17) == 0)
                                                        {
                                                            r8_18 = arg1[4];
                                                            
                                                            if (r8_18 != 0)
                                                                goto label_140053131;
                                                            
                                                            goto label_140053080;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (r8_18 == 0)
                                                        goto label_140053080;
                                                    
                                                label_140053131:
                                                    
                                                    if (sub_140057ed0("# as  mut const ; dyn  + unsafe …", 1, r8_18) == 0)
                                                    {
                                                        int64_t* rdx_16 = arg1[4];
                                                        var_48 = var_40;
                                                        
                                                        if (rdx_16 == 0)
                                                            goto label_140053080;
                                                        
                                                        if (sub_14005a2a0(&var_48, rdx_16) == 0)
                                                        {
                                                            r8_15 = arg1[4];
                                                            
                                                            if (r8_15 == 0)
                                                                goto label_140053080;
                                                            
                                                            rcx_21 = "}0";
                                                            goto label_140053073;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                rcx_22 = "closureshim:# as  mut const ; dy…";
                                                rdx_14 = 7;
                                            label_1400530eb:
                                                rax_36 = sub_140057ed0(rcx_22, rdx_14, r8_17);
                                            label_140053106:
                                                
                                                if (rax_36 == 0)
                                                    goto label_140053112;
                                            }
                                        }
                                        else if (sub_140057ed0("::{closureshim:# as  mut const ;…", 3, r8_16) == 0)
                                        {
                                            r8_17 = arg1[4];
                                            goto label_1400530bd;
                                        }
                                    }
                                    else
                                    {
                                        if ((*var_68[8] | *var_38[8]) == 0)
                                            goto label_140053080;
                                        
                                        int64_t* r8_4 = arg1[4];
                                        
                                        if (r8_4 == 0)
                                            goto label_140053080;
                                        
                                        if (sub_140057ed0(&data_140065318, 2, r8_4) == 0)
                                        {
                                            int64_t* rdx_5 = arg1[4];
                                            
                                            if (rdx_5 == 0)
                                                goto label_140053080;
                                            
                                            rax_6 = sub_140050b80(&var_68, rdx_5);
                                            goto label_140053078;
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case 0x17:
                    {
                    label_140052ffd:
                        int64_t* r8_13 = arg1[4];
                        char rax_31;
                        
                        if (r8_13 != 0)
                        {
                            rax_31 = sub_140057ed0(&data_1400653d0[4], 1, r8_13);
                            rdi = 1;
                        }
                        
                        if ((r8_13 == 0 || rax_31 == 0))
                        {
                            rdi = 1;
                            
                            if (sub_140053310(arg1) == 0)
                            {
                                if (rbx_1 == 0x4d)
                                {
                                label_14005305e:
                                    r8_15 = arg1[4];
                                    
                                    if (r8_15 == 0)
                                        goto label_140053080;
                                    
                                    rcx_21 = &data_1400653d0[3];
                                label_140053073:
                                    rax_6 = sub_140057ed0(rcx_21, 1, r8_15);
                                    goto label_140053078;
                                }
                                
                                int64_t* r8_14 = arg1[4];
                                char rax_33;
                                
                                if (r8_14 != 0)
                                    rax_33 = sub_140057ed0(" as  mut const ; dyn  + unsafe e…", 4, r8_14);
                                
                                if (((r8_14 == 0 || rax_33 == 0) && sub_140052ae0(arg1, 0) == 0))
                                    goto label_14005305e;
                            }
                        }
                        break;
                    }
                }
            }
        }
    }
    
    return rdi;
}

int64_t sub_1400531d0(int64_t* arg1, int512_t arg2 @ zmm0)
{
    char* r8 = *arg1;
    
    if (r8 != 0)
    {
        int64_t r9_1 = arg1[1];
        int64_t rax_1 = arg1[2];
        
        if (rax_1 < r9_1)
        {
            if (r8[rax_1] == 0x4c)
            {
                int64_t r10 = (rax_1 + 1);
                arg1[2] = r10;
                int64_t rax_3;
                
                if ((r10 >= r9_1 || r8[r10] != 0x5f))
                {
                    int64_t rax_7 = 0;
                    
                    while (true)
                    {
                        if (r10 < r9_1)
                        {
                            char rdx_3 = r8[r10];
                            
                            if (rdx_3 == 0x5f)
                            {
                                arg1[2] = (r10 + 1);
                                
                                if (rax_7 != -1)
                                {
                                    rax_3 = (rax_7 + 1);
                                    break;
                                }
                            }
                            else
                            {
                                char rsi_1 = (rdx_3 - 0x30);
                                
                                if (rsi_1 < 0xa)
                                    goto label_14005328e;
                                
                                if ((rdx_3 - 0x61) < 0x1a)
                                {
                                    rdx_3 -= 0x57;
                                label_14005328c:
                                    rsi_1 = rdx_3;
                                label_14005328e:
                                    r10 += 1;
                                    arg1[2] = r10;
                                    int64_t rax_8;
                                    int64_t rdx_4;
                                    rdx_4 = HIGHQ((rax_7 * 0x3e));
                                    rax_8 = LOWQ((rax_7 * 0x3e));
                                    
                                    if (((rax_7 * 0x3e) >> 0x40) == {0})
                                    {
                                        uint64_t rdx_5 = rsi_1;
                                        rax_7 = (rax_8 + rdx_5);
                                        
                                        if ((rax_8 + rdx_5) >= rax_8)
                                            continue;
                                    }
                                }
                                else if ((rdx_3 - 0x41) < 0x1a)
                                {
                                    rdx_3 -= 0x1d;
                                    goto label_14005328c;
                                }
                            }
                        }
                        
                        int64_t* r8_4 = arg1[4];
                        
                        if ((r8_4 != 0 && sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_4) != 0))
                            return 1;
                        
                        *arg1 = 0;
                        arg1[1] = 0;
                        return 0;
                    }
                }
                else
                {
                    arg1[2] = (rax_1 + 2);
                    rax_3 = 0;
                }
                
                /* tailcall */
                return sub_140051f40(arg1, rax_3);
            }
            
            if (r8[rax_1] == 0x4b)
            {
                arg1[2] = (rax_1 + 1);
                /* tailcall */
                return sub_140054130(arg1, 0, arg2);
            }
        }
    }
    
    /* tailcall */
    return sub_140053310(arg1);
}

uint64_t sub_140053310(int64_t* arg1)
{
    int64_t rdi;
    int64_t var_18 = rdi;
    char* rax = *arg1;
    int64_t* r8_4;
    
    if (rax == 0)
    {
        r8_4 = arg1[4];
        
        if (r8_4 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_4);
        
        rdi = 0;
    }
    else
    {
        int64_t rcx = arg1[2];
        
        if (rcx >= arg1[1])
        {
            int64_t* r8_6 = arg1[4];
            
            if (r8_6 == 0)
            {
            label_140053476:
                *arg1 = 0;
                arg1[1] = 0;
                rdi = 0;
            }
            else
            {
                rdi = 1;
                
                if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6) == 0)
                    goto label_140053476;
            }
        }
        else
        {
            char rbx_1 = rax[rcx];
            arg1[2] = (rcx + 1);
            uint32_t rdx_3;
            
            if ((rbx_1 - 0x61) <= 0x19)
                rdx_3 = (rbx_1 - 0x61);
            
            if (((rbx_1 - 0x61) <= 0x19 && (TEST_BITD(0x3bcfbbf, rdx_3))))
            {
                r8_4 = arg1[4];
                
                if (r8_4 != 0)
                {
                    uint64_t rdx_13 = (rdx_3 << 3);
                    /* tailcall */
                    return sub_140057ed0(*(rdx_13 + &data_1400659f0), *(rdx_13 + &data_140065920), r8_4);
                }
                
                rdi = 0;
            }
            else
            {
                int32_t rdx_5 = (arg1[3] + 1);
                arg1[3] = rdx_5;
                
                if (rdx_5 > 0x1f4)
                {
                    int64_t* r8_7 = arg1[4];
                    char rax_8;
                    
                    if (r8_7 != 0)
                    {
                        rax_8 = sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_7);
                        rdi = 1;
                    }
                    
                    if ((r8_7 == 0 || rax_8 == 0))
                    {
                        *arg1 = 0;
                        arg1[1] = 1;
                        rdi = 0;
                    }
                }
                else
                {
                    uint64_t rdx_7 = (rbx_1 - 0x41);
                    char var_30;
                    int64_t var_28;
                    char const* const rcx_9;
                    int64_t rdx_16;
                    int64_t* r8_18;
                    char rax_5;
                    
                    if (rdx_7 > 0x13)
                    {
                    label_1400535cf:
                        arg1[2] = rcx;
                        int512_t zmm0;
                        rax_5 = sub_140052ae0(arg1, 0, zmm0);
                    label_1400537bb:
                        rdi = 1;
                    label_1400537be:
                        
                        if (rax_5 == 0)
                        {
                        label_1400537c2:
                            
                            if (*arg1 == 0)
                                rdi = 0;
                            else
                            {
                                arg1[3] -= 1;
                                rdi = 0;
                            }
                        }
                    }
                    else
                        switch (rdx_7)
                        {
                            case 0:
                            case 0x12:
                            {
                                int64_t* r8_1 = arg1[4];
                                char rax_1;
                                
                                if (r8_1 != 0)
                                {
                                    rax_1 = sub_140057ed0("[]::{closureshim:# as  mut const…", 1, r8_1);
                                    rdi = 1;
                                }
                                
                                if ((r8_1 == 0 || rax_1 == 0))
                                {
                                    char rax_2;
                                    int512_t zmm0_1;
                                    rax_2 = sub_140053310(arg1);
                                    rdi = 1;
                                    
                                    if (rax_2 == 0)
                                    {
                                        if (rbx_1 != 0x41)
                                        {
                                        label_140053408:
                                            int64_t* r8_3 = arg1[4];
                                            
                                            if (r8_3 == 0)
                                                goto label_1400537c2;
                                            
                                            rax_5 = sub_140057ed0("]::{closureshim:# as  mut const …", 1, r8_3);
                                            goto label_1400537bb;
                                        }
                                        
                                        int64_t* r8_2 = arg1[4];
                                        char rax_3;
                                        
                                        if (r8_2 != 0)
                                            rax_3 = sub_140057ed0("; dyn  + unsafe extern "", 2, r8_2);
                                        
                                        if ((r8_2 == 0 || rax_3 == 0))
                                        {
                                            rdi = 1;
                                            
                                            if (sub_140054130(arg1, 1, zmm0_1) == 0)
                                                goto label_140053408;
                                        }
                                    }
                                }
                                break;
                            }
                            case 1:
                            {
                                rax_5 = sub_140051c40(arg1);
                                goto label_1400537bb;
                            }
                            case 2:
                            case 4:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 0xa:
                            case 0xb:
                            case 0xc:
                            case 0xd:
                            {
                                goto label_1400535cf;
                            }
                            case 3:
                            {
                                int64_t* r8_11 = arg1[4];
                                char rax_11;
                                
                                if (r8_11 != 0)
                                {
                                    rax_11 = sub_140057ed0("dyn  + unsafe extern "", 4, r8_11);
                                    rdi = 1;
                                }
                                
                                if ((r8_11 == 0 || rax_11 == 0))
                                {
                                    rdi = 1;
                                    
                                    if (sub_140052270(arg1) == 0)
                                    {
                                        char* rcx_13 = *arg1;
                                        int64_t rax_13;
                                        
                                        if (rcx_13 != 0)
                                            rax_13 = arg1[2];
                                        
                                        if (((rcx_13 == 0 || rax_13 >= arg1[1]) || rcx_13[rax_13] != 0x4c))
                                        {
                                            int64_t* r8_16 = arg1[4];
                                            
                                            if (r8_16 == 0)
                                                goto label_140053476;
                                            
                                            if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_16) == 0)
                                                goto label_140053476;
                                        }
                                        else
                                        {
                                            arg1[2] = (rax_13 + 1);
                                            sub_140051440(&var_30, arg1);
                                            
                                            if (var_30 != 0)
                                                goto label_140053550;
                                            
                                            if (var_28 == 0)
                                                goto label_1400537c2;
                                            
                                            int64_t* r8_12 = arg1[4];
                                            char rax_15;
                                            
                                            if (r8_12 != 0)
                                                rax_15 = sub_140057ed0(" + unsafe extern "", 3, r8_12);
                                            
                                            if ((r8_12 == 0 || rax_15 == 0))
                                            {
                                                rax_5 = sub_140051f40(arg1, var_28);
                                                goto label_1400537be;
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                            case 5:
                            {
                                char* r14;
                                rax_5 = sub_140052030(arg1, r14);
                                goto label_1400537bb;
                            }
                            case 0xe:
                            case 0xf:
                            {
                                int64_t* r8_10 = arg1[4];
                                char rax_10;
                                
                                if (r8_10 != 0)
                                {
                                    rax_10 = sub_140057ed0(&data_1400653d0[6], 1, r8_10);
                                    rdi = 1;
                                }
                                
                                if ((r8_10 == 0 || rax_10 == 0))
                                {
                                    r8_18 = arg1[4];
                                    
                                    if (rbx_1 != 0x50)
                                        goto label_140053796;
                                    
                                    if (r8_18 == 0)
                                    {
                                        rax_5 = sub_140053310(arg1);
                                        goto label_1400537bb;
                                    }
                                    
                                    rcx_9 = "const ; dyn  + unsafe extern "";
                                    rdx_16 = 6;
                                label_1400537a7:
                                    rdi = 1;
                                    
                                    if (sub_140057ed0(rcx_9, rdx_16, r8_18) == 0)
                                    {
                                        rax_5 = sub_140053310(arg1);
                                        goto label_1400537bb;
                                    }
                                }
                                break;
                            }
                            case 0x10:
                            case 0x11:
                            {
                                int64_t* r8_8 = arg1[4];
                                
                                if (r8_8 == 0)
                                {
                                label_140053517:
                                    int64_t rcx_5 = arg1[2];
                                    
                                    if ((rcx_5 >= arg1[1] || rax[rcx_5] != 0x4c))
                                    {
                                    label_14005378d:
                                        
                                        if (rbx_1 == 0x52)
                                        {
                                            rax_5 = sub_140053310(arg1);
                                            goto label_1400537bb;
                                        }
                                        
                                        r8_18 = arg1[4];
                                    label_140053796:
                                        
                                        if (r8_18 == 0)
                                        {
                                            rax_5 = sub_140053310(arg1);
                                            goto label_1400537bb;
                                        }
                                        
                                        rcx_9 = "mut const ; dyn  + unsafe extern…";
                                        rdx_16 = 4;
                                        goto label_1400537a7;
                                    }
                                    
                                    arg1[2] = (rcx_5 + 1);
                                    sub_140051440(&var_30, arg1);
                                    
                                    if (var_30 == 0)
                                    {
                                        if (var_28 == 0)
                                            goto label_14005378d;
                                        
                                        rdi = 1;
                                        
                                        if (sub_140051f40(arg1, var_28) == 0)
                                        {
                                            int64_t* r8_17 = arg1[4];
                                            
                                            if (r8_17 == 0)
                                                goto label_14005378d;
                                            
                                            if (sub_140057ed0(" mut const ; dyn  + unsafe exter…", 1, r8_17) == 0)
                                                goto label_14005378d;
                                        }
                                    }
                                    else
                                    {
                                    label_140053550:
                                        int64_t* r8_9 = arg1[4];
                                        char var_2f;
                                        char const* const rcx_8;
                                        int64_t rdx_15;
                                        
                                        if (var_2f != 0)
                                        {
                                            if (r8_9 == 0)
                                                goto label_1400537f5;
                                            
                                            rcx_8 = "{recursion limit reached}?'for<>…";
                                            rdx_15 = 0x19;
                                            goto label_1400537e9;
                                        }
                                        
                                        if (r8_9 == 0)
                                        {
                                        label_1400537f5:
                                            *arg1 = 0;
                                            arg1[1] = var_2f;
                                            rdi = 0;
                                        }
                                        else
                                        {
                                            rcx_8 = "{invalid syntax}{recursion limit…";
                                            rdx_15 = 0x10;
                                        label_1400537e9:
                                            rdi = 1;
                                            
                                            if (sub_140057ed0(rcx_8, rdx_15, r8_9) == 0)
                                                goto label_1400537f5;
                                        }
                                    }
                                }
                                else
                                {
                                    rdi = 1;
                                    
                                    if (sub_140057ed0(&data_1400653d0[5], 1, r8_8) == 0)
                                    {
                                        rax = *arg1;
                                        
                                        if (rax == 0)
                                            goto label_14005378d;
                                        
                                        goto label_140053517;
                                    }
                                }
                                break;
                            }
                            case 0x13:
                            {
                                int64_t* r8_13 = arg1[4];
                                char rax_16;
                                
                                if (r8_13 != 0)
                                {
                                    rax_16 = sub_140057ed0(&data_1400653d0[2], 1, r8_13);
                                    rdi = 1;
                                }
                                
                                if ((r8_13 == 0 || rax_16 == 0))
                                {
                                    int64_t rax_17;
                                    int64_t rdx_19;
                                    rax_17 = sub_1400525a0(arg1);
                                    rdi = 1;
                                    
                                    if (rax_17 == 0)
                                    {
                                        if (rdx_19 != 1)
                                        {
                                        label_1400536ff:
                                            int64_t* r8_15 = arg1[4];
                                            
                                            if (r8_15 == 0)
                                                goto label_1400537c2;
                                            
                                            rax_5 = sub_140057ed0(&data_1400653d0[1], 1, r8_15);
                                            goto label_1400537be;
                                        }
                                        
                                        int64_t* r8_14 = arg1[4];
                                        
                                        if (r8_14 == 0)
                                            goto label_1400537c2;
                                        
                                        if (sub_140057ed0(&data_1400653d0, 1, r8_14) == 0)
                                            goto label_1400536ff;
                                    }
                                }
                                break;
                            }
                        }
                }
            }
        }
    }
    return rdi;
}

int64_t sub_140053810(int64_t* arg1, int64_t arg2 @ r14)
{
    int64_t var_18 = arg2;
    char* rcx = *arg1;
    char result;
    
    if (rcx == 0)
    {
    label_140053a57:
        int64_t* r8_7 = arg1[4];
        char rcx_8;
        
        if (r8_7 != 0)
        {
            rcx_8 = sub_140057ed0("fn( ->  = falsetrue{ {  }: 0x", 3, r8_7);
            result = 1;
        }
        
        if ((r8_7 == 0 || rcx_8 == 0))
        {
            char* rax_5 = *arg1;
            int64_t* r8_9;
            
            if (rax_5 != 0)
            {
                int64_t rbx_5 = 0;
                
                while (true)
                {
                    int64_t rcx_9 = arg1[2];
                    
                    if ((rcx_9 < arg1[1] && rax_5[rcx_9] == 0x45))
                    {
                        arg1[2] = (rcx_9 + 1);
                        r8_9 = arg1[4];
                        
                        if (r8_9 != 0)
                            goto label_140053af4;
                        
                        break;
                    }
                    
                    int64_t temp0_1 = rbx_5;
                    rbx_5 -= 1;
                    
                    if (temp0_1 >= 1)
                    {
                        int64_t* r8_8 = arg1[4];
                        
                        if ((r8_8 != 0 && sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_8) != 0))
                            return 1;
                    }
                    
                    result = sub_140053310(arg1);
                    
                    if (result != 0)
                        return 1;
                    
                    rax_5 = *arg1;
                    
                    if (rax_5 == 0)
                        goto label_140053ad8;
                }
                
                goto label_140053b1a;
            }
            
        label_140053ad8:
            rax_5 = nullptr;
            r8_9 = arg1[4];
            
            if (r8_9 == 0)
            {
            label_140053b1a:
                
                if (rax_5 != 0)
                {
                label_140053b1f:
                    int64_t rcx_13 = arg1[2];
                    
                    if ((rcx_13 >= arg1[1] || rax_5[rcx_13] != 0x75))
                        goto label_140053b3b;
                    
                    arg1[2] = (rcx_13 + 1);
                    return 0;
                }
                
            label_140053b3b:
                int64_t* r8_10 = arg1[4];
                char rcx_15;
                
                if (r8_10 != 0)
                {
                    rcx_15 = sub_140057ed0(" ->  = falsetrue{ {  }: 0x", 4, r8_10);
                    result = 1;
                }
                
                if ((r8_10 == 0 || rcx_15 == 0))
                    /* tailcall */
                    return sub_140053310(arg1);
            }
            else
            {
            label_140053af4:
                result = 1;
                
                if (sub_140057ed0(&data_1400653d0[1], 1, r8_9) == 0)
                {
                    rax_5 = *arg1;
                    
                    if (rax_5 != 0)
                        goto label_140053b1f;
                    
                    goto label_140053b3b;
                }
            }
        }
    }
    else
    {
        int64_t rdx_1 = arg1[1];
        int64_t rax_1 = arg1[2];
        int64_t rdi;
        
        if ((rax_1 < rdx_1 && rcx[rax_1] == 0x55))
        {
            rax_1 += 1;
            arg1[2] = rax_1;
            rdi = 1;
            
            if ((rax_1 < rdx_1 && rcx[rax_1] == 0x4b))
                goto label_14005386f;
            
            goto label_140053896;
        }
        
        rdi = 0;
        void* var_88;
        char var_80;
        void* const rbx_1;
        
        if ((rax_1 >= rdx_1 || rcx[rax_1] != 0x4b))
        {
        label_140053896:
            
            if (rdi == 0)
                goto label_140053a57;
            
            rbx_1 = nullptr;
        label_1400538a1:
            int64_t* r8_2 = arg1[4];
            char rcx_1;
            
            if (r8_2 != 0)
            {
                rcx_1 = sub_140057ed0("unsafe extern "", 7, r8_2);
                result = 1;
            }
            
            if ((r8_2 == 0 || rcx_1 == 0))
            {
                if (rbx_1 == 0)
                    goto label_140053a57;
                
            label_140053906:
                int64_t* rdi_1 = arg1[4];
                char rcx_3;
                
                if (rdi_1 != 0)
                {
                    rcx_3 = sub_140057ed0("extern "", 8, rdi_1);
                    result = 1;
                }
                
                if ((rdi_1 == 0 || rcx_3 == 0))
                {
                    void* var_d0_1 = nullptr;
                    void* const var_c0 = rbx_1;
                    int64_t var_b8_1 = arg2;
                    int64_t var_b0_1 = 0;
                    int64_t var_a8_1 = arg2;
                    int64_t var_a0_1 = 0x5f0000005f;
                    char var_98_1 = 1;
                    int16_t var_90_1 = 1;
                    sub_14004fe30(&var_88, &var_c0);
                    void* var_78;
                    void* rdx_5;
                    void* rbx_2;
                    
                    if (var_88 == 0)
                    {
                        if (*var_90_1[1] != 0)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                        
                        *var_90_1[1] = 1;
                        rdx_5 = (arg2 - var_d0_1);
                        rbx_2 = (var_d0_1 + var_c0);
                        
                        if (rdi_1 != 0)
                            goto label_1400539f8;
                    }
                    else
                    {
                        rdx_5 = (var_80 - var_d0_1);
                        rbx_2 = (rbx_1 + var_d0_1);
                        var_d0_1 = var_78;
                        
                        if (rdi_1 != 0)
                        {
                        label_1400539f8:
                            result = sub_140057ed0(rbx_2, rdx_5, rdi_1);
                            
                            if (result != 0)
                                return 1;
                        }
                    }
                    int16_t var_48_1 = var_90_1;
                    int128_t var_58_1 = var_a0_1;
                    int128_t var_68_1 = var_b0_1;
                    var_78 = var_c0;
                    var_88 = var_d0_1;
                    
                    if (*var_48_1[1] == 0)
                    {
                        int64_t* r12_1 = rdi_1;
                        
                        do
                        {
                            void* r13_1 = var_78;
                            void* var_e8;
                            sub_14004fe30(&var_e8, &var_78);
                            void* r13_2;
                            void* r15_2;
                            
                            if (var_e8 == 0)
                            {
                                if (*var_48_1[1] != 0)
                                    break;
                                
                                *var_48_1[1] = 1;
                                void* r13_3 = var_88;
                                int64_t r15_3 = var_80;
                                
                                if ((var_48_1 == 0 && r15_3 == r13_3))
                                    break;
                                
                                r15_2 = (r15_3 - r13_3);
                                r13_2 = (r13_3 + var_78);
                                
                                if (r12_1 != 0)
                                    goto label_140053c41;
                                
                                r12_1 = nullptr;
                            }
                            else
                            {
                                void* rcx_20 = var_88;
                                int64_t var_e0;
                                r15_2 = (var_e0 - rcx_20);
                                r13_2 = (r13_1 + rcx_20);
                                void* var_d8;
                                var_88 = var_d8;
                                
                                if (r12_1 != 0)
                                {
                                label_140053c41:
                                    result = sub_140057ed0("-}0", 1, r12_1);
                                    
                                    if (result != 0)
                                        return 1;
                                    
                                    rdi_1 = arg1[4];
                                    
                                    if (rdi_1 == 0)
                                    {
                                        rdi_1 = nullptr;
                                        r12_1 = nullptr;
                                    }
                                    else
                                    {
                                        result = sub_140057ed0(r13_2, r15_2, rdi_1);
                                        r12_1 = rdi_1;
                                        
                                        if (result != 0)
                                            return 1;
                                    }
                                }
                                else
                                    r12_1 = nullptr;
                            }
                        } while (*var_48_1[1] == 0);
                    }
                    
                    if (rdi_1 != 0)
                    {
                        result = sub_140057ed0("" fn( ->  = falsetrue{ {  }: 0x", 2, rdi_1);
                        
                        if (result != 0)
                            return 1;
                    }
                    
                    goto label_140053a57;
                }
            }
        }
        else
        {
        label_14005386f:
            arg1[2] = (rax_1 + 1);
            
            if (((rax_1 + 1) < rdx_1 && rcx[(rax_1 + 1)] == 0x43))
            {
                arg1[2] = (rax_1 + 2);
                arg2 = 1;
                rbx_1 = &data_1400653b0;
            label_140053901:
                
                if (rdi != 0)
                    goto label_1400538a1;
                
                goto label_140053906;
            }
            
            sub_140051650(&var_88, arg1);
            rbx_1 = var_88;
            
            if (rbx_1 == 0)
            {
                int64_t* r8_4 = arg1[4];
                char const* const rcx_6;
                int64_t rdx_6;
                
                if (var_80 != 0)
                {
                    if (r8_4 == 0)
                        goto label_140053c97;
                    
                    rcx_6 = "{recursion limit reached}?'for<>…";
                    rdx_6 = 0x19;
                    goto label_140053c8f;
                }
                
                if (r8_4 == 0)
                {
                label_140053c97:
                    *arg1 = 0;
                    arg1[1] = var_80;
                    return 0;
                }
                
                rcx_6 = "{invalid syntax}{recursion limit…";
                rdx_6 = 0x10;
            label_140053c8f:
                result = 1;
                
                if (sub_140057ed0(rcx_6, rdx_6, r8_4) == 0)
                    goto label_140053c97;
            }
            else
            {
                arg2 = var_80;
                int64_t var_70;
                
                if ((arg2 != 0 && var_70 == 0))
                    goto label_140053901;
                
                int64_t* r8_12 = arg1[4];
                char rcx_18;
                
                if (r8_12 != 0)
                {
                    rcx_18 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_12);
                    result = 1;
                }
                
                if ((r8_12 == 0 || rcx_18 == 0))
                {
                    *arg1 = 0;
                    arg1[1] = 0;
                    return 0;
                }
            }
        }
    }
    
    return result;
}

uint64_t sub_140053cd0(int64_t* arg1, int512_t arg2 @ zmm0)
{
    uint64_t rsi;
    uint64_t var_18 = rsi;
    char* r9 = *arg1;
    
    if (r9 == 0)
        rsi = (sub_140052ae0(arg1, 0, arg2) * 2);
    else
    {
        int64_t r10_1 = arg1[1];
        int64_t r8_1 = arg1[2];
        
        if (r8_1 >= r10_1)
            rsi = (sub_140052ae0(arg1, 0, arg2) * 2);
        else if (r9[r8_1] == 0x42)
        {
            int64_t r11_1 = (r8_1 + 1);
            arg1[2] = r11_1;
            int64_t rax_1;
            
            if ((r11_1 >= r10_1 || r9[r11_1] != 0x5f))
            {
                int64_t rax_8 = 0;
                
                while (true)
                {
                    if (r11_1 >= r10_1)
                        goto label_140053ead;
                    
                    char rdx_2 = r9[r11_1];
                    
                    if (rdx_2 == 0x5f)
                    {
                        arg1[2] = (r11_1 + 1);
                        
                        if (rax_8 == -1)
                            break;
                        
                        rax_1 = (rax_8 + 1);
                        
                        if (rax_1 >= r8_1)
                            break;
                        
                        goto label_140053e7d;
                    }
                    
                    char rdi_1 = (rdx_2 - 0x30);
                    
                    if (rdi_1 >= 0xa)
                    {
                        if ((rdx_2 - 0x61) >= 0x1a)
                        {
                            if ((rdx_2 - 0x41) >= 0x1a)
                                goto label_140053ead;
                            
                            rdx_2 -= 0x1d;
                        }
                        else
                            rdx_2 -= 0x57;
                        
                        rdi_1 = rdx_2;
                    }
                    
                    r11_1 += 1;
                    arg1[2] = r11_1;
                    int64_t rax_9;
                    int64_t rdx_3;
                    rdx_3 = HIGHQ((rax_8 * 0x3e));
                    rax_9 = LOWQ((rax_8 * 0x3e));
                    
                    if (((rax_8 * 0x3e) >> 0x40) != {0})
                        goto label_140053ead;
                    
                    uint64_t rdx_4 = rdi_1;
                    rax_8 = (rax_9 + rdx_4);
                    
                    if ((rax_9 + rdx_4) < rax_9)
                        goto label_140053ead;
                }
                
                goto label_140053ead;
            }
            
            arg1[2] = (r8_1 + 2);
            rax_1 = 0;
            
            if (0 < r8_1)
            {
            label_140053e7d:
                int32_t rdx_6 = (arg1[3] + 1);
                int64_t* r8_5 = arg1[4];
                
                if (rdx_6 <= 0x1f4)
                {
                    if (r8_5 != 0)
                    {
                        arg2 = *arg1;
                        int128_t zmm1 = *(arg1 + 0x10);
                        arg1[2] = rax_1;
                        arg1[3] = rdx_6;
                        uint64_t result = sub_140053cd0();
                        *arg1 = arg2;
                        *(arg1 + 0x10) = zmm1;
                        return result;
                    }
                    
                    rsi = 0;
                }
                else
                {
                    rsi = 1;
                    
                    if (r8_5 == 0)
                        goto label_140053ed8;
                    
                    if (sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_5) == 0)
                        goto label_140053ed8;
                    
                    rsi = 2;
                }
            }
            else
            {
            label_140053ead:
                int64_t* r8_6 = arg1[4];
                char rax_11;
                
                if (r8_6 != 0)
                    rax_11 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_6);
                
                if ((r8_6 == 0 || rax_11 == 0))
                {
                    rsi = 0;
                label_140053ed8:
                    *arg1 = 0;
                    arg1[1] = rsi;
                    rsi = 0;
                }
                else
                    rsi = 2;
            }
        }
        else if (r9[r8_1] != 0x49)
            rsi = (sub_140052ae0(arg1, 0, arg2) * 2);
        else
        {
            arg1[2] = (r8_1 + 1);
            char rax_2;
            int512_t zmm0;
            rax_2 = sub_140052ae0(arg1, 0, arg2);
            
            if (rax_2 != 0)
                rsi = 2;
            else
            {
                int64_t* rcx = arg1;
                int64_t* r8_3 = arg1[4];
                char rax_3;
                
                if (r8_3 != 0)
                {
                    rax_3 = sub_140057ed0(&data_1400653d0[4], 1, r8_3);
                    rcx = arg1;
                }
                
                if ((r8_3 != 0 && rax_3 != 0))
                    rsi = 2;
                else
                {
                    char* rax_4 = *rcx;
                    rsi = 1;
                    
                    if (rax_4 != 0)
                    {
                        int64_t r14_1 = 0;
                        
                        while (true)
                        {
                            int64_t rdx_1 = rcx[2];
                            
                            if ((rdx_1 < rcx[1] && rax_4[rdx_1] == 0x45))
                            {
                                rcx[2] = (rdx_1 + 1);
                                return rsi;
                            }
                            
                            int64_t temp1_1 = r14_1;
                            r14_1 -= 1;
                            
                            if (temp1_1 >= 1)
                            {
                                int64_t* r8_4 = rcx[4];
                                
                                if (r8_4 != 0)
                                {
                                    char rax_5;
                                    rax_5 = sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_4);
                                    rcx = arg1;
                                    
                                    if (rax_5 != 0)
                                        break;
                                }
                            }
                            
                            char rax_6;
                            rax_6 = sub_1400531d0(rcx, zmm0);
                            
                            if (rax_6 != 0)
                                break;
                            
                            rcx = arg1;
                            rax_4 = *arg1;
                            
                            if (rax_4 == 0)
                                return rsi;
                        }
                        
                        rsi = 2;
                    }
                }
            }
        }
    }
    
    return rsi;
}

uint64_t sub_140053f30(int64_t* arg1)
{
    int512_t zmm0;
    char rax = sub_140053cd0(arg1, zmm0);
    int64_t rsi;
    rsi = 1;
    
    if (rax != 2)
    {
        char rbx_1 = rax;
        
        while (true)
        {
            char* rcx_1 = *arg1;
            int64_t rax_2;
            
            if (rcx_1 != 0)
                rax_2 = arg1[2];
            
            if (((rcx_1 != 0 && rax_2 < arg1[1]) && rcx_1[rax_2] == 0x70))
            {
                arg1[2] = (rax_2 + 1);
                int64_t* r8_1 = arg1[4];
                
                if ((rbx_1 & 1) != 0)
                {
                    if ((r8_1 != 0 && sub_140057ed0(", []::{closureshim:# as  mut con…", 2, r8_1) != 0))
                        break;
                    
                    goto label_140054004;
                }
                
                if (r8_1 != 0)
                {
                    rbx_1 = 1;
                    
                    if (sub_140057ed0(&data_1400653d0[4], 1, r8_1) != 0)
                    {
                        rsi = 1;
                        break;
                    }
                    
                label_140054004:
                    
                    if (*arg1 == 0)
                        goto label_14005407c;
                    
                    goto label_140054010;
                }
                
                rbx_1 = 1;
                
                if (*arg1 != 0)
                {
                label_140054010:
                    int64_t var_60;
                    sub_140051650(&var_60, arg1);
                    
                    if (var_60 == 0)
                    {
                        int64_t* r8_6 = arg1[4];
                        char var_58;
                        char const* const rcx_5;
                        int64_t rdx_4;
                        
                        if (var_58 == 0)
                        {
                            if (r8_6 != 0)
                            {
                                rcx_5 = "{invalid syntax}{recursion limit…";
                                rdx_4 = 0x10;
                            label_1400540ff:
                                rsi = 1;
                                
                                if (sub_140057ed0(rcx_5, rdx_4, r8_6) != 0)
                                    break;
                            }
                        }
                        else if (r8_6 != 0)
                        {
                            rcx_5 = "{recursion limit reached}?'for<>…";
                            rdx_4 = 0x19;
                            goto label_1400540ff;
                        }
                        *arg1 = 0;
                        arg1[1] = var_58;
                    }
                    else
                    {
                        int128_t var_50;
                        int128_t var_78_1 = var_50;
                        int128_t var_88 = var_60;
                        int64_t* rdx_2 = arg1[4];
                        
                        if (rdx_2 != 0)
                        {
                            if (sub_140050b80(&var_88, rdx_2) != 0)
                                break;
                            
                            int64_t* r8_2 = arg1[4];
                            
                            if ((r8_2 != 0 && sub_140057ed0(" = falsetrue{ {  }: 0x", 3, r8_2) != 0))
                                break;
                        }
                        
                        if (sub_140053310(arg1) != 0)
                            break;
                        
                        continue;
                    }
                }
                else
                {
                label_14005407c:
                    int64_t* r8_3 = arg1[4];
                    
                    if (r8_3 != 0)
                        /* tailcall */
                        return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_3);
                }
            }
            else if ((rbx_1 & 1) != 0)
            {
                int64_t* r8_5 = arg1[4];
                
                if ((r8_5 != 0 && sub_140057ed0(&data_1400653d0[3], 1, r8_5) != 0))
                    break;
            }
            
            rsi = 0;
            break;
        }
    }
    
    return rsi;
}

uint64_t sub_140054130(int64_t* arg1, char arg2, int512_t arg3 @ zmm0)
{
    uint32_t* const rdi;
    uint32_t* const var_18 = rdi;
    char* r8 = *arg1;
    
    if (r8 == 0)
    {
    label_1400545e5:
        int64_t* r8_14 = arg1[4];
        
        if (r8_14 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_14);
        
        rdi = nullptr;
    }
    else
    {
        int64_t r10_1 = arg1[1];
        int64_t rcx = arg1[2];
        
        if (rcx >= r10_1)
        {
        label_14005431c:
            int64_t* r8_4 = arg1[4];
            
            if (r8_4 == 0)
            {
            label_140054341:
                *arg1 = 0;
                arg1[1] = 0;
                rdi = nullptr;
            }
            else
            {
                rdi = 1;
                
                if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_4) == 0)
                    goto label_140054341;
            }
        }
        else
        {
            uint32_t rdx = r8[rcx];
            arg1[2] = (rcx + 1);
            int32_t r11_2 = (arg1[3] + 1);
            arg1[3] = r11_2;
            
            if (r11_2 > 0x1f4)
            {
                int64_t* r8_2 = arg1[4];
                char rax_4;
                
                if (r8_2 != 0)
                {
                    rax_4 = sub_140057ed0("{recursion limit reached}?'for<>…", 0x19, r8_2);
                    rdi = 1;
                }
                
                if ((r8_2 == 0 || rax_4 == 0))
                {
                    *arg1 = 0;
                    arg1[1] = 1;
                    rdi = nullptr;
                }
            }
            else
            {
                uint64_t r11_4 = (rdx - 0x41);
                
                if (r11_4 > 0x38)
                    goto label_14005431c;
                
                char* var_30;
                char var_28;
                char rax_3;
                char rax_20;
                char const* const rcx_5;
                char const* const rcx_19;
                int64_t rdx_12;
                uint64_t rbx;
                int64_t* r8_3;
                int64_t* r8_17;
                
                switch (r11_4)
                {
                    case 0:
                    {
                        if (arg2 == 0)
                        {
                            int64_t* r8_8 = arg1[4];
                            
                            if (r8_8 == 0)
                            {
                                rbx = 1;
                                goto label_140054616;
                            }
                            
                            rbx = 1;
                            rdi = 1;
                            
                            if (sub_140057ed0("{ {  }: 0x", 1, r8_8) == 0)
                                goto label_140054616;
                        }
                        else
                        {
                            rbx = 0;
                        label_140054616:
                            int64_t* r8_16 = arg1[4];
                            char rax_28;
                            
                            if (r8_16 != 0)
                            {
                                rax_28 = sub_140057ed0("[]::{closureshim:# as  mut const…", 1, r8_16);
                                rdi = 1;
                            }
                            
                            if ((r8_16 == 0 || rax_28 == 0))
                            {
                                rdi = 1;
                                
                                if (sub_1400528f0(arg1) == 0)
                                {
                                    r8_17 = arg1[4];
                                    
                                    if (r8_17 != 0)
                                    {
                                        rcx_19 = "]::{closureshim:# as  mut const …";
                                    label_14005475e:
                                        rdx_12 = 1;
                                    label_140054763:
                                        rax_20 = sub_140057ed0(rcx_19, rdx_12, r8_17);
                                        goto label_140054768;
                                    }
                                    
                                label_140054770:
                                    
                                    if (rbx == 0)
                                        goto label_1400541f7;
                                    
                                    r8_3 = arg1[4];
                                    
                                    if (r8_3 == 0)
                                        goto label_1400541f7;
                                    
                                    rcx_5 = "}0";
                                    goto label_14005478c;
                                }
                            }
                        }
                        break;
                    }
                    case 1:
                    {
                        rax_3 = sub_140051a80(arg1, arg2);
                        goto label_1400541ec;
                    }
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 0xa:
                    case 0xb:
                    case 0xc:
                    case 0xd:
                    case 0xe:
                    case 0xf:
                    case 0x12:
                    case 0x14:
                    case 0x16:
                    case 0x17:
                    case 0x18:
                    case 0x19:
                    case 0x1a:
                    case 0x1b:
                    case 0x1c:
                    case 0x1d:
                    case 0x1e:
                    case 0x1f:
                    case 0x23:
                    case 0x25:
                    case 0x26:
                    case 0x2a:
                    case 0x30:
                    case 0x31:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    {
                        goto label_14005431c;
                    }
                    case 0x10:
                    {
                    label_140054390:
                        
                        if (arg2 == 0)
                        {
                            int64_t* r8_5 = arg1[4];
                            
                            if (r8_5 == 0)
                            {
                                rbx = 1;
                                goto label_1400544d9;
                            }
                            
                            rbx = 1;
                            rdi = 1;
                            
                            if (sub_140057ed0("{ {  }: 0x", 1, r8_5) == 0)
                                goto label_1400544d9;
                        }
                        else
                        {
                            rbx = 0;
                        label_1400544d9:
                            int64_t* r8_11 = arg1[4];
                            char rax_18;
                            
                            if (r8_11 != 0)
                            {
                                rax_18 = sub_140057ed0(&data_1400653d0[5], 1, r8_11);
                                rdi = 1;
                            }
                            
                            if ((r8_11 == 0 || rax_18 == 0))
                            {
                                if (rdx == 0x52)
                                {
                                label_14005452c:
                                    rdi = 1;
                                    rdx = 1;
                                    rax_20 = sub_140054130(arg1, rdx);
                                    goto label_140054768;
                                }
                                
                                int64_t* r8_12 = arg1[4];
                                
                                if (r8_12 == 0)
                                    goto label_14005452c;
                                
                                char rax_19;
                                rax_19 = sub_140057ed0("mut const ; dyn  + unsafe extern…", 4, r8_12);
                                rdi = 1;
                                
                                if (rax_19 == 0)
                                    goto label_14005452c;
                            }
                        }
                        break;
                    }
                    case 0x11:
                    {
                        if (((rcx + 1) >= r10_1 || r8[(rcx + 1)] != 0x65))
                            goto label_140054390;
                        
                        arg1[2] = (rcx + 2);
                        rax_3 = sub_1400549e0(arg1);
                        goto label_1400541ec;
                    }
                    case 0x13:
                    {
                        if (arg2 == 0)
                        {
                            int64_t* r8_9 = arg1[4];
                            
                            if (r8_9 == 0)
                            {
                                rbx = 1;
                                goto label_140054662;
                            }
                            
                            rbx = 1;
                            rdi = 1;
                            
                            if (sub_140057ed0("{ {  }: 0x", 1, r8_9) == 0)
                                goto label_140054662;
                        }
                        else
                        {
                            rbx = 0;
                        label_140054662:
                            int64_t* r8_18 = arg1[4];
                            char rax_30;
                            
                            if (r8_18 != 0)
                            {
                                rax_30 = sub_140057ed0(&data_1400653d0[2], 1, r8_18);
                                rdi = 1;
                            }
                            
                            if ((r8_18 == 0 || rax_30 == 0))
                            {
                                int64_t rax_31;
                                int64_t rdx_11;
                                rax_31 = sub_140052990(arg1);
                                rdi = 1;
                                
                                if (rax_31 == 0)
                                {
                                    if (rdx_11 != 1)
                                    {
                                    label_14005474e:
                                        r8_17 = arg1[4];
                                        
                                        if (r8_17 == 0)
                                            goto label_140054770;
                                        
                                        rcx_19 = &data_1400653d0[1];
                                        goto label_14005475e;
                                    }
                                    
                                    int64_t* r8_19 = arg1[4];
                                    
                                    if (r8_19 == 0)
                                        goto label_140054770;
                                    
                                    if (sub_140057ed0(&data_1400653d0, 1, r8_19) == 0)
                                        goto label_14005474e;
                                }
                            }
                        }
                        break;
                    }
                    case 0x15:
                    {
                        if (arg2 == 0)
                        {
                            int64_t* r8_7 = arg1[4];
                            
                            if (r8_7 == 0)
                            {
                                rbx = 1;
                                goto label_140054570;
                            }
                            
                            char rax_14;
                            rax_14 = sub_140057ed0("{ {  }: 0x", 1, r8_7);
                            rbx = 1;
                            rdi = 1;
                            
                            if (rax_14 == 0)
                                goto label_140054570;
                        }
                        else
                        {
                            rbx = 0;
                        label_140054570:
                            rdi = 1;
                            rdx = 1;
                            
                            if (sub_140052ae0(arg1, rdx, arg3) == 0)
                            {
                                void* rax_23 = *arg1;
                                
                                if (rax_23 == 0)
                                    goto label_1400545e5;
                                
                                int64_t rcx_15 = arg1[2];
                                
                                if (rcx_15 >= arg1[1])
                                {
                                label_1400545bd:
                                    int64_t* r8_13 = arg1[4];
                                    
                                    if (r8_13 == 0)
                                        goto label_140054341;
                                    
                                    if (sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_13) == 0)
                                        goto label_140054341;
                                }
                                else
                                {
                                    uint32_t rax_24 = *(rax_23 + rcx_15);
                                    arg1[2] = (rcx_15 + 1);
                                    
                                    if (rax_24 == 0x53)
                                    {
                                        int64_t* r8_22 = arg1[4];
                                        char rax_36;
                                        
                                        if (r8_22 != 0)
                                            rax_36 = sub_140057ed0(" {  }: 0x", 3, r8_22);
                                        
                                        if (((r8_22 == 0 || rax_36 == 0) && sub_140052640(arg1) == 0))
                                        {
                                            r8_17 = arg1[4];
                                            
                                            if (r8_17 == 0)
                                                goto label_140054770;
                                            
                                            rcx_19 = " }: 0x";
                                            rdx_12 = 2;
                                            goto label_140054763;
                                        }
                                    }
                                    else
                                    {
                                        if (rax_24 != 0x54)
                                        {
                                            if (rax_24 == 0x55)
                                                goto label_140054770;
                                            
                                            goto label_1400545bd;
                                        }
                                        
                                        int64_t* r8_21 = arg1[4];
                                        char rax_34;
                                        
                                        if (r8_21 != 0)
                                            rax_34 = sub_140057ed0(&data_1400653d0[2], 1, r8_21);
                                        
                                        if (((r8_21 == 0 || rax_34 == 0) && sub_1400528f0(arg1) == 0))
                                            goto label_14005474e;
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case 0x20:
                    case 0x28:
                    case 0x2b:
                    case 0x2d:
                    case 0x32:
                    case 0x37:
                    {
                        if (((rcx + 1) >= r10_1 || r8[(rcx + 1)] != 0x6e))
                            goto label_1400541e7;
                        
                        arg1[2] = (rcx + 2);
                        int64_t* r8_1 = arg1[4];
                        
                        if (r8_1 == 0)
                            goto label_1400541e7;
                        
                        rdi = 1;
                        
                        if (sub_140057ed0("-}0", 1, r8_1) == 0)
                            goto label_1400541e7;
                        break;
                    }
                    case 0x21:
                    {
                        sub_140051390(&var_30, arg1);
                        char* rcx_4 = var_30;
                        
                        if (rcx_4 != 0)
                        {
                            int64_t rax_5;
                            int64_t rdx_3;
                            rax_5 = sub_1400511c0(rcx_4, var_28);
                            
                            if (rax_5 != 1)
                                goto label_14005431c;
                            
                            if (rdx_3 == 0)
                            {
                                r8_3 = arg1[4];
                                
                                if (r8_3 == 0)
                                    goto label_1400541f7;
                                
                                rax_3 = sub_140057ed0("falsetrue{ {  }: 0x", 5, r8_3);
                                goto label_1400541ec;
                            }
                            
                            if (rdx_3 != 1)
                                goto label_14005431c;
                            
                            r8_3 = arg1[4];
                            
                            if (r8_3 == 0)
                                goto label_1400541f7;
                            
                            rax_3 = sub_140057ed0("true{ {  }: 0x", 4, r8_3);
                            goto label_1400541ec;
                        }
                        
                    label_1400543f1:
                        int64_t* r8_6 = arg1[4];
                        char const* const rcx_12;
                        int64_t rdx_9;
                        
                        if (var_28 != 0)
                        {
                            if (r8_6 == 0)
                                goto label_14005455f;
                            
                            rcx_12 = "{recursion limit reached}?'for<>…";
                            rdx_9 = 0x19;
                            goto label_14005454f;
                        }
                        
                        if (r8_6 == 0)
                        {
                        label_14005455f:
                            *arg1 = 0;
                            arg1[1] = var_28;
                            rdi = nullptr;
                        }
                        else
                        {
                            rcx_12 = "{invalid syntax}{recursion limit…";
                            rdx_9 = 0x10;
                        label_14005454f:
                            rdi = 1;
                            
                            if (sub_140057ed0(rcx_12, rdx_9, r8_6) == 0)
                                goto label_14005455f;
                        }
                        break;
                    }
                    case 0x22:
                    {
                        sub_140051390(&var_30, arg1);
                        char* rcx_7 = var_30;
                        
                        if (rcx_7 == 0)
                            goto label_1400543f1;
                        
                        int64_t rax_6;
                        int64_t rdx_7;
                        int512_t zmm0;
                        rax_6 = sub_1400511c0(rcx_7, var_28);
                        
                        if ((((rax_6 == 0 || (rdx_7 >> 0x20) != 0) || ((rdx_7 ^ 0xd800) - 0x110000) < 0xffef0800) || rdx_7 == 0x110000))
                            goto label_14005431c;
                        
                        rax_3 = sub_140051e00(arg1[4], rdx_7, zmm0);
                        goto label_1400541ec;
                    }
                    case 0x24:
                    {
                        if (arg2 == 0)
                        {
                            int64_t* r8_10 = arg1[4];
                            
                            if (r8_10 == 0)
                            {
                                rbx = 1;
                                goto label_1400546ce;
                            }
                            
                            rbx = 1;
                            rdi = 1;
                            
                            if (sub_140057ed0("{ {  }: 0x", 1, r8_10) == 0)
                                goto label_1400546ce;
                        }
                        else
                        {
                            rbx = 0;
                        label_1400546ce:
                            int64_t* r8_20 = arg1[4];
                            char rax_33;
                            
                            if (r8_20 != 0)
                            {
                                rax_33 = sub_140057ed0(&data_1400653d0[6], 1, r8_20);
                                rdi = 1;
                            }
                            
                            if ((r8_20 == 0 || rax_33 == 0))
                            {
                                rax_20 = sub_1400549e0(arg1);
                                rdi = 1;
                            label_140054768:
                                
                                if (rax_20 == 0)
                                    goto label_140054770;
                            }
                        }
                        break;
                    }
                    case 0x27:
                    case 0x29:
                    case 0x2c:
                    case 0x2e:
                    case 0x33:
                    case 0x38:
                    {
                    label_1400541e7:
                        rax_3 = sub_1400547f0(arg1, rdx);
                    label_1400541ec:
                        rdi = 1;
                        
                        if (rax_3 == 0)
                            goto label_1400541f7;
                        break;
                    }
                    case 0x2f:
                    {
                        r8_3 = arg1[4];
                        
                        if (r8_3 != 0)
                        {
                            rcx_5 = "_...";
                        label_14005478c:
                            rax_3 = sub_140057ed0(rcx_5, 1, r8_3);
                            goto label_1400541ec;
                        }
                        
                    label_1400541f7:
                        
                        if (*arg1 == 0)
                            rdi = nullptr;
                        else
                        {
                            arg1[3] -= 1;
                            rdi = nullptr;
                        }
                        break;
                    }
                }
            }
        }
    }
    
    return rdi;
}

uint64_t sub_1400547f0(int64_t* arg1, char arg2)
{
    uint64_t r14;
    uint64_t var_18 = r14;
    char* rcx = *arg1;
    
    if (rcx == 0)
    {
        int64_t* r8_2 = arg1[4];
        
        if (r8_2 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_2);
        
        r14 = 0;
    }
    else
    {
        void* rdx = arg1[1];
        void* r8 = arg1[2];
        void* rdi_1 = (rcx + r8);
        void* r10_1 = nullptr;
        void* rbx_1;
        uint32_t r11_1;
        
        while (true)
        {
            rbx_1 = r10_1;
            
            if ((r10_1 + r8) >= rdx)
                goto label_1400548cd;
            
            r11_1 = *(rdi_1 + rbx_1);
            arg1[2] = ((r8 + 1) + rbx_1);
            r10_1 = (rbx_1 + 1);
            
            if ((r11_1 - 0x30) >= 0xa)
            {
                if ((r11_1 - 0x61) >= 6)
                    break;
            }
        }
        
        if (r11_1 != 0x5f)
        {
        label_1400548cd:
            int64_t* r8_1 = arg1[4];
            char rax_4;
            
            if (r8_1 != 0)
            {
                rax_4 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_1);
                r14 = 1;
            }
            
            if ((r8_1 == 0 || rax_4 == 0))
            {
                *arg1 = 0;
                arg1[1] = 0;
                r14 = 0;
            }
        }
        else
        {
            if (r8 > ((r8 + r10_1) - 1))
            {
                sub_14005cd20(rcx, rdx, r8, ((r8 + r10_1) - 1), &data_1400656b0);
                /* no return */
            }
            
            if ((r8 != 0 && *(rcx + r8) <= 0xbf))
            {
                sub_14005cd20(rcx, rdx, r8, ((r8 + r10_1) - 1), &data_1400656b0);
                /* no return */
            }
            
            int64_t rax_2;
            int64_t rdx_2;
            rax_2 = sub_1400511c0(rdi_1, rbx_1);
            int64_t* rsi_1;
            
            if (rax_2 == 0)
            {
                rsi_1 = arg1[4];
                
                if (rsi_1 == 0)
                    r14 = 0;
                else
                {
                    r14 = 1;
                    
                    if ((sub_140057ed0("0x", 2, rsi_1) == 0 && sub_140057ed0(rdi_1, rbx_1, rsi_1) == 0))
                        goto label_140054962;
                }
            }
            else
            {
                rsi_1 = arg1[4];
                int64_t var_38 = rdx_2;
                
                if (rsi_1 == 0)
                    r14 = 0;
                else
                {
                    r14 = 1;
                    
                    if (sub_14005a2a0(&var_38, rsi_1) == 0)
                    {
                    label_140054962:
                        
                        if ((*(rsi_1 + 0x34) & 4) != 0)
                            r14 = 0;
                        else
                        {
                            uint32_t rax_8;
                            
                            if ((arg2 - 0x61) < 0x1a)
                                rax_8 = (arg2 - 0x61);
                            
                            if (((arg2 - 0x61) >= 0x1a || !((TEST_BITD(0x3bcfbbf, rax_8)))))
                            {
                                sub_14005c680();
                                /* no return */
                            }
                            
                            uint64_t rax_9 = (rax_8 << 3);
                            r14 = sub_140057ed0(*(rax_9 + &data_1400659f0), *(rax_9 + &data_140065920), rsi_1);
                        }
                    }
                }
            }
        }
    }
    
    return r14;
}

uint64_t sub_1400549e0(int64_t* arg1)
{
    void** rsi;
    void** var_28 = rsi;
    char* rbx = *arg1;
    
    if (rbx == 0)
    {
        int64_t* r8_3 = arg1[4];
        
        if (r8_3 != 0)
            /* tailcall */
            return sub_140057ed0("?'for<> , []::{closureshim:# as …", 1, r8_3);
        
        rsi = nullptr;
    }
    else
    {
        void* rdx_1 = arg1[1];
        void* r8 = arg1[2];
        int64_t r14_1 = -1;
        int64_t rcx = 0;
        char* rax_1 = rbx;
        char r9_2;
        
        while (true)
        {
            if ((r8 + rcx) >= rdx_1)
                goto label_140054b46;
            
            r9_2 = *(rax_1 + r8);
            arg1[2] = ((r8 + rcx) + 1);
            rax_1 = &rax_1[1];
            r14_1 += 1;
            rcx += 1;
            
            if ((r9_2 - 0x30) >= 0xa)
            {
                if ((r9_2 - 0x61) >= 6)
                    break;
            }
        }
        
        if (r9_2 != 0x5f)
        {
        label_140054b46:
            int64_t* r8_2 = arg1[4];
            char rax_4;
            
            if (r8_2 != 0)
            {
                rax_4 = sub_140057ed0("{invalid syntax}{recursion limit…", 0x10, r8_2);
                rsi = 1;
            }
            
            if ((r8_2 == 0 || rax_4 == 0))
            {
                *arg1 = 0;
                arg1[1] = 0;
                rsi = nullptr;
            }
        }
        else
        {
            void* r9_3 = (r8 + r14_1);
            
            if (r8 > r9_3)
            {
                sub_14005cd20(rbx, rdx_1, r8, r9_3, &data_1400656b0);
                /* no return */
            }
            
            if ((r8 != 0 && *(rbx + r8) <= 0xbf))
            {
                sub_14005cd20(rbx, rdx_1, r8, r9_3, &data_1400656b0);
                /* no return */
            }
            
            if ((r14_1 & 1) != 0)
                goto label_140054b46;
            
            void* rbx_1 = (rbx + r8);
            void* var_70 = rbx_1;
            int64_t var_68_1 = r14_1;
            void* var_60_1 = ((rax_1 + r8) - 1);
            int64_t var_58_1 = 0;
            int64_t var_50_1 = 2;
            uint32_t i;
            
            do
            {
                int32_t zmm0[0x4];
                i = sub_14004f1c0(&var_70, zmm0);
            } while (i < 0x110000);
            
            if (i != 0x110001)
                goto label_140054b46;
            
            void* rdi_1 = arg1[4];
            
            if (rdi_1 == 0)
                rsi = nullptr;
            else
            {
                char rax_2;
                int32_t zmm0_1[0x4];
                rax_2 = sub_140057b20(rdi_1, 0x22);
                rsi = 1;
                
                if (rax_2 == 0)
                {
                    var_70 = rbx_1;
                    int64_t var_68_2 = r14_1;
                    void* var_60_2 = ((rax_1 + r8) - 1);
                    int64_t var_58_2 = 0;
                    int64_t var_50_2 = 2;
                    uint32_t i_1 = sub_14004f1c0(&var_70, zmm0_1);
                    
                    if (i_1 != 0x110001)
                    {
                        do
                        {
                            char var_48;
                            
                            if (i_1 == 0x110000)
                            {
                                char const (** const var_78)[0x50] = &data_140064f58;
                                sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_48, &data_1400650c0);
                                /* no return */
                            }
                            
                            int32_t zmm0_4[0x4];
                            
                            if (i_1 != 0x27)
                            {
                                zmm0_4 = sub_14004f7d0(&var_48, i_1);
                                char j_1;
                                char var_3d;
                                
                                if (var_48 != 0x80)
                                {
                                    uint64_t j = j_1;
                                    
                                    while (j < var_3d)
                                    {
                                        uint64_t rdx_7 = &var_48[j];
                                        j += 1;
                                        char rax_11;
                                        rax_11 = sub_140057b20(rdi_1, rdx_7);
                                        
                                        if (rax_11 != 0)
                                            return rsi;
                                    }
                                }
                                else
                                {
                                    void* r15_2;
                                    r15_2 = 0x80;
                                    
                                    while (true)
                                    {
                                        if (r15_2 == 0x80)
                                        {
                                            int32_t var_40_1 = 0;
                                            var_48 = 0;
                                            r15_2 = nullptr;
                                            int32_t var_44;
                                            char rax_8;
                                            rax_8 = sub_140057b20(rdi_1, var_44);
                                            
                                            if (rax_8 != 0)
                                                return rsi;
                                        }
                                        else
                                        {
                                            if (j_1 >= var_3d)
                                                break;
                                            
                                            uint64_t j_2 = j_1;
                                            j_1 += 1;
                                            char rax_10;
                                            rax_10 = sub_140057b20(rdi_1, &var_48[j_2]);
                                            
                                            if (rax_10 != 0)
                                                return rsi;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                char rax_7;
                                rax_7 = sub_140057b20(rdi_1, 0x27);
                                
                                if (rax_7 != 0)
                                    return rsi;
                            }
                            
                            i_1 = sub_14004f1c0(&var_70, zmm0_4);
                        } while (i_1 != 0x110001);
                    }
                    
                    /* tailcall */
                    return sub_140057b20(rdi_1, 0x22);
                }
            }
        }
    }
    
    return rsi;
}

int64_t* sub_140054cc0(int64_t* arg1, int16_t* arg2, void* arg3)
{
    void* rdi = arg3;
    void* var_c0;
    int512_t zmm0 = sub_140058a40(&var_c0, arg2, arg3, ".llvm./rust/deps\rustc-demangle-…", 6);
    int64_t var_a8;
    void* var_98;
    void* var_48_1;
    void* r8_2;
    
    if (var_c0 != 0)
    {
        var_48_1 = rdi;
        void* var_88;
        void* r15_1 = var_88;
        void* var_b8;
        int64_t var_a0;
        char* var_78;
        void* var_70;
        char* var_68;
        int64_t i;
        void* rcx_4;
        int64_t r10_4;
        
        if (r15_1 != -1)
        {
            rdi = var_98;
            void* rcx_1 = (rdi + (i - 1));
            
            if (rcx_1 < var_70)
            {
                while (true)
                {
                    if (!((TEST_BITQ(var_a0, *(var_78 + rcx_1)))))
                    {
                        rdi += i;
                    label_140054d63:
                        r15_1 = nullptr;
                        rcx_1 = (rdi + (i - 1));
                        
                        if (rcx_1 >= var_70)
                            break;
                    }
                    else
                    {
                        void* rcx_3 = r15_1;
                        
                        if (var_b8 > r15_1)
                            rcx_3 = var_b8;
                        
                        void* r10_3 = rcx_3;
                        
                        while (true)
                        {
                            if (r10_3 >= i)
                            {
                                rcx_4 = var_b8;
                                
                                while (true)
                                {
                                    if (r15_1 >= rcx_4)
                                        goto label_140055042;
                                    
                                    rcx_4 -= 1;
                                    
                                    if (rcx_4 >= i)
                                        goto label_140055855;
                                    
                                    r10_4 = (rcx_4 + rdi);
                                    
                                    if (r10_4 >= var_70)
                                    {
                                    label_14005582d:
                                        sub_14005c830(r10_4, var_70);
                                        /* no return */
                                    }
                                    
                                    if (*(var_68 + rcx_4) != var_78[r10_4])
                                    {
                                        rdi += var_a8;
                                        r15_1 = (i - var_a8);
                                        rcx_1 = (rdi + (i - 1));
                                        
                                        if (rcx_1 < var_70)
                                            break;
                                        
                                        goto label_140054f54;
                                    }
                                }
                                
                                break;
                            }
                            
                            if ((rdi + r10_3) >= var_70)
                            {
                                void* rcx_31 = (rcx_3 + rdi);
                                
                                if (var_70 > rcx_31)
                                    rcx_31 = var_70;
                                
                                sub_14005c830(rcx_31, var_70);
                                /* no return */
                            }
                            
                            void* rbx_2 = (r10_3 + 1);
                            bool cond:4_1 = *(var_68 + r10_3) == *((var_78 + rdi) + r10_3);
                            r10_3 = rbx_2;
                            
                            if (!(cond:4_1))
                            {
                                rdi = ((rdi - var_b8) + rbx_2);
                                goto label_140054d63;
                            }
                        }
                    }
                }
            }
            
            goto label_140054f54;
        }
        
        rdi = var_98;
        void* r10_5 = (rdi + (i - 1));
        
        if (r10_5 >= var_70)
        {
        label_140054f54:
            rdi = var_48_1;
            
            if (rdi < 3)
                goto label_140055171;
            
            goto label_140054f74;
        }
        
        while (true)
        {
            void* rbx_3;
            void* rdi_2;
            
            if (!((TEST_BITQ(var_a0, *(var_78 + r10_5)))))
                rdi_2 = (rdi + i);
            else
            {
                int64_t r10_6 = 0;
                void* rsi_2 = (var_68 + var_b8);
                void* r9_8 = rdi;
                
                while ((var_b8 + r10_6) < i)
                {
                    if ((var_b8 + r9_8) >= var_70)
                    {
                        void* rdi_6 = (rdi + var_b8);
                        
                        if (var_70 > rdi_6)
                            rdi_6 = var_70;
                        
                        sub_14005c830(rdi_6, var_70);
                        /* no return */
                    }
                    
                    char r12_2 = *rsi_2;
                    rbx_3 = (r9_8 + 1);
                    rsi_2 += 1;
                    r10_6 += 1;
                    bool cond:3_1 = r12_2 == *((var_78 + var_b8) + r9_8);
                    r9_8 = rbx_3;
                    
                    if (!(cond:3_1))
                        goto label_140054ea6;
                }
                
                rcx_4 = (var_b8 - 1);
                
                if (rcx_4 >= i)
                    break;
                
                r10_4 = (rcx_4 + rdi);
                void* r9_9 = ((var_68 + var_b8) - 1);
                void* rsi_3 = var_b8;
                bool cond:7_1;
                
                do
                {
                    void* temp4_1 = rsi_3;
                    rsi_3 -= 1;
                    
                    if (temp4_1 < 1)
                        goto label_140055042;
                    
                    if (r10_4 >= var_70)
                        goto label_14005582d;
                    
                    char rbx_7 = *r9_9;
                    r9_9 -= 1;
                    cond:7_1 = rbx_7 == var_78[r10_4];
                    r10_4 -= 1;
                } while (cond:7_1);
                rdi_2 = (rdi + var_a8);
            }
            
            rbx_3 = rdi_2;
        label_140054ea6:
            r10_5 = (rbx_3 + (i - 1));
            rdi = rbx_3;
            
            if (r10_5 >= var_70)
                goto label_140054f54;
        }
        
        if (var_b8 != 0)
        {
        label_140055855:
            sub_14005c830(rcx_4, i);
            /* no return */
        }
        
    label_140055042:
        r8_2 = (rdi + 6);
        
        if (rdi == -6)
            goto label_140055073;
        
        goto label_140055048;
    }
    
    int64_t i_3;
    int64_t i_1;
    
    do
    {
        sub_14004fa40(&i_3, &var_c0);
        i_1 = i_3;
    } while (i_1 == 1);
    
    uint64_t r11_1;
    void* r12_4;
    
    if (i_1 == 0)
    {
        var_48_1 = rdi;
        void* var_e8;
        rdi = var_e8;
        r8_2 = (rdi + 6);
        
        if (rdi != -6)
        {
        label_140055048:
            
            if (r8_2 < var_48_1)
            {
                if (*(arg2 + r8_2) > 0xbf)
                    goto label_140055073;
                
                sub_14005cd20(arg2, var_48_1, r8_2, var_48_1, &data_140065820);
                /* no return */
            }
            
            if (r8_2 == var_48_1)
                goto label_140055073;
            
            sub_14005cd20(arg2, var_48_1, r8_2, var_48_1, &data_140065820);
            /* no return */
        }
        
    label_140055073:
        char* i_2 = (r8_2 + arg2);
        
        while (i_2 != (var_48_1 + arg2))
        {
            char r9_12 = *i_2;
            uint32_t rcx_13 = r9_12;
            
            if (rcx_13 < 0)
            {
                int32_t rdx_10 = (rcx_13 & 0x1f);
                r11_1 = (i_2[1] & 0x3f);
                
                if (rcx_13 <= 0xdf)
                {
                    i_2 = &i_2[2];
                    rcx_13 = ((rdx_10 << 6) | r11_1);
                    
                    if ((rcx_13 - 0x40) < 7)
                        continue;
                }
                else
                {
                    int32_t r10_9 = ((i_2[2] & 0x3f) | (r11_1 << 6));
                    
                    if (r9_12 < 0xf0)
                    {
                        i_2 = &i_2[3];
                        rcx_13 = (r10_9 | (rdx_10 << 0xc));
                        
                        if ((rcx_13 - 0x40) < 7)
                            continue;
                    }
                    else
                    {
                        rcx_13 = (((i_2[3] & 0x3f) | (r10_9 << 6)) | ((rdx_10 & 7) << 0x12));
                        
                        if (rcx_13 == 0x110000)
                            break;
                        
                        i_2 = &i_2[4];
                        
                        if ((rcx_13 - 0x40) < 7)
                            continue;
                    }
                }
            }
            else
            {
                i_2 = &i_2[1];
                
                if ((rcx_13 - 0x40) < 7)
                    continue;
            }
            
            if ((rcx_13 - 0x30) >= 0xa)
                goto label_140054f54;
        }
        
        if (rdi == 0)
        {
            r12_4 = 1;
            rdi = nullptr;
            goto label_1400552d6;
        }
        
        if (rdi >= var_48_1)
        {
            if (rdi == var_48_1)
                goto label_140054f54;
            
            sub_14005cd20(arg2, var_48_1, nullptr, rdi, &data_140065838);
            /* no return */
        }
        
        if (*(arg2 + rdi) > 0xbf)
            goto label_140055167;
        
        sub_14005cd20(arg2, var_48_1, nullptr, rdi, &data_140065838);
        /* no return */
    }
    
label_140055167:
    int64_t rdx_22;
    void* r8_3;
    char* r8_5;
    int64_t r9_15;
    void* const r14_3;
    void* r14_4;
    void* r15_4;
    
    if (rdi < 3)
    {
    label_140055171:
        
        if (rdi == 2)
        {
            if (*arg2 != 0x4e5a)
            {
            label_1400552aa:
                rdi = 2;
                
                if (*arg2 != 0x52)
                    goto label_1400552d0;
                
                goto label_1400552b6;
            }
            
            r14_3 = -fffffffffffffffe;
            rdi = 2;
            r8_3 = 2;
            goto label_14005519d;
        }
        
    label_1400552d0:
        r12_4 = 1;
    label_1400552d6:
        r15_4 = nullptr;
    label_1400552d9:
        r14_4 = nullptr;
        r8_5 = nullptr;
    label_140055336:
        rdx_22 = 0;
    label_140055338:
        r9_15 = 0;
    label_14005533f:
        *arg1 = rdx_22;
        arg1[1] = r8_5;
        arg1[2] = r14_4;
        arg1[3] = r15_4;
        arg1[4] = arg2;
        arg1[5] = rdi;
        arg1[6] = r12_4;
        arg1[7] = r9_15;
        return arg1;
    }
    
label_140054f74:
    
    if (((arg2[1] ^ 0x4e) | (*arg2 ^ 0x5a5f)) == 0)
    {
        r14_3 = -fffffffffffffffd;
        r8_3 = 3;
        
        if (rdi != 3)
        {
            if (*(arg2 + 3) > 0xbf)
                goto label_14005519d;
            
            sub_14005cd20(arg2, rdi, r8_3, rdi, &data_140065258);
            /* no return */
        }
        
        rdi = 3;
    label_14005519d:
        r14_4 = (r14_3 + rdi);
        r8_5 = (r8_3 + arg2);
        void* r9_13 = (r8_5 + r14_4);
        int64_t rax_9 = 0;
        
        while (r14_4 != rax_9)
        {
            bool cond:2_1 = r8_5[rax_9] >= 0;
            rax_9 += 1;
            
            if (!(cond:2_1))
                goto label_140055283;
        }
        
        if (r14_4 == 0)
        {
        label_140055283:
            
            if (rdi > 2)
                goto label_140055289;
            
            if (rdi != 2)
                goto label_1400552d0;
            
            goto label_1400552aa;
        }
        
        char rcx_18 = *r8_5;
        uint32_t rdx_16 = rcx_18;
        
        if (rdx_16 < 0)
        {
            int32_t rax_11 = (rdx_16 & 0x1f);
            int32_t r10_13 = (r8_5[1] & 0x3f);
            
            if (rdx_16 <= 0xdf)
            {
                r12_4 = &r8_5[2];
                rdx_16 = ((rax_11 << 6) | r10_13);
            }
            else
            {
                int32_t rdx_20 = ((r8_5[2] & 0x3f) | (r10_13 << 6));
                
                if (rcx_18 < 0xf0)
                {
                    r12_4 = &r8_5[3];
                    rdx_16 = (rdx_20 | (rax_11 << 0xc));
                }
                else
                {
                    r12_4 = &r8_5[4];
                    rdx_16 = (((r8_5[3] & 0x3f) | (rdx_20 << 6)) | ((rax_11 & 7) << 0x12));
                }
            }
        }
        else
            r12_4 = &r8_5[1];
        
        if (rdx_16 != 0x45)
        {
            if (rdx_16 != 0x110000)
            {
                r15_4 = nullptr;
                
                while ((rdx_16 - 0x30) <= 9)
                {
                    int64_t rax_30 = 0;
                    
                    while (true)
                    {
                        if ((rdx_16 - 0x30) >= 0xa)
                        {
                            if (rax_30 == 0)
                            {
                            label_1400555c6:
                                r15_4 += 1;
                                
                                if (rdx_16 != 0x45)
                                    break;
                                
                                goto label_1400554d8;
                            }
                            
                            while (r12_4 != r9_13)
                            {
                                char rbx_8 = *r12_4;
                                rdx_16 = rbx_8;
                                
                                if (rdx_16 >= 0)
                                    r12_4 += 1;
                                else
                                {
                                    int32_t r10_24 = (rdx_16 & 0x1f);
                                    int32_t rsi_8 = (*(r12_4 + 1) & 0x3f);
                                    
                                    if (rdx_16 <= 0xdf)
                                    {
                                        r12_4 += 2;
                                        rdx_16 = ((r10_24 << 6) | rsi_8);
                                    }
                                    else
                                    {
                                        int32_t r11_8 = ((*(r12_4 + 2) & 0x3f) | (rsi_8 << 6));
                                        
                                        if (rbx_8 < 0xf0)
                                        {
                                            r12_4 += 3;
                                            rdx_16 = (r11_8 | (r10_24 << 0xc));
                                        }
                                        else
                                        {
                                            rdx_16 = (((*(r12_4 + 3) & 0x3f) | (r11_8 << 6)) | ((r10_24 & 7) << 0x12));
                                            
                                            if (rdx_16 == 0x110000)
                                                break;
                                            
                                            r12_4 += 4;
                                        }
                                    }
                                }
                                
                                int64_t temp7_1 = rax_30;
                                rax_30 -= 1;
                                
                                if (temp7_1 == 1)
                                    goto label_1400555c6;
                            }
                            
                            goto label_140055283;
                        }
                        
                        int64_t rax_31;
                        int64_t rdx_28;
                        rdx_28 = HIGHQ((rax_30 * 0xa));
                        rax_31 = LOWQ((rax_30 * 0xa));
                        
                        if (((rax_30 * 0xa) >> 0x40) != {0})
                            goto label_140055283;
                        
                        uint64_t rdx_29 = (rdx_16 - 0x30);
                        rax_30 = (rax_31 + rdx_29);
                        
                        if ((rax_31 + rdx_29) < rax_31)
                            goto label_140055283;
                        
                        if (r12_4 == r9_13)
                            goto label_140055283;
                        
                        r11_1 = *r12_4;
                        rdx_16 = r11_1;
                        
                        if (rdx_16 >= 0)
                            r12_4 += 1;
                        else
                        {
                            int32_t r10_17 = (rdx_16 & 0x1f);
                            int32_t rsi_5 = (*(r12_4 + 1) & 0x3f);
                            
                            if (rdx_16 <= 0xdf)
                            {
                                r12_4 += 2;
                                rdx_16 = ((r10_17 << 6) | rsi_5);
                            }
                            else
                            {
                                int32_t rdx_32 = ((*(r12_4 + 2) & 0x3f) | (rsi_5 << 6));
                                
                                if (r11_1 < 0xf0)
                                {
                                    r12_4 += 3;
                                    rdx_16 = (rdx_32 | (r10_17 << 0xc));
                                }
                                else
                                {
                                    uint32_t r11_3 = *(r12_4 + 3);
                                    r12_4 += 4;
                                    rdx_16 = (((r11_3 & 0x3f) | (rdx_32 << 6)) | ((r10_17 & 7) << 0x12));
                                }
                            }
                        }
                        
                        if (rdx_16 == 0x110000)
                            goto label_140055283;
                    }
                }
            }
            
            goto label_140055283;
        }
        
        r15_4 = nullptr;
    label_1400554d8:
        r9_15 = (r9_13 - r12_4);
        
        if (r9_15 == 0)
        {
            rdx_22 = 1;
            goto label_140055338;
        }
    }
    else
    {
        if (*arg2 == 0x4e5a)
        {
            if (arg2[1] <= 0xbf)
            {
                sub_14005cd20(arg2, rdi, 2, rdi, &data_140065240);
                /* no return */
            }
            
            r8_3 = 2;
            r14_3 = -fffffffffffffffe;
            goto label_14005519d;
        }
        
        void* rdx_2 = 3;
        
        if (rdi == 3)
            goto label_140055291;
        
        if (*arg2 == 0x4e5a5f5f)
        {
            r14_3 = -fffffffffffffffc;
            r8_3 = 4;
            
            if (rdi < 5)
            {
                rdi = 4;
                goto label_14005519d;
            }
            
            if (arg2[2] > 0xbf)
                goto label_14005519d;
            
            sub_14005cd20(arg2, rdi, r8_3, rdi, &data_140065228);
            /* no return */
        }
        
    label_140055289:
        rdx_2 = rdi;
    label_140055291:
        char rax_18;
        void* const r15_3;
        
        if (*arg2 != 0x525f)
        {
            if (*arg2 == 0x52)
            {
                rdi = rdx_2;
            label_1400552b6:
                rax_18 = *(arg2 + 1);
                
                if (rax_18 <= 0xbf)
                {
                    sub_14005cd20(arg2, rdi, 1, rdi, &data_140065470);
                    /* no return */
                }
                
                r14_4 = (arg2 + 1);
                r15_3 = -ffffffffffffffff;
                goto label_1400552fe;
            }
            
            r12_4 = 1;
            
            if (rdx_2 == 3)
            {
                rdi = 3;
                goto label_1400552d6;
            }
            
            r15_4 = nullptr;
            
            if (((arg2[1] ^ 0x52) | (*arg2 ^ 0x5f5f)) != 0)
            {
                rdi = rdx_2;
                goto label_1400552d9;
            }
            
            rax_18 = *(arg2 + 3);
            
            if (rax_18 <= 0xbf)
            {
                sub_14005cd20(arg2, rdx_2, 3, rdx_2, &data_140065458);
                /* no return */
            }
            
            r14_4 = (arg2 + 3);
            r15_3 = -fffffffffffffffd;
            goto label_1400552f9;
        }
        
        rax_18 = arg2[1];
        
        if (rax_18 <= 0xbf)
        {
            sub_14005cd20(arg2, rdx_2, 2, rdx_2, &data_140065488);
            /* no return */
        }
        
        r14_4 = &arg2[1];
        r15_3 = -fffffffffffffffe;
    label_1400552f9:
        rdi = rdx_2;
    label_1400552fe:
        r12_4 = 1;
        r8_5 = nullptr;
        
        if ((rax_18 - 0x41) > 0x19)
        {
        label_140055330:
            r15_4 = nullptr;
            r14_4 = nullptr;
            goto label_140055336;
        }
        
        r15_4 = (r15_3 + rdi);
        r8_5 = nullptr;
        int64_t rax_19 = 0;
        
        while (r15_4 != rax_19)
        {
            bool cond:8_1 = *(r14_4 + rax_19) >= 0;
            rax_19 += 1;
            
            if (!(cond:8_1))
                goto label_140055330;
        }
        
        var_c0 = r14_4;
        void* var_b0_1 = nullptr;
        var_a8 = 0;
        int64_t var_a0_1 = 0;
        var_98 = 0;
        char rax_21;
        int512_t zmm0_1;
        rax_21 = sub_140052ae0(&var_c0, 0, zmm0);
        
        if (rax_21 != 0)
        {
        label_1400558be:
            char const (** const var_f8_1)[0x2b] = &data_1400654e0;
            sub_14005ca50("`fmt::Error`s should be impossib…", 0x3d, &i_3, &data_1400650a0);
            /* no return */
        }
        
        void* rcx_25 = var_c0;
        char rax_22 = r15_4;
        
        if (rcx_25 == 0)
        {
            r15_4 = (rax_22 & 1);
            goto label_1400552d9;
        }
        
        void* r9_19 = (((*r15_4[1] | ((*r15_4[5] | (*r15_4[7] << 0x10)) << 0x20)) << 8) | rax_22);
        
        if ((var_b0_1 < r9_19 && (*(rcx_25 + var_b0_1) - 0x41) < 0x1a))
        {
            zmm0_1 = var_a8;
            var_c0 = rcx_25;
            int64_t var_a8_1 = zmm0_1;
            int64_t var_a0_2 = 0;
            var_98 = 0;
            char rax_25;
            rax_25 = sub_140052ae0(&var_c0, 0, zmm0_1);
            
            if (rax_25 != 0)
                goto label_1400558be;
            
            rcx_25 = var_c0;
            rax_22 = r9_19;
            
            if (rcx_25 == 0)
            {
                r15_4 = (rax_22 & 1);
                goto label_1400552d9;
            }
            
            r9_19 = (((*r9_19[1] | ((*r9_19[5] | (*r9_19[7] << 0x10)) << 0x20)) << 8) | rax_22);
        }
        
        if (var_b0_1 != 0)
        {
            if (r9_19 <= var_b0_1)
            {
                if (r9_19 != var_b0_1)
                {
                    sub_14005cd20(rcx_25, r9_19, var_b0_1, r9_19, &data_1400654f8);
                    /* no return */
                }
            }
            else if (*(rcx_25 + var_b0_1) <= 0xbf)
            {
                sub_14005cd20(rcx_25, r9_19, var_b0_1, r9_19, &data_1400654f8);
                /* no return */
            }
        }
        
        r9_15 = (r9_19 - var_b0_1);
        r8_5 = nullptr;
        r12_4 = (rcx_25 + var_b0_1);
        
        if (r9_15 == 0)
        {
            rdx_22 = 1;
            goto label_140055338;
        }
    }
    
    if (*r12_4 != 0x2e)
    {
        rdx_22 = 0;
    label_1400557e8:
        r9_15 = 0;
        r12_4 = 1;
        goto label_14005533f;
    }
    
    r11_1 = 0x2e;
    rdx_22 = 0;
    char* r10_30 = r12_4;
    
    while (true)
    {
        r10_30 = &r10_30[1];
        uint32_t r11_12 = r11_1;
        
        if ((r11_12 - 0x21) < 0x19)
            break;
        
        while (true)
        {
            if (((r11_12 & 0xffffffdf) - 0x41) >= 0x1a)
            {
                uint64_t rsi_23 = (r11_12 - 0x3a);
                
                if (((rsi_23 > 0x26 || !((TEST_BITQ(0x7e0000007f, rsi_23)))) && (r11_12 - 0x7f) < 0xfffffffc))
                    goto label_1400557e8;
            }
            
        label_1400557c7:
            
            if (r10_30 == (r12_4 + r9_15))
            {
                rdx_22 = 1;
                goto label_14005533f;
            }
            
            r11_1 = *r10_30;
            
            if (r11_1 >= 0)
                break;
            
            uint32_t rsi_10 = (r11_1 & 0x1f);
            int32_t rdi_4 = (r10_30[1] & 0x3f);
            
            if (r11_1 <= 0xdf)
            {
                r10_30 = &r10_30[2];
                r11_12 = ((rsi_10 << 6) | rdi_4);
                
                if ((r11_12 - 0x21) < 0x19)
                    goto label_1400557c7;
            }
            else
            {
                int32_t r13_5 = ((r10_30[2] & 0x3f) | (rdi_4 << 6));
                
                if (r11_1 < 0xf0)
                {
                    r10_30 = &r10_30[3];
                    r11_12 = (r13_5 | (rsi_10 << 0xc));
                    
                    if ((r11_12 - 0x21) < 0x19)
                        goto label_1400557c7;
                }
                else
                {
                    r11_12 = (((r10_30[3] & 0x3f) | (r13_5 << 6)) | ((rsi_10 & 7) << 0x12));
                    
                    if (r11_12 == 0x110000)
                    {
                        rdx_22 = 1;
                        goto label_14005533f;
                    }
                    
                    r10_30 = &r10_30[4];
                    
                    if ((r11_12 - 0x21) < 0x19)
                        goto label_1400557c7;
                }
            }
        }
    }
    
    goto label_1400557c7;
}

int128_t* sub_140055900(int128_t* arg1, int16_t* arg2, void* arg3)
{
    int64_t var_50;
    sub_140054cc0(&var_50, arg2, arg3);
    
    if (var_50 == 0)
        *arg1 = 2;
    else
    {
        int128_t zmm0_1 = var_50;
        int128_t var_20;
        arg1[3] = var_20;
        int128_t var_30;
        arg1[2] = var_30;
        int128_t var_40;
        arg1[1] = var_40;
        *arg1 = zmm0_1;
    }
    
    return arg1;
}

uint64_t sub_140055950(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    bool rax = *arg1 != 0;
    int64_t temp0 = arg1[1];
    arg1[1] -= arg3;
    uint64_t result = (temp0 < arg3 | rax);
    *arg1 = result;
    
    if (result == 0)
        /* tailcall */
        return sub_1400577c0(arg1[2]);
    
    result = 1;
    return result;
}

int64_t sub_140055980(int64_t* arg1, void* arg2)
{
    if (*arg1 == 0)
    {
        if (sub_1400577c0(arg2, arg1[4], arg1[5]) != 0)
            return 1;
    }
    else
    {
        bool cond:0_1 = (*(arg2 + 0x34) & 4) != 0;
        void* var_20 = &arg1[1];
        int64_t var_38 = 0;
        int64_t var_30_1 = 0xf4240;
        void* var_28_1 = arg2;
        void** var_a0;
        void* const var_70;
        char rax_1;
        int64_t rcx_1;
        
        if (!(cond:0_1))
        {
            var_a0 = &var_20;
            uint64_t (* var_98_1)(int64_t* arg1, int64_t* arg2) = sub_14004f650;
            var_70 = &data_140065850;
            int64_t var_68_1 = 1;
            int64_t var_50_1 = 0;
            void*** var_60_1 = &var_a0;
            int64_t var_58_1 = 1;
            rax_1 = sub_140056fc0(&var_38, &data_140065198, &var_70);
            rcx_1 = var_38;
            
            if ((rax_1 != 0 && rcx_1 != 0))
                goto label_140055ae9;
            
            goto label_140055af4;
        }
        
        void** var_b0 = &var_20;
        uint64_t (* var_a8_1)(int64_t* arg1, int64_t* arg2) = sub_14004f650;
        var_70 = 2;
        int64_t var_60_2 = 2;
        int64_t var_50_2 = 0;
        int64_t var_48_1 = 0x400000020;
        char var_40_1 = 3;
        var_a0 = &data_140065850;
        int64_t var_98_2 = 1;
        void* const* var_80_1 = &var_70;
        int64_t var_78_1 = 1;
        void*** var_90_1 = &var_b0;
        int64_t var_88_1 = 1;
        rax_1 = sub_140056fc0(&var_38, &data_140065198, &var_a0);
        rcx_1 = var_38;
        
        if ((rax_1 == 0 || rcx_1 == 0))
        {
        label_140055af4:
            
            if (rax_1 != 0)
                return 1;
            
            if (rcx_1 != 0)
            {
                char const (** const var_b8)[0x2c] = &data_1400658b0;
                sub_14005ca50("`fmt::Error` from `SizeLimitedFm…", 0x37, &var_70, &data_140065080);
                /* no return */
            }
        }
        else
        {
        label_140055ae9:
            
            if (sub_1400577c0(arg2, "{size limit reached}`fmt::Error`…", 0x14) != 0)
                return 1;
        }
    }
    
    return sub_1400577c0(arg2, arg1[6], arg1[7]);
}

int64_t sub_140055b50(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1400577c0(arg2, "SizeLimitExhausted", 0x12);
}

uint64_t sub_140055b70(int64_t arg1 @ xcr0)
{
    int32_t temp0;
    temp0 = _xgetbv(0, arg1);
    int32_t temp1;
    return (temp1 | (temp0 << 0x20));
}

int64_t sub_140055b90(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_140065d78, arg2);
}

void sub_140055bb0(int64_t* arg1)
{
    int64_t rdx = *arg1;
    
    if (rdx == 0)
        return;
    
    /* tailcall */
    return j_sub_140049af0(arg1[1], rdx, 1);
}

int64_t sub_140055bd0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1400577c0(arg2, "ErrorLayoutError", 5);
}

int64_t sub_140055bf0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_1400577c0(arg2, "LayoutError", 0xb);
}

void sub_140055c10() __noreturn
{
    char const (** const var_38)[0x12] = &data_140065dc0;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

int64_t sub_140055c50(int64_t* arg1)
{
    int64_t rax = *arg1;
    
    if (rax == -1)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    uint64_t rcx = (rax + 1);
    uint64_t rdx = (rax * 2);
    
    if (rdx > rcx)
        rcx = rdx;
    
    uint64_t rdi = 8;
    
    if (rcx >= 9)
        rdi = rcx;
    
    int64_t var_48;
    int64_t rax_1;
    
    if (rax == 0)
        rax_1 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rax;
        rax_1 = 1;
    }
    
    int64_t var_40 = rax_1;
    uint64_t var_30;
    sub_140055cf0(&var_30, (!(rdi) >> 0x3f), rdi, &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t sub_140055cf0(uint64_t* arg1, int64_t arg2, uint64_t arg3, int64_t* arg4)
{
    uint64_t rbx = 1;
    int64_t result;
    uint64_t rdi;
    
    if (arg2 == 0)
    {
        result = 8;
        rdi = 0;
    }
    else
    {
        rdi = arg3;
        int64_t rdx;
        
        if (arg4[1] != 0)
            rdx = arg4[2];
        
        int64_t rax;
        
        if ((arg4[1] != 0 && rdx != 0))
        {
            rax = j_sub_140049b20(*arg4, rdx, 1, rdi);
            
            if (rax != 0)
                goto label_140055d70;
            
            arg1[1] = 1;
            result = 0x10;
        }
        else if (rdi == 0)
        {
            rax = 1;
        label_140055d70:
            arg1[1] = rax;
            result = 0x10;
            rbx = 0;
        }
        else
        {
            data_140071141;
            rax = j_sub_140049a90(rdi, 1);
            
            if (rax != 0)
                goto label_140055d70;
            
            arg1[1] = 1;
            result = 0x10;
        }
    }
    
    *(arg1 + result) = rdi;
    *arg1 = rbx;
    return result;
}

int64_t sub_140055d90(void* arg1)
{
    *(arg1 + 0x10);
    return *(arg1 + 8);
}

int64_t sub_140055da0(void* arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140057ed0(*(arg1 + 8), *(arg1 + 0x10), arg2);
}

int64_t sub_140055dc0(void* arg1, void* arg2)
{
    /* tailcall */
    return sub_140057b40(*(arg1 + 8), *(arg1 + 0x10), arg2);
}

int128_t* sub_140055de0(int128_t* arg1, int64_t* arg2)
{
    int64_t var_30 = -2;
    int64_t rdx = arg2[1];
    int64_t rax_3;
    uint64_t rbx_1;
    
    if (rdx == 0)
    {
        rax_3 = 1;
        rbx_1 = 0;
    }
    else
    {
        void* rax_1 = *arg2;
        uint64_t rcx_1 = (rdx & 3);
        int64_t i;
        
        if (rdx >= 4)
        {
            void* r9_1 = (rax_1 + 0x38);
            rbx_1 = 0;
            i = 0;
            
            do
            {
                rbx_1 = ((((rbx_1 + *(r9_1 - 0x30)) + *(r9_1 - 0x20)) + *(r9_1 - 0x10)) + *r9_1);
                i += 4;
                r9_1 += 0x40;
            } while ((rdx & 0xfffffffffffffffc) != i);
        }
        else
        {
            rbx_1 = 0;
            i = 0;
        }
        
        if (rcx_1 != 0)
        {
            int64_t i_1 = 0;
            
            do
            {
                rbx_1 += *((((i << 4) + rax_1) + 8) + i_1);
                i_1 += 0x10;
            } while ((rcx_1 << 4) != i_1);
        }
        
        if (arg2[3] == 0)
            goto label_140055e9f;
        
        rax_1 = *(rax_1 + 8) == 0;
        rcx_1 = rbx_1 < 0x10;
        
        if (rbx_1 < 0)
        {
            rax_3 = 1;
            rbx_1 = 0;
        }
        else
        {
            rcx_1 &= rax_1;
            
            if (rcx_1 != 0)
            {
                rax_3 = 1;
                rbx_1 = 0;
            }
            else
            {
                rbx_1 *= 2;
            label_140055e9f:
                
                if (rbx_1 == 0)
                {
                    rax_3 = 1;
                    rbx_1 = 0;
                }
                else
                {
                    if (rbx_1 < 0)
                    {
                        sub_14005c5d0(0);
                        /* no return */
                    }
                    
                    data_140071141;
                    rax_3 = j_sub_140049a90(rbx_1, 1);
                    
                    if (rax_3 == 0)
                    {
                        sub_14005c5d0(1);
                        /* no return */
                    }
                }
            }
        }
    }
    
    uint64_t var_50 = rbx_1;
    int64_t var_48 = rax_3;
    int64_t var_40 = 0;
    
    if (sub_140056fc0(&var_50, &data_140065d78, arg2) == 0)
    {
        arg1[1] = var_40;
        *arg1 = var_50;
        return arg1;
    }
    
    char const (** const var_58)[0x19] = &data_140065e78;
    void var_31;
    sub_14005ca50("a formatting trait implementatio…", 0x56, &var_31, &data_140065cf8);
    /* no return */
}

void sub_140055f50(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x28);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x30), rdx, 1);
}

int64_t* sub_140055f90(int64_t* arg1, int16_t* arg2, uint64_t arg3)
{
    int64_t var_38 = -2;
    int16_t* rdi = arg2;
    void* const rax_2;
    
    if (arg3 == 0)
        rax_2 = 1;
    else
    {
        if (arg3 < 0)
        {
            sub_14005c5d0(0);
            /* no return */
        }
        
        data_140071141;
        rax_2 = j_sub_140049a90(arg3, 1);
        
        if (rax_2 == 0)
        {
            sub_14005c5d0(1);
            /* no return */
        }
    }
    
    uint64_t var_50 = arg3;
    int64_t var_40 = 0;
    void* r14_2 = &rdi[arg3];
    
    while (true)
    {
        if (rdi == r14_2)
        {
            arg1[2] = var_40;
            *arg1 = var_50;
            break;
        }
        
        uint32_t rcx_2 = *rdi;
        uint32_t rdx_2 = rcx_2;
        uint64_t rdx;
        
        if ((rcx_2 & 0xf800) != 0xd800)
        {
            rdx = (rdx_2 << 0x10);
            rdi = &rdi[1];
        }
        else
        {
            uint32_t rax_4;
            
            if ((rdx_2 <= 0xdbff && &rdi[1] != r14_2))
                rax_4 = rdi[1];
            
            if (((rdx_2 > 0xdbff || &rdi[1] == r14_2) || (rax_4 + 0x2000) < 0xfc00))
            {
                *arg1 = -0x8000000000000000;
                uint64_t rdx_5 = var_50;
                
                if (rdx_5 != 0)
                    j_sub_140049af0(rax_2, rdx_5, 1);
                
                break;
            }
            
            rdi = &rdi[2];
            rdx = ((((rax_4 & 0x3ff) << 0x10) | ((rdx_2 & 0x3ff) << 0x1a)) + 0x100000000);
        }
        
        sub_140056120(&var_50, (rdx >> 0x10));
    }
    
    return arg1;
}

void sub_1400560e0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = *(arg2 + 0x28);
    
    if (rdx != 0)
        j_sub_140049af0(*(arg2 + 0x30), rdx, 1);
}

char* sub_140056120(int64_t* arg1, int32_t arg2)
{
    char* result;
    
    if (arg2 >= 0x80)
    {
        int32_t var_24 = 0;
        int64_t rdi_2;
        
        if (arg2 < 0x800)
        {
            var_24 = ((arg2 >> 6) | 0xc0);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[1] = arg2;
            rdi_2 = 2;
        }
        else if (arg2 >= 0x10000)
        {
            var_24 = (((arg2 >> 0x12) & 7) | 0xf0);
            *var_24[1] = (((arg2 >> 0xc) & 0x3f) | 0x80);
            *var_24[2] = (((arg2 >> 6) & 0x3f) | 0x80);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[3] = arg2;
            rdi_2 = 4;
        }
        else
        {
            var_24 = ((arg2 >> 0xc) | 0xe0);
            *var_24[1] = (((arg2 >> 6) & 0x3f) | 0x80);
            arg2 &= 0x3f;
            arg2 |= 0x80;
            *var_24[2] = arg2;
            rdi_2 = 3;
        }
        
        int64_t rbx_2 = arg1[2];
        
        if ((*arg1 - rbx_2) < rdi_2)
        {
            sub_14005c530(arg1, rbx_2, rdi_2);
            rbx_2 = arg1[2];
        }
        
        result = memcpy((arg1[1] + rbx_2), &var_24, rdi_2);
        arg1[2] = (rbx_2 + rdi_2);
    }
    else
    {
        int64_t rdi = arg1[2];
        
        if (rdi == *arg1)
            sub_140055c50(arg1);
        
        result = arg1[1];
        result[rdi] = arg2;
        arg1[2] = (rdi + 1);
    }
    
    return result;
}

int64_t sub_140056230(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t rbx = arg1[2];
    
    if ((*arg1 - rbx) < arg3)
    {
        sub_14005c530(arg1, rbx, arg3);
        rbx = arg1[2];
    }
    
    memcpy((arg1[1] + rbx), arg2, arg3);
    arg1[2] = (rbx + arg3);
    return 0;
}

int64_t sub_1400562a0(int64_t* arg1, int32_t arg2)
{
    sub_140056120(arg1, arg2);
    return 0;
}

int64_t sub_1400562c0(int64_t arg1, int64_t arg2)
{
    int64_t result = 8;
    
    if (arg1 >= 9)
        result = arg1;
    
    int64_t rcx_1 = (-(arg1) & (arg1 + 0xf));
    
    if ((rcx_1 >= 0x10 && ((rcx_1 + arg2) >= rcx_1 && (rcx_1 + arg2) <= (-0x8000000000000000 - result))))
        return result;
    
    char const (** const var_18)[0x1a] = &data_140065eb0;
    void var_9;
    sub_14005ca50("called `Result::unwrap()` on an …", 0x2b, &var_9, &data_140065d18);
    /* no return */
}

void sub_140056340(int32_t arg1) __noreturn
{
    int32_t var_c = arg1;
    int32_t* var_20 = &var_c;
    uint64_t (* var_18)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
    char const (** const var_50)[0x3d] = &data_140066030;
    int64_t var_48 = 1;
    int64_t var_30 = 0;
    int32_t** var_40 = &var_20;
    int64_t var_38 = 1;
    sub_14005c700(&var_50);
    /* no return */
}

int64_t sub_1400563a0(int64_t* arg1, int64_t* arg2)
{
    if ((sub_140059d70(arg1, arg2) == 0 && *(arg2[5] + 0x18)(arg2[4], "..0123456789abcdefBorrowMutError…", 2) == 0))
        /* tailcall */
        return sub_140059d70(&arg1[1], arg2);
    
    return 1;
}

int64_t sub_140056400(int64_t arg1, void* arg2)
{
    *(arg2 + 0x20);
    /* jump -> *(*(arg2 + 0x28) + 0x18) */
}

void sub_140056430(int64_t* arg1, int32_t arg2, int32_t arg3)
{
    if (arg2 <= 0x27)
        switch (arg2)
        {
            case 0:
            {
                *arg1 = 0x305c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 0xb:
            case 0xc:
            case 0xe:
            case 0xf:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1a:
            case 0x1b:
            case 0x1c:
            case 0x1d:
            case 0x1e:
            case 0x1f:
            case 0x20:
            case 0x21:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            {
                goto label_14005646e;
            }
            case 9:
            {
                *arg1 = 0x745c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
            case 0xa:
            {
                *arg1 = 0x6e5c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
            case 0xd:
            {
                *arg1 = 0x725c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
            case 0x22:
            {
                if ((arg3 & 0x10000) == 0)
                    goto label_1400565a4;
                
                *arg1 = 0x225c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
            case 0x27:
            {
                if ((arg3 & 0x100) == 0)
                    goto label_1400565a4;
                
                *arg1 = 0x275c;
                *(arg1 + 2) = 0;
                *(arg1 + 0xa) = 0x200;
                break;
            }
        }
    else if (arg2 != 0x5c)
    {
    label_14005646e:
        void var_24;
        int16_t var_22;
        
        if ((arg2 < 0x300 || (arg3 & 1) == 0))
        {
        label_1400565a4:
            
            if (sub_1400594b0(arg2) == 0)
            {
                uint64_t rflags_2;
                int32_t temp0_2;
                temp0_2 = _bit_scan_reverse((arg2 | 1));
                uint64_t rax_10 = ((temp0_2 ^ 0x1c) >> 2);
                char var_20_2 = 0;
                var_22 = 0;
                char var_1f_2 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0x14) & 0xf)];
                char var_1e_2 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0x10) & 0xf)];
                char var_1d_2 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0xc) & 0xf)];
                char var_1c_2 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 8) & 0xf)];
                char var_1b_2 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 4) & 0xf)];
                char rdx_5 = *"0123456789abcdefBorrowMutErroral…"[(arg2 & 0xf)];
                char var_19_2 = 0x7d;
                
                if ((rax_10 - 2) >= 0xa)
                {
                    sub_14005c830((rax_10 - 2), 0xa);
                    /* no return */
                }
                
                *(&var_24 + rax_10) = 0x755c;
                *(&var_22 + rax_10) = 0x7b;
                arg1[1] = rdx_5;
                *arg1 = var_22;
                *(arg1 + 0xa) = (rax_10 - 2);
                *(arg1 + 0xb) = 0xa;
            }
            else
            {
                *arg1 = 0x80;
                *(arg1 + 4) = arg2;
            }
        }
        else
        {
            if (sub_14005a450(arg2) == 0)
                goto label_1400565a4;
            
            uint64_t rflags_1;
            int32_t temp0_1;
            temp0_1 = _bit_scan_reverse((arg2 | 1));
            uint64_t rdx_2 = ((temp0_1 ^ 0x1c) >> 2);
            char var_20_1 = 0;
            var_22 = 0;
            char var_1f_1 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0x14) & 0xf)];
            char var_1e_1 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0x10) & 0xf)];
            char var_1d_1 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 0xc) & 0xf)];
            char var_1c_1 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 8) & 0xf)];
            char var_1b_1 = *"0123456789abcdefBorrowMutErroral…"[((arg2 >> 4) & 0xf)];
            char r8_1 = *"0123456789abcdefBorrowMutErroral…"[(arg2 & 0xf)];
            char var_19_1 = 0x7d;
            
            if ((rdx_2 - 2) >= 0xa)
            {
                sub_14005c830((rdx_2 - 2), 0xa);
                /* no return */
            }
            
            *(&var_24 + rdx_2) = 0x755c;
            *(&var_22 + rdx_2) = 0x7b;
            arg1[1] = r8_1;
            *arg1 = var_22;
            *(arg1 + 0xa) = (rdx_2 - 2);
            *(arg1 + 0xb) = 0xa;
        }
    }
    else
    {
        *arg1 = 0x5c5c;
        *(arg1 + 2) = 0;
        *(arg1 + 0xa) = 0x200;
    }
}

int64_t sub_1400566c0(int64_t arg1, void* arg2)
{
    int64_t var_38 = arg1;
    int64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    int64_t var_28 = (arg1 + 0x10);
    uint64_t (* var_20)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
    int64_t var_18 = (arg1 + 0x14);
    uint64_t (* var_10)(int32_t* arg1, int64_t* arg2) = sub_14005a180;
    void* const var_68 = &data_1400660c8;
    int64_t var_60 = 3;
    int64_t var_48 = 0;
    int64_t* var_58 = &var_38;
    int64_t var_50 = 3;
    return sub_140056fc0(*(arg2 + 0x20), *(arg2 + 0x28), &var_68);
}

char* sub_140056750(int64_t* arg1, void* arg2, void* arg3)
{
    int64_t r14;
    int64_t var_18 = r14;
    char* rax = arg1[2];
    int64_t rax_1 = *arg1;
    int64_t rax_2 = arg1[1];
    void* rbx = nullptr;
    int128_t zmm6 = *"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…";
    int32_t zmm7[0x4] = data_140065ed0;
    void* r13 = nullptr;
    char* result;
    
    do
    {
        void* r12_1;
        void* r15_1;
        
        if (rbx <= arg3)
        {
            while (true)
            {
                int64_t rcx_1 = (arg3 - rbx);
                char* rax_3 = (arg2 + rbx);
                char* r9_1;
                
                if (rcx_1 <= 0xf)
                {
                    if (arg3 == rbx)
                    {
                    label_1400568e0:
                        r15_1 = arg3;
                        goto label_1400568e3;
                    }
                    
                    r9_1 = nullptr;
                    
                    while (*(rax_3 + r9_1) != 0xa)
                    {
                        r9_1 = &r9_1[1];
                        
                        if (rcx_1 == r9_1)
                            goto label_1400568e0;
                    }
                    
                    goto label_1400568b4;
                }
                
                void* r8_1 = (&rax_3[7] & 0xfffffffffffffff8);
                char* rdx_1 = (r8_1 - rax_3);
                int64_t r9_2;
                
                if (r8_1 == rax_3)
                {
                    r9_2 = (rcx_1 - 0x10);
                    goto label_140056845;
                }
                
                r9_1 = nullptr;
                
                do
                {
                    if (*(rax_3 + r9_1) == 0xa)
                        goto label_1400568b4;
                    
                    r9_1 = &r9_1[1];
                } while (rdx_1 != r9_1);
                
                r9_2 = (rcx_1 - 0x10);
                
                while (rdx_1 <= r9_2)
                {
                label_140056845:
                    uint32_t zmm0[0x4] = *r8_1;
                    zmm0 &= !(_mm_add_epi64((zmm0 ^ zmm6), zmm7));
                    
                    if (((_mm_shuffle_epi32(zmm0, 0xee) | zmm0)[0] & 0x8080808080808080) != 0)
                        break;
                    
                    rdx_1 = &rdx_1[0x10];
                    r8_1 += 0x10;
                }
                
                r9_1 = rdx_1;
                
                if (rdx_1 == rcx_1)
                    goto label_1400568e0;
                
                while (*(rax_3 + r9_1) != 0xa)
                {
                    r9_1 = &r9_1[1];
                    
                    if (rcx_1 == r9_1)
                        goto label_1400568e0;
                }
                
            label_1400568b4:
                r15_1 = ((rbx + r9_1) + 1);
                
                if (((rbx + r9_1) < arg3 && *(r9_1 + rax_3) == 0xa))
                {
                    r14 = 1;
                    rbx = r15_1;
                    r12_1 = r15_1;
                    break;
                }
                
                rbx = r15_1;
                
                if (r15_1 > arg3)
                    goto label_1400568e3;
            }
        }
        else
        {
            r15_1 = rbx;
        label_1400568e3:
            r14 = 0;
            rbx = r15_1;
            r15_1 = r13;
            r12_1 = arg3;
            result = nullptr;
            
            if (r13 == arg3)
                break;
        }
        
        if ((*rax != 0 && *(rax_2 + 0x18)(rax_1, "     { ,  {\n,\n} }((\n,\n]libra…", 4) != 0))
        {
            result = 1;
            break;
        }
        
        if (r12_1 != r13)
            result = *((arg2 + r12_1) - 1) == 0xa;
        else
            result = nullptr;
        
        *rax = result;
        result = *(rax_2 + 0x18)(rax_1, (r13 + arg2), (r12_1 - r13));
        
        if (result != 0)
            break;
        
        r14 ^= 1;
        r13 = r15_1;
    } while (r14 == 0);
    
    return result;
}

int64_t sub_140056990(int64_t* arg1, int32_t arg2)
{
    bool* rdi = arg1[2];
    void* rbx = arg1[1];
    
    if ((*rdi != 0 && *(rbx + 0x18)(*arg1, "     { ,  {\n,\n} }((\n,\n]libra…", 4) != 0))
        return 1;
    
    *rdi = arg2 == 0xa;
    /* jump -> *(rbx + 0x20) */
}

int64_t* sub_140056a00(int64_t* arg1, void* arg2, void* arg3, int64_t arg4, int64_t arg5)
{
    uint64_t r14;
    r14 = 1;
    
    if (arg1[1] == 0)
    {
        int128_t* rbx_1 = *arg1;
        int32_t rax_2 = *(rbx_1 + 0x34);
        char rcx = *(arg1 + 9);
        
        if ((rax_2 & 4) != 0)
        {
            if (rcx != 0)
                goto label_140056b06;
            
            if (*(*(rbx_1 + 0x28) + 0x18)(rbx_1[2], " {\n,\n} }((\n,\n]library\core\s…", 3) == 0)
            {
                rax_2 = *(rbx_1 + 0x34);
            label_140056b06:
                char var_41 = 1;
                int128_t var_68 = rbx_1[2];
                char* var_58_1 = &var_41;
                int32_t var_74_1 = rax_2;
                int32_t var_78_1 = rbx_1[3];
                char var_70_1 = *(rbx_1 + 0x38);
                int128_t var_a8 = *rbx_1;
                int128_t var_98_1 = rbx_1[1];
                int128_t* var_88_1 = &var_68;
                void* const var_80_1 = &data_1400662a8;
                
                if (((sub_140056750(&var_68, arg2, arg3) == 0 && sub_140056750(&var_68, &data_140066280, 2) == 0) && *(arg5 + 0x18)(arg4, &var_a8) == 0))
                    r14 = *(var_80_1 + 0x18)(var_88_1, ",\n} }((\n,\n]library\core\src\f…", 2);
            }
        }
        else
        {
            char const* const rdx = ",  {\n,\n} }((\n,\n]library\core…";
            
            if (rcx == 0)
                rdx = " { ,  {\n,\n} }((\n,\n]library\c…";
            
            int64_t r8;
            r8 = rcx == 0;
            
            if (((*(*(rbx_1 + 0x28) + 0x18)(rbx_1[2], rdx, (r8 | 2)) == 0 && *(*(rbx_1 + 0x28) + 0x18)(rbx_1[2], arg2, arg3) == 0) && *(*(rbx_1 + 0x28) + 0x18)(rbx_1[2], &data_140066280, 2) == 0))
                r14 = *(arg5 + 0x18)(arg4, rbx_1);
        }
    }
    
    arg1[1] = r14;
    *(arg1 + 9) = 1;
    return arg1;
}

bool sub_140056bb0(int64_t* arg1)
{
    char rdx = arg1[1];
    
    if (*(arg1 + 9) == 0)
        return rdx != 0;
    
    bool result = true;
    
    if (rdx == 0)
    {
        void* rax = *arg1;
        int64_t rax_1;
        int64_t rcx;
        char const* const rdx_1;
        int64_t r8_1;
        
        if ((*(rax + 0x34) & 4) != 0)
        {
            rcx = *(rax + 0x20);
            rax_1 = *(rax + 0x28);
            rdx_1 = "} }((\n,\n]library\core\src\fmt\…";
            r8_1 = 1;
        }
        else
        {
            rcx = *(rax + 0x20);
            rax_1 = *(rax + 0x28);
            rdx_1 = " }((\n,\n]library\core\src\fmt\n…";
            r8_1 = 2;
        }
        
        result = *(rax_1 + 0x18)(rcx, rdx_1, r8_1);
    }
    
    arg1[1] = result;
    return result;
}

int64_t* sub_140056c20(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t r14 = *arg1;
    char rax = 1;
    
    if (arg1[2] == 0)
    {
        int128_t* rdi_1 = arg1[1];
        int32_t rax_2 = *(rdi_1 + 0x34);
        
        if ((rax_2 & 4) != 0)
        {
            if (r14 != 0)
                goto label_140056ce8;
            
            rax = 1;
            
            if (*(*(rdi_1 + 0x28) + 0x18)(rdi_1[2], "(\n,\n]library\core\src\fmt\num.…", 2) == 0)
            {
                rax_2 = *(rdi_1 + 0x34);
            label_140056ce8:
                char var_31 = 1;
                int128_t var_98 = rdi_1[2];
                char* var_88_1 = &var_31;
                int32_t var_44_1 = rax_2;
                int32_t var_48_1 = rdi_1[3];
                char var_40_1 = *(rdi_1 + 0x38);
                int128_t var_78 = *rdi_1;
                int128_t var_68_1 = rdi_1[1];
                int128_t* var_58_1 = &var_98;
                void* const var_50_1 = &data_1400662a8;
                
                if (*(arg3 + 0x18)(arg2, &var_78, arg3) == 0)
                    rax = *(var_50_1 + 0x18)(var_58_1, ",\n} }((\n,\n]library\core\src\f…", 2);
                else
                    rax = 1;
            }
        }
        else
        {
            char const* const rdx = ",  {\n,\n} }((\n,\n]library\core…";
            
            if (r14 == 0)
                rdx = "((\n,\n]library\core\src\fmt\num…";
            
            int64_t r8;
            r8 = r14 != 0;
            rax = 1;
            
            if (*(*(rdi_1 + 0x28) + 0x18)(rdi_1[2], rdx, (r8 + 1)) == 0)
                rax = *(arg3 + 0x18)(arg2, rdi_1);
        }
    }
    
    arg1[2] = rax;
    *arg1 = (r14 + 1);
    return arg1;
}

bool sub_140056d70(int64_t* arg1)
{
    int64_t rdx = *arg1;
    bool r8 = arg1[2];
    
    if (rdx != 0)
    {
        bool rax = true;
        
        if (r8 == 0)
        {
            void* rsi_1 = arg1[1];
            bool rdx_1;
            
            if (((rdx == 1 && *(arg1 + 0x11) != 0) && (*(rsi_1 + 0x34) & 4) == 0))
            {
                int64_t r9_1 = *(rsi_1 + 0x28);
                rdx_1 = *(r9_1 + 0x18)(*(rsi_1 + 0x20), ",\n]library\core\src\fmt\num.rs", 1, r9_1);
                rax = true;
            }
            
            if ((((rdx != 1 || *(arg1 + 0x11) == 0) || (*(rsi_1 + 0x34) & 4) != 0) || rdx_1 == 0))
            {
                int64_t r9_2 = *(rsi_1 + 0x28);
                rax = *(r9_2 + 0x18)(*(rsi_1 + 0x20), ")..0123456789abcdefBorrowMutErro…", 1, r9_2);
            }
        }
        
        arg1[2] = rax;
        r8 = rax;
    }
    
    return r8 != 0;
}

int64_t* sub_140056e10(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    char rax = 1;
    
    if (arg1[1] == 0)
    {
        int128_t* rdi_1 = *arg1;
        int32_t rax_2 = *(rdi_1 + 0x34);
        char rcx = *(arg1 + 9);
        
        if ((rax_2 & 4) != 0)
        {
            if (rcx != 0)
                goto label_140056ed1;
            
            int64_t r9_2 = *(rdi_1 + 0x28);
            rax = 1;
            
            if (*(r9_2 + 0x18)(rdi_1[2], "\n]library\core\src\fmt\num.rs", 1, r9_2) == 0)
            {
                rax_2 = *(rdi_1 + 0x34);
            label_140056ed1:
                char var_29 = 1;
                int128_t var_98 = rdi_1[2];
                char* var_88_1 = &var_29;
                int32_t var_44_1 = rax_2;
                int32_t var_48_1 = rdi_1[3];
                char var_40_1 = *(rdi_1 + 0x38);
                int128_t var_78 = *rdi_1;
                int128_t var_68_1 = rdi_1[1];
                int128_t* var_58_1 = &var_98;
                void* const var_50_1 = &data_1400662a8;
                
                if (*(arg3 + 0x18)(arg2, &var_78, arg3) == 0)
                    rax = *(var_50_1 + 0x18)(var_58_1, ",\n} }((\n,\n]library\core\src\f…", 2);
                else
                    rax = 1;
            }
        }
        else
        {
            char rcx_2;
            
            if (rcx != 0)
            {
                int64_t r9_1 = *(rdi_1 + 0x28);
                rcx_2 = *(r9_1 + 0x18)(rdi_1[2], ",  {\n,\n} }((\n,\n]library\core…", 2, r9_1);
                rax = 1;
            }
            
            if ((rcx == 0 || rcx_2 == 0))
                rax = *(arg3 + 0x18)(arg2, rdi_1, arg3);
        }
    }
    
    arg1[1] = rax;
    *(arg1 + 9) = 1;
    return arg1;
}

int64_t sub_140056f50(int64_t* arg1)
{
    if (arg1[1] != 0)
    {
        int64_t result;
        result = 1;
        return result;
    }
    
    void* rax = *arg1;
    *(rax + 0x20);
    /* jump -> *(*(rax + 0x28) + 0x18) */
}

int64_t sub_140056f80(int64_t arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140056fc0(arg1, &data_1400662a8, arg2);
}

int64_t sub_140056fa0(int64_t* arg1, void* arg2)
{
    /* tailcall */
    return sub_140056fc0(*(arg2 + 0x20), *(arg2 + 0x28), arg1);
}

int64_t sub_140056fc0(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t var_50 = 0x20;
    char var_48 = 3;
    int64_t var_80 = 0;
    int64_t var_70 = 0;
    int64_t* r14 = arg3[4];
    int64_t rbx;
    
    if (r14 == 0)
    {
        int64_t r14_1 = arg3[3];
        
        if (r14_1 == 0)
        {
            rbx = 0;
            
            if (0 < arg3[1])
            {
            label_140057173:
                int64_t* rax_13 = *arg3;
                int64_t rbx_1 = (rbx << 4);
                
                if (*(arg2 + 0x18)(arg1, *(rax_13 + rbx_1), *((rax_13 + rbx_1) + 8), arg2) != 0)
                    return 1;
            }
        }
        else
        {
            int64_t* r15_3 = arg3[2];
            int64_t* r12_2 = *arg3;
            int64_t i = 0;
            rbx = 0;
            
            do
            {
                int64_t r8_1 = *((r12_2 + i) + 8);
                
                if ((r8_1 != 0 && *(arg2 + 0x18)(arg1, *(r12_2 + i), r8_1) != 0))
                    return 1;
                
                if (*((r15_3 + i) + 8)(*(r15_3 + i), &var_80) != 0)
                    return 1;
                
                i += 0x10;
                rbx += 1;
            } while ((r14_1 << 4) != i);
            
        label_14005716d:
            
            if (rbx < arg3[1])
                goto label_140057173;
        }
        
        return 0;
    }
    
    int64_t rax_1 = arg3[5];
    
    if (rax_1 == 0)
        rbx = 0;
    else
    {
        int64_t* r12_1 = arg3[2];
        int64_t* r15_2 = (*arg3 + 8);
        int64_t i_1 = 0;
        rbx = 0;
        
        do
        {
            int64_t r8 = *r15_2;
            
            if ((r8 != 0 && *(arg2 + 0x18)(arg1, r15_2[-1], r8) != 0))
                return 1;
            
            var_50 = *((r14 + i_1) + 0x28);
            char var_48_1 = *((r14 + i_1) + 0x30);
            *var_50[4] = *((r14 + i_1) + 0x2c);
            int64_t rcx_1 = *((r14 + i_1) + 0x10);
            int64_t rax_7 = *((r14 + i_1) + 0x18);
            int64_t rcx_2;
            
            if (rcx_1 == 0)
                rcx_2 = 1;
            else
            {
                if (rcx_1 == 1)
                    rax_7 <<= 4;
                
                if ((rcx_1 == 1 && *((r12_1 + rax_7) + 8) == 0))
                {
                    rax_7 = *(rax_7 + r12_1);
                    rcx_2 = 1;
                }
                else
                    rcx_2 = 0;
            }
            
            var_80 = rcx_2;
            int64_t var_78_1 = rax_7;
            int64_t rcx_3 = *(r14 + i_1);
            int64_t rcx_4;
            
            if (rcx_3 == 2)
                rcx_4 = 0;
            else
            {
                rax_7 = *((r14 + i_1) + 8);
                
                if (rcx_3 != 1)
                    rcx_4 = 1;
                else
                {
                    rax_7 <<= 4;
                    
                    if (*((r12_1 + rax_7) + 8) == 0)
                    {
                        rax_7 = *(rax_7 + r12_1);
                        rcx_4 = 1;
                    }
                    else
                        rcx_4 = 0;
                }
            }
            
            int64_t var_70_1 = rcx_4;
            int64_t var_68_1 = rax_7;
            int64_t rax_11 = (*((r14 + i_1) + 0x20) << 4);
            
            if (*((r12_1 + rax_11) + 8)(*(r12_1 + rax_11), &var_80) != 0)
                return 1;
            
            r15_2 = &r15_2[2];
            i_1 += 0x38;
            rbx += 1;
        } while ((rax_1 * 0x38) != i_1);
    }
    
    goto label_14005716d;
}

uint64_t sub_1400571c0(int64_t* arg1, char arg2, char* arg3, int64_t arg4, int32_t arg5[0x4] @ zmm0, int64_t arg6, int64_t arg7)
{
    char* rbx = arg3;
    int64_t rsi;
    int32_t rdi;
    int32_t r8;
    int64_t r12_2;
    
    if (arg2 != 0)
    {
        rdi = *(arg1 + 0x34);
        uint64_t r12_1 = (rdi & 1);
        r8 = 0x2b;
        
        if (r12_1 == 0)
            r8 = 0x110000;
        
        r12_2 = (r12_1 + arg7);
        rsi = arg6;
        
        if ((rdi & 4) == 0)
            goto label_140057249;
        
        goto label_14005720d;
    }
    
    r12_2 = (arg7 + 1);
    rdi = *(arg1 + 0x34);
    r8 = 0x2d;
    rsi = arg6;
    
    if ((rdi & 4) != 0)
    {
    label_14005720d:
        int64_t rax_1;
        
        if (arg4 >= 0x20)
            rax_1 = sub_140058450(rbx, arg4, arg5);
        else
        {
            rax_1 = arg4;
            
            if (arg4 != 0)
            {
                uint64_t rdx;
                
                if (arg4 != 1)
                {
                    rdx = (arg4 & 0x1e);
                    arg5 = {0};
                    int64_t rax_5 = 0;
                    int32_t zmm1[0x4] = *data_140065ef0;
                    int128_t zmm2 = data_140065f00;
                    
                    do
                    {
                        uint128_t zmm3 = _mm_cmpgt_epi8(*(rbx + rax_5), zmm1);
                        arg5 = _mm_add_epi64(arg5, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm3, zmm3), 0xd4), 0xd4) & zmm2));
                        rax_5 += 2;
                    } while (rdx != rax_5);
                    
                    rax_1 = _mm_add_epi64(_mm_shuffle_epi32(arg5, 0xee), arg5)[0];
                    
                    if (rdx != arg4)
                        goto label_1400573b4;
                }
                else
                {
                    rax_1 = 0;
                    rdx = 0;
                label_1400573b4:
                    
                    do
                    {
                        int64_t r9_2;
                        r9_2 = rbx[rdx] >= 0xc0;
                        rax_1 += r9_2;
                        rdx += 1;
                    } while (arg4 != rdx);
                }
            }
        }
        
        r12_2 += rax_1;
        
        if (*arg1 != 0)
            goto label_140057259;
        
        goto label_1400573c7;
    }
    
label_140057249:
    rbx = nullptr;
    int64_t var_68_1;
    int64_t rcx;
    void* rdx_3;
    void* r12_3;
    
    if (*arg1 == 0)
    {
    label_1400573c7:
        r12_3 = arg1[5];
        var_68_1 = arg4;
        rcx = arg1[4];
        rdx_3 = r12_3;
    label_1400573d9:
        char rax_6 = sub_1400574f0(rcx, rdx_3, r8, rbx, var_68_1);
        rbx = 1;
        
        if (rax_6 == 0)
            /* jump -> *(r12_3 + 0x18) */
    }
    else
    {
    label_140057259:
        int64_t r15_1 = arg1[1];
        uint64_t r15_2 = (r15_1 - r12_2);
        
        if (r15_1 <= r12_2)
        {
            r12_3 = arg1[5];
            var_68_1 = arg4;
            rcx = arg1[4];
            rdx_3 = r12_3;
            goto label_1400573d9;
        }
        
        if ((rdi & 8) != 0)
        {
            int32_t rax_2 = arg1[6];
            arg1[6] = 0x30;
            char rax_3 = arg1[7];
            arg1[7] = 1;
            int64_t r12_4 = arg1[4];
            void* rdi_2 = arg1[5];
            char rax_4 = sub_1400574f0(r12_4, rdi_2, r8, rbx, arg4, rsi);
            rbx = 1;
            
            if (rax_4 == 0)
            {
                int64_t r15_4 = (r15_2 + 1);
                char i;
                
                do
                {
                    int64_t temp1_1 = r15_4;
                    r15_4 -= 1;
                    
                    if (temp1_1 == 1)
                    {
                        if (*(rdi_2 + 0x18)(r12_4, rsi, arg7) == 0)
                        {
                            arg1[6] = rax_2;
                            arg1[7] = rax_3;
                            rbx = nullptr;
                        }
                        
                        break;
                    }
                    
                    i = *(rdi_2 + 0x20)(r12_4, 0x30);
                } while (i == 0);
            }
        }
        else
        {
            uint64_t rsi_1 = arg1[7];
            
            switch (rsi_1)
            {
                case 1:
                case 3:
                {
                    rsi_1 = r15_2;
                    r15_2 = 0;
                    break;
                }
                case 2:
                {
                    rsi_1 = (r15_2 >> 1);
                    r15_2 = ((r15_2 + 1) >> 1);
                    break;
                }
            }
            
            int64_t r12_5 = arg1[4];
            void* r13_3 = arg1[5];
            int32_t rdi_3 = arg1[6];
            int64_t rsi_5 = (rsi_1 + 1);
            
            while (true)
            {
                int64_t temp2_1 = rsi_5;
                rsi_5 -= 1;
                
                if (temp2_1 == 1)
                {
                    char rax_13 = sub_1400574f0(r12_5, r13_3, r8, rbx, arg4, rsi);
                    rbx = 1;
                    
                    if ((rax_13 == 0 && *(r13_3 + 0x18)(r12_5, rsi, arg7) == 0))
                    {
                        uint64_t rsi_6 = -1;
                        char i_1;
                        
                        do
                        {
                            if (&-(r15_2)[rsi_6] == -1)
                            {
                                rsi_6 = r15_2;
                                break;
                            }
                            
                            i_1 = *(r13_3 + 0x20)(r12_5, rdi_3);
                            rsi_6 += 1;
                        } while (i_1 == 0);
                        rbx = rsi_6 < r15_2;
                    }
                    
                    break;
                }
                
                if (*(r13_3 + 0x20)(r12_5, rdi_3) != 0)
                {
                    rbx = 1;
                    break;
                }
            }
        }
    }
    return rbx;
}

int64_t sub_1400574f0(int512_t arg1 @ zmm0, void* arg2, int32_t arg3, int64_t arg4, int64_t arg5)
{
    if ((arg3 != 0x110000 && *(arg2 + 0x20)(arg1, arg3) != 0))
        return 1;
    
    if (arg4 == 0)
        return 0;
    
    /* jump -> *(arg2 + 0x18) */
}

int64_t sub_140057550(int64_t* arg1, void* arg2, int64_t arg3, int32_t arg4[0x4] @ zmm0)
{
    int64_t rsi = arg3;
    void* rdi = arg2;
    int64_t rax = *arg1;
    int64_t rdx = arg1[2];
    
    if ((rax | rdx) != 0)
    {
        if (rdx != 0)
        {
            int64_t i_1 = arg1[3];
            void* r8_2 = (rdi + rsi);
            int64_t rdx_1 = 0;
            void* r11_1;
            
            if (i_1 == 0)
                r11_1 = rdi;
            else
            {
                char* r10_1 = rdi;
                int64_t i;
                
                do
                {
                    if (r10_1 == r8_2)
                        goto label_140057622;
                    
                    char r11_2 = *r10_1;
                    
                    if (r11_2 >= 0)
                        r11_1 = &r10_1[1];
                    else if (r11_2 < 0xe0)
                        r11_1 = &r10_1[2];
                    else if (r11_2 < 0xf0)
                        r11_1 = &r10_1[3];
                    else
                        r11_1 = &r10_1[4];
                    
                    rdx_1 += (r11_1 - r10_1);
                    r10_1 = r11_1;
                    i = i_1;
                    i_1 -= 1;
                } while (i != 1);
            }
            
            if (r11_1 != r8_2)
            {
                void* r8_4;
                
                if (*r11_1 >= 0)
                {
                    if (rdx_1 != 0)
                        goto label_140057602;
                    
                    r8_4 = rdi;
                }
                else if (rdx_1 == 0)
                    r8_4 = rdi;
                else
                {
                label_140057602:
                    
                    if (rdx_1 >= rsi)
                    {
                        if (rdx_1 != rsi)
                            r8_4 = nullptr;
                        else
                            r8_4 = rdi;
                    }
                    else if (*(rdi + rdx_1) > 0xbf)
                        r8_4 = rdi;
                    else
                        r8_4 = nullptr;
                }
                
                if (r8_4 != 0)
                    rsi = rdx_1;
                
                if (r8_4 != 0)
                    rdi = r8_4;
            }
        }
        
    label_140057622:
        
        if (rax != 0)
        {
            int64_t r15_1 = arg1[1];
            int64_t rax_1;
            
            if (rsi >= 0x20)
                rax_1 = sub_140058450(rdi, rsi, arg4);
            else
            {
                rax_1 = rsi;
                
                if (rsi != 0)
                {
                    uint64_t rdx_2;
                    
                    if (rsi != 1)
                    {
                        rdx_2 = (rsi & 0x1e);
                        arg4 = {0};
                        int64_t rax_2 = 0;
                        int32_t zmm1[0x4] = *data_140065ef0;
                        int128_t zmm2 = data_140065f00;
                        
                        do
                        {
                            uint128_t zmm3 = _mm_cmpgt_epi8(*(rdi + rax_2), zmm1);
                            arg4 = _mm_add_epi64(arg4, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm3, zmm3), 0xd4), 0xd4) & zmm2));
                            rax_2 += 2;
                        } while (rdx_2 != rax_2);
                        
                        rax_1 = _mm_add_epi64(_mm_shuffle_epi32(arg4, 0xee), arg4)[0];
                        goto label_1400576ce;
                    }
                    
                    rax_1 = 0;
                    rdx_2 = 0;
                    
                    do
                    {
                        int64_t r8_6;
                        r8_6 = *(rdi + rdx_2) >= 0xc0;
                        rax_1 += r8_6;
                        rdx_2 += 1;
                    label_1400576ce:
                    } while (rsi != rdx_2);
                }
            }
            
            uint64_t r15_2 = (r15_1 - rax_1);
            
            if (r15_1 > rax_1)
            {
                uint64_t r13;
                
                switch (jump_table_14006753c[arg1[7]])
                {
                    case 0xffff01b0:
                    {
                        r13 = 0;
                        break;
                    }
                    case 0xffff01dd:
                    {
                        r13 = r15_2;
                        r15_2 = 0;
                        break;
                    }
                    case 0xffff01e5:
                    {
                        r13 = (r15_2 >> 1);
                        r15_2 = ((r15_2 + 1) >> 1);
                        break;
                    }
                }
                
                int64_t rbx_4 = arg1[4];
                int64_t r12 = arg1[5];
                int32_t r14 = arg1[6];
                int64_t r13_2 = (r13 + 1);
                int64_t result;
                
                while (true)
                {
                    int64_t temp3_1 = r13_2;
                    r13_2 -= 1;
                    
                    if (temp3_1 == 1)
                    {
                        result = 1;
                        
                        if (*(r12 + 0x18)(rbx_4, rdi, rsi) == 0)
                        {
                            uint64_t rsi_1 = -1;
                            
                            do
                            {
                                if ((-(r15_2) + rsi_1) == -1)
                                {
                                    rsi_1 = r15_2;
                                    break;
                                }
                                
                                result = *(r12 + 0x20)(rbx_4, r14);
                                rsi_1 += 1;
                            } while (result == 0);
                            
                            result = rsi_1 < r15_2;
                        }
                        
                        break;
                    }
                    
                    if (*(r12 + 0x20)(rbx_4, r14) != 0)
                    {
                        result = 1;
                        break;
                    }
                }
                
                return result;
            }
        }
    }
    
    arg1[4];
    /* jump -> *(arg1[5] + 0x18) */
}

int64_t sub_1400577c0(void* arg1)
{
    *(arg1 + 0x20);
    /* jump -> *(*(arg1 + 0x28) + 0x18) */
}

void** sub_1400577e0(void** arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    char rax_1 = *(*(arg2 + 0x28) + 0x18)(*(arg2 + 0x20), arg3, arg4);
    *arg1 = arg2;
    arg1[1] = rax_1;
    *(arg1 + 9) = 0;
    return arg1;
}

int64_t* sub_140057820(void* arg1, int64_t arg2, int64_t arg3, void* arg4, void* arg5, int64_t arg6, int64_t arg7)
{
    char rax_1 = *(*(arg1 + 0x28) + 0x18)(*(arg1 + 0x20));
    void* var_40 = arg1;
    char var_37 = 0;
    sub_140056a00(&var_40, arg4, arg5, arg6, arg7);
    int64_t* result;
    
    if (var_37 == 0)
        result = rax_1 != 0;
    else
    {
        result = 1;
        
        if (rax_1 == 0)
        {
            void* rax_2 = var_40;
            int64_t rax_3;
            int64_t rcx_3;
            char const* const rdx_1;
            int64_t r8_1;
            
            if ((*(rax_2 + 0x34) & 4) != 0)
            {
                rcx_3 = *(rax_2 + 0x20);
                rax_3 = *(rax_2 + 0x28);
                rdx_1 = "} }((\n,\n]library\core\src\fmt\…";
                r8_1 = 1;
            }
            else
            {
                rcx_3 = *(rax_2 + 0x20);
                rax_3 = *(rax_2 + 0x28);
                rdx_1 = " }((\n,\n]library\core\src\fmt\n…";
                r8_1 = 2;
            }
            
            return *(rax_3 + 0x18)(rcx_3, rdx_1, r8_1);
        }
    }
    
    return result;
}

int64_t* sub_1400578d0(void* arg1, int64_t arg2, int64_t arg3, void* arg4, void* arg5, int64_t arg6, int64_t arg7, void* arg8, void* arg9, int64_t arg10, int64_t arg11)
{
    char rax_1 = *(*(arg1 + 0x28) + 0x18)(*(arg1 + 0x20));
    void* var_50 = arg1;
    char var_47 = 0;
    sub_140056a00(&var_50, arg4, arg5, arg6, arg7);
    sub_140056a00(&var_50, arg8, arg9, arg10, arg11);
    int64_t* result;
    
    if (var_47 == 0)
        result = rax_1 != 0;
    else
    {
        result = 1;
        
        if (rax_1 == 0)
        {
            void* rax_2 = var_50;
            int64_t rax_3;
            int64_t rcx_4;
            char const* const rdx_2;
            int64_t r8_2;
            
            if ((*(rax_2 + 0x34) & 4) != 0)
            {
                rcx_4 = *(rax_2 + 0x20);
                rax_3 = *(rax_2 + 0x28);
                rdx_2 = "} }((\n,\n]library\core\src\fmt\…";
                r8_2 = 1;
            }
            else
            {
                rcx_4 = *(rax_2 + 0x20);
                rax_3 = *(rax_2 + 0x28);
                rdx_2 = " }((\n,\n]library\core\src\fmt\n…";
                r8_2 = 2;
            }
            
            return *(rax_3 + 0x18)(rcx_4, rdx_2, r8_2);
        }
    }
    
    return result;
}

int64_t* sub_1400579c0(int64_t* arg1, void* arg2, int64_t arg3, int64_t arg4)
{
    char rax_1 = *(*(arg2 + 0x28) + 0x18)(*(arg2 + 0x20), arg3, arg4);
    arg1[1] = arg2;
    arg1[2] = rax_1;
    *arg1 = 0;
    *(arg1 + 0x11) = arg4 == 0;
    return arg1;
}

bool sub_140057a10(void* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    bool rax_1 = *(*(arg1 + 0x28) + 0x18)(*(arg1 + 0x20));
    int64_t var_40 = 0;
    sub_140056c20(&var_40, arg4, arg5);
    int64_t rcx_2 = var_40;
    bool rax_2;
    
    if (rcx_2 == 0)
        rax_2 = rax_1;
    else
    {
        rax_2 = true;
        
        if (rax_1 == 0)
        {
            bool rcx_4;
            
            if (((rcx_2 == 1 && arg3 == 0 != 0) && (*(arg1 + 0x34) & 4) == 0))
            {
                rcx_4 = *(*(arg1 + 0x28) + 0x18)(*(arg1 + 0x20), ",\n]library\core\src\fmt\num.rs", 1);
                rax_2 = true;
            }
            
            if ((((rcx_2 != 1 || arg3 == 0 == 0) || (*(arg1 + 0x34) & 4) != 0) || rcx_4 == 0))
                rax_2 = *(*(arg1 + 0x28) + 0x18)(*(arg1 + 0x20), ")..0123456789abcdefBorrowMutErro…", 1);
        }
    }
    
    return rax_2 != 0;
}

void** sub_140057ae0(void** arg1, void* arg2)
{
    char rax_1 = *(*(arg2 + 0x28) + 0x18)(*(arg2 + 0x20), "[called `Option::unwrap()` on a …", 1);
    *arg1 = arg2;
    arg1[1] = rax_1;
    *(arg1 + 9) = 0;
    return arg1;
}

int64_t sub_140057b20(void* arg1)
{
    *(arg1 + 0x20);
    /* jump -> *(*(arg1 + 0x28) + 0x20) */
}

uint64_t sub_140057b40(char* arg1, void* arg2, void* arg3)
{
    void* r13 = arg2;
    int64_t rsi = *(arg3 + 0x20);
    void* r15 = *(arg3 + 0x28);
    int64_t rdi = *(r15 + 0x20);
    char* r14;
    r14 = 1;
    
    if (rdi(rsi, 0x22) == 0)
    {
        void* r9_2;
        void* r15_1;
        
        if (r13 == 0)
        {
            r9_2 = nullptr;
            r15_1 = nullptr;
        }
        else
        {
            int64_t rax_2 = -(r13);
            r15_1 = nullptr;
            char* rsi_1 = arg1;
            void* rax_3 = r13;
            void* r12_1 = nullptr;
            void* var_60_1 = r13;
        label_140057bc3:
            int64_t rdi_2 = (rsi_1 + rax_3);
            r14 = nullptr;
            
            while (true)
            {
                uint32_t rcx_1 = *(rsi_1 + r14);
                
                if (((rcx_1 - 0x7f) >= 0xa1 && (rcx_1 != 0x22 && rcx_1 != 0x5c)))
                {
                    r14 = &r14[1];
                    
                    if (rax_3 != r14)
                        continue;
                    
                    r9_2 = (rax_3 + r12_1);
                    
                    if (r15_1 <= r9_2)
                    {
                    label_140057dfa:
                        r14 = 1;
                        
                        if (r15_1 == 0)
                        {
                            r15_1 = nullptr;
                            
                            if (r9_2 == 0)
                            {
                                r9_2 = nullptr;
                                break;
                            }
                            
                        label_140057e10:
                            
                            if (r9_2 >= r13)
                            {
                                if (r9_2 == r13)
                                    break;
                            }
                            else if (*(arg1 + r9_2) > 0xbf)
                                break;
                        }
                        else if (r15_1 >= r13)
                        {
                            if (r15_1 == r13)
                            {
                            label_140057e0b:
                                
                                if (r9_2 != 0)
                                    goto label_140057e10;
                                
                                r9_2 = nullptr;
                                break;
                            }
                        }
                        else if (*(arg1 + r15_1) > 0xbf)
                            goto label_140057e0b;
                    }
                    
                label_140057e99:
                    sub_14005cd20(arg1, r13, r15_1, r9_2, &data_140066428);
                    /* no return */
                }
                
                char rcx_2 = *(rsi_1 + r14);
                uint32_t r13_1 = rcx_2;
                
                if (r13_1 < 0)
                {
                    int32_t rax_5 = (r13_1 & 0x1f);
                    int32_t rdx_2 = (*((rsi_1 + r14) + 1) & 0x3f);
                    
                    if (r13_1 <= 0xdf)
                    {
                        rsi_1 = ((rsi_1 + r14) + 2);
                        r13_1 = ((rax_5 << 6) | rdx_2);
                    }
                    else
                    {
                        int32_t r13_4 = ((*((rsi_1 + r14) + 2) & 0x3f) | (rdx_2 << 6));
                        
                        if (rcx_2 < 0xf0)
                        {
                            rsi_1 = ((rsi_1 + r14) + 3);
                            r13_1 = (r13_4 | (rax_5 << 0xc));
                        }
                        else
                        {
                            uint32_t rcx_3 = *((rsi_1 + r14) + 3);
                            rsi_1 = ((rsi_1 + r14) + 4);
                            r13_1 = (((rcx_3 & 0x3f) | (r13_4 << 6)) | ((rax_5 & 7) << 0x12));
                        }
                    }
                }
                else
                    rsi_1 = ((rsi_1 + r14) + 1);
                
                void* var_70_1 = r12_1;
                void* r12_2 = (r12_1 + r14);
                char var_4c;
                sub_140056430(&var_4c, r13_1, 0x10001);
                char var_42;
                char var_41;
                
                if ((var_4c != 0x80 && (var_41 - var_42) != 1))
                {
                    if (r15_1 > r12_2)
                    {
                        sub_14005cd20(arg1, var_60_1, r15_1, r12_2, &data_140066410);
                        /* no return */
                    }
                    
                    if (r15_1 != 0)
                    {
                        if (r15_1 >= var_60_1)
                        {
                            if (r15_1 != var_60_1)
                            {
                                sub_14005cd20(arg1, var_60_1, r15_1, r12_2, &data_140066410);
                                /* no return */
                            }
                        }
                        else if (*(arg1 + r15_1) <= 0xbf)
                        {
                            sub_14005cd20(arg1, var_60_1, r15_1, r12_2, &data_140066410);
                            /* no return */
                        }
                    }
                    
                    if (r12_2 != 0)
                    {
                        if (r12_2 >= var_60_1)
                        {
                            if (r12_2 != -(rax_2))
                            {
                                sub_14005cd20(arg1, var_60_1, r15_1, r12_2, &data_140066410);
                                /* no return */
                            }
                        }
                        else if (*(r14 + (arg1 + var_70_1)) <= 0xbf)
                        {
                            sub_14005cd20(arg1, var_60_1, r15_1, r12_2, &data_140066410);
                            /* no return */
                        }
                    }
                    
                    int64_t rbx_1 = *(r15 + 0x18);
                    char rax_16 = rbx_1(rsi, (r15_1 + arg1), ((var_70_1 - r15_1) + r14));
                    char rax_17;
                    
                    if (rax_16 == 0)
                    {
                        int32_t var_48;
                        
                        if (var_4c != 0x80)
                        {
                            uint64_t rax_18 = var_42;
                            rax_17 = rbx_1(rsi, ((rax_18 + &var_48) - 4), (var_41 - rax_18));
                        }
                        else
                            rax_17 = rdi(rsi, var_48);
                    }
                    
                    if ((rax_16 != 0 || rax_17 != 0))
                    {
                        r14 = 1;
                        goto label_140057e73;
                    }
                    
                    void* const r15_3 = 1;
                    
                    if (r13_1 >= 0x80)
                    {
                        r15_3 = 2;
                        
                        if (r13_1 >= 0x800)
                            r15_3 = (4 - 0);
                    }
                    
                    r15_1 = (r15_3 + r12_2);
                }
                
                void* const r9_1 = 1;
                
                if (r13_1 >= 0x80)
                {
                    r9_1 = 2;
                    
                    if (r13_1 >= 0x800)
                        r9_1 = (4 - 0);
                }
                
                r12_1 = (r12_2 + r9_1);
                rax_3 = (rdi_2 - rsi_1);
                r13 = var_60_1;
                
                if (rdi_2 != rsi_1)
                    goto label_140057bc3;
                
                r9_2 = ((r9_1 + var_70_1) + r14);
                
                if (r15_1 <= r9_2)
                    goto label_140057dfa;
                
                goto label_140057e99;
            }
        }
        
        if (*(r15 + 0x18)(rsi, (arg1 + r15_1), (r9_2 - r15_1)) == 0)
            r14 = rdi(rsi, 0x22);
    }
    
label_140057e73:
    return r14;
}

int64_t sub_140057ed0(void* arg1, int64_t arg2, int64_t* arg3)
{
    /* tailcall */
    return sub_140057550(arg3, arg1, arg2);
}

int64_t sub_140057ef0(int32_t* arg1, void* arg2)
{
    int64_t rsi = *(arg2 + 0x20);
    void* r14 = *(arg2 + 0x28);
    int64_t rbx = *(r14 + 0x20);
    
    if (rbx(rsi, 0x27) != 0)
        return 1;
    
    char var_34;
    sub_140056430(&var_34, *arg1, 0x101);
    int32_t var_30;
    
    if (var_34 != 0x80)
    {
        char var_2a;
        uint64_t rax_1 = var_2a;
        char var_29;
        int64_t __saved_rbx;
        
        if (*(r14 + 0x18)(rsi, ((rax_1 + &__saved_rbx) - 0xc), (var_29 - rax_1)) != 0)
            return 1;
    }
    else if (rbx(rsi, var_30) != 0)
        return 1;
    return rbx(rsi, 0x27);
}

int64_t sub_140057f80(int32_t* arg1, int64_t* arg2)
{
    int32_t rax_2 = *arg1;
    
    if ((*arg2 | arg2[2]) == 0)
    {
        arg2[4];
        /* jump -> *(arg2[5] + 0x20) */
    }
    
    int32_t var_c = 0;
    int64_t r8_1;
    
    if (rax_2 < 0x80)
    {
        var_c = rax_2;
        r8_1 = 1;
    }
    else if (rax_2 < 0x800)
    {
        var_c = ((rax_2 >> 6) | 0xc0);
        rax_2 &= 0x3f;
        rax_2 |= 0x80;
        *var_c[1] = rax_2;
        r8_1 = 2;
    }
    else if (rax_2 >= 0x10000)
    {
        var_c = ((rax_2 >> 0x12) | 0xf0);
        *var_c[1] = (((rax_2 >> 0xc) & 0x3f) | 0x80);
        *var_c[2] = (((rax_2 >> 6) & 0x3f) | 0x80);
        rax_2 &= 0x3f;
        rax_2 |= 0x80;
        *var_c[3] = rax_2;
        r8_1 = 4;
    }
    else
    {
        var_c = ((rax_2 >> 0xc) | 0xe0);
        *var_c[1] = (((rax_2 >> 6) & 0x3f) | 0x80);
        rax_2 &= 0x3f;
        rax_2 |= 0x80;
        *var_c[2] = rax_2;
        r8_1 = 3;
    }
    
    return sub_140057550(arg2, &var_c, r8_1);
}

uint64_t sub_140058060(uint64_t arg1, int128_t* arg2)
{
    int32_t rdi = *(arg2 + 0x34);
    int32_t rax = rdi;
    
    if ((rdi & 4) != 0)
    {
        rax = (rdi | 8);
        
        if (*arg2 == 0)
        {
            *arg2 = 1;
            *(arg2 + 8) = 0x12;
        }
    }
    
    *(arg2 + 0x34) = (rax | 4);
    int128_t __saved_zmm6;
    int128_t* r8 = &__saved_zmm6;
    int64_t rax_3 = 0;
    uint64_t rdx_1 = arg1;
    bool cond:1_1;
    
    do
    {
        rdx_1 u>>= 4;
        char r9_1 = (arg1 & 0xf);
        char r10_2 = (r9_1 + 0x57);
        
        if (r9_1 < 0xa)
            r10_2 = (r9_1 + 0x30);
        
        *(r8 - 1) = r10_2;
        r8 -= 1;
        rax_3 += 1;
        cond:1_1 = arg1 >= 0x10;
        arg1 = rdx_1;
    } while (cond:1_1);
    
    if ((0x80 - rax_3) >= 0x81)
    {
        sub_14005cae0((0x80 - rax_3), 0x80);
        /* no return */
    }
    
    rdx_1 = 1;
    uint64_t result;
    int128_t zmm6_1;
    result = sub_1400571c0(arg2, rdx_1, "0x000102030405060708091011121314…", 2, r8, rax_3);
    *arg2 = zmm6_1;
    *(arg2 + 0x34) = rdi;
    return result;
}

int64_t sub_140058150(char arg1, char* arg2, void* arg3)
{
    void* rdx_1 = (&arg2[7] & 0xfffffffffffffff8);
    void* rdx_2 = (rdx_1 - arg2);
    
    if ((rdx_1 != arg2 && rdx_2 >= arg3))
        rdx_2 = arg3;
    
    int64_t result;
    void* rax;
    
    if ((rdx_1 == arg2 || rdx_2 == 0))
    {
        rax = (arg3 - 0x10);
        rdx_2 = nullptr;
    label_1400581ba:
        int64_t r11_1 = (0x101010101010101 * arg1);
        
        do
        {
            int64_t rdi_2 = (*(arg2 + rdx_2) ^ r11_1);
            int64_t rbx_3 = (*((arg2 + rdx_2) + 8) ^ r11_1);
            
            if ((((!(rbx_3) & (rbx_3 - 0x101010101010101)) | (!(rdi_2) & (rdi_2 - 0x101010101010101))) & 0x8080808080808080) != 0)
                break;
            
            rdx_2 += 0x10;
        } while (rdx_2 <= rax);
    }
    else
    {
        int64_t r10_1 = 0;
        
        do
        {
            if (arg2[r10_1] == arg1)
            {
                result = 1;
                goto label_140058235;
            }
            
            r10_1 += 1;
        } while (rdx_2 != r10_1);
        
        rax = (arg3 - 0x10);
        
        if (rdx_2 <= rax)
            goto label_1400581ba;
    }
    result = 0;
    
    if (rdx_2 != arg3)
    {
        do
        {
            if (*(arg2 + rdx_2) == arg1)
                return 1;
            
            rdx_2 += 1;
        } while (arg3 != rdx_2);
    }
    
label_140058235:
    return result;
}

int64_t* sub_140058240(int64_t* arg1, char* arg2, int64_t arg3)
{
    int64_t r9 = 0;
    
    if (arg3 >= 0xf)
        r9 = (arg3 - 0xf);
    
    int64_t rcx_2;
    
    if (arg3 == 0)
    {
    label_140058417:
        arg1[1] = arg2;
        arg1[2] = arg3;
        rcx_2 = 0;
    }
    else
    {
        int64_t i = 0;
        
        while (true)
        {
            uint64_t rbx_1 = arg2[i];
            
            if (rbx_1 < 0)
            {
                uint32_t r14_2 = *(rbx_1 + &data_140066600);
                uint64_t r11;
                r11 = 1;
                int64_t r14_3;
                
                if (r14_2 == 4)
                {
                    if ((i + 1) >= arg3)
                    {
                    label_140058423:
                        r11 = 0;
                    label_14005842e:
                        arg1[1] = i;
                        arg1[2] = r11;
                        *(arg1 + 0x11) = rbx_1;
                        rcx_2 = 1;
                        break;
                    }
                    
                    char r14_7 = arg2[(i + 1)];
                    
                    if (rbx_1 == 0xf0)
                    {
                        if ((r14_7 + 0x70) >= 0x30)
                        {
                            rbx_1 = 1;
                            goto label_14005842e;
                        }
                    }
                    else if (rbx_1 != 0xf4)
                    {
                        rbx_1 += 0xf;
                        
                        if ((rbx_1 > 2 || r14_7 >= 0xc0))
                        {
                            rbx_1 = 1;
                            goto label_14005842e;
                        }
                    }
                    else if (r14_7 > 0x8f)
                    {
                        rbx_1 = 1;
                        goto label_14005842e;
                    }
                    
                    rbx_1 = (i + 2);
                    
                    if (rbx_1 >= arg3)
                        goto label_140058423;
                    
                    if (arg2[rbx_1] > 0xbf)
                    {
                        rbx_1 = 2;
                        goto label_14005842e;
                    }
                    
                    r14_3 = (i + 3);
                    
                    if (r14_3 >= arg3)
                        goto label_140058423;
                    
                    if (arg2[r14_3] > 0xbf)
                    {
                        rbx_1 = 3;
                        goto label_14005842e;
                    }
                }
                else if (r14_2 == 3)
                {
                    if ((i + 1) >= arg3)
                        goto label_140058423;
                    
                    char r14_5 = arg2[(i + 1)];
                    
                    if (rbx_1 == 0xe0)
                    {
                        if ((r14_5 & 0xe0) != 0xa0)
                        {
                            rbx_1 = 1;
                            goto label_14005842e;
                        }
                    }
                    else if (rbx_1 != 0xed)
                    {
                        if ((rbx_1 + 0x1f) >= 0xc)
                        {
                            rbx_1 &= 0xfe;
                            
                            if ((rbx_1 != 0xee || r14_5 >= 0xc0))
                            {
                                rbx_1 = 1;
                                goto label_14005842e;
                            }
                        }
                        else if (r14_5 >= 0xc0)
                        {
                            rbx_1 = 1;
                            goto label_14005842e;
                        }
                    }
                    else if (r14_5 > 0x9f)
                    {
                        rbx_1 = 1;
                        goto label_14005842e;
                    }
                    
                    r14_3 = (i + 2);
                    
                    if (r14_3 >= arg3)
                        goto label_140058423;
                    
                    if (arg2[r14_3] > 0xbf)
                    {
                        rbx_1 = 2;
                        goto label_14005842e;
                    }
                }
                else
                {
                    if (r14_2 != 2)
                    {
                        rbx_1 = 1;
                        goto label_14005842e;
                    }
                    
                    r14_3 = (i + 1);
                    
                    if (r14_3 >= arg3)
                        goto label_140058423;
                    
                    rbx_1 = 1;
                    
                    if (arg2[r14_3] > 0xbf)
                        goto label_14005842e;
                }
                
                i = (r14_3 + 1);
            }
            else if ((((((arg2 + 7) & 0xfffffff8) - arg2) - i) & 7) == 0)
            {
                for (; i < r9; i += 0x10)
                {
                    if (((*((arg2 + i) + 8) | *(arg2 + i)) & 0x8080808080808080) != 0)
                        break;
                }
                
                if (i < arg3)
                {
                    while (arg2[i] >= 0)
                    {
                        i += 1;
                        
                        if (arg3 == i)
                            goto label_140058417;
                    }
                }
            }
            else
                i += 1;
            
            if (i >= arg3)
                goto label_140058417;
        }
    }
    
    *arg1 = rcx_2;
    return arg1;
}

int64_t sub_140058450(char* arg1, int64_t arg2, int32_t arg3[0x4] @ zmm0)
{
    int32_t zmm6[0x4];
    int32_t var_48[0x4] = zmm6;
    void* r10_1 = (&arg1[7] & 0xfffffffffffffff8);
    void* r9_1 = (r10_1 - arg1);
    void* r8_1 = (arg2 - r9_1);
    int64_t result;
    int32_t zmm1[0x4];
    int32_t zmm2[0x4];
    int32_t zmm3[0x4];
    int32_t zmm4[0x4];
    uint128_t zmm5;
    
    if ((arg2 < r9_1 || r8_1 < 8))
    {
        if (arg2 == 0)
            return 0;
        
        int64_t r8_2;
        
        if (arg2 >= 4)
        {
            r8_2 = (arg2 & 0xfffffffffffffffc);
            arg3 = {0};
            int64_t rax_2 = 0;
            zmm2 = *data_140065ef0;
            zmm3 = data_140065f00;
            zmm1 = {0};
            
            do
            {
                zmm5 = *((arg1 + rax_2) + 2);
                zmm4 = _mm_cmpgt_epi8(*(arg1 + rax_2), zmm2);
                arg3 = _mm_add_epi64(arg3, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm4, zmm4[0]), 0xd4), 0xd4) & zmm3));
                zmm5 = _mm_cmpgt_epi8(zmm5, zmm2);
                zmm1 = _mm_add_epi64(zmm1, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm5, zmm5), 0xd4), 0xd4) & zmm3));
                rax_2 += 4;
            } while (r8_2 != rax_2);
            
            zmm1 = _mm_add_epi64(zmm1, arg3);
            result = _mm_add_epi64(_mm_shuffle_epi32(zmm1, 0xee), zmm1)[0];
            
            if (r8_2 != arg2)
                goto label_140058565;
        }
        else
        {
            result = 0;
            r8_2 = 0;
        label_140058565:
            
            do
            {
                int64_t r9_4;
                r9_4 = arg1[r8_2] >= 0xc0;
                result += r9_4;
                r8_2 += 1;
            } while (arg2 != r8_2);
        }
    }
    else
    {
        uint64_t rax_1 = (r8_1 & 7);
        int64_t rdx;
        
        if (r10_1 != arg1)
        {
            uint64_t r10_2;
            
            if (r9_1 >= 4)
            {
                r10_2 = (r9_1 & 4);
                arg3 = {0};
                int64_t rdx_1 = 0;
                zmm2 = *data_140065ef0;
                zmm3 = data_140065f00;
                zmm1 = {0};
                
                do
                {
                    zmm5 = *((arg1 + rdx_1) + 2);
                    zmm4 = _mm_cmpgt_epi8(*(arg1 + rdx_1), zmm2);
                    arg3 = _mm_add_epi64(arg3, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm4, zmm4[0]), 0xd4), 0xd4) & zmm3));
                    zmm5 = _mm_cmpgt_epi8(zmm5, zmm2);
                    zmm1 = _mm_add_epi64(zmm1, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm5, zmm5), 0xd4), 0xd4) & zmm3));
                    rdx_1 += 4;
                } while (r10_2 != rdx_1);
                
                zmm1 = _mm_add_epi64(zmm1, arg3);
                arg3 = _mm_add_epi64(_mm_shuffle_epi32(zmm1, 0xee), zmm1);
                rdx = arg3[0];
                goto label_140058618;
            }
            
            rdx = 0;
            r10_2 = 0;
            
            do
            {
                int64_t r11_3;
                r11_3 = arg1[r10_2] >= 0xc0;
                rdx += r11_3;
                r10_2 += 1;
            label_140058618:
            } while (r9_1 != r10_2);
        }
        else
            rdx = 0;
        
        void* i_4 = (arg1 + r9_1);
        int64_t r10_4;
        
        if (rax_1 == 0)
            r10_4 = 0;
        else
        {
            void* r9_6 = (r8_1 & 0xfffffffffffffff8);
            r10_4 = *(i_4 + r9_6) >= 0xc0;
            
            if (rax_1 != 1)
            {
                int64_t r11_4;
                r11_4 = *((i_4 + r9_6) + 1) >= 0xc0;
                r10_4 += r11_4;
                
                if (rax_1 != 2)
                {
                    int64_t r11_5;
                    r11_5 = *((i_4 + r9_6) + 2) >= 0xc0;
                    r10_4 += r11_5;
                    
                    if (rax_1 != 3)
                    {
                        int64_t r11_6;
                        r11_6 = *((i_4 + r9_6) + 3) >= 0xc0;
                        r10_4 += r11_6;
                        
                        if (rax_1 != 4)
                        {
                            int64_t r11_7;
                            r11_7 = *((i_4 + r9_6) + 4) >= 0xc0;
                            r10_4 += r11_7;
                            
                            if (rax_1 != 5)
                            {
                                int64_t r11_8;
                                r11_8 = *((i_4 + r9_6) + 5) >= 0xc0;
                                r10_4 += r11_8;
                                
                                if (rax_1 != 6)
                                {
                                    int64_t rax_3;
                                    rax_3 = *((i_4 + r9_6) + 6) >= 0xc0;
                                    r10_4 += rax_3;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        int64_t result_1 = (r10_4 + rdx);
        uint64_t r8_4 = (r8_1 >> 3);
        arg3 = _mm_cmpeq_epi32(arg3, arg3);
        zmm1 = data_140065f10;
        
        while (true)
        {
            result = result_1;
            
            if (r8_4 == 0)
                break;
            
            void* i_3 = i_4;
            uint64_t rsi_1 = 0xc0;
            
            if (r8_4 < 0xc0)
                rsi_1 = r8_4;
            
            int64_t r10_5;
            
            if (r8_4 < 4)
                r10_5 = 0;
            else
            {
                uint64_t rcx_2 = (rsi_1 >> 2);
                int64_t r14_4 = ((rcx_2 - 1) & 0x7ffffffffffffff);
                void* i;
                
                if (r14_4 == 0)
                {
                    r10_5 = 0;
                    i = i_3;
                label_1400588b9:
                    
                    do
                    {
                        zmm2 = *i;
                        zmm3 = *(i + 0x10);
                        zmm5 = _mm_srli_epi64((zmm3 ^ arg3), 7);
                        zmm4 = _mm_srli_epi64((zmm2 ^ arg3), 7);
                        zmm3 = (_mm_srli_epi64(zmm3, 6) | zmm5);
                        zmm2 = _mm_add_epi64(((_mm_srli_epi64(zmm2, 6) | zmm4) & zmm1), (zmm3 & zmm1));
                        r10_5 += _mm_add_epi64(_mm_shuffle_epi32(zmm2, 0xee), zmm2)[0];
                        i += 0x20;
                    } while (i != ((rcx_2 << 5) + i_3));
                }
                else
                {
                    int64_t i_6 = ((r14_4 + 1) & 0xfffffffffffffffe);
                    i = ((i_6 << 5) + i_3);
                    zmm4 = {0};
                    int64_t i_2 = i_6;
                    void* i_5 = i_3;
                    int64_t i_1;
                    
                    do
                    {
                        zmm2 = *i_5;
                        zmm5 = *(i_5 + 0x20);
                        zmm3 = _mm_unpacklo_epi64(zmm2, zmm5);
                        zmm6 = _mm_srli_epi64((zmm3 ^ arg3), 7);
                        zmm3 = _mm_add_epi64(((_mm_srli_epi64(zmm3, 6) | zmm6) & zmm1), zmm4);
                        zmm4 = *(i_5 + 0x10);
                        zmm6 = *(i_5 + 0x30);
                        zmm2 = _mm_unpackhi_epi64(zmm2, zmm5);
                        zmm5 = _mm_unpacklo_epi64(zmm4, zmm6[0]);
                        zmm4 = _mm_unpackhi_epi64(zmm4, zmm6[0]);
                        zmm6 = _mm_srli_epi64((zmm2 ^ arg3), 7);
                        zmm2 = ((_mm_srli_epi64(zmm2, 6) | zmm6) & zmm1);
                        zmm6 = _mm_srli_epi64((zmm5 ^ arg3), 7);
                        zmm5 = _mm_add_epi64(_mm_add_epi64(((_mm_srli_epi64(zmm5, 6) | zmm6) & zmm1), zmm2), zmm3);
                        zmm2 = _mm_srli_epi64((zmm4 ^ arg3), 7);
                        zmm4 = _mm_add_epi64(((_mm_srli_epi64(zmm4, 6) | zmm2) & zmm1), zmm5);
                        i_5 += 0x40;
                        i_1 = i_2;
                        i_2 -= 2;
                    } while (i_1 != 2);
                    r10_5 = _mm_add_epi64(_mm_shuffle_epi32(zmm4, 0xee), zmm4)[0];
                    
                    if ((r14_4 + 1) != i_6)
                        goto label_1400588b9;
                }
            }
            
            i_4 = (i_3 + (rsi_1 << 3));
            r8_4 -= rsi_1;
            uint64_t rbx_2 = (rsi_1 & 3);
            result_1 = ((((((r10_5 >> 8) & 0xff00ff00ff00ff) + (r10_5 & 0xff00ff00ff00ff)) * 0x1000100010001) >> 0x30) + result);
            
            if (rbx_2 != 0)
            {
                uint64_t rsi_2 = (rsi_1 & 0xfc);
                int64_t rcx_5 = *(i_3 + (rsi_2 << 3));
                int64_t rcx_8 = (((rcx_5 >> 6) | (!(rcx_5) >> 7)) & 0x101010101010101);
                
                if (rbx_2 != 1)
                {
                    int64_t r8_5 = *((i_3 + (rsi_2 << 3)) + 8);
                    rcx_8 += (((r8_5 >> 6) | (!(r8_5) >> 7)) & 0x101010101010101);
                    
                    if (rbx_2 != 2)
                    {
                        int64_t r8_9 = *((i_3 + (rsi_2 << 3)) + 0x10);
                        rcx_8 += (((r8_9 >> 6) | (!(r8_9) >> 7)) & 0x101010101010101);
                    }
                }
                
                return (((((0x700ff00ff00ff & (rcx_8 >> 8)) + (0xff00ff00ff00ff & rcx_8)) * 0x1000100010001) >> 0x30) + result_1);
            }
        }
    }
    return result;
}

int64_t sub_140058970(char* arg1, int64_t arg2)
{
    if (arg2 == 0)
        return 0;
    
    int64_t result;
    int64_t r8;
    
    if (arg2 >= 4)
    {
        r8 = (arg2 & 0xfffffffffffffffc);
        int32_t zmm0[0x4] = {0};
        int64_t rax_1 = 0;
        char zmm2[0x10] = *data_140065ef0;
        int128_t zmm3 = data_140065f00;
        int32_t zmm1[0x4] = {0};
        
        do
        {
            uint128_t zmm5 = *((arg1 + rax_1) + 2);
            uint16_t zmm4[0x8] = _mm_cmpgt_epi8(*(arg1 + rax_1), zmm2);
            zmm0 = _mm_add_epi64(zmm0, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm4, zmm4[0]), 0xd4), 0xd4) & zmm3));
            zmm5 = _mm_cmpgt_epi8(zmm5, zmm2);
            zmm1 = _mm_add_epi64(zmm1, (_mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_unpacklo_epi8(zmm5, zmm5), 0xd4), 0xd4) & zmm3));
            rax_1 += 4;
        } while (r8 != rax_1);
        
        int32_t temp0_11[0x4] = _mm_add_epi64(zmm1, zmm0);
        result = _mm_add_epi64(_mm_shuffle_epi32(temp0_11, 0xee), temp0_11)[0];
        
        if (r8 != arg2)
            goto label_140058a35;
    }
    else
    {
        result = 0;
        r8 = 0;
    label_140058a35:
        
        do
        {
            int64_t r9_3;
            r9_3 = arg1[r8] >= 0xc0;
            result += r9_3;
            r8 += 1;
        } while (arg2 != r8);
    }
    return result;
}

int64_t* sub_140058a40(int64_t* arg1, int64_t arg2, int64_t arg3, char* arg4, int64_t arg5)
{
    if (arg5 == 0)
    {
        arg1[9] = arg2;
        arg1[0xa] = arg3;
        arg1[0xb] = arg4;
        arg1[0xc] = 0;
        *arg1 = {0};
        arg1[2] = arg3;
        arg1[3] = 0x101;
        *(arg1 + 0x1a) = 0;
    }
    else
    {
        uint64_t count_1;
        uint64_t rdx;
        uint64_t count;
        uint64_t r13_1;
        
        if (arg5 != 1)
        {
            int64_t r10_1 = 1;
            count_1 = 0;
            uint64_t count_6 = 1;
            int64_t r8_1 = 0;
            r13_1 = 1;
            int64_t rcx_15;
            
            do
            {
                rcx_15 = (r8_1 + count_1);
                
                if (rcx_15 >= arg5)
                {
                label_140058f22:
                    sub_14005c830(rcx_15, arg5);
                    /* no return */
                }
                
                char rcx_4 = arg4[rcx_15];
                char temp0_1 = arg4[r10_1];
                uint64_t count_7;
                
                if (temp0_1 < rcx_4)
                {
                    count_7 = ((count_6 + r8_1) + 1);
                    r13_1 = (count_7 - count_1);
                    r8_1 = 0;
                }
                else if (temp0_1 != rcx_4)
                {
                    count_7 = (count_6 + 1);
                    r13_1 = 1;
                    r8_1 = 0;
                    count_1 = count_6;
                }
                else
                {
                    int64_t r8_2 = (r8_1 + 1);
                    int64_t r10_2 = r8_2;
                    
                    if (r8_2 == r13_1)
                        r10_2 = 0;
                    
                    if (r8_2 != r13_1)
                        r8_2 = 0;
                    
                    count_7 = (r8_2 + count_6);
                    r8_1 = r10_2;
                }
                
                r10_1 = (count_7 + r8_1);
                count_6 = count_7;
            } while (r10_1 < arg5);
            
            int64_t r11_1 = 1;
            count = 0;
            uint64_t count_3 = 1;
            int64_t r9 = 0;
            rdx = 1;
            
            do
            {
                rcx_15 = (r9 + count);
                
                if (rcx_15 >= arg5)
                    goto label_140058f22;
                
                char rcx_7 = arg4[rcx_15];
                char temp3_1 = arg4[r11_1];
                uint64_t count_5;
                
                if (temp3_1 > rcx_7)
                {
                    count_5 = ((count_3 + r9) + 1);
                    rdx = (count_5 - count);
                    r9 = 0;
                }
                else if (temp3_1 != rcx_7)
                {
                    count_5 = (count_3 + 1);
                    rdx = 1;
                    r9 = 0;
                    count = count_3;
                }
                else
                {
                    int64_t r9_1 = (r9 + 1);
                    int64_t r11_2 = r9_1;
                    
                    if (r9_1 == rdx)
                        r11_2 = 0;
                    
                    if (r9_1 != rdx)
                        r9_1 = 0;
                    
                    count_5 = (r9_1 + count_3);
                    r9 = r11_2;
                }
                
                r11_1 = (count_5 + r9);
                count_3 = count_5;
            } while (r11_1 < arg5);
        }
        else
        {
            r13_1 = 1;
            count_1 = 0;
            rdx = 1;
            count = 0;
        }
        
        if (count_1 <= count)
            r13_1 = rdx;
        
        if (count_1 > count)
            count = count_1;
        
        uint64_t count_4 = (arg5 - count);
        
        if (arg5 < count)
        {
            sub_14005cb50(count, arg5);
            /* no return */
        }
        
        uint64_t rdx_2 = (r13_1 + count);
        
        if ((r13_1 + count) < r13_1)
        {
            sub_14005cbc0(r13_1, rdx_2);
            /* no return */
        }
        
        if (rdx_2 > arg5)
        {
            sub_14005cb50(rdx_2, arg5);
            /* no return */
        }
        
        int64_t rax_3;
        uint64_t count_2;
        int64_t rdx_9;
        int64_t r8_6;
        int64_t r15_6;
        
        if (memcmp(arg4, &arg4[r13_1], count) == 0)
        {
            int64_t r9_2 = 1;
            int64_t r10_3 = 0;
            int64_t r11_3 = 1;
            int64_t rdx_5 = 0;
            int64_t rax_10;
            int64_t rcx_11;
            int64_t rbx_1;
            int64_t r9_4;
            int64_t r11_4;
            int64_t r15_5;
            
            while (true)
            {
                if ((r11_3 + r10_3) < arg5)
                {
                    rcx_11 = ((arg5 - r10_3) + !(r11_3));
                    
                    if (rcx_11 >= arg5)
                    {
                    label_140058f31:
                        sub_14005c830(rcx_11, arg5);
                        /* no return */
                    }
                    
                    rax_10 = ((!(r10_3) + arg5) - rdx_5);
                    
                    if (rax_10 >= arg5)
                    {
                    label_140058f43:
                        sub_14005c830(rax_10, arg5);
                        /* no return */
                    }
                    
                    int64_t r15_3 = (r11_3 + 1);
                    char rax_11 = arg4[rax_10];
                    char temp4_1 = arg4[rcx_11];
                    
                    if (temp4_1 < rax_11)
                    {
                        r15_3 = ((r10_3 + r11_3) + 1);
                        r9_2 = (r15_3 - rdx_5);
                        r10_3 = 0;
                    }
                    else if (temp4_1 != rax_11)
                    {
                        r9_2 = 1;
                        r10_3 = 0;
                        rdx_5 = r11_3;
                    }
                    else
                    {
                        int64_t r10_4 = (r10_3 + 1);
                        int64_t rax_12 = r10_4;
                        
                        if (r10_4 == r9_2)
                            rax_12 = 0;
                        
                        if (r10_4 != r9_2)
                            r10_4 = 0;
                        
                        r15_3 = (r10_4 + r11_3);
                        r10_3 = rax_12;
                    }
                    
                    r11_3 = r15_3;
                    
                    if (r9_2 != r13_1)
                        continue;
                }
                
                rbx_1 = 1;
                r11_4 = 0;
                r15_5 = 1;
                r9_4 = 0;
                break;
            }
            
            while (true)
            {
                if ((r15_5 + r11_4) < arg5)
                {
                    rcx_11 = ((arg5 - r11_4) + !(r15_5));
                    
                    if (rcx_11 >= arg5)
                        goto label_140058f31;
                    
                    rax_10 = ((!(r11_4) + arg5) - r9_4);
                    
                    if (rax_10 >= arg5)
                        goto label_140058f43;
                    
                    int64_t r10_6 = (r15_5 + 1);
                    char rax_19 = arg4[rax_10];
                    char temp5_1 = arg4[rcx_11];
                    
                    if (temp5_1 > rax_19)
                    {
                        r10_6 = ((r11_4 + r15_5) + 1);
                        rbx_1 = (r10_6 - r9_4);
                        r11_4 = 0;
                    }
                    else if (temp5_1 != rax_19)
                    {
                        rbx_1 = 1;
                        r11_4 = 0;
                        r9_4 = r15_5;
                    }
                    else
                    {
                        int64_t r11_5 = (r11_4 + 1);
                        int64_t rax_20 = r11_5;
                        
                        if (r11_5 == rbx_1)
                            rax_20 = 0;
                        
                        if (r11_5 != rbx_1)
                            r11_5 = 0;
                        
                        r10_6 = (r11_5 + r15_5);
                        r11_4 = rax_20;
                    }
                    
                    r15_5 = r10_6;
                    
                    if (rbx_1 != r13_1)
                        continue;
                }
                
                if (rdx_5 > r9_4)
                    r9_4 = rdx_5;
                
                count_2 = (arg5 - r9_4);
                
                if (r13_1 == 0)
                {
                    r8_6 = 0;
                    rdx_9 = arg5;
                    rax_3 = 0;
                    r13_1 = 0;
                    r15_6 = arg2;
                }
                else
                {
                    uint64_t rdx_7 = (r13_1 & 3);
                    r15_6 = arg2;
                    void* i;
                    
                    if (r13_1 >= 4)
                    {
                        rax_3 = 0;
                        i = nullptr;
                        
                        do
                        {
                            int64_t rax_26 = (((rax_3 | (1 << (*(arg4 + i) % 0x40))) | (1 << (*((arg4 + i) + 1) % 0x40))) | (1 << (*((arg4 + i) + 2) % 0x40)));
                            rax_3 = (rax_26 | (1 << (*((arg4 + i) + 3) % 0x40)));
                            i += 4;
                        } while ((r13_1 & 0xfffffffffffffffc) != i);
                    }
                    else
                    {
                        rax_3 = 0;
                        i = nullptr;
                    }
                    
                    if (rdx_7 == 0)
                        r8_6 = 0;
                    else
                    {
                        r8_6 = 0;
                        int64_t r10_12 = 0;
                        
                        do
                        {
                            rax_3 |= (1 << (*((i + arg4) + r10_12) % 0x40));
                            r10_12 += 1;
                        } while (rdx_7 != r10_12);
                    }
                    
                    rdx_9 = arg5;
                }
                
                break;
            }
        }
        else
        {
            if (count > count_4)
                count_4 = count;
            
            uint64_t rcx_2 = (arg5 & 3);
            void* i_1;
            
            if ((arg5 - 1) >= 3)
            {
                rax_3 = 0;
                i_1 = nullptr;
                
                do
                {
                    int64_t rax_23 = (((rax_3 | (1 << (*(arg4 + i_1) % 0x40))) | (1 << (*((arg4 + i_1) + 1) % 0x40))) | (1 << (*((arg4 + i_1) + 2) % 0x40)));
                    rax_3 = (rax_23 | (1 << (*((arg4 + i_1) + 3) % 0x40)));
                    i_1 += 4;
                } while ((arg5 & 0xfffffffffffffffc) != i_1);
            }
            else
            {
                rax_3 = 0;
                i_1 = nullptr;
            }
            
            if (rcx_2 != 0)
            {
                int64_t r8_5 = 0;
                
                do
                {
                    rax_3 |= (1 << (*((i_1 + arg4) + r8_5) % 0x40));
                    r8_5 += 1;
                } while (rcx_2 != r8_5);
            }
            
            r8_6 = -1;
            rdx_9 = -1;
            r13_1 = (count_4 + 1);
            count_2 = count;
            r15_6 = arg2;
        }
        
        arg1[9] = r15_6;
        arg1[0xa] = arg3;
        arg1[0xb] = arg4;
        arg1[0xc] = arg5;
        *arg1 = 1;
        arg1[1] = count;
        arg1[2] = count_2;
        arg1[3] = r13_1;
        arg1[4] = rax_3;
        arg1[5] = 0;
        arg1[6] = arg3;
        arg1[7] = r8_6;
        arg1[8] = rdx_9;
    }
    
    return arg1;
}

void sub_140058f80(char* arg1, void* arg2, void* arg3, void* arg4, int64_t arg5) __noreturn
{
    void* var_30 = arg3;
    void* var_38 = arg4;
    void* var_d8;
    char const* const var_c8;
    void** var_b8;
    char const (** const var_68)[0x40];
    char* var_28;
    
    if (arg2 < 0x101)
    {
        var_28 = arg1;
        void* var_20_1 = arg2;
        var_c8 = 1;
        int64_t var_c0_1 = 0;
        
        if (arg3 <= arg2)
        {
        label_140059036:
            
            if (arg4 <= arg2)
            {
                if (arg3 > arg4)
                {
                    var_b8 = &var_30;
                    uint64_t (* var_b0)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
                    int64_t* var_a8 = &var_38;
                    uint64_t (* var_a0)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
                    char** var_98 = &var_28;
                    int64_t (* var_90)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
                    char const* const* var_88 = &var_c8;
                    int64_t (* var_80)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
                    var_68 = &data_1400667c0;
                    int64_t var_60 = 4;
                    int64_t var_48 = 0;
                    void*** var_58 = &var_b8;
                    int64_t var_50 = 4;
                    sub_14005c700(&var_68);
                    /* no return */
                }
                
                if ((arg3 != 0 && arg3 < arg2))
                {
                    void** r9_1 = &var_30;
                    
                    if (*(arg1 + arg3) >= 0xc0)
                        r9_1 = &var_38;
                    
                    arg4 = *r9_1;
                }
                
                void* var_e0 = arg4;
                void* r11_2 = arg2;
                
                if (arg4 < arg2)
                {
                    void* r10_2 = nullptr;
                    
                    if (arg4 >= 3)
                        r10_2 = (arg4 - 3);
                    
                    void* r11_3 = (arg4 + 1);
                    
                    if (r11_3 < r10_2)
                    {
                        sub_14005cbc0(r10_2, r11_3);
                        /* no return */
                    }
                    
                    if (r11_3 != r10_2)
                    {
                        void* r8_3 = (arg1 + r10_2);
                        r11_3 = ((r11_3 + arg1) - r8_3);
                        
                        if (*(arg1 + arg4) > 0xbf)
                            r11_3 -= 1;
                        else if (r10_2 != arg4)
                        {
                            void* r9_2 = (arg4 + arg1);
                            
                            if (*(r9_2 - 1) > 0xbf)
                                r11_3 -= 2;
                            else if (r8_3 != (r9_2 - 1))
                            {
                                if (*(r9_2 - 2) > 0xbf)
                                    r11_3 -= 3;
                                else if (r8_3 != (r9_2 - 2))
                                {
                                    if (*(r9_2 - 3) > 0xbf)
                                        r11_3 -= 4;
                                    else if (r8_3 != (r9_2 - 3))
                                        r11_3 -= 5;
                                }
                            }
                        }
                    }
                    
                    r11_2 = (r11_3 + r10_2);
                }
                
                if (r11_2 != 0)
                {
                    if (r11_2 >= arg2)
                    {
                        if (r11_2 != arg2)
                        {
                            sub_14005cd20(arg1, arg2, r11_2, arg2, arg5);
                            /* no return */
                        }
                    }
                    else if (*(arg1 + r11_2) <= 0xbf)
                    {
                        sub_14005cd20(arg1, arg2, r11_2, arg2, arg5);
                        /* no return */
                    }
                }
                
                if (r11_2 != arg2)
                {
                    char r9_4 = *(arg1 + r11_2);
                    uint32_t r8_4 = r9_4;
                    uint32_t var_14;
                    void* const rax_1;
                    
                    if (r8_4 >= 0)
                    {
                        var_14 = r8_4;
                        rax_1 = 1;
                    label_1400592e0:
                        var_d8 = r11_2;
                        void* var_d0 = (rax_1 + r11_2);
                        var_b8 = &var_e0;
                        uint64_t (* var_b0_2)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
                        uint32_t* var_a8_2 = &var_14;
                        int64_t (* var_a0_2)(int32_t* arg1, void* arg2) = sub_140057ef0;
                        void** var_98_2 = &var_d8;
                        int64_t (* var_90_2)(int64_t* arg1, int64_t* arg2) = sub_1400563a0;
                        char** var_88_1 = &var_28;
                        int64_t (* var_80_1)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
                        char const* const* var_78 = &var_c8;
                        int64_t (* var_70)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
                        var_68 = &data_140066840;
                        int64_t var_60_2 = 5;
                        int64_t var_48_2 = 0;
                        void*** var_58_2 = &var_b8;
                        int64_t var_50_2 = 5;
                        sub_14005c700(&var_68);
                        /* no return */
                    }
                    
                    int32_t rax_3 = (r8_4 & 0x1f);
                    int32_t r10_4 = (*((arg1 + r11_2) + 1) & 0x3f);
                    uint32_t rcx_7;
                    
                    if (r8_4 <= 0xdf)
                    {
                        rcx_7 = ((rax_3 << 6) | r10_4);
                    label_1400592b1:
                        var_14 = rcx_7;
                        rax_1 = 1;
                        
                        if (rcx_7 >= 0x80)
                        {
                            rax_1 = 2;
                            
                            if (rcx_7 >= 0x800)
                                rax_1 = (4 - 0);
                        }
                        
                        goto label_1400592e0;
                    }
                    
                    int32_t r8_8 = ((*((arg1 + r11_2) + 2) & 0x3f) | (r10_4 << 6));
                    
                    if (r9_4 < 0xf0)
                    {
                        rcx_7 = (r8_8 | (rax_3 << 0xc));
                        goto label_1400592b1;
                    }
                    
                    rcx_7 = (((*((arg1 + r11_2) + 3) & 0x3f) | (r8_8 << 6)) | ((rax_3 & 7) << 0x12));
                    
                    if (rcx_7 != 0x110000)
                        goto label_1400592b1;
                }
                
                sub_14005c680();
                /* no return */
            }
        }
    }
    else
    {
        void* r11_1 = 3;
        
        if (arg1[0x100] <= 0xbf)
        {
            r11_1 = 2;
            
            if (arg1[0xff] <= 0xbf)
                r11_1 = arg1[0xfe] >= 0xc0;
        }
        
        if (*((arg1 + r11_1) + 0xfd) <= 0xbf)
        {
            sub_14005cd20(arg1, arg2, nullptr, (r11_1 + 0xfd), arg5);
            /* no return */
        }
        
        var_28 = arg1;
        void* var_20 = (r11_1 + 0xfd);
        var_c8 = "[...]begin <= end ( <= ) when sl…";
        int64_t var_c0 = 5;
        
        if (arg3 <= arg2)
            goto label_140059036;
    }
    
    if (arg3 > arg2)
        arg4 = arg3;
    
    var_d8 = arg4;
    var_b8 = &var_d8;
    uint64_t (* var_b0_1)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char** var_a8_1 = &var_28;
    int64_t (* var_a0_1)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    char const* const* var_98_1 = &var_c8;
    int64_t (* var_90_1)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    var_68 = &data_1400668a8;
    int64_t var_60_1 = 3;
    int64_t var_48_1 = 0;
    void*** var_58_1 = &var_b8;
    int64_t var_50_1 = 3;
    sub_14005c700(&var_68);
    /* no return */
}

void* sub_140059380(int32_t arg1, void* arg2, int64_t arg3, int64_t arg4, int64_t arg5, char* arg6, void* arg7)
{
    void* result;
    
    if (arg3 != 0)
    {
        result = arg2;
        uint8_t rsi_2 = (arg1 >> 8);
        void* r8 = (result + (arg3 << 1));
        int64_t r11_1 = 0;
        
        do
        {
            char* result_1 = result;
            uint64_t rdi_1 = *(result + 1);
            result += 2;
            int64_t r10_1 = (r11_1 + rdi_1);
            char temp0_1 = *result_1;
            
            if (temp0_1 == rsi_2)
            {
                if (r10_1 < r11_1)
                {
                    sub_14005cbc0(r11_1, r10_1);
                    /* no return */
                }
                
                if (r10_1 > arg5)
                {
                    sub_14005cb50(r10_1, arg5);
                    /* no return */
                }
                
                int64_t rbx_1 = 0;
                bool cond:1_1;
                
                do
                {
                    if (rdi_1 == rbx_1)
                        goto label_140059402;
                    
                    cond:1_1 = *((r11_1 + arg4) + rbx_1) != arg1;
                    rbx_1 += 1;
                } while (cond:1_1);
                result = nullptr;
                goto label_14005946d;
            }
            
            if (temp0_1 > rsi_2)
                break;
            
        label_140059402:
            r11_1 = r10_1;
        } while (result != r8);
    }
    
    if (arg7 == 0)
        result = 1;
    else
    {
        char* r8_1 = arg6;
        void* rdx_2 = (arg7 + r8_1);
        uint32_t rcx = arg1;
        result = 1;
        
        do
        {
            uint32_t r9 = *r8_1;
            
            if (r9 < 0)
            {
                if (&r8_1[1] == rdx_2)
                {
                    sub_14005c680();
                    /* no return */
                }
                
                uint32_t r10_3 = r8_1[1];
                r8_1 = &r8_1[2];
                int32_t r9_3 = (((r9 & 0x7f) << 8) | r10_3);
                uint32_t temp2_1 = rcx;
                rcx -= r9_3;
                
                if ((temp2_1 - r9_3) < 0)
                    break;
            }
            else
            {
                r8_1 = &r8_1[1];
                uint32_t temp1_1 = rcx;
                rcx -= r9;
                
                if ((temp1_1 - r9) < 0)
                    break;
            }
            
            result ^= 1;
        } while (r8_1 != rdx_2);
    }
    
label_14005946d:
    result &= 1;
    return result;
}

void* sub_1400594b0(int32_t arg1)
{
    if (arg1 < 0x20)
        return 0;
    
    int64_t result;
    result = 1;
    
    if (arg1 >= 0x7f)
    {
        if (arg1 < 0x10000)
            return sub_140059380(arg1, &data_140066c46, 0x28, &data_140066c96, 0x120, &data_140066db6, 0x12d);
        
        if (arg1 < 0x20000)
            return sub_140059380(arg1, &data_140066968, 0x2c, &data_1400669c0, 0xc4, &data_140066a84, 0x1c2);
        
        result = 0;
        
        if ((_mm_movemask_ps(__pcmpgtd_xmmdq_memdq((__paddd_xmmdq_memdq(_mm_shuffle_epi32(arg1, 0), data_140065f20) ^ data_140065f30), data_140065f40)) == 0xf && ((arg1 - 0x2fa1e) >= 0x5e2 && ((arg1 - 0x3134b) >= 5 && ((arg1 - 0x323b0) >= 0xadd50 && ((arg1 & 0xffffffe0) != 0x2a6e0 && (arg1 & 0xfffffffe) != 0x2b81e))))))
            result = (arg1 - 0x110000) < 0xfffd01f0;
    }
    
    return result;
}

char* sub_1400595f0(char* arg1, char* arg2, int64_t arg3)
{
    int64_t rbx;
    int64_t var_18 = rbx;
    uint64_t rax;
    
    if (arg3 == 0)
        arg2 = nullptr;
    else
    {
        char* r9_1 = arg2;
        
        if (arg3 != 1)
        {
            if (*r9_1 == 0x2b)
            {
                r9_1 = &r9_1[1];
                bool cond:0_1 = arg3 < 0x12;
                arg3 -= 1;
                
                if (cond:0_1)
                    goto label_140059680;
                
                goto label_140059641;
            }
            
            if (arg3 > 0x10)
            {
            label_140059641:
                int64_t r10_1 = 0;
                rax = 0;
                
                while (true)
                {
                    if (arg3 == r10_1)
                    {
                    label_1400596b2:
                        *(arg1 + 8) = rax;
                        rax = 0;
                        goto label_1400596c1;
                    }
                    
                    uint64_t temp0_1 = rax;
                    arg2 = HIGHQ((rax * 0xa));
                    rax = LOWQ((rax * 0xa));
                    rbx = ((temp0_1 * 0xa) >> 0x40) != {0};
                    int32_t rsi_2 = (r9_1[r10_1] - 0x30);
                    
                    if (rsi_2 > 9)
                        break;
                    
                    arg2 = 2;
                    
                    if (rbx != 0)
                        goto label_1400596bc;
                    
                    uint64_t rsi_3 = rsi_2;
                    r10_1 += 1;
                    uint64_t temp1_1 = rax;
                    rax += rsi_3;
                    
                    if ((temp1_1 + rsi_3) < temp1_1)
                        goto label_1400596bc;
                }
                
                arg2 = 1;
            }
            else
            {
            label_140059680:
                arg2 = nullptr;
                rax = 0;
                
                while (true)
                {
                    int32_t r10_3 = (*(r9_1 + arg2) - 0x30);
                    
                    if (r10_3 > 9)
                        break;
                    
                    rax = (r10_3 + (rax * 0xa));
                    arg2 = &arg2[1];
                    
                    if (arg3 == arg2)
                        goto label_1400596b2;
                }
                
                arg2 = 1;
            }
        }
        else
        {
            rax = *r9_1;
            arg2 = 1;
            
            if (rax != 0x2b)
            {
                arg3 = 1;
                
                if (rax != 0x2d)
                    goto label_140059680;
            }
        }
    }
    
label_1400596bc:
    arg1[1] = arg2;
    rax = 1;
label_1400596c1:
    *arg1 = rax;
    return arg1;
}

int64_t sub_1400596d0(char* arg1, int64_t arg2, int32_t arg3)
{
    int64_t rbx;
    int64_t var_20 = rbx;
    
    if ((arg3 - 0x25) <= 0xffffffdc)
    {
        sub_14005c610(arg3);
        /* no return */
    }
    
    int64_t r9 = arg2;
    int64_t r10 = 1;
    
    if (arg2 != 0)
    {
        if (r9 != 1)
        {
            uint64_t rax_3;
            
            if (*arg1 != 0x2b)
            {
            label_140059748:
                
                if ((r9 > 8 || arg3 >= 0x11))
                    goto label_1400597b0;
                
            label_140059754:
                int64_t rdx = 0;
                
                if (arg3 <= 0xa)
                {
                    rax_3 = 0;
                    
                    do
                    {
                        int32_t r11_3 = (arg1[rdx] - 0x30);
                        
                        if (r11_3 >= arg3)
                            goto label_1400597a2;
                        
                        rax_3 = ((rax_3 * arg3) + r11_3);
                        rdx += 1;
                    } while (r9 != rdx);
                }
                else
                {
                    rax_3 = 0;
                    
                    do
                    {
                        uint32_t rsi_1 = arg1[rdx];
                        int32_t rdi_1 = (rsi_1 - 0x30);
                        
                        if (rdi_1 >= 0xa)
                        {
                            int32_t rsi_4 = ((rsi_1 | 0x20) - 0x57);
                            
                            if (((rsi_1 | 0x20) - 0x61) >= 0xfffffff6)
                                rsi_4 = -1;
                            
                            rdi_1 = rsi_4;
                            
                            if (rsi_4 >= arg3)
                                goto label_1400597a2;
                        }
                        
                        rax_3 = ((rax_3 * arg3) + rdi_1);
                        rdx += 1;
                    } while (r9 != rdx);
                }
                
                goto label_140059855;
            }
            
        label_14005971b:
            arg1 = &arg1[1];
            int64_t rax_2 = (r9 - 1);
            
            if ((r9 > 9 || arg3 >= 0x11))
            {
                r9 = rax_2;
            label_1400597b0:
                int64_t r11_1 = 0;
                
                if (arg3 <= 0xa)
                {
                    rax_3 = 0;
                    
                    while (true)
                    {
                        if (r9 == r11_1)
                            goto label_140059855;
                        
                        int32_t temp0_1;
                        int32_t temp1_1;
                        temp0_1 = HIGHD((rax_3 * arg3));
                        temp1_1 = LOWD((rax_3 * arg3));
                        rbx = ((rax_3 * arg3) >> 0x20) != 0;
                        int32_t rdx_3 = (arg1[r11_1] - 0x30);
                        
                        if ((rdx_3 >= arg3 || rbx != 0))
                        {
                            int32_t r9_1;
                            r9_1 = rdx_3 < arg3;
                            return (r10 | ((r9_1 << 8) + 0x100));
                        }
                        
                        r11_1 += 1;
                        rax_3 = (temp1_1 + rdx_3);
                        
                        if ((temp1_1 + rdx_3) < temp1_1)
                            break;
                        
                        continue;
                    }
                }
                else
                {
                    rax_3 = 0;
                    int32_t rbx_1;
                    int32_t i;
                    
                    do
                    {
                        if (r9 == r11_1)
                            goto label_140059855;
                        
                        bool temp3_1;
                        temp3_1 = HIGHD((rax_3 * arg3));
                        i = LOWD((rax_3 * arg3));
                        uint32_t rdi_2 = arg1[r11_1];
                        rbx_1 = (rdi_2 - 0x30);
                        
                        if (rbx_1 >= 0xa)
                        {
                            int32_t rdi_5 = ((rdi_2 | 0x20) - 0x57);
                            
                            if (((rdi_2 | 0x20) - 0x61) >= 0xfffffff6)
                                rdi_5 = -1;
                            
                            rbx_1 = rdi_5;
                            
                            if (rdi_5 >= arg3)
                                goto label_1400597a2;
                        }
                        
                        if (((rax_3 * arg3) >> 0x20) != 0 != 0)
                            break;
                        
                        r11_1 += 1;
                        rax_3 = (i + rbx_1);
                    } while ((i + rbx_1) >= i);
                }
                
                r9 = 0x200;
            }
            else
            {
                r9 = rax_2;
                
                if (rax_2 != 0)
                    goto label_140059754;
                
                rax_3 = 0;
            label_140059855:
                r10 = 0;
                r9 = (rax_3 << 0x20);
            }
        }
        else
        {
            uint32_t rax_1 = *arg1;
            
            if ((rax_1 != 0x2b && rax_1 != 0x2d))
            {
                if (rax_1 != 0x2b)
                    goto label_140059748;
                
                goto label_14005971b;
            }
            
        label_1400597a2:
            r9 = 0x100;
        }
    }
    
    return (r10 | r9);
}

uint64_t sub_1400598a0(char* arg1, int64_t* arg2)
{
    uint32_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint32_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        char r10_1 = (rcx & 0xf);
        r8 u>>= 4;
        char r11_2 = (r10_1 + 0x57);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059950(char* arg1, int64_t* arg2)
{
    uint32_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint32_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        char r10_1 = (rcx & 0xf);
        r8 u>>= 4;
        char r11_2 = (r10_1 + 0x37);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059a00(int16_t* arg1, int64_t* arg2)
{
    uint16_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r8 = &__saved_rsi;
    int64_t rax = 0;
    uint32_t r9_1;
    
    do
    {
        r9_1 = rcx;
        rcx = (r9_1 >> 4);
        char r10_1 = (r9_1 & 0xf);
        char r11_2 = (r10_1 + 0x57);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r8 - 1) = r11_2;
        r8 -= 1;
        rax += 1;
    } while (r9_1 >= 0x10);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_3 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_3, arg2, "0x000102030405060708091011121314…", 2, r8, rax);
}

uint64_t sub_140059ab0(int32_t* arg1, int64_t* arg2)
{
    uint32_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint32_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        r8 u>>= 4;
        char r10_1 = (rcx & 0xf);
        char r11_2 = (r10_1 + 0x57);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059b60(int32_t* arg1, int64_t* arg2)
{
    uint32_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint32_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        r8 u>>= 4;
        char r10_1 = (rcx & 0xf);
        char r11_2 = (r10_1 + 0x37);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059c10(int64_t* arg1, int64_t* arg2)
{
    uint64_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint64_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        r8 u>>= 4;
        char r10_1 = (rcx & 0xf);
        char r11_2 = (r10_1 + 0x57);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059cc0(int64_t* arg1, int64_t* arg2)
{
    uint64_t rcx = *arg1;
    int64_t __saved_rsi;
    int64_t* r9 = &__saved_rsi;
    int64_t rax = 0;
    uint64_t r8 = rcx;
    bool cond:1_1;
    
    do
    {
        r8 u>>= 4;
        char r10_1 = (rcx & 0xf);
        char r11_2 = (r10_1 + 0x37);
        
        if (r10_1 < 0xa)
            r11_2 = (r10_1 + 0x30);
        
        *(r9 - 1) = r11_2;
        r9 -= 1;
        rax += 1;
        cond:1_1 = rcx >= 0x10;
        rcx = r8;
    } while (cond:1_1);
    
    if ((0x80 - rax) >= 0x81)
    {
        sub_14005cae0((0x80 - rax), 0x80);
        /* no return */
    }
    
    int64_t* rcx_2 = arg2;
    arg2 = 1;
    return sub_1400571c0(rcx_2, arg2, "0x000102030405060708091011121314…", 2, r9, rax);
}

uint64_t sub_140059d70(int64_t* arg1, int64_t* arg2)
{
    char rax = *(arg2 + 0x34);
    int64_t* var_a8;
    int64_t* rcx_8;
    char* r8_2;
    int64_t r9_2;
    int64_t var_a0;
    int64_t __saved_rdi;
    int64_t rax_7;
    int64_t* r9_1;
    
    if ((rax & 0x10) != 0)
    {
        uint64_t rcx_5 = *arg1;
        r9_1 = &__saved_rdi;
        rax_7 = 0;
        uint64_t r8 = rcx_5;
        bool cond:1_1;
        
        do
        {
            r8 u>>= 4;
            char r10_2 = (rcx_5 & 0xf);
            char r11_3 = (r10_2 + 0x57);
            
            if (r10_2 < 0xa)
                r11_3 = (r10_2 + 0x30);
            
            *(r9_1 - 1) = r11_3;
            r9_1 -= 1;
            rax_7 += 1;
            cond:1_1 = rcx_5 >= 0x10;
            rcx_5 = r8;
        } while (cond:1_1);
    label_140059f0e:
        
        if ((0x80 - rax_7) >= 0x81)
        {
            sub_14005cae0((0x80 - rax_7), 0x80);
            /* no return */
        }
        
        var_a0 = rax_7;
        var_a8 = r9_1;
        r8_2 = "0x000102030405060708091011121314…";
        r9_2 = 2;
        rcx_8 = arg2;
        arg2 = 1;
    }
    else
    {
        if ((rax & 0x20) != 0)
        {
            uint64_t rcx_6 = *arg1;
            r9_1 = &__saved_rdi;
            rax_7 = 0;
            uint64_t r8_1 = rcx_6;
            bool cond:3_1;
            
            do
            {
                r8_1 u>>= 4;
                char r10_4 = (rcx_6 & 0xf);
                char r11_5 = (r10_4 + 0x37);
                
                if (r10_4 < 0xa)
                    r11_5 = (r10_4 + 0x30);
                
                *(r9_1 - 1) = r11_5;
                r9_1 -= 1;
                rax_7 += 1;
                cond:3_1 = rcx_6 >= 0x10;
                rcx_6 = r8_1;
            } while (cond:3_1);
            goto label_140059f0e;
        }
        
        uint64_t rcx = *arg1;
        int64_t rax_1 = 0x27;
        void var_9a;
        uint64_t rdx_1;
        
        if (rcx < 0x2710)
        {
            rdx_1 = rcx;
            
            if (rdx_1 > 0x63)
            {
            label_140059e30:
                uint64_t rcx_4 = (((rdx_1 >> 2) * 0x147b) >> 0x11);
                *(&var_9a + rax_1) = *("00010203040506070809101112131415…" + ((rdx_1 - (rcx_4 * 0x64)) << 1));
                rax_1 -= 2;
                rdx_1 = rcx_4;
            }
        }
        else
        {
            int64_t r11_1 = 0x27;
            bool cond:4_1;
            
            do
            {
                rdx_1 = (rcx / 0x2710);
                int32_t rsi_2 = (rcx - (rdx_1 * 0x2710));
                uint64_t rdi_2 = ((rsi_2 * 0x147b) >> 0x13);
                rax_1 = (r11_1 - 4);
                *(&*var_a0[4] + r11_1) = *("00010203040506070809101112131415…" + (rdi_2 << 1));
                *(&var_9a + r11_1) = *("00010203040506070809101112131415…" + ((rsi_2 - (rdi_2 * 0x64)) << 1));
                r11_1 = rax_1;
                cond:4_1 = rcx > 0x5f5e0ff;
                rcx = rdx_1;
            } while (cond:4_1);
            
            if (rdx_1 > 0x63)
                goto label_140059e30;
        }
        
        rcx_8 = arg2;
        int64_t rax_6;
        
        if (rdx_1 >= 0xa)
        {
            *(&var_9a + rax_1) = *("00010203040506070809101112131415…" + (rdx_1 << 1));
            rax_6 = (rax_1 - 2);
        }
        else
        {
            rdx_1 |= 0x30;
            void var_99;
            *(&var_99 + rax_1) = rdx_1;
            rax_6 = (rax_1 - 1);
        }
        
        var_a0 = (0x27 - rax_6);
        void var_48;
        var_a8 = ((rax_6 + &var_48) - 0x50);
        r8_2 = 1;
        arg2 = 1;
        r9_2 = 0;
    }
    return sub_1400571c0(rcx_8, arg2, r8_2, r9_2, var_a8);
}

uint64_t sub_140059fa0(char* arg1, int64_t* arg2)
{
    uint64_t rax = *arg1;
    int64_t rcx_2;
    void var_2f;
    
    if (rax < 0x64)
    {
        rcx_2 = 0x26;
        
        if (rax >= 0xa)
        {
            int16_t var_a_2 = *("00010203040506070809101112131415…" + (rax << 1));
            rcx_2 = 0x25;
        }
        else
        {
            rax |= 0x30;
            *(&var_2f + rcx_2) = rax;
        }
    }
    else
    {
        uint64_t rcx = rax;
        uint32_t r8_3 = ((rcx + ((rcx * 5) << 3)) >> 0xc);
        rax -= (r8_3 * 0x64);
        int16_t var_a_1 = *("00010203040506070809101112131415…" + (rax << 1));
        rcx_2 = 0x24;
        rax = (r8_3 | 0x30);
        *(&var_2f + rcx_2) = rax;
    }
    int64_t* rcx_3 = arg2;
    arg2 = 1;
    int64_t __saved_rbp;
    return sub_1400571c0(rcx_3, arg2, 1, 0, ((rcx_2 + &__saved_rbp) - 0x27), (0x27 - rcx_2));
}

uint64_t sub_14005a040(int32_t* arg1)
{
    int32_t r9 = *arg1;
    uint64_t r8_1 = -(r9);
    
    if (r8_1 < 0)
        r8_1 = r9;
    
    int64_t rax = 0x27;
    int64_t var_50;
    void var_49;
    uint64_t rdx_2;
    
    if (r8_1 < 0x2710)
    {
        rdx_2 = r8_1;
        
        if (rdx_2 > 0x63)
        {
        label_14005a0f2:
            uint64_t r8_5 = (((rdx_2 >> 2) * 0x147b) >> 0x11);
            *(&var_49 + rax) = *("00010203040506070809101112131415…" + ((rdx_2 - (r8_5 * 0x64)) << 1));
            rax -= 2;
            rdx_2 = r8_5;
        }
    }
    else
    {
        int64_t rsi_1 = 0x27;
        bool cond:0_1;
        
        do
        {
            rdx_2 = (r8_1 / 0x2710);
            int32_t rdi_2 = (r8_1 - (rdx_2 * 0x2710));
            uint64_t rbx_2 = ((rdi_2 * 0x147b) >> 0x13);
            rax = (rsi_1 - 4);
            *(&*var_50[5] + rsi_1) = *("00010203040506070809101112131415…" + (rbx_2 << 1));
            *(&var_49 + rsi_1) = *("00010203040506070809101112131415…" + ((rdi_2 - (rbx_2 * 0x64)) << 1));
            rsi_1 = rax;
            cond:0_1 = r8_1 > 0x5f5e0ff;
            r8_1 = rdx_2;
        } while (cond:0_1);
        
        if (rdx_2 > 0x63)
            goto label_14005a0f2;
    }
    
    int64_t rax_5;
    
    if (rdx_2 >= 0xa)
    {
        *(&var_49 + rax) = *("00010203040506070809101112131415…" + (rdx_2 << 1));
        rax_5 = (rax - 2);
    }
    else
    {
        rdx_2 |= 0x30;
        void var_48;
        *(&var_48 + rax) = rdx_2;
        rax_5 = (rax - 1);
    }
    
    var_50 = (0x27 - rax_5);
    void var_28;
    void* var_58 = ((rax_5 + &var_28) - 0x1f);
    return sub_1400571c0();
}

uint64_t sub_14005a180(int32_t* arg1, int64_t* arg2)
{
    uint64_t rcx = *arg1;
    int64_t rax = 0x27;
    void var_41;
    uint64_t rdx_1;
    
    if (rcx < 0x2710)
    {
        rdx_1 = rcx;
        
        if (rdx_1 > 0x63)
        {
        label_14005a220:
            uint64_t rcx_4 = (((rdx_1 >> 2) * 0x147b) >> 0x11);
            *(&var_41 + rax) = *("00010203040506070809101112131415…" + ((rdx_1 - (rcx_4 * 0x64)) << 1));
            rax -= 2;
            rdx_1 = rcx_4;
        }
    }
    else
    {
        int64_t r11_1 = 0x27;
        bool cond:0_1;
        
        do
        {
            rdx_1 = (rcx / 0x2710);
            int32_t rsi_2 = (rcx - (rdx_1 * 0x2710));
            uint64_t rdi_2 = ((rsi_2 * 0x147b) >> 0x13);
            rax = (r11_1 - 4);
            void var_43;
            *(&var_43 + r11_1) = *("00010203040506070809101112131415…" + (rdi_2 << 1));
            *(&var_41 + r11_1) = *("00010203040506070809101112131415…" + ((rsi_2 - (rdi_2 * 0x64)) << 1));
            r11_1 = rax;
            cond:0_1 = rcx > 0x5f5e0ff;
            rcx = rdx_1;
        } while (cond:0_1);
        
        if (rdx_1 > 0x63)
            goto label_14005a220;
    }
    
    int64_t rax_5;
    
    if (rdx_1 >= 0xa)
    {
        *(&var_41 + rax) = *("00010203040506070809101112131415…" + (rdx_1 << 1));
        rax_5 = (rax - 2);
    }
    else
    {
        rdx_1 |= 0x30;
        void var_40;
        *(&var_40 + rax) = rdx_1;
        rax_5 = (rax - 1);
    }
    
    int64_t rdx_5;
    rdx_5 = 1;
    int64_t __saved_rdi;
    return sub_1400571c0(arg2, rdx_5, 1, 0, ((rax_5 + &__saved_rdi) - 0x27), (0x27 - rax_5));
}

uint64_t sub_14005a2a0(int64_t* arg1, int64_t* arg2)
{
    uint64_t rcx = *arg1;
    int64_t rax = 0x27;
    void var_41;
    uint64_t rdx_1;
    
    if (rcx < 0x2710)
    {
        rdx_1 = rcx;
        
        if (rdx_1 > 0x63)
        {
        label_14005a340:
            uint64_t rcx_4 = (((rdx_1 >> 2) * 0x147b) >> 0x11);
            *(&var_41 + rax) = *("00010203040506070809101112131415…" + ((rdx_1 - (rcx_4 * 0x64)) << 1));
            rax -= 2;
            rdx_1 = rcx_4;
        }
    }
    else
    {
        int64_t r11_1 = 0x27;
        bool cond:0_1;
        
        do
        {
            rdx_1 = (rcx / 0x2710);
            int32_t rsi_2 = (rcx - (rdx_1 * 0x2710));
            uint64_t rdi_2 = ((rsi_2 * 0x147b) >> 0x13);
            rax = (r11_1 - 4);
            void var_43;
            *(&var_43 + r11_1) = *("00010203040506070809101112131415…" + (rdi_2 << 1));
            *(&var_41 + r11_1) = *("00010203040506070809101112131415…" + ((rsi_2 - (rdi_2 * 0x64)) << 1));
            r11_1 = rax;
            cond:0_1 = rcx > 0x5f5e0ff;
            rcx = rdx_1;
        } while (cond:0_1);
        
        if (rdx_1 > 0x63)
            goto label_14005a340;
    }
    
    int64_t rax_5;
    
    if (rdx_1 >= 0xa)
    {
        *(&var_41 + rax) = *("00010203040506070809101112131415…" + (rdx_1 << 1));
        rax_5 = (rax - 2);
    }
    else
    {
        rdx_1 |= 0x30;
        void var_40;
        *(&var_40 + rax) = rdx_1;
        rax_5 = (rax - 1);
    }
    
    int64_t rdx_5;
    rdx_5 = 1;
    int64_t __saved_rdi;
    return sub_1400571c0(arg2, rdx_5, 1, 0, ((rax_5 + &__saved_rdi) - 0x27), (0x27 - rax_5));
}

int64_t sub_14005a3c0(int64_t* arg1)
{
    *arg1;
    /* jump -> *(arg1[1] + 0x18) */
}

int64_t sub_14005a3e0(int64_t* arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140057550(arg2, *arg1, arg1[1]);
}

int32_t sub_14005a400(int32_t arg1)
{
    if ((arg1 << 0xb) >= 0x88050000)
    {
        sub_14005c830(1, 1);
        /* no return */
    }
    
    int32_t result;
    result = (arg1 - 0x7f) < 0x21;
    result |= arg1 < 0x20;
    return result;
}

uint64_t sub_14005a450(int32_t arg1)
{
    int32_t rax_1 = (arg1 << 0xb);
    int64_t r8 = 0x21;
    int64_t r9 = 0;
    int64_t r10 = 0x21;
    
    do
    {
        int64_t r8_2 = ((r8 >> 1) + r9);
        int32_t r11_2 = (*(&data_140067030 + (r8_2 << 2)) << 0xb);
        
        if (r11_2 == rax_1)
        {
            r9 = (r8_2 + 1);
            break;
        }
        
        if (r11_2 > rax_1)
            r10 = r8_2;
        
        if (r11_2 < rax_1)
            r9 = (r8_2 + 1);
        
        r8 = (r10 - r9);
    } while (r10 > r9);
    
    if (r9 > 0x20)
    {
        sub_14005c830(r9, 0x21);
        /* no return */
    }
    
    uint64_t result = (*(&data_140067030 + (r9 << 2)) >> 0x15);
    uint64_t r8_5 = 0x2d7;
    
    if (r9 != 0x20)
        r8_5 = (*((r9 << 2) + 0x140067034) >> 0x15);
    
    int32_t r10_1;
    
    if (r9 == 0)
    {
        r10_1 = 0;
        
        if (!(result) != -(r8_5))
            goto label_14005a4f9;
    }
    else
    {
        r10_1 = (0x1fffff & *((r9 << 2) + 0x14006702c));
        
        if (!(result) != -(r8_5))
        {
        label_14005a4f9:
            int32_t rdx_3 = 0;
            uint64_t result_2 = result;
            
            while (true)
            {
                if (result_2 > 0x2d6)
                {
                    uint64_t result_1 = 0x2d7;
                    
                    if (result >= 0x2d8)
                        result_1 = result;
                    
                    sub_14005c830(result_1, 0x2d7);
                    /* no return */
                }
                
                rdx_3 += *(result_2 + &data_1400670b4);
                
                if (rdx_3 > (arg1 - r10_1))
                {
                    result = result_2;
                    break;
                }
                
                result_2 += 1;
                
                if ((r8_5 - 1) == result_2)
                {
                    result = (r8_5 - 1);
                    break;
                }
            }
        }
    }
    result &= 1;
    return result;
}

int64_t pre_c_initialization()
{
    _set_app_type(_crt_console_app);
    _set_fmode(0x4000);
    *__p__commode() = 0;
    
    if (__scrt_initialize_onexit_tables(1) != 0)
    {
        _RTC_Initialize();
        atexit(_RTC_Terminate);
        
        if (_configure_narrow_argv(_crt_argv_unexpanded_arguments) == 0)
        {
            sub_14005aba8();
            
            if (sub_14005abf0() != 0)
                __setusermatherr(sub_14005ab88);
            
            _configthreadlocale(0);
            
            if (sub_14005abb8() != 0)
                _initialize_narrow_environment();
            
            j_sub_14005adcc();
            return 0;
        }
    }
    
    __scrt_fastfail(7);
    breakpoint();
}

int64_t post_pgo_initialization()
{
    __scrt_initialize_default_local_stdio_options();
    return 0;
}

int64_t pre_cpp_initialization()
{
    sub_14005adbc();
    /* tailcall */
    return _set_new_mode(0);
}

uint64_t __scrt_common_main_seh(uint64_t arg1 @ rbx)
{
    arg_8 = arg1;
    
    if (sub_14005a8d8(1) == 0)
    {
        __scrt_fastfail(7);
        __scrt_fastfail(7);
    }
    else
    {
        int64_t rsi;
        rsi = 0;
        char var_18_1 = 0;
        arg1 = __scrt_acquire_startup_lock();
        int32_t rcx_1 = data_140071278;
        
        if (rcx_1 == 1)
            __scrt_fastfail(7);
        else
        {
            if (rcx_1 != 0)
            {
                rsi = 1;
                char var_18_2 = 1;
            }
            else
            {
                data_140071278 = 1;
                
                if (_initterm_e(&data_14005d368, &data_14005d380) != 0)
                    return 0xff;
                
                _initterm(&data_14005d350, &data_14005d360);
                data_140071278 = 2;
            }
            
            rcx_1 = arg1;
            __scrt_release_startup_lock(rcx_1);
            
            if ((data_1400712f0 != 0 && __scrt_is_nonwritable_in_current_image(&data_1400712f0) != 0))
                data_1400712f0(0, 2, 0);
            
            if ((data_1400712e8 != 0 && __scrt_is_nonwritable_in_current_image(&data_1400712e8) != 0))
                _register_thread_local_exe_atexit_callback(data_1400712e8);
            
            _get_initial_narrow_environment();
            *__p___argv();
            arg1 = main(*__p___argc());
            
            if (sub_14005ad68() != 0)
            {
                if (rsi == 0)
                    _cexit();
                
                __scrt_uninitialize_crt(1, 0);
                return arg1;
            }
        }
    }
    
    exit(arg1);
    /* no return */
}

uint64_t sub_14005a7a2(int32_t arg1 @ rax, char arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    if (sub_14005ad68() == 0)
    {
        _exit(arg1);
        /* no return */
    }
    
    if (arg2 == 0)
        _c_exit();
    
    return arg1;
}

int64_t _start()
{
    sub_14005aadc();
    uint64_t rbx;
    /* tailcall */
    return __scrt_common_main_seh(rbx);
}

void __chkstk(int64_t arg1 @ rax)
{
    void* r10 = (&arg_8 - arg1);
    
    if (&arg_8 < arg1)
        r10 = nullptr;
    
    TEB* gsbase;
    void* StackLimit = gsbase->NtTib.StackLimit;
    
    if (r10 < StackLimit)
    {
        r10 &= 0xf000;
        
        do
        {
            StackLimit -= 0x1000;
            *StackLimit = 0;
        } while (r10 != StackLimit);
    }
}

void*** type_info::`scalar deleting destructor'(void*** arg1, char arg2)
{
    *arg1 = &data_140067558;
    
    if ((arg2 & 1) != 0)
        sub_14005aea8(arg1);
    
    return arg1;
}

int64_t __scrt_acquire_startup_lock()
{
    int64_t result;
    
    if (sub_14005b05c() == 0)
    {
    label_14005a8ca:
        result = 0;
    }
    else
    {
        TEB* gsbase;
        void* StackBase = gsbase->NtTib.Self->NtTib.StackBase;
        
        do
        {
            result = 0;
            bool z_1;
            
            if (0 == data_140071280)
            {
                data_140071280 = StackBase;
                z_1 = true;
            }
            else
            {
                result = data_140071280;
                z_1 = false;
            }
            
            if (z_1)
                goto label_14005a8ca;
        } while (StackBase != result);
        
        result = 1;
    }
    
    return result;
}

int64_t sub_14005a8d8(int32_t arg1)
{
    if (arg1 == 0)
        data_140071288 = 1;
    
    int64_t xcr0;
    sub_14005aeb0(xcr0);
    
    if ((sub_14005b13c() != 0 && sub_14005b13c() != 0))
        return 1;
    
    return 0;
}

int32_t __scrt_initialize_onexit_tables(int32_t arg1)
{
    int32_t result;
    
    if (data_140071289 != 0)
        result = 1;
    else
    {
        if (arg1 > 1)
        {
            __scrt_fastfail(5);
            breakpoint();
        }
        
        if ((sub_14005b05c() == 0 || arg1 != 0))
        {
            __builtin_memset(&data_140071290, 0xff, 0x30);
            data_140071289 = 1;
            result = 1;
        }
        else if (_initialize_onexit_table(&data_140071290) != 0)
            result = 0;
        else if (_initialize_onexit_table(&data_1400712a8) == 0)
        {
            data_140071289 = 1;
            result = 1;
        }
        else
            result = 0;
    }
    
    return result;
}

uint64_t __scrt_is_nonwritable_in_current_image(int64_t arg1)
{
    struct Section_Header* const rdx_1 = &__section_headers;
    
    while (true)
    {
        struct Section_Header* const var_18_1 = rdx_1;
        
        if (rdx_1 == &data_1400002c8)
        {
            rdx_1 = nullptr;
            break;
        }
        
        uint64_t virtualAddress = rdx_1->virtualAddress;
        
        if (((arg1 - &__dos_header) >= virtualAddress && (arg1 - &__dos_header) < (rdx_1->virtualSize + virtualAddress)))
            break;
        
        rdx_1 = &rdx_1[1];
    }
    
    uint64_t result;
    
    if (rdx_1 == 0)
        result = 0;
    else if (rdx_1->characteristics >= 0)
        result = 1;
    else
        result = 0;
    
    return result;
}

int64_t __scrt_release_startup_lock(char arg1)
{
    int64_t rbx;
    rbx = arg1;
    int32_t result = sub_14005b05c();
    
    if ((result != 0 && rbx == 0))
    {
        data_140071280;
        data_140071280 = 0;
    }
    
    return result;
}

int64_t __scrt_uninitialize_crt(char arg1, char arg2)
{
    int64_t rbx;
    rbx = arg1;
    data_140071288;
    int64_t result;
    result = 1;
    return result;
}

_onexit_t_1 _onexit(_PVFV arg1)
{
    _onexit_t_1 _Function = arg1;
    int32_t rax;
    
    if (data_140071290 != -1)
        rax = _register_onexit_function(&data_140071290, _Function);
    else
        rax = _crt_atexit(arg1);
    
    if (rax == 0)
        return _Function;
    
    return nullptr;
}

uint64_t atexit(_PVFV arg1)
{
    _onexit_t_1 rax = _onexit(arg1);
    int32_t rax_1 = -(rax);
    return (-((rax_1 - rax_1)) - 1);
}

uint64_t sub_14005aadc()
{
    uint64_t __security_cookie_1 = __security_cookie;
    
    if (__security_cookie_1 == 0x2b992ddfa232)
    {
        lpSystemTimeAsFileTime = 0;
        GetSystemTimeAsFileTime(&lpSystemTimeAsFileTime);
        int64_t lpSystemTimeAsFileTime_1 = lpSystemTimeAsFileTime;
        uint64_t rax_2 = GetCurrentThreadId();
        lpSystemTimeAsFileTime_1 ^= rax_2;
        uint64_t rax_4 = GetCurrentProcessId();
        lpSystemTimeAsFileTime_1 ^= rax_4;
        QueryPerformanceCounter(&lpPerformanceCount);
        __security_cookie_1 = (((((lpPerformanceCount << 0x20) ^ lpPerformanceCount) ^ lpSystemTimeAsFileTime_1) ^ &lpSystemTimeAsFileTime_1) & 0xffffffffffff);
        
        if (__security_cookie_1 == 0x2b992ddfa232)
            __security_cookie_1 = 0x2b992ddfa233;
        
        __security_cookie = __security_cookie_1;
    }
    
    uint64_t result = !(__security_cookie_1);
    data_140071100 = result;
    return result;
}

int64_t sub_14005ab88() __pure
{
    return 0;
}

int64_t sub_14005ab8c() __pure
{
    return 1;
}

int64_t sub_14005ab94() __pure
{
    return 0;
}

int64_t sub_14005ab98() __pure
{
    return 0x4000;
}

int64_t sub_14005aba0() __pure
{
    return 0;
}

int64_t sub_14005aba4() __pure
{
    return 0;
}

int64_t sub_14005aba8()
{
    /* tailcall */
    return InitializeSListHead(&data_1400712c0);
}

int64_t sub_14005abb8() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_14005abbc() __pure
{
    return;
}

int64_t sub_14005abc0() __pure
{
    return;
}

int64_t sub_14005abc4() __pure
{
    return &data_1400712d0;
}

int64_t sub_14005abcc() __pure
{
    return &data_1400712d8;
}

int64_t __scrt_initialize_default_local_stdio_options()
{
    data_1400712d0 |= 0x24;
    data_1400712d8 |= 2;
    return &data_1400712d8;
}

int64_t sub_14005abf0()
{
    int64_t result;
    result = data_140071094 == 0;
    return result;
}

int64_t sub_14005abfc() __pure
{
    return &data_1400712f0;
}

int64_t sub_14005ac04() __pure
{
    return &data_1400712e8;
}

int64_t sub_14005ac0c()
{
    data_1400712e0 = 0;
}

int32_t __scrt_fastfail(int32_t arg1)
{
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE) != 0)
        trap(0xd);
    
    sub_14005ac0c();
    void ContextRecord;
    memset(&ContextRecord, 0, 0x4d0);
    RtlCaptureContext(&ContextRecord);
    uint64_t ControlPc;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry = RtlLookupFunctionEntry(ControlPc, &ImageBase, nullptr);
    
    if (FunctionEntry != 0)
        RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, ControlPc, FunctionEntry, &ContextRecord, &HandlerData, &EstablisherFrame, nullptr);
    
    void* const __return_addr_2 = __return_addr;
    int64_t* var_440 = &__saved_rbx;
    int32_t var_578;
    memset(&var_578, 0, 0x98);
    void* const __return_addr_1 = __return_addr;
    var_578 = 0x40000015;
    int32_t var_574 = 1;
    BOOL rax_3 = IsDebuggerPresent();
    int32_t* ExceptionInfo = &var_578;
    void* var_580 = &ContextRecord;
    SetUnhandledExceptionFilter(nullptr);
    int32_t result = UnhandledExceptionFilter(&ExceptionInfo);
    
    if ((result == 0 && rax_3 != 1))
        sub_14005ac0c();
    
    return result;
}

int64_t j_sub_14005adcc()
{
    /* tailcall */
    return sub_14005adcc();
}

int64_t sub_14005ad64() __pure
{
    return 0;
}

HMODULE sub_14005ad68()
{
    HMODULE result = GetModuleHandleW(nullptr);
    int32_t* rcx_2;
    
    if ((result != 0 && result->unused == 0x5a4d))
        rcx_2 = (*(result + 0x3c) + result);
    
    if (((((result == 0 || result->unused != 0x5a4d) || *rcx_2 != 0x4550) || rcx_2[6] != 0x20b) || rcx_2[0x21] <= 0xe))
        result = 0;
    else
        result = rcx_2[0x3e] != 0;
    
    return result;
}

int64_t sub_14005adbc()
{
    /* tailcall */
    return SetUnhandledExceptionFilter(__scrt_unhandled_exception_filter);
}

int64_t sub_14005adcc() __pure
{
    return 0;
}

int64_t __scrt_unhandled_exception_filter(int64_t* arg1)
{
    int32_t* rbx = *arg1;
    
    if ((*rbx == 0xe06d7363 && rbx[6] == 4))
    {
        int32_t rdx_1 = rbx[8];
        
        if (((rdx_1 - 0x19930520) <= 2 || rdx_1 == 0x1994000))
        {
            *__current_exception() = rbx;
            *__current_exception_context() = arg1[1];
            terminate();
            /* no return */
        }
    }
    
    return 0;
}

void _RTC_Initialize()
{
    for (void* const i = &data_140067bf0; i < &data_140067bf0; i += 8)
    {
        int64_t rax = *i;
        
        if (rax != 0)
            rax();
    }
}

void _RTC_Terminate()
{
    for (void* const i = &data_140067c00; i < &data_140067c00; i += 8)
    {
        int64_t rax = *i;
        
        if (rax != 0)
            rax();
    }
}

int64_t _guard_check_icall() __pure
{
    return;
}

void sub_14005aea8(void* _Block)
{
    /* tailcall */
    return sub_14005b070(_Block);
}

int64_t sub_14005aeb0(int64_t arg1 @ xcr0)
{
    int32_t temp0;
    temp0 = __cpuid(0, 0);
    int32_t r11 = 0;
    int32_t temp0_1;
    temp0_1 = __cpuid(1, 0);
    int32_t var_18 = temp0_1;
    int32_t temp1;
    int32_t var_14 = temp1;
    int32_t temp2;
    int32_t var_10 = temp2;
    int32_t temp3;
    int32_t var_c = temp3;
    int32_t rax_2;
    uint64_t rax_3;
    
    if ((((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e)) | (temp1 ^ 0x756e6547)) == 0)
    {
        data_1400710a8 = -1;
        rax_2 = (temp0_1 & 0xfff3ff0);
        data_1400710a0 = 0x8000;
        
        if (((rax_2 != 0x106c0 && rax_2 != 0x20660) && rax_2 != 0x20670))
            rax_3 = (rax_2 - 0x30650);
    }
    
    int32_t r8_3;
    
    if (((((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e)) | (temp1 ^ 0x756e6547)) != 0 || (((rax_2 != 0x106c0 && rax_2 != 0x20660) && rax_2 != 0x20670) && (rax_3 > 0x20 || !((TEST_BITQ(0x100010001, rax_3)))))))
        r8_3 = data_1400712e4;
    else
    {
        r8_3 = (data_1400712e4 | 1);
        data_1400712e4 = r8_3;
    }
    
    if (temp0 >= 7)
    {
        int32_t temp0_2;
        temp0_2 = __cpuid(7, 0);
        int32_t var_18_1 = temp0_2;
        r11 = temp1;
        int32_t var_14_1 = temp1;
        int32_t var_10_1 = temp2;
        int32_t var_c_1 = temp3;
        
        if ((TEST_BITD(temp1, 9)))
            data_1400712e4 = (r8_3 | 2);
    }
    
    data_140071098 = 1;
    data_14007109c = 2;
    
    if ((TEST_BITD(temp2, 0x14)))
    {
        data_140071098 = 2;
        data_14007109c = 6;
        
        if (((TEST_BITD(temp2, 0x1b)) && (TEST_BITD(temp2, 0x1c))))
        {
            int32_t temp0_3;
            temp0_3 = _xgetbv(0, arg1);
            char rdx_5 = ((temp0_3 << 0x20) | temp1);
            
            if ((rdx_5 & 6) == 6)
            {
                int32_t rax_8 = (data_14007109c | 8);
                data_140071098 = 3;
                data_14007109c = rax_8;
                
                if ((r11 & 0x20) != 0)
                {
                    data_140071098 = 5;
                    data_14007109c = (rax_8 | 0x20);
                    
                    if (((r11 & 0xd0030000) == 0xd0030000 && (rdx_5 & 0xe0) == 0xe0))
                    {
                        data_14007109c |= 0x40;
                        data_140071098 = 6;
                    }
                }
            }
        }
    }
    
    return 0;
}

int64_t sub_14005b05c()
{
    int64_t result;
    result = data_140071110 != 0;
    return result;
}

void sub_14005b070(void* _Block)
{
    /* tailcall */
    return free(_Block);
}

enum _EXCEPTION_DISPOSITION __CxxFrameHandler3(struct EHExceptionRecord* pExcept, uint64_t RN, struct _CONTEXT* pContext, struct _xDISPATCHER_CONTEXT* pDC)
{
    /* tailcall */
    return __CxxFrameHandler3(pExcept, RN, pContext, pDC);
}

int64_t memcpy(void* dest, void const* src, uint32_t count)
{
    /* tailcall */
    return memcpy(dest, src, count);
}

int64_t memset(void* dest, int32_t c, uint64_t count)
{
    /* tailcall */
    return memset(dest, c, count);
}

int32_t memcmp(void const* buffer1, void const* buffer2, uint64_t count)
{
    /* tailcall */
    return memcmp(buffer1, buffer2, count);
}

int64_t memmove(void* dest, void const* src, uint32_t count)
{
    /* tailcall */
    return memmove(dest, src, count);
}

void _CxxThrowException(void* pExceptionObject, struct _s__ThrowInfo* pThrowInfo) __noreturn
{
    /* tailcall */
    return _CxxThrowException(pExceptionObject, pThrowInfo);
}

enum _EXCEPTION_DISPOSITION __C_specific_handler(struct _EXCEPTION_RECORD* ExceptionRecord, void* EstablisherFrame, struct _CONTEXT* ContextRecord, struct _DISPATCHER_CONTEXT* DispatcherContext)
{
    /* tailcall */
    return __C_specific_handler(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);
}

int64_t __current_exception()
{
    /* tailcall */
    return __current_exception();
}

int64_t __current_exception_context()
{
    /* tailcall */
    return __current_exception_context();
}

int32_t _seh_filter_exe(uint32_t _ExceptionNum, struct _EXCEPTION_POINTERS* _ExceptionPtr)
{
    /* tailcall */
    return _seh_filter_exe(_ExceptionNum, _ExceptionPtr);
}

void _set_app_type(enum _crt_app_type _Type)
{
    /* tailcall */
    return _set_app_type(_Type);
}

void __setusermatherr(_UserMathErrorFunctionPointer _UserMathErrorFunction)
{
    /* tailcall */
    return __setusermatherr(_UserMathErrorFunction);
}

errno_t _configure_narrow_argv(enum _crt_argv_mode mode)
{
    /* tailcall */
    return _configure_narrow_argv(mode);
}

int32_t _initialize_narrow_environment()
{
    /* tailcall */
    return _initialize_narrow_environment();
}

char** _get_initial_narrow_environment()
{
    /* tailcall */
    return _get_initial_narrow_environment();
}

void _initterm(_PVFV* _First, _PVFV* _Last)
{
    /* tailcall */
    return _initterm(_First, _Last);
}

int32_t _initterm_e(_PIFV* _First, _PIFV* _Last)
{
    /* tailcall */
    return _initterm_e(_First, _Last);
}

void exit(int32_t _Except) __noreturn
{
    /* tailcall */
    return exit(_Except);
}

void _exit(int32_t _Except) __noreturn
{
    /* tailcall */
    return _exit(_Except);
}

errno_t _set_fmode(int32_t _Value)
{
    /* tailcall */
    return _set_fmode(_Value);
}

int32_t* __p___argc()
{
    /* tailcall */
    return __p___argc();
}

char*** __p___argv()
{
    /* tailcall */
    return __p___argv();
}

void _cexit()
{
    /* tailcall */
    return _cexit();
}

void _c_exit()
{
    /* tailcall */
    return _c_exit();
}

void _register_thread_local_exe_atexit_callback(_tls_callback_type _Callback)
{
    /* tailcall */
    return _register_thread_local_exe_atexit_callback(_Callback);
}

int32_t _configthreadlocale(int32_t _Flag)
{
    /* tailcall */
    return _configthreadlocale(_Flag);
}

int32_t _set_new_mode(int32_t _NewMode)
{
    /* tailcall */
    return _set_new_mode(_NewMode);
}

int32_t* __p__commode()
{
    /* tailcall */
    return __p__commode();
}

int32_t _initialize_onexit_table(struct _onexit_table_t* _Table)
{
    /* tailcall */
    return _initialize_onexit_table(_Table);
}

int32_t _register_onexit_function(struct _onexit_table_t* _Table, _onexit_t_1 _Function)
{
    /* tailcall */
    return _register_onexit_function(_Table, _Function);
}

int32_t _crt_atexit(_PVFV _Function)
{
    /* tailcall */
    return _crt_atexit(_Function);
}

void terminate() __noreturn
{
    /* tailcall */
    return terminate();
}

void free(void* _Block)
{
    /* tailcall */
    return free(_Block);
}

int64_t sub_14005b13c() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_14005b140() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t _guard_dispatch_icall_nop(int64_t arg1 @ rax)
{
    /* jump -> arg1 */
}

int64_t sub_14005b180()
{
    int64_t rax;
    /* tailcall */
    return rax();
}

uint64_t sub_14005b190(int64_t* arg1, int64_t arg2, uint32_t arg3, char arg4)
{
    uint64_t result = 0;
    
    if ((arg3 != 0 && arg4 == 0))
    {
        char* r9 = arg1[2];
        int64_t rdx_1 = ((arg2 + *arg1) + 1);
        void* r10_1 = arg1[3];
        
        if (r10_1 >= 4)
        {
            while (true)
            {
                uint64_t rcx = _tzcnt_u32(arg3);
                int32_t* r11_1 = (rdx_1 + rcx);
                result = ((r10_1 + r11_1) - 4);
                
                if (result > r11_1)
                {
                    char* rsi_1 = r9;
                    
                    do
                    {
                        if (*r11_1 != *rsi_1)
                            goto label_14005b1dd;
                        
                        r11_1 = &r11_1[1];
                        rsi_1 = &rsi_1[4];
                    } while (r11_1 < result);
                }
                
                if (*result == *((r9 + r10_1) - 4))
                    break;
                
            label_14005b1dd:
                result = 0xfffe;
                result = (ROLW(0xfffe, rcx));
                arg3 &= result;
                
                if (arg3 == 0)
                    return 0;
            }
            
            result = 1;
        }
        else
        {
            while (true)
            {
                result = 1;
                
                if (r10_1 == 0)
                    break;
                
                uint64_t rcx_1 = _tzcnt_u32(arg3);
                
                if (*(rdx_1 + rcx_1) == *r9)
                {
                    if (r10_1 == 1)
                        break;
                    
                    if (*((rdx_1 + rcx_1) + 1) == r9[1])
                    {
                        if (r10_1 == 2)
                            break;
                        
                        if ((*((rdx_1 + rcx_1) + 2) == r9[2] && r10_1 == 3))
                            break;
                    }
                }
                
                result = 0xfffe;
                result = (ROLW(0xfffe, rcx_1));
                arg3 &= result;
                
                if (arg3 == 0)
                    return 0;
            }
        }
    }
    
    return result;
}

int64_t** sub_14005b290(int64_t** arg1)
{
    int64_t var_18 = -2;
    char const (** const var_60)[0xf] = 2;
    int64_t* rax = sub_140044240(&var_60);
    TEB* gsbase;
    *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x58) = rax[5];
    
    if (*arg1 == 0)
    {
        *arg1 = rax;
        return arg1;
    }
    
    int64_t** var_30 = arg1;
    int64_t* var_20 = rax;
    int64_t* var_28 = rax;
    var_60 = &data_140062018;
    int64_t var_58 = 1;
    int64_t var_50 = 8;
    int128_t var_48 = {0};
    sub_14005c700(&var_60);
    /* no return */
}

int64_t* sub_14005b330(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t* result = *(arg2 + 0x68);
    int64_t temp0 = *result;
    *result -= 1;
    
    if (temp0 != 1)
        return result;
    
    return sub_140043560((arg2 + 0x60));
}

void sub_14005b360(int64_t arg1, int64_t arg2, int64_t* arg3, int64_t arg4) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    sub_14005c8c0(0, &var_10, &data_140062150, &var_18, &data_140062150, arg3, arg4);
    /* no return */
}

int64_t sub_14005b3a0(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    int64_t rax_1 = (arg2 + arg3);
    
    if ((arg2 + arg3) < arg2)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t r9 = *arg1;
    int64_t rcx = (r9 * 2);
    
    if (rcx > rax_1)
        rax_1 = rcx;
    
    int32_t rdx;
    rdx = (rax_1 >> 0x3e) == 0;
    int64_t rdi = 4;
    
    if (rax_1 >= 5)
        rdi = rax_1;
    
    int64_t var_48;
    int64_t rax_3;
    
    if (r9 == 0)
        rax_3 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rcx;
        rax_3 = 2;
    }
    
    int64_t var_40 = rax_3;
    int64_t var_30;
    sub_140043700(&var_30, (rdx * 2), (rdi * 2), &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

int64_t sub_14005b440(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    uint64_t rdx = (arg2 + arg3);
    
    if ((arg2 + arg3) < arg2)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t rax = *arg1;
    uint64_t rcx = (rax * 2);
    
    if (rcx > rdx)
        rdx = rcx;
    
    uint64_t rdi = 8;
    
    if (rdx >= 9)
        rdi = rdx;
    
    int64_t var_48;
    int64_t rax_1;
    
    if (rax == 0)
        rax_1 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rax;
        rax_1 = 1;
    }
    
    int64_t var_40 = rax_1;
    int64_t var_30;
    sub_140043700(&var_30, (!(rdi) >> 0x3f), rdi, &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

void sub_14005b4e0() __noreturn
{
    char const (** const var_38)[0x38] = &data_140062650;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

int64_t sub_14005b520(int64_t arg1)
{
    int32_t result = data_140071188;
    
    if (result == 4)
        return result;
    
    int64_t var_30 = arg1;
    int64_t* var_28 = &data_140071150;
    void var_9;
    void* var_20 = &var_9;
    int64_t* var_18 = &var_30;
    return sub_14005b700(&var_18);
}

void* sub_14005b570()
{
    void* result;
    TEB* gsbase;
    result = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x38) == 0;
    return result;
}

int64_t sub_14005b5a0(int64_t* arg1)
{
    int64_t result_1;
    sub_14004f010(&result_1, arg1);
    int64_t result = result_1;
    data_1400711c0 -= 1;
    TEB* gsbase;
    void* rcx_2 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
    *(rcx_2 + 0x38) -= 1;
    *(rcx_2 + 0x40) = 0;
    return result;
}

int64_t sub_14005b5f0(enum HEAP_FLAGS arg1, uint64_t arg2)
{
    HANDLE rax = GetProcessHeap();
    
    if (rax == 0)
        return 0;
    
    data_1400711e0 = rax;
    /* tailcall */
    return HeapAlloc(rax, arg1, arg2);
}

int64_t sub_14005b640(char* arg1)
{
    char* Address = arg1;
    char result = *arg1;
    
    if (result == 1)
    {
        arg1 = 0xffffff9d;
        bool cond:0_1;
        
        do
        {
            result = *Address;
            
            if (result != 1)
                break;
            
            cond:0_1 = arg1 != 0;
            arg1 = &arg1[1];
        } while (cond:0_1);
    }
    
    if (result != 0)
    {
    label_14005b6a2:
        
        while (true)
        {
            if (result != 2)
            {
                char result_1 = *Address;
                *Address = 2;
                result = result_1;
                
                if (result == 0)
                    break;
            }
            
            char CompareAddress = 2;
            
            if (WaitOnAddress(Address, &CompareAddress, 1, 0xffffffff) != 1)
                GetLastError();
            
            result = *Address;
            
            if (result == 1)
            {
                int32_t rcx_1 = -0x63;
                bool cond:1_1;
                
                do
                {
                    result = *Address;
                    
                    if (result != 1)
                        break;
                    
                    cond:1_1 = rcx_1 != 0;
                    rcx_1 += 1;
                } while (cond:1_1);
            }
        }
    }
    else
    {
        result = 0;
        bool z_1;
        
        if (0 == *Address)
        {
            *Address = 1;
            z_1 = true;
        }
        else
        {
            result = *Address;
            z_1 = false;
        }
        
        if (!(z_1))
            goto label_14005b6a2;
    }
    
    return result;
}

int64_t sub_14005b700(int64_t* arg1)
{
    int64_t var_48 = -2;
    
    while (true)
    {
        int32_t rax_1 = data_140071188;
        
        while (true)
        {
            char const (** const CompareAddress)[0x4f];
            
            if (rax_1 > 4)
            {
                CompareAddress = &data_140063cd0;
                int64_t var_78_1 = 1;
                void var_50;
                void* var_70 = &var_50;
                int128_t var_68 = {0};
                sub_14005c700(&CompareAddress);
                /* no return */
            }
            
            switch (rax_1)
            {
                case 0:
                case 1:
                {
                    bool z_2;
                    
                    if (rax_1 == data_140071188)
                    {
                        data_140071188 = 2;
                        z_2 = true;
                    }
                    else
                    {
                        rax_1 = data_140071188;
                        z_2 = false;
                    }
                    
                    int32_t temp0_1;
                    
                    if (!(z_2))
                        continue;
                    else
                    {
                        int64_t* rdx_2 = *arg1;
                        char* rcx_3 = *rdx_2;
                        int64_t* rax_3 = rdx_2[1];
                        *rdx_2 = 0;
                        
                        if (rcx_3 == 0)
                        {
                            sub_14005c680();
                            /* no return */
                        }
                        
                        *rcx_3 = 1;
                        *CompareAddress[3] = {0};
                        *rax_3 = 0;
                        rax_3[1] = 0;
                        *(rax_3 + 0xc) = 0;
                        *(rax_3 + 0xd) = CompareAddress;
                        int64_t var_78;
                        *(rax_3 + 0x1c) = *var_78[7];
                        rax_3[4] = 1;
                        rax_3[5] = 0;
                        rax_3[6] = 0;
                        *(rax_3 + 0x35) = 0;
                        *(rax_3 + 0x31) = 0;
                        temp0_1 = data_140071188;
                        data_140071188 = 4;
                        
                        if (temp0_1 == 3)
                            return WakeByAddressAll(&data_140071188);
                    }
                    
                    return temp0_1;
                    break;
                }
                case 2:
                {
                    rax_1 = 2;
                    bool z_1;
                    
                    if (2 == data_140071188)
                    {
                        data_140071188 = 3;
                        z_1 = true;
                    }
                    else
                    {
                        rax_1 = data_140071188;
                        z_1 = false;
                    }
                    
                    if (!(z_1))
                        continue;
                    
                    goto label_14005b790;
                }
                case 3:
                {
                label_14005b790:
                    CompareAddress = 3;
                    
                    if (WaitOnAddress(&data_140071188, &CompareAddress, 4, 0xffffffff) == 1)
                        break;
                    
                    GetLastError();
                    break;
                    break;
                }
                case 4:
                {
                    return rax_1;
                    break;
                }
            }
        }
    }
}

int64_t sub_14005b890(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    int32_t result = data_140071188;
    data_140071188 = 1;
    
    if (result != 3)
        return result;
    
    return WakeByAddressAll(&data_140071188);
}

void* sub_14005b8e0(int64_t* arg1)
{
    int64_t var_48 = -2;
    
    while (true)
    {
        int32_t rax_1 = data_140071144;
        
        while (true)
        {
            char const (** const CompareAddress)[0x2b];
            
            if (rax_1 > 4)
            {
                CompareAddress = &data_140063cd0;
                int64_t var_78_3 = 1;
                void var_50;
                void* var_70_3 = &var_50;
            }
            else
            {
                void* result = (jump_table_140064e48[rax_1] + &jump_table_140064e48);
                
                switch (result)
                {
                    case 0x14005b930:
                    {
                        rax_1 = 2;
                        bool z_1;
                        
                        if (2 == data_140071144)
                        {
                            data_140071144 = 3;
                            z_1 = true;
                        }
                        else
                        {
                            rax_1 = data_140071144;
                            z_1 = false;
                        }
                        
                        if (!(z_1))
                            continue;
                        
                        goto label_14005b970;
                    }
                    case 0x14005b954:
                    {
                        rax_1 = 0;
                        bool z_2;
                        
                        if (0 == data_140071144)
                        {
                            data_140071144 = 2;
                            z_2 = true;
                        }
                        else
                        {
                            rax_1 = data_140071144;
                            z_2 = false;
                        }
                        
                        if (!(z_2))
                            continue;
                        else
                        {
                            char* rax_5 = *arg1;
                            bool cond:0_1 = *rax_5 == 0;
                            *rax_5 = 0;
                            
                            if (cond:0_1)
                            {
                                sub_14005c680();
                                /* no return */
                            }
                            
                            char var_49 = 0;
                            
                            if (data_140071188 != 4)
                                sub_14005b520(&var_49);
                            
                            if (var_49 == 0)
                            {
                                TEB* gsbase;
                                int64_t rsi_1 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x58);
                                
                                if (rsi_1 == 0)
                                {
                                    uint32_t rax_12 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68);
                                    
                                    if (rax_12 == 0)
                                    {
                                        sub_14004e210((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60), sub_14004e1a0);
                                        *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x68) = 1;
                                    }
                                    else if (rax_12 != 1)
                                    {
                                        sub_14005c6a0("use of std::thread::current() is…");
                                        /* no return */
                                    }
                                    
                                    char const (** CompareAddress_1)[0x2b] = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60);
                                    
                                    if (CompareAddress_1 == 0)
                                    {
                                        sub_14005b290((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60));
                                        CompareAddress_1 = *(*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x60);
                                    }
                                    
                                    char const (* temp1_1)[0x2b] = *CompareAddress_1;
                                    *CompareAddress_1 = &**CompareAddress_1[1];
                                    
                                    if (temp1_1 <= -1)
                                        trap(6);
                                    
                                    if (CompareAddress_1 == 0)
                                    {
                                        sub_14005c6a0("use of std::thread::current() is…");
                                        /* no return */
                                    }
                                    
                                    CompareAddress = CompareAddress_1;
                                    rsi_1 = CompareAddress_1[5];
                                    char const (* temp2_1)[0x2b] = *CompareAddress_1;
                                    *CompareAddress_1 -= 1;
                                    
                                    if (temp2_1 == 1)
                                        sub_140043560(&CompareAddress);
                                }
                                
                                int32_t rax_25;
                                
                                if (rsi_1 != data_140071150)
                                {
                                    bool z_3;
                                    
                                    if (0 == data_14007115c)
                                    {
                                        data_14007115c = 1;
                                        z_3 = true;
                                    }
                                    else
                                    {
                                        int64_t rax_26;
                                        rax_26 = data_14007115c;
                                        z_3 = false;
                                    }
                                    
                                    if (z_3)
                                    {
                                        data_140071150 = rsi_1;
                                        rax_25 = 1;
                                        goto label_14005bb50;
                                    }
                                }
                                else
                                {
                                    int32_t rax_24 = data_140071158;
                                    
                                    if (rax_24 != 0xffffffff)
                                    {
                                        rax_25 = (rax_24 + 1);
                                    label_14005bb50:
                                        data_140071158 = rax_25;
                                        CompareAddress = nullptr;
                                        int64_t var_78_1 = 1;
                                        int64_t var_70_1 = 0;
                                        int128_t var_68;
                                        var_68 = 0;
                                        *var_68[5] = 0;
                                        *var_68[1] = 0;
                                        
                                        if (data_140071160 != 0)
                                        {
                                            sub_14005c620();
                                            /* no return */
                                        }
                                        
                                        data_140071160 = -1;
                                        
                                        if (*(data_140071178 + 8) == 0)
                                        {
                                            void* rax_27 = sub_140045830(&data_140071168);
                                            void* var_88 = rax_27;
                                            
                                            if (rax_27 != 0)
                                                sub_140042850(&var_88);
                                        }
                                        
                                        int64_t rdx_2 = data_140071168;
                                        
                                        if (rdx_2 != 0)
                                            j_sub_140049af0(data_140071170, rdx_2, 1);
                                        
                                        int128_t zmm0 = CompareAddress;
                                        data_140071178 = var_70_1;
                                        *data_140071168 = zmm0;
                                        data_140071160 += 1;
                                        int32_t temp3_1 = data_140071158;
                                        data_140071158 -= 1;
                                        
                                        if (temp3_1 == 1)
                                        {
                                            data_140071150 = 0;
                                            char temp0_1 = data_14007115c;
                                            data_14007115c = 0;
                                            
                                            if (temp0_1 == 2)
                                                WakeByAddressSingle(&data_14007115c);
                                        }
                                    }
                                }
                            }
                            
                            if (data_1400711f0 == 4)
                                data_1400711e8();
                            
                            int32_t result_1 = data_140071144;
                            data_140071144 = 4;
                            result = result_1;
                            
                            if (result == 3)
                                return WakeByAddressAll(&data_140071144);
                        }
                        
                        return result;
                        break;
                    }
                    case 0x14005b970:
                    {
                    label_14005b970:
                        CompareAddress = 3;
                        
                        if (WaitOnAddress(&data_140071144, &CompareAddress, 4, 0xffffffff) == 1)
                            break;
                        
                        GetLastError();
                        break;
                        break;
                    }
                    case 0x14005b9f4:
                    {
                        return result;
                        break;
                    }
                    case 0x14005bc31:
                    {
                        CompareAddress = &data_140063c70;
                        int64_t var_78_2 = 1;
                        int64_t var_70_2 = 8;
                        break;
                    }
                }
            }
            
            int128_t var_68_1 = {0};
            sub_14005c700(&CompareAddress);
            /* no return */
        }
    }
}

int512_t sub_14005bcc0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    int64_t rdx = data_140071168;
    
    if (rdx != 0)
        j_sub_140049af0(data_140071170, rdx, 1);
    
    int128_t result = *(arg2 + 0x28);
    data_140071178 = *(arg2 + 0x38);
    *data_140071168 = result;
    data_140071160 += 1;
    return result;
}

int64_t sub_14005bd30(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    int32_t result = data_140071144;
    data_140071144 = 1;
    
    if (result != 3)
        return result;
    
    return WakeByAddressAll(&data_140071144);
}

int64_t sub_14005bd80(int64_t arg1, int64_t arg2)
{
    arg_10 = arg2;
    return sub_1400427d0(&data_140071150);
}

int64_t sub_14005bdc0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042b60((arg2 + 0x28));
}

int64_t sub_14005be00(int32_t* arg1)
{
    int32_t result = *arg1;
    
    if (result == 0x3fffffff)
    {
        int32_t rcx = -0x63;
        bool cond:0_1;
        
        do
        {
            result = *arg1;
            
            if (result != 0x3fffffff)
                break;
            
            cond:0_1 = rcx != 0;
            rcx += 1;
        } while (cond:0_1);
    }
    
    while (true)
    {
        int32_t rcx_3 = (result & 0x3fffffff);
        
        if ((result <= 0x3fffffff && rcx_3 < 0x3ffffffe))
        {
            bool z_1;
            
            if (result == *arg1)
            {
                *arg1 = (result + 1);
                z_1 = true;
            }
            else
            {
                result = *arg1;
                z_1 = false;
            }
            
            if (z_1)
                break;
            
            continue;
        }
        
        char const (** const CompareAddress)[0x25];
        
        if (rcx_3 == 0x3ffffffe)
        {
            CompareAddress = &data_140063d08;
            int64_t var_50 = 1;
            int64_t var_48 = 8;
            int128_t var_40 = {0};
            sub_14005c700(&CompareAddress);
            /* no return */
        }
        
        int32_t result_1;
        
        if ((result & 0x40000000) != 0)
            result_1 = result;
        else
        {
            result_1 = (result | 0x40000000);
            bool z_2;
            
            if (result == *arg1)
            {
                *arg1 = result_1;
                z_2 = true;
            }
            else
            {
                result = *arg1;
                z_2 = false;
            }
            
            if (!(z_2))
                continue;
        }
        
        CompareAddress = result_1;
        
        if (WaitOnAddress(arg1, &CompareAddress, 4, 0xffffffff) != 1)
            GetLastError();
        
        result = *arg1;
        
        if (result == 0x3fffffff)
        {
            int32_t rcx_6 = -0x63;
            bool cond:1_1;
            
            do
            {
                result = *arg1;
                
                if (result != 0x3fffffff)
                    break;
                
                cond:1_1 = rcx_6 != 0;
                rcx_6 += 1;
            } while (cond:1_1);
        }
    }
    
    return result;
}

void sub_14005bf20(int32_t* arg1, int32_t arg2)
{
    if ((arg2 & 0x3fffffff) != 0)
    {
        sub_14005c7a0("assertion failed: is_unlocked(st…");
        /* no return */
    }
    
    if (arg2 == 0x80000000)
    {
        int32_t rax = -0x80000000;
        bool z_1;
        
        if (0x80000000 == *arg1)
        {
            *arg1 = 0;
            z_1 = true;
        }
        else
        {
            rax = *arg1;
            z_1 = false;
        }
        
        if (z_1)
        {
            arg1[1] += 1;
            /* tailcall */
            return WakeByAddressSingle(&arg1[1]);
        }
        
        arg2 = rax;
    }
    
    if (arg2 == 0xc0000000)
    {
        bool z_3;
        
        if (0xc0000000 == *arg1)
        {
            *arg1 = 0x40000000;
            z_3 = true;
        }
        else
        {
            *arg1;
            z_3 = false;
        }
        
        if (z_3)
        {
            arg1[1] += 1;
            WakeByAddressSingle(&arg1[1]);
            bool z_4;
            
            if (0x40000000 == *arg1)
            {
                *arg1 = 0;
                z_4 = true;
            }
            else
            {
                *arg1;
                z_4 = false;
            }
            
            if (z_4)
                /* tailcall */
                return WakeByAddressAll(arg1);
        }
    }
    else if (arg2 == 0x40000000)
    {
        bool z_2;
        
        if (0x40000000 == *arg1)
        {
            *arg1 = 0;
            z_2 = true;
        }
        else
        {
            *arg1;
            z_2 = false;
        }
        
        if (z_2)
            /* tailcall */
            return WakeByAddressAll(arg1);
    }
}

void* const sub_14005bff0(int64_t* arg1)
{
    int64_t var_10 = -2;
    void* const result;
    
    if (arg1 == 0)
        result = nullptr;
    else
    {
        result = *arg1;
        *arg1 = 0;
        
        if (result != 0)
            result = arg1[1];
    }
    
    TEB* gsbase;
    void* r8 = *(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3));
    int64_t rdx_1 = *(r8 + 0x48);
    int64_t* rcx_1 = *(r8 + 0x50);
    int64_t var_20 = rdx_1;
    int64_t* var_18 = rcx_1;
    *(r8 + 0x48) = 1;
    *(r8 + 0x50) = result;
    
    if (rdx_1 == 0)
        return sub_14004e210((*(gsbase->ThreadLocalStoragePointer + (data_140071270 << 3)) + 0x48), sub_14004e1c0);
    
    int64_t var_30_1 = rdx_1;
    int64_t* var_28 = rcx_1;
    
    if ((rdx_1 == 1 && rcx_1 != 0))
    {
        int64_t temp0_1 = *rcx_1;
        *rcx_1 -= 1;
        
        if (temp0_1 == 1)
            return sub_140043500(&var_28);
    }
    
    return result;
}

int64_t sub_14005c0c0(int64_t arg1, void* arg2)
{
    arg_10 = arg2;
    return sub_140042800((arg2 + 0x38));
}

uint64_t sub_14005c0e0()
{
    int64_t rbx;
    int64_t var_40 = rbx;
    int32_t temp0;
    temp0 = __cpuid(0, 0);
    uint64_t result = 0;
    
    if (temp0 != 0)
    {
        int32_t temp0_2;
        temp0_2 = __cpuid(1, 0);
        int64_t rbx_2 = 0;
        int32_t var_60_1;
        int32_t var_58_1;
        bool var_41_1;
        int32_t temp1;
        int32_t temp2;
        int32_t temp3;
        
        if (temp0 < 7)
        {
            var_41_1 = true;
            var_58_1 = 0;
            var_60_1 = 0;
        }
        else
        {
            int32_t temp0_3;
            temp0_3 = __cpuid(7, 0);
            char temp0_5;
            temp0_5 = __cpuid(7, 1);
            rbx_2 = temp1;
            var_58_1 = temp2;
            var_60_1 = temp3;
            var_41_1 = (temp0_5 & 0x20) == 0;
        }
        
        int32_t r12_1 = 0;
        int32_t temp0_7;
        temp0_7 = __cpuid(0x80000000, 0);
        
        if (temp0_7 != 0)
        {
            int32_t temp0_9;
            temp0_9 = __cpuid(0x80000001, 0);
            r12_1 = temp2;
        }
        
        uint64_t rsi_3 = ((temp3 << 0x20) | temp1);
        int32_t r13_1 = rbx_2;
        uint64_t rax_14 = (((temp3 & 0x1000000) << 0x12) | (((temp3 >> 0x12) & 0x20) | (((temp2 >> 0x1c) & 4) | (((temp2 & 0x20000000) << 6) | ((temp2 >> 0x19) & 1)))));
        uint64_t r9_14 = (((r13_1 & 8) << 0x22) | (((rbx_2 >> 0x10) & 0x2000) | (((r13_1 & 0x800) << 0x26) | (((r13_1 & 0x80000) << 0x1d) | ((rbx_2 >> 0xf) & 8)))));
        uint64_t r9_19 = ((((temp2 >> 9) & 0xc00) | ((((temp3 & 0x10) | (temp2 & 0x202)) | ((temp2 & 1) << 8)) | ((temp2 & 0x2000) << 0x22))) | ((temp2 & 0x400000) << 0x1c));
        uint64_t r14_6 = (((((temp3 >> 0x13) & 0xc0) | rax_14) | (r9_19 | ((temp2 & 0x800000) << 0x12))) | (((r13_1 & 0x200) << 0x2a) | (((r13_1 & 0x100) << 0x1e) | r9_14)));
        int32_t rax_15;
        int64_t xcr0;
        
        if ((!(temp2) & 0xc000000) == 0)
            rax_15 = sub_140055b70(xcr0);
        int32_t r9_22;
        
        if (((!(temp2) & 0xc000000) != 0 || (!(rax_15) & 6) != 0))
            r9_22 = temp2;
        else
        {
            int64_t r8_3 = (0x80000000000 | r14_6);
            
            if (temp0 > 0xc)
            {
                int32_t temp0_11;
                temp0_11 = __cpuid(0xd, 1);
                int64_t r14_7 = (r14_6 | 0x180000000000);
                
                if ((temp0_11 & 1) == 0)
                    r14_7 = r8_3;
                
                r8_3 = ((((temp0_11 & 8) << 0x2a) | ((temp0_11 & 2) << 0x2d)) | r14_7);
            }
            
            r9_22 = temp2;
            r14_6 = ((((r13_1 & 0x20) << 0xa) | (((temp2 >> 0xe) & 0x4000) | ((temp2 & 0x1000) << 0x18))) | r8_3);
            
            if ((rax_15 & 0xe0) == 0xe0)
            {
                int64_t rcx_49 = (((r13_1 >> 0xb) & 0x20000) | (((r13_1 >> 9) & 0x40000) | (((r13_1 >> 7) & 0x80000) | ((((r13_1 << 4) & 0x200000) | (r13_1 & 0x10000)) + ((r13_1 & 0x200000) << 2)))));
                int64_t r13_5 = ((((r13_1 >> 0xa) & 0x100000) | rcx_49) | r14_6);
                int64_t rax_28 = (r13_5 | 0x400000);
                
                if (rbx_2 >= 0)
                    rax_28 = r13_5;
                
                uint64_t rcx_59 = ((((((var_58_1 << 0x13) & 0xf8000000) | (((var_58_1 & 0x40) << 0x14) | ((var_58_1 & 2) << 0x17))) | ((var_58_1 << 0xb) & 0x2000000)) | ((var_60_1 & 0x100) << 0x19)) | ((var_60_1 & 0x800000) << 0xb));
                int64_t rcx_60 = (rcx_59 | rax_28);
                r14_6 = (0x100000000 | rcx_60);
                
                if (var_41_1 != 0)
                    r14_6 = rcx_60;
            }
        }
        
        uint64_t result_1 = (((r12_1 & 0x20) << 0x22) | r14_6);
        
        if ((((r9_22 ^ 0x444d4163) | (0x69746e6568747541 ^ rsi_3)) == 0 || ((r9_22 ^ 0x656e6975) | (0x6e65476e6f677948 ^ rsi_3)) == 0))
            result_1 |= (((r12_1 & 0x200000) << 0x13) | ((r12_1 & 0x40) << 6));
        
        result = (-0x6000004001 & result_1);
        
        if ((result_1 & 0x4000) != 0)
            result = result_1;
        
        if (((r9_22 ^ 0x6c65746e) | (rsi_3 ^ 0x49656e69756e6547)) != 0)
            result = result_1;
    }
    
    data_140071260 = (result | 0x8000000000000000);
    data_140071268 = -0x8000000000000000;
    return result;
}

int64_t sub_14005c530(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    uint64_t rdx = (arg2 + arg3);
    
    if ((arg2 + arg3) < arg2)
    {
        sub_14005c5d0(0);
        /* no return */
    }
    
    int64_t rax = *arg1;
    uint64_t rcx = (rax * 2);
    
    if (rcx > rdx)
        rdx = rcx;
    
    uint64_t rdi = 8;
    
    if (rdx >= 9)
        rdi = rdx;
    
    int64_t var_48;
    int64_t rax_1;
    
    if (rax == 0)
        rax_1 = 0;
    else
    {
        var_48 = arg1[1];
        int64_t var_38_1 = rax;
        rax_1 = 1;
    }
    
    int64_t var_40 = rax_1;
    uint64_t var_30;
    sub_140055cf0(&var_30, (!(rdi) >> 0x3f), rdi, &var_48);
    int64_t result;
    
    if (var_30 != 0)
    {
        sub_14005c5d0(result);
        /* no return */
    }
    
    arg1[1] = result;
    *arg1 = rdi;
    return result;
}

void sub_14005c5d0(int64_t arg1) __noreturn
{
    if (arg1 == 0)
    {
        sub_140055c10();
        /* no return */
    }
    
    sub_14005c5f0();
    /* no return */
}

void sub_14005c5f0() __noreturn
{
    j_sub_14004e530();
    /* no return */
}

void sub_14005c610(int32_t arg1) __noreturn
{
    sub_140056340(arg1);
    /* no return */
}

void sub_14005c620() __noreturn
{
    void var_9;
    void* var_20 = &var_9;
    int64_t (* var_18)(int64_t arg1, void* arg2) = sub_140056400;
    char const (** const var_50)[0x13] = &data_140066078;
    int64_t var_48 = 1;
    int64_t var_30 = 0;
    void** var_40 = &var_20;
    int64_t var_38 = 1;
    sub_14005c700(&var_50);
    /* no return */
}

void sub_14005c680() __noreturn
{
    sub_14005c7a0("called `Option::unwrap()` on a `…");
    /* no return */
}

void sub_14005c6a0(int64_t arg1) __noreturn
{
    int64_t var_18 = arg1;
    int64_t rdx;
    int64_t var_10 = rdx;
    int64_t* var_28 = &var_18;
    int64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    void* const var_58 = &data_140066088;
    int64_t var_50 = 1;
    int64_t var_38 = 0;
    int64_t** var_48 = &var_28;
    int64_t var_40 = 1;
    sub_14005c700(&var_58);
    /* no return */
}

void sub_14005c700(int128_t* arg1) __noreturn
{
    int128_t var_28 = arg1[2];
    int128_t var_38 = arg1[1];
    int128_t var_48 = *arg1;
    int64_t rdx;
    int64_t var_18 = rdx;
    int16_t var_10 = 1;
    sub_14004a740(&var_48);
    /* no return */
}

void sub_14005c740(int128_t* arg1) __noreturn
{
    int64_t var_10 = -2;
    int128_t var_38 = arg1[2];
    int128_t var_48 = arg1[1];
    int128_t var_58 = *arg1;
    int64_t r8;
    int64_t var_28 = r8;
    char var_20 = 0;
    char rdx;
    char var_1f = rdx;
    sub_14004a740(&var_58);
    /* no return */
}

void sub_14005c780(int64_t, int64_t arg2) __noreturn
{
    arg_10 = arg2;
    sub_14005c8a0();
    /* no return */
}

void sub_14005c7a0(int64_t arg1) __noreturn
{
    int64_t var_18 = arg1;
    int64_t rdx;
    int64_t var_10 = rdx;
    int64_t* var_48 = &var_18;
    int64_t var_40 = 1;
    int64_t var_38 = 8;
    int128_t var_30 = {0};
    sub_14005c700(&var_48);
    /* no return */
}

void sub_14005c7e0(int64_t arg1) __noreturn
{
    int64_t var_18 = arg1;
    int64_t rdx;
    int64_t var_10 = rdx;
    int64_t* var_48 = &var_18;
    int64_t var_40 = 1;
    int64_t var_38 = 8;
    int128_t var_30 = {0};
    sub_14005c740(&var_48);
    /* no return */
}

void sub_14005c830(int64_t arg1, int64_t arg2) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    int64_t* var_38 = &var_18;
    uint64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_28 = &var_10;
    uint64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char const (** const var_68)[0x33] = &data_140066168;
    int64_t var_60 = 2;
    int64_t var_48 = 0;
    int64_t** var_58 = &var_38;
    int64_t var_50 = 2;
    sub_14005c700(&var_68);
    /* no return */
}

void sub_14005c8a0() __noreturn
{
    sub_14005c7e0("panic in a function that cannot …");
    /* no return */
}

void sub_14005c8c0(char arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t* arg6, int64_t arg7) __noreturn
{
    int64_t var_28 = arg2;
    int64_t var_20 = arg3;
    int64_t var_38 = arg4;
    int64_t var_30 = arg5;
    char const (** const var_a8)[0x31];
    char const* const* var_78;
    char const* const var_18;
    char const* const rcx_1;
    
    if (arg1 == 0)
    {
        rcx_1 = "==!=matchesassertion `left  righ…";
    label_14005c90e:
        var_18 = rcx_1;
        int64_t var_10 = 2;
        
        if (*arg6 == 0)
        {
        label_14005c930:
            var_78 = &var_18;
            int64_t (* var_70)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
            int64_t* var_68 = &var_28;
            int64_t (* var_60)(int64_t* arg1) = sub_14005a3c0;
            int64_t* var_58 = &var_38;
            int64_t (* var_50)(int64_t* arg1) = sub_14005a3c0;
            var_a8 = &data_1400661f0;
            int64_t var_a0 = 3;
            int64_t var_88 = 0;
            char const* const** var_98 = &var_78;
            int64_t var_90 = 3;
            sub_14005c700(&var_a8);
            /* no return */
        }
    }
    else
    {
        if (arg1 == 1)
        {
            rcx_1 = "!=matchesassertion `left  right`…";
            goto label_14005c90e;
        }
        
        var_18 = "matchesassertion `left  right` f…";
        int64_t var_10_1 = 7;
        
        if (*arg6 == 0)
            goto label_14005c930;
    }
    int128_t var_b8 = *(arg6 + 0x20);
    int128_t var_c8 = *(arg6 + 0x10);
    int128_t var_d8 = *arg6;
    var_78 = &var_18;
    int64_t (* var_70_1)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    int128_t* var_68_1 = &var_d8;
    int64_t (* var_60_1)(int64_t* arg1, void* arg2) = sub_140056fa0;
    int64_t* var_58_1 = &var_28;
    int64_t (* var_50_1)(int64_t* arg1) = sub_14005a3c0;
    int64_t* var_48 = &var_38;
    int64_t (* var_40)(int64_t* arg1) = sub_14005a3c0;
    var_a8 = &data_140066240;
    int64_t var_a0_1 = 4;
    int64_t var_88_1 = 0;
    char const* const** var_98_1 = &var_78;
    int64_t var_90_1 = 4;
    sub_14005c700(&var_a8);
    /* no return */
}

void sub_14005ca50(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) __noreturn
{
    int64_t var_18 = arg1;
    int64_t var_10 = arg2;
    int64_t var_28 = arg3;
    int64_t r9;
    int64_t var_20 = r9;
    int64_t* var_48 = &var_18;
    int64_t (* var_40)(int64_t* arg1, int64_t* arg2) = sub_14005a3e0;
    int64_t* var_38 = &var_28;
    int64_t (* var_30)(int64_t* arg1) = sub_14005a3c0;
    void* const var_78 = &data_140066288;
    int64_t var_70 = 2;
    int64_t var_58 = 0;
    int64_t** var_68 = &var_48;
    int64_t var_60 = 2;
    sub_14005c700(&var_78);
    /* no return */
}

void sub_14005cae0(int64_t arg1, int64_t arg2) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    int64_t* var_38 = &var_10;
    uint64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_28 = &var_18;
    uint64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char const (** const var_68)[0x35] = &data_140066478;
    int64_t var_60 = 2;
    int64_t var_48 = 0;
    int64_t** var_58 = &var_38;
    int64_t var_50 = 2;
    sub_14005c700(&var_68);
    /* no return */
}

void sub_14005cb50(int64_t arg1, int64_t arg2) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    int64_t* var_38 = &var_10;
    uint64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_28 = &var_18;
    uint64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char const (** const var_68)[0x10] = &data_1400664a8;
    int64_t var_60 = 2;
    int64_t var_48 = 0;
    int64_t** var_58 = &var_38;
    int64_t var_50 = 2;
    sub_14005c700(&var_68);
    /* no return */
}

void sub_14005cbc0(int64_t arg1, int64_t arg2) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    int64_t* var_38 = &var_10;
    uint64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_28 = &var_18;
    uint64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char const (** const var_68)[0x24] = &data_1400664f0;
    int64_t var_60 = 2;
    int64_t var_48 = 0;
    int64_t** var_58 = &var_38;
    int64_t var_50 = 2;
    sub_14005c700(&var_68);
    /* no return */
}

void sub_14005cc30() __noreturn
{
    char const (** const var_38)[0x2d] = &data_140066540;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005cc70(int64_t arg1, int64_t arg2) __noreturn
{
    int64_t var_10 = arg1;
    int64_t var_18 = arg2;
    int64_t* var_38 = &var_18;
    uint64_t (* var_30)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    int64_t* var_28 = &var_10;
    uint64_t (* var_20)(int64_t* arg1, int64_t* arg2) = sub_14005a2a0;
    char const* const var_68 = "Pe";
    int64_t var_60 = 3;
    int64_t var_48 = 0;
    int64_t** var_58 = &var_38;
    int64_t var_50 = 2;
    sub_14005c700(&var_68);
    /* no return */
}

void sub_14005cce0() __noreturn
{
    char const (** const var_38)[0x2b] = &data_1400665f0;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005cd20(char* arg1, void* arg2, void* arg3, void* arg4, int64_t arg5) __noreturn
{
    sub_140058f80(arg1, arg2, arg3, arg4, arg5);
    /* no return */
}

void sub_14005cd40() __noreturn
{
    char const (** const var_38)[0x1d] = &data_140065f70;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005cd80() __noreturn
{
    char const (** const var_38)[0x22] = &data_140065fa8;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005cdc0() __noreturn
{
    char const (** const var_38)[0x22] = &data_140065fe0;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005ce00() __noreturn
{
    char const (** const var_38)[0x1a] = &data_140066fd0;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

void sub_14005ce40() __noreturn
{
    char const (** const var_38)[0x3a] = &data_140067020;
    int64_t var_30 = 1;
    int64_t var_28 = 8;
    int128_t var_20 = {0};
    sub_14005c700(&var_38);
    /* no return */
}

int64_t thread_start<uint32_t (__cdecl*)(void* __ptr64)>::filt$0::filt$0(int64_t* arg1)
{
    return _seh_filter_exe(**arg1, arg1);
}

uint64_t __scrt_is_nonwritable_in_current_image$filt$0(int64_t* arg1)
{
    int32_t rcx;
    rcx = **arg1 == 0xc0000005;
    return rcx;
}

